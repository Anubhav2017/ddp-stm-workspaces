
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051f8  0800dc20  0800dc20  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e18  08012e18  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012e18  08012e18  00022e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e20  08012e20  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e20  08012e20  00022e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e24  08012e24  00022e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012e28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001f0  08013010  000301f0  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08013010  00030c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00266b84  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00011d3b  00000000  00000000  00296d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000065b8  00000000  00000000  002a8ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000266e7  00000000  00000000  002af090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045758  00000000  00000000  002d5777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00165391  00000000  00000000  0031aecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00480260  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000063e0  00000000  00000000  004802b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001e398  00000000  00000000  00486698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc04 	.word	0x0800dc04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800dc04 	.word	0x0800dc04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpun>:
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x10>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d10a      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x20>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0001 	mov.w	r0, #1
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff2b 	bl	8000b00 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fca1 	bl	800061c <__aeabi_dmul>
 8000cda:	f000 f979 	bl	8000fd0 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc22 	bl	8000528 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc98 	bl	800061c <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fada 	bl	80002ac <__aeabi_dsub>
 8000cf8:	f000 f96a 	bl	8000fd0 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__aeabi_d2uiz>:
 8000fd0:	004a      	lsls	r2, r1, #1
 8000fd2:	d211      	bcs.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd8:	d211      	bcs.n	8000ffe <__aeabi_d2uiz+0x2e>
 8000fda:	d50d      	bpl.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe4:	d40e      	bmi.n	8001004 <__aeabi_d2uiz+0x34>
 8000fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ff2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001002:	d102      	bne.n	800100a <__aeabi_d2uiz+0x3a>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	08012680 	.word	0x08012680

08001030 <_ZN6tflite13ErrorReporterD0Ev>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe9 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 800103e:	2104      	movs	r1, #4
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f009 fdae 	bl	800aba2 <_ZdlPvj>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8001066:	214e      	movs	r1, #78	; 0x4e
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800106a:	f009 fe89 	bl	800ad80 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	0800dc20 	.word	0x0800dc20
 800107c:	0800dc64 	.word	0x0800dc64
 8001080:	0800dc84 	.word	0x0800dc84

08001084 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 800108c:	687c      	ldr	r4, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fbf7 	bl	8001884 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8001096:	4603      	mov	r3, r0
 8001098:	425b      	negs	r3, r3
 800109a:	4423      	add	r3, r4
  }
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}

080010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffe7 	bl	8001084 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010b6:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 fbc7 	bl	800184c <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010be:	4603      	mov	r3, r0
 80010c0:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	897b      	ldrh	r3, [r7, #10]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d207      	bcs.n	80010da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fbbb 	bl	800184c <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e000      	b.n	80010dc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80010da:	2300      	movs	r3, #0
  }
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	2104      	movs	r1, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fbd4 	bl	80018a0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80010f8:	4603      	mov	r3, r0
  }
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fbe6 	bl	80018dc <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fbe5 	bl	80018f4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffeb 	bl	800111a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff ffe1 	bl	8001134 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	08012660 	.word	0x08012660

0800119c <_ZN6tflite10OpResolverD0Ev>:
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffe9 	bl	800117c <_ZN6tflite10OpResolverD1Ev>
 80011aa:	2104      	movs	r1, #4
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f009 fcf8 	bl	800aba2 <_ZdlPvj>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	2301      	movs	r3, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	460b      	mov	r3, r1
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3318      	adds	r3, #24
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	7afa      	ldrb	r2, [r7, #11]
 80011ea:	4611      	mov	r1, r2
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
  }
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	331c      	adds	r3, #28
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	4798      	blx	r3
 8001214:	4603      	mov	r3, r0
  }
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffa3 	bl	800117c <_ZN6tflite10OpResolverD1Ev>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08012634 	.word	0x08012634

08001244 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffe7 	bl	8001220 <_ZN6tflite15MicroOpResolverD1Ev>
 8001252:	2104      	movs	r1, #4
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f009 fca4 	bl	800aba2 <_ZdlPvj>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fecb 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08012980 	.word	0x08012980

08001288 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe7 	bl	8001264 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001296:	2104      	movs	r1, #4
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f009 fc82 	bl	800aba2 <_ZdlPvj>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <__tcf_0>:
  MX_USART2_UART_Init();
  MX_TIM11_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  static tflite::MicroErrorReporter micro_error_reporter;
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4801      	ldr	r0, [pc, #4]	; (80012b4 <__tcf_0+0xc>)
 80012ae:	f7ff ffd9 	bl	8001264 <_ZN6tflite18MicroErrorReporterD1Ev>
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000

080012b8 <__tcf_1>:
      {
        error_reporter->Report("Model version does not match Schema");
        while(1);
      }

      static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <__tcf_1+0xc>)
 80012be:	f000 fc79 	bl	8001bb4 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000ab4 	.word	0x20000ab4

080012c8 <__tcf_2>:
            while(1);
          }

          // Build an interpreter to run the model with.
          static tflite::MicroInterpreter static_interpreter(
              model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4801      	ldr	r0, [pc, #4]	; (80012d4 <__tcf_2+0xc>)
 80012ce:	f006 fea6 	bl	800801e <_ZN6tflite16MicroInterpreterD1Ev>
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000af0 	.word	0x20000af0

080012d8 <main>:
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0a0      	sub	sp, #128	; 0x80
 80012dc:	af04      	add	r7, sp, #16
		  int buf_len = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	66bb      	str	r3, [r7, #104]	; 0x68
  HAL_Init();
 80012e2:	f000 fe9d 	bl	8002020 <HAL_Init>
  SystemClock_Config();
 80012e6:	f000 f969 	bl	80015bc <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80012ea:	f000 fa31 	bl	8001750 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80012ee:	f000 fa01 	bl	80016f4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM11_Init();
 80012f2:	f000 f9d7 	bl	80016a4 <_ZL13MX_TIM11_Initv>
  static tflite::MicroErrorReporter micro_error_reporter;
 80012f6:	4b98      	ldr	r3, [pc, #608]	; (8001558 <main+0x280>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	f3bf 8f5b 	dmb	ish
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <main+0x5c>
 8001312:	4891      	ldr	r0, [pc, #580]	; (8001558 <main+0x280>)
 8001314:	f009 fc49 	bl	800abaa <__cxa_guard_acquire>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <main+0x5c>
 8001328:	488b      	ldr	r0, [pc, #556]	; (8001558 <main+0x280>)
 800132a:	f009 fc4a 	bl	800abc2 <__cxa_guard_release>
 800132e:	488b      	ldr	r0, [pc, #556]	; (800155c <main+0x284>)
 8001330:	f009 fd44 	bl	800adbc <atexit>
      error_reporter = &micro_error_reporter;
 8001334:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <main+0x288>)
 8001336:	4a8b      	ldr	r2, [pc, #556]	; (8001564 <main+0x28c>)
 8001338:	601a      	str	r2, [r3, #0]
      error_reporter->Report("STM32 TensorFlow Lite test");
 800133a:	4b89      	ldr	r3, [pc, #548]	; (8001560 <main+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	498a      	ldr	r1, [pc, #552]	; (8001568 <main+0x290>)
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fa6b 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      model = tflite::GetModel(sine_model);
 8001346:	4889      	ldr	r0, [pc, #548]	; (800156c <main+0x294>)
 8001348:	f7ff fedb 	bl	8001102 <_ZN6tflite8GetModelEPKv>
 800134c:	4603      	mov	r3, r0
 800134e:	4a88      	ldr	r2, [pc, #544]	; (8001570 <main+0x298>)
 8001350:	6013      	str	r3, [r2, #0]
      if (model->version() != TFLITE_SCHEMA_VERSION)
 8001352:	4b87      	ldr	r3, [pc, #540]	; (8001570 <main+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fec4 	bl	80010e4 <_ZNK6tflite5Model7versionEv>
 800135c:	4603      	mov	r3, r0
 800135e:	2b03      	cmp	r3, #3
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <main+0xa2>
        error_reporter->Report("Model version does not match Schema");
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <main+0x288>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4980      	ldr	r1, [pc, #512]	; (8001574 <main+0x29c>)
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fa52 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        while(1);
 8001378:	e7fe      	b.n	8001378 <main+0xa0>
      static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <main+0x2a0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f3bf 8f5b 	dmb	ish
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d014      	beq.n	80013c0 <main+0xe8>
 8001396:	4878      	ldr	r0, [pc, #480]	; (8001578 <main+0x2a0>)
 8001398:	f009 fc07 	bl	800abaa <__cxa_guard_acquire>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <main+0xe8>
 80013ac:	2100      	movs	r1, #0
 80013ae:	4873      	ldr	r0, [pc, #460]	; (800157c <main+0x2a4>)
 80013b0:	f000 fad2 	bl	8001958 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 80013b4:	4870      	ldr	r0, [pc, #448]	; (8001578 <main+0x2a0>)
 80013b6:	f009 fc04 	bl	800abc2 <__cxa_guard_release>
 80013ba:	4871      	ldr	r0, [pc, #452]	; (8001580 <main+0x2a8>)
 80013bc:	f009 fcfe 	bl	800adbc <atexit>
          tflite_status = micro_op_resolver.AddFullyConnected();
 80013c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 feef 	bl	800a1a8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80013ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ce:	4619      	mov	r1, r3
 80013d0:	486a      	ldr	r0, [pc, #424]	; (800157c <main+0x2a4>)
 80013d2:	f000 fadd 	bl	8001990 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (tflite_status != kTfLiteOk)
 80013dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <main+0x11a>
            error_reporter->Report("Could not add FULLY CONNECTED op");
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <main+0x288>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4966      	ldr	r1, [pc, #408]	; (8001584 <main+0x2ac>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fa16 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            while(1);
 80013f0:	e7fe      	b.n	80013f0 <main+0x118>
              model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <main+0x2b0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f3bf 8f5b 	dmb	ish
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <main+0x176>
 800140e:	485e      	ldr	r0, [pc, #376]	; (8001588 <main+0x2b0>)
 8001410:	f009 fbcb 	bl	800abaa <__cxa_guard_acquire>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2301      	movne	r3, #1
 800141c:	2300      	moveq	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d014      	beq.n	800144e <main+0x176>
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <main+0x298>)
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <main+0x288>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	9202      	str	r2, [sp, #8]
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4b54      	ldr	r3, [pc, #336]	; (800158c <main+0x2b4>)
 800143a:	4a50      	ldr	r2, [pc, #320]	; (800157c <main+0x2a4>)
 800143c:	4854      	ldr	r0, [pc, #336]	; (8001590 <main+0x2b8>)
 800143e:	f006 fda7 	bl	8007f90 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 8001442:	4851      	ldr	r0, [pc, #324]	; (8001588 <main+0x2b0>)
 8001444:	f009 fbbd 	bl	800abc2 <__cxa_guard_release>
 8001448:	4852      	ldr	r0, [pc, #328]	; (8001594 <main+0x2bc>)
 800144a:	f009 fcb7 	bl	800adbc <atexit>
          interpreter = &static_interpreter;
 800144e:	4b52      	ldr	r3, [pc, #328]	; (8001598 <main+0x2c0>)
 8001450:	4a4f      	ldr	r2, [pc, #316]	; (8001590 <main+0x2b8>)
 8001452:	601a      	str	r2, [r3, #0]

          // Allocate memory from the tensor_arena for the model's tensors.
          tflite_status = interpreter->AllocateTensors();
 8001454:	4b50      	ldr	r3, [pc, #320]	; (8001598 <main+0x2c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f006 ffa5 	bl	80083a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (tflite_status != kTfLiteOk)
 8001464:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <main+0x1a2>
          {
            error_reporter->Report("AllocateTensors() failed");
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <main+0x288>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	494a      	ldr	r1, [pc, #296]	; (800159c <main+0x2c4>)
 8001472:	4618      	mov	r0, r3
 8001474:	f002 f9d2 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            while(1);
 8001478:	e7fe      	b.n	8001478 <main+0x1a0>
          }

          // Assign model input and output buffers (tensors) to pointers
          model_input = interpreter->input(0);
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <main+0x2c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f007 f931 	bl	80086e8 <_ZN6tflite16MicroInterpreter5inputEj>
 8001486:	4603      	mov	r3, r0
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <main+0x2c8>)
 800148a:	6013      	str	r3, [r2, #0]
          model_output = interpreter->output(0);
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <main+0x2c0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f007 f94c 	bl	8008730 <_ZN6tflite16MicroInterpreter6outputEj>
 8001498:	4603      	mov	r3, r0
 800149a:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <main+0x2cc>)
 800149c:	6013      	str	r3, [r2, #0]

          // Get number of elements in input tensor
          num_elements = model_input->bytes / sizeof(float);
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <main+0x2c8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	663b      	str	r3, [r7, #96]	; 0x60
          buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ac:	493e      	ldr	r1, [pc, #248]	; (80015a8 <main+0x2d0>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00a fbc8 	bl	800bc44 <siprintf>
 80014b4:	66b8      	str	r0, [r7, #104]	; 0x68
          HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	1d39      	adds	r1, r7, #4
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	483b      	ldr	r0, [pc, #236]	; (80015ac <main+0x2d4>)
 80014c0:	f001 fe59 	bl	8003176 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (uint32_t i = 0; i < num_elements; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d20c      	bcs.n	80014ea <main+0x212>
	        {
	          model_input->data.f[i] = 0.0f;
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <main+0x2c8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < num_elements; i++)
 80014e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e4:	3301      	adds	r3, #1
 80014e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014e8:	e7ee      	b.n	80014c8 <main+0x1f0>
	        }

	        // Get current timestamp
	        timestamp = htim11.Instance->CNT;
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <main+0x2d8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	65fb      	str	r3, [r7, #92]	; 0x5c

	        // Run inference
	        tflite_status = interpreter->Invoke();
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <main+0x2c0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 f8c4 	bl	8008684 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	        if (tflite_status != kTfLiteOk)
 8001502:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <main+0x23e>
	        {
	          error_reporter->Report("Invoke failed");
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <main+0x288>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4929      	ldr	r1, [pc, #164]	; (80015b4 <main+0x2dc>)
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f983 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	        }

	        // Read output (predicted y) of neural network
	        y_val = model_output->data.f[0];
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <main+0x2cc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	65bb      	str	r3, [r7, #88]	; 0x58

	        // Print output of neural network along with inference time (microseconds)
	        buf_len = sprintf(buf,
 8001520:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001522:	f7ff f823 	bl	800056c <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
	                          "Output: %f | Duration: %lu\r\n",
	                          y_val,
	                          htim11.Instance->CNT - timestamp);
 800152a:	4921      	ldr	r1, [pc, #132]	; (80015b0 <main+0x2d8>)
 800152c:	6809      	ldr	r1, [r1, #0]
 800152e:	6a48      	ldr	r0, [r1, #36]	; 0x24
	        buf_len = sprintf(buf,
 8001530:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001532:	1a41      	subs	r1, r0, r1
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	9100      	str	r1, [sp, #0]
 8001538:	491f      	ldr	r1, [pc, #124]	; (80015b8 <main+0x2e0>)
 800153a:	f00a fb83 	bl	800bc44 <siprintf>
 800153e:	66b8      	str	r0, [r7, #104]	; 0x68
	        HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001542:	b29a      	uxth	r2, r3
 8001544:	1d39      	adds	r1, r7, #4
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	4818      	ldr	r0, [pc, #96]	; (80015ac <main+0x2d4>)
 800154a:	f001 fe14 	bl	8003176 <HAL_UART_Transmit>

	        // Wait before doing it again
	        HAL_Delay(500);
 800154e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001552:	f000 fdd7 	bl	8002104 <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8001556:	e7b5      	b.n	80014c4 <main+0x1ec>
 8001558:	20000ab0 	.word	0x20000ab0
 800155c:	080012a9 	.word	0x080012a9
 8001560:	20000298 	.word	0x20000298
 8001564:	20000000 	.word	0x20000000
 8001568:	0800dd18 	.word	0x0800dd18
 800156c:	08011c08 	.word	0x08011c08
 8001570:	2000029c 	.word	0x2000029c
 8001574:	0800dd34 	.word	0x0800dd34
 8001578:	20000aec 	.word	0x20000aec
 800157c:	20000ab4 	.word	0x20000ab4
 8001580:	080012b9 	.word	0x080012b9
 8001584:	0800dd58 	.word	0x0800dd58
 8001588:	20000b88 	.word	0x20000b88
 800158c:	200002b0 	.word	0x200002b0
 8001590:	20000af0 	.word	0x20000af0
 8001594:	080012c9 	.word	0x080012c9
 8001598:	200002a0 	.word	0x200002a0
 800159c:	0800dd7c 	.word	0x0800dd7c
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	200002a8 	.word	0x200002a8
 80015a8:	0800dd98 	.word	0x0800dd98
 80015ac:	20000254 	.word	0x20000254
 80015b0:	2000020c 	.word	0x2000020c
 80015b4:	0800ddb8 	.word	0x0800ddb8
 80015b8:	0800ddc8 	.word	0x0800ddc8

080015bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f009 fc70 	bl	800aeb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <_Z18SystemClock_Configv+0xe0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <_Z18SystemClock_Configv+0xe0>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <_Z18SystemClock_Configv+0xe0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <_Z18SystemClock_Configv+0xe4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <_Z18SystemClock_Configv+0xe4>)
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <_Z18SystemClock_Configv+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2310      	movs	r3, #16
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001628:	2302      	movs	r3, #2
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001630:	2308      	movs	r3, #8
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001634:	2350      	movs	r3, #80	; 0x50
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800163c:	2307      	movs	r3, #7
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f805 	bl	8002654 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800165a:	f000 f8e7 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fa62 	bl	8002b44 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001690:	f000 f8cc 	bl	800182c <Error_Handler>
  }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	; 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <_ZL13MX_TIM11_Initv+0x4c>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016b0:	224f      	movs	r2, #79	; 0x4f
 80016b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <_ZL13MX_TIM11_Initv+0x48>)
 80016d0:	f001 fc34 	bl	8002f3c <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80016e4:	f000 f8a2 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000020c 	.word	0x2000020c
 80016f0:	40014800 	.word	0x40014800

080016f4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <_ZL19MX_USART2_UART_Initv+0x58>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <_ZL19MX_USART2_UART_Initv+0x54>)
 800172c:	f001 fcd6 	bl	80030dc <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001740:	f000 f874 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000254 	.word	0x20000254
 800174c:	40004400 	.word	0x40004400

08001750 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_ZL12MX_GPIO_Initv+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2120      	movs	r1, #32
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <_ZL12MX_GPIO_Initv+0xd4>)
 80017dc:	f000 ff20 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	; (8001828 <_ZL12MX_GPIO_Initv+0xd8>)
 80017f8:	f000 fd8e 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017fc:	2320      	movs	r3, #32
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <_ZL12MX_GPIO_Initv+0xd4>)
 8001814:	f000 fd80 	bl	8002318 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020800 	.word	0x40020800

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>

08001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 800183e:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f8b6 	bl	80019ca <_ZN11flatbuffers12EndianScalarItEET_S1_>
 800185e:	4603      	mov	r3, r0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ffde 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f88f 	bl	80019b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001896:	4603      	mov	r3, r0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	460b      	mov	r3, r1
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	4619      	mov	r1, r3
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fbf6 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	8afb      	ldrh	r3, [r7, #22]
 80018c6:	4413      	add	r3, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffcd 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	e000      	b.n	80018d4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 80018d2:	687b      	ldr	r3, [r7, #4]
  }
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f87c 	bl	80019e2 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 80018ea:	4603      	mov	r3, r0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f882 	bl	8001a06 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f88a 	bl	8001a1e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	08012660 	.word	0x08012660

08001934 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffe8 	bl	8001914 <_ZN6tflite10OpResolverC1Ev>
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08012634 	.word	0x08012634

08001958 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffe5 	bl	8001934 <_ZN6tflite15MicroOpResolverC1Ev>
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08012608 	.word	0x08012608

08001990 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFloorMod() {
    return AddBuiltin(BuiltinOperator_FLOOR_MOD, tflite::Register_FLOOR_MOD(),
                      ParseFloorMod);
  }

  TfLiteStatus AddFullyConnected(
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	2109      	movs	r1, #9
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f851 	bl	8001a48 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80019a6:	4603      	mov	r3, r0
  }
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08003bbd 	.word	0x08003bbd

080019b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    return t;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	80fb      	strh	r3, [r7, #6]
    return t;
 80019d4:	88fb      	ldrh	r3, [r7, #6]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  EndianCheck();
 80019ea:	f7ff fb31 	bl	8001050 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff1f 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80019f8:	4602      	mov	r2, r0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f89a 	bl	8001b48 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
	{ }
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	460b      	mov	r3, r1
 8001a56:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d10b      	bne.n	8001a76 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	4934      	ldr	r1, [pc, #208]	; (8001b3c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fed5 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e05d      	b.n	8001b32 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	7afa      	ldrb	r2, [r7, #11]
 8001a80:	4611      	mov	r1, r2
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	4798      	blx	r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	7afa      	ldrb	r2, [r7, #11]
 8001aa4:	4926      	ldr	r1, [pc, #152]	; (8001b40 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 feb8 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e040      	b.n	8001b32 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ac4:	7afa      	ldrb	r2, [r7, #11]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	491e      	ldr	r1, [pc, #120]	; (8001b44 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 8001aca:	f001 fea7 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e02f      	b.n	8001b32 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	4413      	add	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	1d1c      	adds	r4, r3, #4
 8001ae0:	4615      	mov	r5, r2
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	7afa      	ldrb	r2, [r7, #11]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	440b      	add	r3, r1
 8001afa:	3318      	adds	r3, #24
 8001afc:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	7afa      	ldrb	r2, [r7, #11]
 8001b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	330a      	adds	r3, #10
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8001b30:	2300      	movs	r3, #0
  }
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800dde8 	.word	0x0800dde8
 8001b40:	0800de30 	.word	0x0800de30
 8001b44:	0800de80 	.word	0x0800de80

08001b48 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d101      	bne.n	8001b74 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001b70:	2300      	movs	r3, #0
 8001b72:	e018      	b.n	8001ba6 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d210      	bcs.n	8001ba4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	015b      	lsls	r3, r3, #5
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d101      	bne.n	8001b9c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	e004      	b.n	8001ba6 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e7e9      	b.n	8001b78 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001ba4:	2300      	movs	r3, #0
  }
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fb2b 	bl	8001220 <_ZN6tflite15MicroOpResolverD1Ev>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	08012608 	.word	0x08012608

08001bd8 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001be6:	2138      	movs	r1, #56	; 0x38
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f008 ffda 	bl	800aba2 <_ZdlPvj>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d218      	bcs.n	8001c42 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015b      	lsls	r3, r3, #5
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d10a      	bne.n	8001c3a <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fb28 	bl	8000280 <strcmp>
 8001c30:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
        return &registration;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	e004      	b.n	8001c44 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e7e1      	b.n	8001c06 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0xe>
    return nullptr;
 8001c42:	2300      	movs	r3, #0
  }
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d901      	bls.n	8001c64 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001c60:	f009 f886 	bl	800ad70 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d212      	bcs.n	8001c98 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	3328      	adds	r3, #40	; 0x28
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d106      	bne.n	8001c90 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	330a      	adds	r3, #10
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	e004      	b.n	8001c9a <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e7e7      	b.n	8001c68 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001c98:	2300      	movs	r3, #0
  }
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce2:	2007      	movs	r0, #7
 8001ce4:	f000 fae4 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_TIM_Base_MspInit+0x3c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10d      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_TIM_Base_MspInit+0x40>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_TIM_Base_MspInit+0x40>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_TIM_Base_MspInit+0x40>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40014800 	.word	0x40014800
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_UART_MspInit+0x84>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12b      	bne.n	8001db2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d92:	230c      	movs	r3, #12
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001da2:	2307      	movs	r3, #7
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_UART_MspInit+0x8c>)
 8001dae:	f000 fab3 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f956 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
	return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_kill>:

int _kill(int pid, int sig)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e36:	f008 ffc7 	bl	800adc8 <__errno>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2216      	movs	r2, #22
 8001e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_exit>:

void _exit (int status)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffe7 	bl	8001e2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5e:	e7fe      	b.n	8001e5e <_exit+0x12>

08001e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e00a      	b.n	8001e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e72:	f3af 8000 	nop.w
 8001e76:	4601      	mov	r1, r0
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	60ba      	str	r2, [r7, #8]
 8001e7e:	b2ca      	uxtb	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf0      	blt.n	8001e72 <_read+0x12>
	}

return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e009      	b.n	8001ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	60ba      	str	r2, [r7, #8]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf1      	blt.n	8001eac <_write+0x12>
	}
	return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_close>:

int _close(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efa:	605a      	str	r2, [r3, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_isatty>:

int _isatty(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
	return 1;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f008 ff2c 	bl	800adc8 <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20018000 	.word	0x20018000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	20000b8c 	.word	0x20000b8c
 8001fa4:	20000c40 	.word	0x20000c40

08001fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff ffd7 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f008 fefd 	bl	800adf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff f96b 	bl	80012d8 <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002004:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002010:	08012e28 	.word	0x08012e28
  ldr r2, =_sbss
 8002014:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002018:	20000c40 	.word	0x20000c40

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 f931 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fe26 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f93b 	bl	80022fe <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 f911 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000004 	.word	0x20000004
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	20000c2c 	.word	0x20000c2c

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000c2c 	.word	0x20000c2c

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000000c 	.word	0x2000000c

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff47 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff5c 	bl	8002194 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffb0 	bl	800226c <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e159      	b.n	80025e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	f040 8148 	bne.w	80025e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d005      	beq.n	800236a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002366:	2b02      	cmp	r3, #2
 8002368:	d130      	bne.n	80023cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d017      	beq.n	8002408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d123      	bne.n	800245c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	69b9      	ldr	r1, [r7, #24]
 8002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a2 	beq.w	80025e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_GPIO_Init+0x2e8>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a56      	ldr	r2, [pc, #344]	; (8002600 <HAL_GPIO_Init+0x2e8>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x2e8>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ba:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x2f0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x202>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x2f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x1fe>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_GPIO_Init+0x2f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x1fa>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a46      	ldr	r2, [pc, #280]	; (8002614 <HAL_GPIO_Init+0x2fc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x1f6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a45      	ldr	r2, [pc, #276]	; (8002618 <HAL_GPIO_Init+0x300>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x1f2>
 8002506:	2304      	movs	r3, #4
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x204>
 800250a:	2307      	movs	r3, #7
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x204>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x204>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x204>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x204>
 800251a:	2300      	movs	r3, #0
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4935      	ldr	r1, [pc, #212]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_GPIO_Init+0x304>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255e:	4a2f      	ldr	r2, [pc, #188]	; (800261c <HAL_GPIO_Init+0x304>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_GPIO_Init+0x304>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <HAL_GPIO_Init+0x304>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_GPIO_Init+0x304>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a1a      	ldr	r2, [pc, #104]	; (800261c <HAL_GPIO_Init+0x304>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_GPIO_Init+0x304>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_GPIO_Init+0x304>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f aea2 	bls.w	8002334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40013800 	.word	0x40013800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e264      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d075      	beq.n	800275e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002672:	4ba3      	ldr	r3, [pc, #652]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00c      	beq.n	8002698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4ba0      	ldr	r3, [pc, #640]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002686:	2b08      	cmp	r3, #8
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b9d      	ldr	r3, [pc, #628]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b99      	ldr	r3, [pc, #612]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e23f      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x74>
 80026ba:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a90      	ldr	r2, [pc, #576]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a8a      	ldr	r2, [pc, #552]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a87      	ldr	r2, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026ec:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a83      	ldr	r2, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a80      	ldr	r2, [pc, #512]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fcee 	bl	80020ec <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fcea 	bl	80020ec <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e204      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xc0>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fcda 	bl	80020ec <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff fcd6 	bl	80020ec <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1f0      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d063      	beq.n	8002832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d11c      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e1c4      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b56      	ldr	r3, [pc, #344]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4952      	ldr	r1, [pc, #328]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	e03a      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCC_OscConfig+0x2b0>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff fc8f 	bl	80020ec <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d2:	f7ff fc8b 	bl	80020ec <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1a5      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b43      	ldr	r3, [pc, #268]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4940      	ldr	r1, [pc, #256]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e015      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0x2b0>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7ff fc6e 	bl	80020ec <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002814:	f7ff fc6a 	bl	80020ec <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e184      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d030      	beq.n	80028a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_RCC_OscConfig+0x2b4>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff fc4e 	bl	80020ec <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7ff fc4a 	bl	80020ec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e164      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x200>
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x2b4>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7ff fc37 	bl	80020ec <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7ff fc33 	bl	80020ec <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e14d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a0 	beq.w	80029ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x2b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d121      	bne.n	800292e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x2b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_RCC_OscConfig+0x2b8>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fbf9 	bl	80020ec <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e011      	b.n	8002922 <HAL_RCC_OscConfig+0x2ce>
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
 800290c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7ff fbec 	bl	80020ec <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e106      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b85      	ldr	r3, [pc, #532]	; (8002b38 <HAL_RCC_OscConfig+0x4e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d106      	bne.n	8002944 <HAL_RCC_OscConfig+0x2f0>
 8002936:	4b81      	ldr	r3, [pc, #516]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a80      	ldr	r2, [pc, #512]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	e01c      	b.n	800297e <HAL_RCC_OscConfig+0x32a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x312>
 800294c:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a7a      	ldr	r2, [pc, #488]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a77      	ldr	r2, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0x32a>
 8002966:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a74      	ldr	r2, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a71      	ldr	r2, [pc, #452]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7ff fbb1 	bl	80020ec <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7ff fbad 	bl	80020ec <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0c5      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCC_OscConfig+0x33a>
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fb9b 	bl	80020ec <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7ff fb97 	bl	80020ec <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0af      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a55      	ldr	r2, [pc, #340]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 809b 	beq.w	8002b2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f8:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d05c      	beq.n	8002abe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d141      	bne.n	8002a90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7ff fb6b 	bl	80020ec <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7ff fb67 	bl	80020ec <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e081      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	061b      	lsls	r3, r3, #24
 8002a5c:	4937      	ldr	r1, [pc, #220]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_OscConfig+0x4ec>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fb40 	bl	80020ec <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff fb3c 	bl	80020ec <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e056      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x41c>
 8002a8e:	e04e      	b.n	8002b2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_OscConfig+0x4ec>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7ff fb29 	bl	80020ec <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff fb25 	bl	80020ec <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e03f      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x44a>
 8002abc:	e037      	b.n	8002b2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e032      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_RCC_OscConfig+0x4e8>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d121      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d11a      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	3b01      	subs	r3, #1
 8002b14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	42470060 	.word	0x42470060

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0cc      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d90c      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d044      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e06f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e067      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7ff fa5a 	bl	80020ec <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7ff fa56 	bl	80020ec <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d20c      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490a      	ldr	r1, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f9ba 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	0801268c 	.word	0x0801268c
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000008 	.word	0x20000008

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	2300      	movs	r3, #0
 8002d22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d28:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d00d      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x40>
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	f200 80bd 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d42:	e0b7      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d46:	60bb      	str	r3, [r7, #8]
       break;
 8002d48:	e0b7      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4a:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d4c:	60bb      	str	r3, [r7, #8]
      break;
 8002d4e:	e0b4      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d50:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04d      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d66:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	ea02 0800 	and.w	r8, r2, r0
 8002d7e:	ea03 0901 	and.w	r9, r3, r1
 8002d82:	4640      	mov	r0, r8
 8002d84:	4649      	mov	r1, r9
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	014b      	lsls	r3, r1, #5
 8002d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d94:	0142      	lsls	r2, r0, #5
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d9e:	eb61 0109 	sbc.w	r1, r1, r9
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	018b      	lsls	r3, r1, #6
 8002dac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002db0:	0182      	lsls	r2, r0, #6
 8002db2:	1a12      	subs	r2, r2, r0
 8002db4:	eb63 0301 	sbc.w	r3, r3, r1
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	00d9      	lsls	r1, r3, #3
 8002dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dc6:	00d0      	lsls	r0, r2, #3
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	eb12 0208 	adds.w	r2, r2, r8
 8002dd0:	eb43 0309 	adc.w	r3, r3, r9
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	0259      	lsls	r1, r3, #9
 8002dde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002de2:	0250      	lsls	r0, r2, #9
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f7fd ff3a 	bl	8000c6c <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e04a      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	ea02 0400 	and.w	r4, r2, r0
 8002e1a:	ea03 0501 	and.w	r5, r3, r1
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4629      	mov	r1, r5
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	014b      	lsls	r3, r1, #5
 8002e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e30:	0142      	lsls	r2, r0, #5
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	1b00      	subs	r0, r0, r4
 8002e38:	eb61 0105 	sbc.w	r1, r1, r5
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	018b      	lsls	r3, r1, #6
 8002e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e4a:	0182      	lsls	r2, r0, #6
 8002e4c:	1a12      	subs	r2, r2, r0
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	1912      	adds	r2, r2, r4
 8002e68:	eb45 0303 	adc.w	r3, r5, r3
 8002e6c:	f04f 0000 	mov.w	r0, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	0299      	lsls	r1, r3, #10
 8002e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e7a:	0290      	lsls	r0, r2, #10
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f7fd feee 	bl	8000c6c <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002eb6:	60bb      	str	r3, [r7, #8]
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	68bb      	ldr	r3, [r7, #8]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	0801269c 	.word	0x0801269c

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	0801269c 	.word	0x0801269c

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe fec6 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 f82e 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a34      	ldr	r2, [pc, #208]	; (80030c0 <TIM_Base_SetConfig+0xe4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00f      	beq.n	8003014 <TIM_Base_SetConfig+0x38>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d00b      	beq.n	8003014 <TIM_Base_SetConfig+0x38>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <TIM_Base_SetConfig+0xe8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x38>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <TIM_Base_SetConfig+0xec>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x38>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <TIM_Base_SetConfig+0xf0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <TIM_Base_SetConfig+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01b      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d017      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <TIM_Base_SetConfig+0xe8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <TIM_Base_SetConfig+0xec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00f      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a20      	ldr	r2, [pc, #128]	; (80030cc <TIM_Base_SetConfig+0xf0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <TIM_Base_SetConfig+0xf4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <TIM_Base_SetConfig+0xf8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_Base_SetConfig+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <TIM_Base_SetConfig+0xfc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d108      	bne.n	8003078 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <TIM_Base_SetConfig+0xe4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d103      	bne.n	80030ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	615a      	str	r2, [r3, #20]
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800

080030dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e03f      	b.n	800316e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fe18 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f929 	bl	8003378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b08a      	sub	sp, #40	; 0x28
 800317a:	af02      	add	r7, sp, #8
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	d17c      	bne.n	8003290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_Transmit+0x2c>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e075      	b.n	8003292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Transmit+0x3e>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e06e      	b.n	8003292 <HAL_UART_Transmit+0x11c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ca:	f7fe ff8f 	bl	80020ec <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d108      	bne.n	80031f8 <HAL_UART_Transmit+0x82>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003208:	e02a      	b.n	8003260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f840 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e036      	b.n	8003292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3302      	adds	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e007      	b.n	8003252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1cf      	bne.n	800320a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f810 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b090      	sub	sp, #64	; 0x40
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	e050      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d04c      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0x30>
 80032ba:	f7fe ff17 	bl	80020ec <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d241      	bcs.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ea:	637a      	str	r2, [r7, #52]	; 0x34
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331e:	623a      	str	r2, [r7, #32]
 8003320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	61bb      	str	r3, [r7, #24]
   return(result);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e5      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e00f      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d09f      	beq.n	80032ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3740      	adds	r7, #64	; 0x40
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337c:	b09f      	sub	sp, #124	; 0x7c
 800337e:	af00      	add	r7, sp, #0
 8003380:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800338c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338e:	68d9      	ldr	r1, [r3, #12]
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033bc:	f021 010c 	bic.w	r1, r1, #12
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c6:	430b      	orrs	r3, r1
 80033c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	6999      	ldr	r1, [r3, #24]
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	ea40 0301 	orr.w	r3, r0, r1
 80033e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4bc5      	ldr	r3, [pc, #788]	; (80036fc <UART_SetConfig+0x384>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d004      	beq.n	80033f6 <UART_SetConfig+0x7e>
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4bc3      	ldr	r3, [pc, #780]	; (8003700 <UART_SetConfig+0x388>)
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d103      	bne.n	80033fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f6:	f7ff fd8d 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 80033fa:	6778      	str	r0, [r7, #116]	; 0x74
 80033fc:	e002      	b.n	8003404 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033fe:	f7ff fd75 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003402:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	f040 80b6 	bne.w	800357c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003412:	461c      	mov	r4, r3
 8003414:	f04f 0500 	mov.w	r5, #0
 8003418:	4622      	mov	r2, r4
 800341a:	462b      	mov	r3, r5
 800341c:	1891      	adds	r1, r2, r2
 800341e:	6439      	str	r1, [r7, #64]	; 0x40
 8003420:	415b      	adcs	r3, r3
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003428:	1912      	adds	r2, r2, r4
 800342a:	eb45 0303 	adc.w	r3, r5, r3
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	00d9      	lsls	r1, r3, #3
 8003438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800343c:	00d0      	lsls	r0, r2, #3
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	1911      	adds	r1, r2, r4
 8003444:	6639      	str	r1, [r7, #96]	; 0x60
 8003446:	416b      	adcs	r3, r5
 8003448:	667b      	str	r3, [r7, #100]	; 0x64
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	461a      	mov	r2, r3
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	1891      	adds	r1, r2, r2
 8003456:	63b9      	str	r1, [r7, #56]	; 0x38
 8003458:	415b      	adcs	r3, r3
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003460:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003464:	f7fd fc02 	bl	8000c6c <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4ba5      	ldr	r3, [pc, #660]	; (8003704 <UART_SetConfig+0x38c>)
 800346e:	fba3 2302 	umull	r2, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	011e      	lsls	r6, r3, #4
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	461c      	mov	r4, r3
 800347a:	f04f 0500 	mov.w	r5, #0
 800347e:	4622      	mov	r2, r4
 8003480:	462b      	mov	r3, r5
 8003482:	1891      	adds	r1, r2, r2
 8003484:	6339      	str	r1, [r7, #48]	; 0x30
 8003486:	415b      	adcs	r3, r3
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
 800348a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800348e:	1912      	adds	r2, r2, r4
 8003490:	eb45 0303 	adc.w	r3, r5, r3
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	00d9      	lsls	r1, r3, #3
 800349e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a2:	00d0      	lsls	r0, r2, #3
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	1911      	adds	r1, r2, r4
 80034aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ac:	416b      	adcs	r3, r5
 80034ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80034be:	415b      	adcs	r3, r3
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034ca:	f7fd fbcf 	bl	8000c6c <__aeabi_uldivmod>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4b8c      	ldr	r3, [pc, #560]	; (8003704 <UART_SetConfig+0x38c>)
 80034d4:	fba3 1302 	umull	r1, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	2164      	movs	r1, #100	; 0x64
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	3332      	adds	r3, #50	; 0x32
 80034e6:	4a87      	ldr	r2, [pc, #540]	; (8003704 <UART_SetConfig+0x38c>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f4:	441e      	add	r6, r3
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	4618      	mov	r0, r3
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	1894      	adds	r4, r2, r2
 8003504:	623c      	str	r4, [r7, #32]
 8003506:	415b      	adcs	r3, r3
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800350e:	1812      	adds	r2, r2, r0
 8003510:	eb41 0303 	adc.w	r3, r1, r3
 8003514:	f04f 0400 	mov.w	r4, #0
 8003518:	f04f 0500 	mov.w	r5, #0
 800351c:	00dd      	lsls	r5, r3, #3
 800351e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003522:	00d4      	lsls	r4, r2, #3
 8003524:	4622      	mov	r2, r4
 8003526:	462b      	mov	r3, r5
 8003528:	1814      	adds	r4, r2, r0
 800352a:	653c      	str	r4, [r7, #80]	; 0x50
 800352c:	414b      	adcs	r3, r1
 800352e:	657b      	str	r3, [r7, #84]	; 0x54
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	1891      	adds	r1, r2, r2
 800353c:	61b9      	str	r1, [r7, #24]
 800353e:	415b      	adcs	r3, r3
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003546:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800354a:	f7fd fb8f 	bl	8000c6c <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <UART_SetConfig+0x38c>)
 8003554:	fba3 1302 	umull	r1, r3, r3, r2
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	2164      	movs	r1, #100	; 0x64
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	3332      	adds	r3, #50	; 0x32
 8003566:	4a67      	ldr	r2, [pc, #412]	; (8003704 <UART_SetConfig+0x38c>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	f003 0207 	and.w	r2, r3, #7
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4432      	add	r2, r6
 8003578:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800357a:	e0b9      	b.n	80036f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800357c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357e:	461c      	mov	r4, r3
 8003580:	f04f 0500 	mov.w	r5, #0
 8003584:	4622      	mov	r2, r4
 8003586:	462b      	mov	r3, r5
 8003588:	1891      	adds	r1, r2, r2
 800358a:	6139      	str	r1, [r7, #16]
 800358c:	415b      	adcs	r3, r3
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003594:	1912      	adds	r2, r2, r4
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a8:	00d0      	lsls	r0, r2, #3
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	eb12 0804 	adds.w	r8, r2, r4
 80035b2:	eb43 0905 	adc.w	r9, r3, r5
 80035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	008b      	lsls	r3, r1, #2
 80035ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035ce:	0082      	lsls	r2, r0, #2
 80035d0:	4640      	mov	r0, r8
 80035d2:	4649      	mov	r1, r9
 80035d4:	f7fd fb4a 	bl	8000c6c <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b49      	ldr	r3, [pc, #292]	; (8003704 <UART_SetConfig+0x38c>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011e      	lsls	r6, r3, #4
 80035e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e8:	4618      	mov	r0, r3
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	1894      	adds	r4, r2, r2
 80035f4:	60bc      	str	r4, [r7, #8]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fe:	1812      	adds	r2, r2, r0
 8003600:	eb41 0303 	adc.w	r3, r1, r3
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	f04f 0500 	mov.w	r5, #0
 800360c:	00dd      	lsls	r5, r3, #3
 800360e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003612:	00d4      	lsls	r4, r2, #3
 8003614:	4622      	mov	r2, r4
 8003616:	462b      	mov	r3, r5
 8003618:	1814      	adds	r4, r2, r0
 800361a:	64bc      	str	r4, [r7, #72]	; 0x48
 800361c:	414b      	adcs	r3, r1
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	008b      	lsls	r3, r1, #2
 8003634:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003638:	0082      	lsls	r2, r0, #2
 800363a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800363e:	f7fd fb15 	bl	8000c6c <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <UART_SetConfig+0x38c>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <UART_SetConfig+0x38c>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003666:	441e      	add	r6, r3
 8003668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366a:	4618      	mov	r0, r3
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	1894      	adds	r4, r2, r2
 8003676:	603c      	str	r4, [r7, #0]
 8003678:	415b      	adcs	r3, r3
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003680:	1812      	adds	r2, r2, r0
 8003682:	eb41 0303 	adc.w	r3, r1, r3
 8003686:	f04f 0400 	mov.w	r4, #0
 800368a:	f04f 0500 	mov.w	r5, #0
 800368e:	00dd      	lsls	r5, r3, #3
 8003690:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003694:	00d4      	lsls	r4, r2, #3
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	eb12 0a00 	adds.w	sl, r2, r0
 800369e:	eb43 0b01 	adc.w	fp, r3, r1
 80036a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036ba:	0082      	lsls	r2, r0, #2
 80036bc:	4650      	mov	r0, sl
 80036be:	4659      	mov	r1, fp
 80036c0:	f7fd fad4 	bl	8000c6c <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <UART_SetConfig+0x38c>)
 80036ca:	fba3 1302 	umull	r1, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2164      	movs	r1, #100	; 0x64
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a09      	ldr	r2, [pc, #36]	; (8003704 <UART_SetConfig+0x38c>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4432      	add	r2, r6
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	377c      	adds	r7, #124	; 0x7c
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	40011000 	.word	0x40011000
 8003700:	40011400 	.word	0x40011400
 8003704:	51eb851f 	.word	0x51eb851f

08003708 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3301      	adds	r3, #1
 8003714:	009b      	lsls	r3, r3, #2
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b10      	cmp	r3, #16
 8003732:	d847      	bhi.n	80037c4 <TfLiteTypeGetName+0xa0>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <TfLiteTypeGetName+0x18>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003781 	.word	0x08003781
 8003740:	08003785 	.word	0x08003785
 8003744:	0800378d 	.word	0x0800378d
 8003748:	08003795 	.word	0x08003795
 800374c:	0800379d 	.word	0x0800379d
 8003750:	080037b1 	.word	0x080037b1
 8003754:	080037a5 	.word	0x080037a5
 8003758:	08003789 	.word	0x08003789
 800375c:	080037a9 	.word	0x080037a9
 8003760:	08003799 	.word	0x08003799
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037ad 	.word	0x080037ad
 8003770:	080037a1 	.word	0x080037a1
 8003774:	080037bd 	.word	0x080037bd
 8003778:	080037c1 	.word	0x080037c1
 800377c:	08003791 	.word	0x08003791
    case kTfLiteNoType:
      return "NOTYPE";
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <TfLiteTypeGetName+0xb0>)
 8003782:	e020      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <TfLiteTypeGetName+0xb4>)
 8003786:	e01e      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <TfLiteTypeGetName+0xb8>)
 800378a:	e01c      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <TfLiteTypeGetName+0xbc>)
 800378e:	e01a      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <TfLiteTypeGetName+0xc0>)
 8003792:	e018      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <TfLiteTypeGetName+0xc4>)
 8003796:	e016      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <TfLiteTypeGetName+0xc8>)
 800379a:	e014      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <TfLiteTypeGetName+0xcc>)
 800379e:	e012      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <TfLiteTypeGetName+0xd0>)
 80037a2:	e010      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <TfLiteTypeGetName+0xd4>)
 80037a6:	e00e      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <TfLiteTypeGetName+0xd8>)
 80037aa:	e00c      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <TfLiteTypeGetName+0xdc>)
 80037ae:	e00a      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <TfLiteTypeGetName+0xe0>)
 80037b2:	e008      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <TfLiteTypeGetName+0xe4>)
 80037b6:	e006      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <TfLiteTypeGetName+0xe8>)
 80037ba:	e004      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <TfLiteTypeGetName+0xec>)
 80037be:	e002      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <TfLiteTypeGetName+0xf0>)
 80037c2:	e000      	b.n	80037c6 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <TfLiteTypeGetName+0xf4>)
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	0800dec4 	.word	0x0800dec4
 80037d8:	0800decc 	.word	0x0800decc
 80037dc:	0800ded4 	.word	0x0800ded4
 80037e0:	0800dedc 	.word	0x0800dedc
 80037e4:	0800dee4 	.word	0x0800dee4
 80037e8:	0800deec 	.word	0x0800deec
 80037ec:	0800def4 	.word	0x0800def4
 80037f0:	0800defc 	.word	0x0800defc
 80037f4:	0800df04 	.word	0x0800df04
 80037f8:	0800df0c 	.word	0x0800df0c
 80037fc:	0800df14 	.word	0x0800df14
 8003800:	0800df20 	.word	0x0800df20
 8003804:	0800df2c 	.word	0x0800df2c
 8003808:	0800df34 	.word	0x0800df34
 800380c:	0800df3c 	.word	0x0800df3c
 8003810:	0800df44 	.word	0x0800df44
 8003814:	0800df50 	.word	0x0800df50
 8003818:	0800df58 	.word	0x0800df58

0800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 800381c:	b40e      	push	{r1, r2, r3}
 800381e:	b580      	push	{r7, lr}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003826:	f107 0320 	add.w	r3, r7, #32
 800382a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800384a:	b003      	add	sp, #12
 800384c:	4770      	bx	lr

0800384e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800384e:	b40c      	push	{r2, r3}
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800385a:	f107 031c 	add.w	r3, r7, #28
 800385e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800387e:	b002      	add	sp, #8
 8003880:	4770      	bx	lr

08003882 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa27 	bl	8003cf8 <_ZNK11flatbuffers6VectorIcE4DataEv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	2104      	movs	r1, #4
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fa8f 	bl	8003de6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80038c8:	4603      	mov	r3, r0
 80038ca:	b2db      	uxtb	r3, r3
  }
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	2106      	movs	r1, #6
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fa7f 	bl	8003de6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80038e8:	4603      	mov	r3, r0
 80038ea:	b2db      	uxtb	r3, r3
  }
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	2108      	movs	r1, #8
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa12 	bl	8003d2c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
  }
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	210a      	movs	r1, #10
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f9fe 	bl	8003d2c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
  }
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	210a      	movs	r1, #10
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f9ea 	bl	8003d2c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003958:	4603      	mov	r3, r0
  }
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	210c      	movs	r1, #12
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f9fb 	bl	8003d6a <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8003974:	4603      	mov	r3, r0
  }
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ffdc 	bl	8003944 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800398c:	4603      	mov	r3, r0
 800398e:	2b08      	cmp	r3, #8
 8003990:	d104      	bne.n	800399c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffe5 	bl	8003962 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003998:	4603      	mov	r3, r0
 800399a:	e000      	b.n	800399e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 800399c:	2300      	movs	r3, #0
  }
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3304      	adds	r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	4610      	mov	r0, r2
 80039e0:	4798      	blx	r3
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003a1c:	f007 f9a8 	bl	800ad70 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003a26:	f007 f9a3 	bl	800ad70 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003a30:	f007 f99e 	bl	800ad70 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003a3a:	f007 f999 	bl	800ad70 <abort>
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d81b      	bhi.n	8003a90 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003a81 	.word	0x08003a81
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a89 	.word	0x08003a89
 8003a74:	08003a8d 	.word	0x08003a8d
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e00a      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e008      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8003a80:	2302      	movs	r3, #2
 8003a82:	e006      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e004      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8003a88:	2304      	movs	r3, #4
 8003a8a:	e002      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	e000      	b.n	8003a92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d873      	bhi.n	8003b9c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003b07 	.word	0x08003b07
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003b25 	.word	0x08003b25
 8003ac8:	08003b39 	.word	0x08003b39
 8003acc:	08003b4d 	.word	0x08003b4d
 8003ad0:	08003b61 	.word	0x08003b61
 8003ad4:	08003b6b 	.word	0x08003b6b
 8003ad8:	08003b1b 	.word	0x08003b1b
 8003adc:	08003b75 	.word	0x08003b75
 8003ae0:	08003b43 	.word	0x08003b43
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b7f 	.word	0x08003b7f
 8003aec:	08003b57 	.word	0x08003b57
 8003af0:	08003b89 	.word	0x08003b89
 8003af4:	08003b93 	.word	0x08003b93
 8003af8:	08003b2f 	.word	0x08003b2f
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	220a      	movs	r2, #10
 8003b00:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e054      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e04f      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	220b      	movs	r2, #11
 8003b14:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e04a      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e045      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2202      	movs	r2, #2
 8003b28:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e040      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2210      	movs	r2, #16
 8003b32:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e03b      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e036      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2209      	movs	r2, #9
 8003b46:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e031      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e02c      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	220d      	movs	r2, #13
 8003b5a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e027      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2205      	movs	r2, #5
 8003b64:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e022      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e01d      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2208      	movs	r2, #8
 8003b78:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e018      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	220c      	movs	r2, #12
 8003b82:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e013      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	220e      	movs	r2, #14
 8003b8c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e00e      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	220f      	movs	r2, #15
 8003b96:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e009      	b.n	8003bb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fe37 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8003bae:	2301      	movs	r3, #1
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	0800e0d0 	.word	0x0800e0d0

08003bbc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ff19 	bl	8003a08 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8003bd6:	f107 0318 	add.w	r3, r7, #24
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff04 	bl	80039ea <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	f107 0218 	add.w	r2, r7, #24
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 f95f 	bl	8003eb0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003bf2:	f107 0310 	add.w	r3, r7, #16
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f999 	bl	8003f30 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	f240 531d 	movw	r3, #1309	; 0x51d
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8003c16:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	f7ff fe17 	bl	800384e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003c20:	2401      	movs	r4, #1
 8003c22:	e056      	b.n	8003cd2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff feaa 	bl	800397e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8003c2a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d046      	beq.n	8003cc0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003c32:	69f8      	ldr	r0, [r7, #28]
 8003c34:	f7ff fe3e 	bl	80038b4 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461d      	mov	r5, r3
    params->activation =
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f982 	bl	8003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003c46:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff fefd 	bl	8003a48 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003c4e:	4603      	mov	r3, r0
    params->activation =
 8003c50:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f977 	bl	8003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	69f8      	ldr	r0, [r7, #28]
 8003c60:	f7ff fe48 	bl	80038f4 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8003c64:	4603      	mov	r3, r0
 8003c66:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f96c 	bl	8003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003c72:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8003c74:	69f8      	ldr	r0, [r7, #28]
 8003c76:	f7ff fe51 	bl	800391c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8003c7a:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8003c7c:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 8003c7e:	69f8      	ldr	r0, [r7, #28]
 8003c80:	f7ff fe28 	bl	80038d4 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d009      	beq.n	8003ca2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 8003c8e:	e011      	b.n	8003cb4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f958 	bl	8003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	705a      	strb	r2, [r3, #1]
        break;
 8003ca0:	e00e      	b.n	8003cc0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f94f 	bl	8003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2201      	movs	r2, #1
 8003cb0:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8003cb2:	e005      	b.n	8003cc0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8003cb6:	68b8      	ldr	r0, [r7, #8]
 8003cb8:	f7ff fdb0 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8003cbc:	2401      	movs	r4, #1
 8003cbe:	e008      	b.n	8003cd2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f94c 	bl	8003f62 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003cd0:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8003cd2:	f107 0310 	add.w	r3, r7, #16
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f908 	bl	8003eec <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003cdc:	4623      	mov	r3, r4
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	0800e050 	.word	0x0800e050
 8003cec:	0800dff0 	.word	0x0800dff0
 8003cf0:	0800e038 	.word	0x0800e038
 8003cf4:	0800e0f4 	.word	0x0800e0f4

08003cf8 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
  }
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f934 	bl	8003f8a <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8003d22:	4603      	mov	r3, r0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd f9af 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003d46:	4603      	mov	r3, r0
 8003d48:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	89fb      	ldrh	r3, [r7, #14]
 8003d54:	4413      	add	r3, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ffda 	bl	8003d10 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	e000      	b.n	8003d62 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8003d60:	787b      	ldrb	r3, [r7, #1]
  }
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f911 	bl	8003fa2 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8003d80:	4603      	mov	r3, r0
  }
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	460b      	mov	r3, r1
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7fd f981 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003da2:	4603      	mov	r3, r0
 8003da4:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003da6:	8afb      	ldrh	r3, [r7, #22]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	8afb      	ldrh	r3, [r7, #22]
 8003db0:	4413      	add	r3, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fd66 	bl	8001884 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003db8:	4603      	mov	r3, r0
 8003dba:	e000      	b.n	8003dbe <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8003dbc:	687b      	ldr	r3, [r7, #4]
  }
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f903 	bl	8003fe2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003ddc:	4603      	mov	r3, r0
  }
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	807b      	strh	r3, [r7, #2]
 8003df2:	4613      	mov	r3, r2
 8003df4:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd f952 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003e00:	4603      	mov	r3, r0
 8003e02:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	4413      	add	r3, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f906 	bl	8004022 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	e001      	b.n	8003e1e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8003e1a:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f902 	bl	8004040 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8003e3c:	4603      	mov	r3, r0
  }
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd fcef 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ffe9 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003e74:	4602      	mov	r2, r0
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d306      	bcc.n	8003e8a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8003e80:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003e84:	4809      	ldr	r0, [pc, #36]	; (8003eac <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8003e86:	f006 ff7b 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f90a 	bl	80040a4 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8003e90:	4603      	mov	r3, r0
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f8f3 	bl	8004080 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8003e9a:	4603      	mov	r3, r0
  }
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	0800e130 	.word	0x0800e130
 8003ea8:	0800e13c 	.word	0x0800e13c
 8003eac:	0800e20c 	.word	0x0800e20c

08003eb0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f907 	bl	80040d2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fd68 	bl	80039a6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	461a      	mov	r2, r3
 8003edc:	4621      	mov	r1, r4
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f911 	bl	8004106 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}

08003eec <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f91a 	bl	8004130 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003efc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f91f 	bl	800414a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f928 	bl	8004164 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003f14:	4603      	mov	r3, r0
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fd52 	bl	80039c4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
      }
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f933 	bl	80041a6 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	return get();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f938 	bl	80041c8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003f58:	4603      	mov	r3, r0
      }
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f92c 	bl	80041c8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003f70:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f8db 	bl	8004130 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
	return __p;
 8003f80:	68fb      	ldr	r3, [r7, #12]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
    return t;
 8003f94:	79fb      	ldrb	r3, [r7, #7]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd f876 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	89fb      	ldrh	r3, [r7, #14]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003fc4:	89fb      	ldrh	r3, [r7, #14]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f7fd fc4c 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4413      	add	r3, r2
                        : nullptr;
 8003fd6:	e000      	b.n	8003fda <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003fd8:	2300      	movs	r3, #0
  }
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd f856 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	4413      	add	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	f7fd fc2c 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004010:	4602      	mov	r2, r0
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4413      	add	r3, r2
                        : nullptr;
 8004016:	e000      	b.n	800401a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004018:	2300      	movs	r3, #0
  }
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f993 3000 	ldrsb.w	r3, [r3]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f8d6 	bl	80041e2 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd f827 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004056:	4603      	mov	r3, r0
 8004058:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	89fb      	ldrh	r3, [r7, #14]
 800405e:	4413      	add	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004062:	89fb      	ldrh	r3, [r7, #14]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8004068:	68b8      	ldr	r0, [r7, #8]
 800406a:	f7fd fbfd 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800406e:	4602      	mov	r2, r0
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4413      	add	r3, r2
                        : nullptr;
 8004074:	e000      	b.n	8004078 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004076:	2300      	movs	r3, #0
  }
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fd fc8d 	bl	80019b4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800409a:	4603      	mov	r3, r0
  }
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
  }
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	2104      	movs	r1, #4
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
 80040e8:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4619      	mov	r1, r3
 80040ee:	2004      	movs	r0, #4
 80040f0:	f7ff fbc7 	bl	8003882 <_ZnwjPv>
 80040f4:	4601      	mov	r1, r0
 80040f6:	460a      	mov	r2, r1
 80040f8:	2300      	movs	r3, #0
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	460b      	mov	r3, r1
  }
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004106:	b590      	push	{r4, r7, lr}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004112:	68fc      	ldr	r4, [r7, #12]
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f880 	bl	800421a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	4620      	mov	r0, r4
 8004122:	f000 f82a 	bl	800417a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f878 	bl	8004230 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004140:	4603      	mov	r3, r0
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f878 	bl	800424a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800415a:	4603      	mov	r3, r0
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800417a:	b590      	push	{r4, r7, lr}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004186:	68fc      	ldr	r4, [r7, #12]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff97 	bl	80040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800418e:	4602      	mov	r2, r0
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4619      	mov	r1, r3
 8004196:	4620      	mov	r0, r4
 8004198:	f000 f864 	bl	8004264 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd90      	pop	{r4, r7, pc}

080041a6 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f80a 	bl	80041c8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f85f 	bl	8004296 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
    return t;
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	ee07 3a90 	vmov	s15, r3
}
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f839 	bl	80042b2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004240:	4603      	mov	r3, r0
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f838 	bl	80042ca <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004264:	b5b0      	push	{r4, r5, r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004270:	68fc      	ldr	r4, [r7, #12]
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f000 f836 	bl	80042e4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004278:	4605      	mov	r5, r0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff1e 	bl	80040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4629      	mov	r1, r5
 8004286:	4620      	mov	r0, r4
 8004288:	f000 f837 	bl	80042fa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bdb0      	pop	{r4, r5, r7, pc}

08004296 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f848 	bl	8004336 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80042a6:	4603      	mov	r3, r0
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f867 	bl	800438e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f83b 	bl	8004350 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80042da:	4603      	mov	r3, r0
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80042fa:	b590      	push	{r4, r7, lr}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004306:	68fc      	ldr	r4, [r7, #12]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fed7 	bl	80040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800430e:	4603      	mov	r3, r0
 8004310:	4619      	mov	r1, r3
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f828 	bl	8004368 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1d1c      	adds	r4, r3, #4
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f7ff ffe1 	bl	80042e4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004322:	4603      	mov	r3, r0
 8004324:	4619      	mov	r1, r3
 8004326:	4620      	mov	r0, r4
 8004328:	f000 f83f 	bl	80043aa <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bd90      	pop	{r4, r7, pc}

08004336 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f843 	bl	80043cc <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f843 	bl	80043e4 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800435e:	4603      	mov	r3, r0
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004372:	687c      	ldr	r4, [r7, #4]
 8004374:	6838      	ldr	r0, [r7, #0]
 8004376:	f7ff fea1 	bl	80040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800437a:	4603      	mov	r3, r0
 800437c:	4619      	mov	r1, r3
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f83d 	bl	80043fe <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}

0800438e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f840 	bl	8004420 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80043b4:	6838      	ldr	r0, [r7, #0]
 80043b6:	f7ff ff95 	bl	80042e4 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80043ba:	4603      	mov	r3, r0
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f82e 	bl	8004436 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80043da:	4603      	mov	r3, r0
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f82f 	bl	8004452 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004408:	6838      	ldr	r0, [r7, #0]
 800440a:	f7ff fe57 	bl	80040bc <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f810 	bl	8004468 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8004448:	4603      	mov	r3, r0
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return names;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	080126a4 	.word	0x080126a4

08004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 800449e:	2300      	movs	r3, #0
 80044a0:	72bb      	strb	r3, [r7, #10]
 80044a2:	2391      	movs	r3, #145	; 0x91
 80044a4:	72fb      	strb	r3, [r7, #11]
 80044a6:	f107 020b 	add.w	r2, r7, #11
 80044aa:	f107 010a 	add.w	r1, r7, #10
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f8a9 	bl	8004608 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 80044be:	e008      	b.n	80044d2 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 80044c4:	f7ff ffdc 	bl	8004480 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	681b      	ldr	r3, [r3, #0]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	0800e970 	.word	0x0800e970

080044e0 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2106      	movs	r1, #6
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fc9a 	bl	8003e26 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80044f2:	4603      	mov	r3, r0
  }
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	2108      	movs	r1, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fc3d 	bl	8003d8a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004510:	4603      	mov	r3, r0
  }
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800452a:	2300      	movs	r3, #0
 800452c:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f006 fafc 	bl	800ab32 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800453a:	4603      	mov	r3, r0
 800453c:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ffdc 	bl	80044fc <_ZNK6tflite12OperatorCode7versionEv>
 8004544:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 8004546:	7fbb      	ldrb	r3, [r7, #30]
 8004548:	2b91      	cmp	r3, #145	; 0x91
 800454a:	d908      	bls.n	800455e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 800454c:	7fbb      	ldrb	r3, [r7, #30]
 800454e:	461a      	mov	r2, r3
 8004550:	492a      	ldr	r1, [pc, #168]	; (80045fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff f962 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8004558:	2301      	movs	r3, #1
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e048      	b.n	80045f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800455e:	7fbb      	ldrb	r3, [r7, #30]
 8004560:	2b20      	cmp	r3, #32
 8004562:	d01a      	beq.n	800459a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	7fb9      	ldrb	r1, [r7, #30]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	4798      	blx	r3
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d137      	bne.n	80045f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8004580:	7fbb      	ldrb	r3, [r7, #30]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff86 	bl	8004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8004588:	4602      	mov	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	491c      	ldr	r1, [pc, #112]	; (8004600 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff f944 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8004594:	2301      	movs	r3, #1
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e02a      	b.n	80045f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ffa0 	bl	80044e0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d006      	beq.n	80045be <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 80045b0:	4914      	ldr	r1, [pc, #80]	; (8004604 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff f932 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e018      	b.n	80045f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff ff8e 	bl	80044e0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f967 	bl	800389a <_ZNK11flatbuffers6String5c_strEv>
 80045cc:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	4798      	blx	r3
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	0800e974 	.word	0x0800e974
 8004600:	0800e9c8 	.word	0x0800e9c8
 8004604:	0800ea6c 	.word	0x0800ea6c

08004608 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d305      	bcc.n	800462c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d201      	bcs.n	8004630 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	ed87 0a01 	vstr	s0, [r7, #4]
 8004648:	ed97 0a01 	vldr	s0, [r7, #4]
 800464c:	f006 fb6a 	bl	800ad24 <roundf>
 8004650:	eef0 7a40 	vmov.f32	s15, s0
 8004654:	eeb0 0a67 	vmov.f32	s0, s15
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
 8004662:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	ed87 0b02 	vstr	d0, [r7, #8]
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800468a:	f7fc fa2f 	bl	8000aec <__aeabi_dcmpeq>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
    return;
 80046a0:	e06b      	b.n	800477a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80046a2:	6838      	ldr	r0, [r7, #0]
 80046a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80046a8:	f006 fabe 	bl	800ac28 <frexp>
 80046ac:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	4b32      	ldr	r3, [pc, #200]	; (8004780 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80046b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ba:	f7fb ffaf 	bl	800061c <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	ec43 2b17 	vmov	d7, r2, r3
 80046c6:	eeb0 0a47 	vmov.f32	s0, s14
 80046ca:	eef0 0a67 	vmov.f32	s1, s15
 80046ce:	f000 f88b 	bl	80047e8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80046d2:	ec53 2b10 	vmov	r2, r3, d0
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc fadf 	bl	8000c9c <__aeabi_d2lz>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 80046e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	4290      	cmp	r0, r2
 80046f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80046f8:	da01      	bge.n	80046fe <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 80046fa:	f006 fb39 	bl	800ad70 <abort>
  if (q_fixed == (1ll << 31)) {
 80046fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf08      	it	eq
 8004706:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800470a:	d117      	bne.n	800473c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800470c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004710:	0fd9      	lsrs	r1, r3, #31
 8004712:	4608      	mov	r0, r1
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	1884      	adds	r4, r0, r2
 800471a:	eb41 0503 	adc.w	r5, r1, r3
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	0862      	lsrs	r2, r4, #1
 8004728:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800472c:	106b      	asrs	r3, r5, #1
 800472e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800473c:	f7ff ff8f 	bl	800465e <_ZNSt14numeric_limitsIlE3maxEv>
 8004740:	4603      	mov	r3, r0
 8004742:	4618      	mov	r0, r3
 8004744:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474c:	4290      	cmp	r0, r2
 800474e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004752:	da01      	bge.n	8004758 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8004754:	f006 fb0c 	bl	800ad70 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f113 0f1f 	cmn.w	r3, #31
 8004760:	da08      	bge.n	8004774 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bdb0      	pop	{r4, r5, r7, pc}
 8004780:	41e00000 	.word	0x41e00000

08004784 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	ed93 7a00 	vldr	s14, [r3]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d501      	bpl.n	80047a8 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	e000      	b.n	80047aa <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80047a8:	687b      	ldr	r3, [r7, #4]
    }
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	ed93 7a00 	vldr	s14, [r3]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	d501      	bpl.n	80047da <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	e000      	b.n	80047dc <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80047da:	687b      	ldr	r3, [r7, #4]
    }
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	ed87 0b00 	vstr	d0, [r7]
 80047f2:	ed97 0b00 	vldr	d0, [r7]
 80047f6:	f006 fa4f 	bl	800ac98 <round>
 80047fa:	eeb0 7a40 	vmov.f32	s14, s0
 80047fe:	eef0 7a60 	vmov.f32	s15, s1
 8004802:	eeb0 0a47 	vmov.f32	s0, s14
 8004806:	eef0 0a67 	vmov.f32	s1, s15
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	ed87 0a01 	vstr	s0, [r7, #4]
 800481a:	ed97 0a01 	vldr	s0, [r7, #4]
 800481e:	f7ff ff0e 	bl	800463e <_ZSt5roundf>
 8004822:	eef0 7a40 	vmov.f32	s15, s0
 8004826:	eeb0 0a67 	vmov.f32	s0, s15
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
 8004834:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8004842:	b480      	push	{r7}
 8004844:	af00      	add	r7, sp, #0
 8004846:	237f      	movs	r3, #127	; 0x7f
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
 8004856:	2300      	movs	r3, #0
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0
 8004866:	23ff      	movs	r3, #255	; 0xff
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	ffff8000 	.word	0xffff8000

08004888 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
 800488c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
 800489e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	ed87 0b00 	vstr	d0, [r7]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048be:	ec43 2b17 	vmov	d7, r2, r3
 80048c2:	eeb0 0a47 	vmov.f32	s0, s14
 80048c6:	eef0 0a67 	vmov.f32	s1, s15
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	4413      	add	r3, r2
 80048f0:	e006      	b.n	8004900 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	bf00      	nop
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0f      	blt.n	800493c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	da0b      	bge.n	800493c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	4413      	add	r3, r2
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d001      	beq.n	800493c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	e001      	b.n	8004940 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800495c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ffce 	bl	8004908 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800496c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	da01      	bge.n	8004978 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8004974:	2300      	movs	r3, #0
 8004976:	e005      	b.n	8004984 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8004978:	6979      	ldr	r1, [r7, #20]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff ffaa 	bl	80048d4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8004980:	4603      	mov	r3, r0
 8004982:	bf00      	nop
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ffd5 	bl	800494c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80049a2:	4603      	mov	r3, r0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80049bc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ff9e 	bl	8004908 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80049cc:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da01      	bge.n	80049d8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e005      	b.n	80049e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff7a 	bl	80048d4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80049e0:	4603      	mov	r3, r0
 80049e2:	bf00      	nop
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff ffc5 	bl	800498c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8004a02:	4603      	mov	r3, r0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	0000      	movs	r0, r0
	...

08004a10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fda2 	bl	800056c <__aeabi_f2d>
 8004a28:	4604      	mov	r4, r0
 8004a2a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd9b 	bl	800056c <__aeabi_f2d>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	f7fb fded 	bl	800061c <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d04b      	beq.n	8004ae8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fd89 	bl	800056c <__aeabi_f2d>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8004a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a6a:	f7fb fc1f 	bl	80002ac <__aeabi_dsub>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	ec43 2b17 	vmov	d7, r2, r3
 8004a76:	eeb0 0a47 	vmov.f32	s0, s14
 8004a7a:	eef0 0a67 	vmov.f32	s1, s15
 8004a7e:	f7ff ff15 	bl	80048ac <_ZSt3absd>
 8004a82:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fb fd6e 	bl	800056c <__aeabi_f2d>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8004a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004aa0:	f7fb fee6 	bl	8000870 <__aeabi_ddiv>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	2301      	movs	r3, #1
 8004aae:	461c      	mov	r4, r3
 8004ab0:	a318      	add	r3, pc, #96	; (adr r3, 8004b14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f7fc f82d 	bl	8000b14 <__aeabi_dcmple>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	b2e3      	uxtb	r3, r4
 8004ac6:	f083 0301 	eor.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	695c      	ldr	r4, [r3, #20]
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004adc:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8004ade:	490c      	ldr	r1, [pc, #48]	; (8004b10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	47a0      	blx	r4
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e009      	b.n	8004afc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f812 	bl	8004b1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8004af8:	4603      	mov	r3, r0
                                          multiplier);
 8004afa:	bf00      	nop
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3730      	adds	r7, #48	; 0x30
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bdb0      	pop	{r4, r5, r7, pc}
 8004b04:	f3af 8000 	nop.w
 8004b08:	0800ecc8 	.word	0x0800ecc8
 8004b0c:	0800eb08 	.word	0x0800eb08
 8004b10:	0800ebb4 	.word	0x0800ebb4
 8004b14:	47ae147b 	.word	0x47ae147b
 8004b18:	3f947ae1 	.word	0x3f947ae1

08004b1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b089      	sub	sp, #36	; 0x24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8004b3a:	ee17 0a90 	vmov	r0, s15
 8004b3e:	f7fb fd15 	bl	800056c <__aeabi_f2d>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	461c      	mov	r4, r3
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b5a:	f7fb ffe5 	bl	8000b28 <__aeabi_dcmpge>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8004b64:	2300      	movs	r3, #0
 8004b66:	461c      	mov	r4, r3
 8004b68:	b2e3      	uxtb	r3, r4
 8004b6a:	f083 0301 	eor.w	r3, r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	695c      	ldr	r4, [r3, #20]
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f240 134b 	movw	r3, #331	; 0x14b
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8004b82:	490f      	ldr	r1, [pc, #60]	; (8004bc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	47a0      	blx	r4
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e010      	b.n	8004bae <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fceb 	bl	800056c <__aeabi_f2d>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b9e:	f7fb fe67 	bl	8000870 <__aeabi_ddiv>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	0800ecec 	.word	0x0800ecec
 8004bbc:	0800eb08 	.word	0x0800eb08
 8004bc0:	0800ebb4 	.word	0x0800ebb4

08004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b08b      	sub	sp, #44	; 0x2c
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6178      	str	r0, [r7, #20]
 8004bcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8004bd0:	60f9      	str	r1, [r7, #12]
 8004bd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8004bd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004be0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004be4:	eeb0 0a66 	vmov.f32	s0, s13
 8004be8:	f7ff fe12 	bl	8004810 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8004bec:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8004bf0:	f7ff fe53 	bl	800489a <_ZNSt14numeric_limitsIlE3minEv>
 8004bf4:	ee07 0a90 	vmov	s15, r0
 8004bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c08:	db0e      	blt.n	8004c28 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8004c0a:	f7ff fd28 	bl	800465e <_ZNSt14numeric_limitsIlE3maxEv>
 8004c0e:	ee07 0a90 	vmov	s15, r0
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8004c16:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d801      	bhi.n	8004c28 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8004c28:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8004c2a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8004c2c:	7efb      	ldrb	r3, [r7, #27]
 8004c2e:	f083 0301 	eor.w	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	695c      	ldr	r4, [r3, #20]
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	f240 1359 	movw	r3, #345	; 0x159
 8004c44:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8004c46:	490c      	ldr	r1, [pc, #48]	; (8004c78 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	47a0      	blx	r4
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e00a      	b.n	8004c66 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8004c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c58:	ee17 2a90 	vmov	r2, s15
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd90      	pop	{r4, r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	0800ed08 	.word	0x0800ed08
 8004c74:	0800eb08 	.word	0x0800eb08
 8004c78:	0800ebb4 	.word	0x0800ebb4

08004c7c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8004c98:	7afb      	ldrb	r3, [r7, #11]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d120      	bne.n	8004ce0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	eddf 0a52 	vldr	s1, [pc, #328]	; 8004df0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ff88 	bl	8004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	7efb      	ldrb	r3, [r7, #27]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8004cbe:	7efb      	ldrb	r3, [r7, #27]
 8004cc0:	e091      	b.n	8004de6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8004cc2:	f107 0214 	add.w	r2, r7, #20
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f8fe 	bl	8004ecc <_ZSt3maxIlERKT_S2_S2_>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e081      	b.n	8004de4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8004ce0:	7afb      	ldrb	r3, [r7, #11]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d13a      	bne.n	8004d5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	461a      	mov	r2, r3
 8004cec:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004df0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8004cf0:	6a39      	ldr	r1, [r7, #32]
 8004cf2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ff64 	bl	8004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	777b      	strb	r3, [r7, #29]
 8004d00:	7f7b      	ldrb	r3, [r7, #29]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8004d06:	7f7b      	ldrb	r3, [r7, #29]
 8004d08:	e06d      	b.n	8004de6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8004d0a:	f107 0214 	add.w	r2, r7, #20
 8004d0e:	1d3b      	adds	r3, r7, #4
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f8da 	bl	8004ecc <_ZSt3maxIlERKT_S2_S2_>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	461a      	mov	r2, r3
 8004d26:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004d2a:	6a39      	ldr	r1, [r7, #32]
 8004d2c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff ff47 	bl	8004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8004d36:	4603      	mov	r3, r0
 8004d38:	773b      	strb	r3, [r7, #28]
 8004d3a:	7f3b      	ldrb	r3, [r7, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8004d40:	7f3b      	ldrb	r3, [r7, #28]
 8004d42:	e050      	b.n	8004de6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8004d44:	f107 0214 	add.w	r2, r7, #20
 8004d48:	463b      	mov	r3, r7
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f8a9 	bl	8004ea4 <_ZSt3minIlERKT_S2_S2_>
 8004d52:	4603      	mov	r3, r0
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e043      	b.n	8004de4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8004d5c:	7afb      	ldrb	r3, [r7, #11]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d13a      	bne.n	8004dd8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	461a      	mov	r2, r3
 8004d68:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004d6c:	6a39      	ldr	r1, [r7, #32]
 8004d6e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ff26 	bl	8004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	7ffb      	ldrb	r3, [r7, #31]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8004d82:	7ffb      	ldrb	r3, [r7, #31]
 8004d84:	e02f      	b.n	8004de6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8004d86:	f107 0214 	add.w	r2, r7, #20
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f89c 	bl	8004ecc <_ZSt3maxIlERKT_S2_S2_>
 8004d94:	4603      	mov	r3, r0
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	461a      	mov	r2, r3
 8004da2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff09 	bl	8004bc4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8004db2:	4603      	mov	r3, r0
 8004db4:	77bb      	strb	r3, [r7, #30]
 8004db6:	7fbb      	ldrb	r3, [r7, #30]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8004dbc:	7fbb      	ldrb	r3, [r7, #30]
 8004dbe:	e012      	b.n	8004de6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8004dc0:	f107 0214 	add.w	r2, r7, #20
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f86b 	bl	8004ea4 <_ZSt3minIlERKT_S2_S2_>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e005      	b.n	8004de4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3728      	adds	r7, #40	; 0x28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	00000000 	.word	0x00000000

08004df4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b08b      	sub	sp, #44	; 0x2c
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	460b      	mov	r3, r1
 8004e02:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d108      	bne.n	8004e26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8004e14:	f7ff fd1d 	bl	8004852 <_ZNSt14numeric_limitsIhE3minEv>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8004e1c:	f7ff fd21 	bl	8004862 <_ZNSt14numeric_limitsIhE3maxEv>
 8004e20:	4603      	mov	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e025      	b.n	8004e72 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	d108      	bne.n	8004e40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8004e2e:	f7ff fcff 	bl	8004830 <_ZNSt14numeric_limitsIaE3minEv>
 8004e32:	4603      	mov	r3, r0
 8004e34:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8004e36:	f7ff fd04 	bl	8004842 <_ZNSt14numeric_limitsIaE3maxEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e018      	b.n	8004e72 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b07      	cmp	r3, #7
 8004e46:	d108      	bne.n	8004e5a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8004e48:	f7ff fd14 	bl	8004874 <_ZNSt14numeric_limitsIsE3minEv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8004e50:	f7ff fd1a 	bl	8004888 <_ZNSt14numeric_limitsIsE3maxEv>
 8004e54:	4603      	mov	r3, r0
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e00b      	b.n	8004e72 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	695c      	ldr	r4, [r3, #20]
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	f240 1391 	movw	r3, #401	; 0x191
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8004e68:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	47a0      	blx	r4
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00d      	b.n	8004e8e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8004e72:	7af9      	ldrb	r1, [r7, #11]
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff fef9 	bl	8004c7c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8004e8a:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8004e8c:	bf00      	nop
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	0800ed30 	.word	0x0800ed30
 8004e9c:	0800eb08 	.word	0x0800eb08
 8004ea0:	0800ebb4 	.word	0x0800ebb4

08004ea4 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	da01      	bge.n	8004ebe <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	e000      	b.n	8004ec0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8004ebe:	687b      	ldr	r3, [r7, #4]
    }
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	da01      	bge.n	8004ee6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	e000      	b.n	8004ee8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8004ee6:	687b      	ldr	r3, [r7, #4]
    }
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <DebugLog>:

//#include <cstdio>
//
//extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }

extern "C" void __attribute__((weak)) DebugLog(const char* s) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  // To be implemented by user
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	210a      	movs	r1, #10
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f847 	bl	8004fa8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8004f1a:	4603      	mov	r3, r0
  }
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2108      	movs	r1, #8
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f849 	bl	8004fc8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8004f36:	4603      	mov	r3, r0
  }
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ffdd 	bl	8004f08 <_ZNK6tflite8SubGraph9operatorsEv>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ffd2 	bl	8004f08 <_ZNK6tflite8SubGraph9operatorsEv>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f83e 	bl	8004fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	e000      	b.n	8004f72 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 8004f70:	2300      	movs	r3, #0
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ffcd 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 f845 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8004f96:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ffd1 	bl	8004f40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f865 	bl	8005088 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8004fbe:	4603      	mov	r3, r0
  }
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004fd4:	887b      	ldrh	r3, [r7, #2]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f875 	bl	80050c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8004fde:	4603      	mov	r3, r0
  }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fc fc1e 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fc fc10 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005016:	4603      	mov	r3, r0
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ffea 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8005030:	4602      	mov	r2, r0
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	4293      	cmp	r3, r2
 8005036:	d306      	bcc.n	8005046 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800503a:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800503c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005040:	4809      	ldr	r0, [pc, #36]	; (8005068 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8005042:	f005 fe9d 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f872 	bl	8005130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800504c:	4603      	mov	r3, r0
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f859 	bl	8005108 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8005056:	4603      	mov	r3, r0
  }
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0800ede8 	.word	0x0800ede8
 8005064:	0800edf4 	.word	0x0800edf4
 8005068:	0800eef0 	.word	0x0800eef0

0800506c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8005076:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fc f803 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800509e:	4603      	mov	r3, r0
 80050a0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	4413      	add	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f7fc fbd9 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4413      	add	r3, r2
                        : nullptr;
 80050bc:	e000      	b.n	80050c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80050be:	2300      	movs	r3, #0
  }
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80050d4:	887b      	ldrh	r3, [r7, #2]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb ffe3 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80050de:	4603      	mov	r3, r0
 80050e0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	4413      	add	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 80050f0:	68b8      	ldr	r0, [r7, #8]
 80050f2:	f7fc fbb9 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4413      	add	r3, r2
                        : nullptr;
 80050fc:	e000      	b.n	8005100 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80050fe:	2300      	movs	r3, #0
  }
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fc fba3 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4413      	add	r3, r2
  }
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
  }
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2104      	movs	r1, #4
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fe36 	bl	8003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800515a:	4603      	mov	r3, r0
  }
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	2106      	movs	r1, #6
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fe37 	bl	8003de6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005178:	4603      	mov	r3, r0
 800517a:	b2db      	uxtb	r3, r3
  }
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f866 	bl	8005288 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	dd08      	ble.n	80051e8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f005 fcdf 	bl	800aba6 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b05      	cmp	r3, #5
 8005218:	dd02      	ble.n	8005220 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	e001      	b.n	8005224 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
  }
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b05      	cmp	r3, #5
 8005240:	dd08      	ble.n	8005254 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4618      	mov	r0, r3
 8005250:	f005 fca9 	bl	800aba6 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b05      	cmp	r3, #5
 800525e:	dd0f      	ble.n	8005280 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005266:	4293      	cmp	r3, r2
 8005268:	d201      	bcs.n	800526e <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	e001      	b.n	8005272 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	4618      	mov	r0, r3
 8005274:	f005 fcb9 	bl	800abea <_Znaj>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff ffca 	bl	8005230 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ffb4 	bl	800520a <_ZN6tflite12RuntimeShape8DimsDataEv>
 80052a2:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	461a      	mov	r2, r3
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f005 fdd7 	bl	800ae60 <memcpy>
  }
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80052dc:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80052de:	68bb      	ldr	r3, [r7, #8]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8005308:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800530a:	68bb      	ldr	r3, [r7, #8]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	6039      	str	r1, [r7, #0]
 8005352:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	3b01      	subs	r3, #1
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d857      	bhi.n	800540c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	080053ad 	.word	0x080053ad
 8005368:	080053c5 	.word	0x080053c5
 800536c:	080053d5 	.word	0x080053d5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	0800540d 	.word	0x0800540d
 8005378:	080053f5 	.word	0x080053f5
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053fd 	.word	0x080053fd
 8005384:	080053dd 	.word	0x080053dd
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053b5 	.word	0x080053b5
 8005390:	08005405 	.word	0x08005405
 8005394:	080053ed 	.word	0x080053ed
 8005398:	0800540d 	.word	0x0800540d
 800539c:	0800540d 	.word	0x0800540d
 80053a0:	080053cd 	.word	0x080053cd
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2202      	movs	r2, #2
 80053a8:	601a      	str	r2, [r3, #0]
      break;
 80053aa:	e031      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2204      	movs	r2, #4
 80053b0:	601a      	str	r2, [r3, #0]
      break;
 80053b2:	e02d      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2208      	movs	r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
      break;
 80053ba:	e029      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2202      	movs	r2, #2
 80053c0:	601a      	str	r2, [r3, #0]
      break;
 80053c2:	e025      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2204      	movs	r2, #4
 80053c8:	601a      	str	r2, [r3, #0]
      break;
 80053ca:	e021      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2204      	movs	r2, #4
 80053d0:	601a      	str	r2, [r3, #0]
      break;
 80053d2:	e01d      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
      break;
 80053da:	e019      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
      break;
 80053e2:	e015      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	601a      	str	r2, [r3, #0]
      break;
 80053ea:	e011      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2208      	movs	r2, #8
 80053f0:	601a      	str	r2, [r3, #0]
      break;
 80053f2:	e00d      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
      break;
 80053fa:	e009      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2208      	movs	r2, #8
 8005400:	601a      	str	r2, [r3, #0]
      break;
 8005402:	e005      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2210      	movs	r2, #16
 8005408:	601a      	str	r2, [r3, #0]
      break;
 800540a:	e001      	b.n	8005410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop

08005420 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fe88 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fe7b 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8005452:	4603      	mov	r3, r0
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f884 	bl	8005562 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800545a:	4602      	mov	r2, r0
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	4293      	cmp	r3, r2
 8005460:	bf34      	ite	cc
 8005462:	2301      	movcc	r3, #1
 8005464:	2300      	movcs	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fe6b 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8005472:	4603      	mov	r3, r0
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fcf4 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800547c:	4602      	mov	r2, r0
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fb02 f303 	mul.w	r3, r2, r3
 8005484:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3301      	adds	r3, #1
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e7de      	b.n	800544c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff fe68 	bl	8005164 <_ZNK6tflite6Tensor4typeEv>
 8005494:	4603      	mov	r3, r0
 8005496:	4618      	mov	r0, r3
 8005498:	f107 0315 	add.w	r3, r7, #21
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	f7fe fafe 	bl	8003aa0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80054a4:	4603      	mov	r3, r0
 80054a6:	75fb      	strb	r3, [r7, #23]
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	e013      	b.n	80054da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 80054b2:	7d7b      	ldrb	r3, [r7, #21]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff46 	bl	8005348 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80054bc:	4603      	mov	r3, r0
 80054be:	75bb      	strb	r3, [r7, #22]
 80054c0:	7dbb      	ldrb	r3, [r7, #22]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 80054c6:	7dbb      	ldrb	r3, [r7, #22]
 80054c8:	e007      	b.n	80054da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	fb02 f203 	mul.w	r2, r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 80054f2:	f005 fc3d 	bl	800ad70 <abort>

  int element_count = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d015      	beq.n	800552e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	da0d      	bge.n	800552e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3301      	adds	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e7eb      	b.n	8005506 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7a1b      	ldrb	r3, [r3, #8]
 8005532:	f107 0208 	add.w	r2, r7, #8
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff05 	bl	8005348 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	e006      	b.n	800555a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	fb02 f203 	mul.w	r2, r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fe fc6b 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2108      	movs	r1, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fc7f 	bl	8006e8a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800558c:	4603      	mov	r3, r0
  }
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	210a      	movs	r1, #10
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fc81 	bl	8006eaa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 80055a8:	4603      	mov	r3, r0
  }
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	2110      	movs	r1, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fbe2 	bl	8003d8a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80055c6:	4603      	mov	r3, r0
  }
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	2108      	movs	r1, #8
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fc f95e 	bl	80018a0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80055e4:	4603      	mov	r3, r0
  }
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	210c      	movs	r1, #12
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fc65 	bl	8006eca <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8005600:	4603      	mov	r3, r0
  }
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	210e      	movs	r1, #14
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fb87 	bl	8003d2c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
  }
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2106      	movs	r1, #6
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fbc1 	bl	8003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005644:	4603      	mov	r3, r0
  }
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2108      	movs	r1, #8
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fbb3 	bl	8003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005660:	4603      	mov	r3, r0
  }
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2104      	movs	r1, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fc37 	bl	8006eea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800567c:	4603      	mov	r3, r0
  }
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2106      	movs	r1, #6
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fb97 	bl	8003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005698:	4603      	mov	r3, r0
  }
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2108      	movs	r1, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fb89 	bl	8003dc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80056b4:	4603      	mov	r3, r0
  }
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2104      	movs	r1, #4
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fbcd 	bl	8006e6a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80056d0:	4603      	mov	r3, r0
  }
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2104      	movs	r1, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fb9d 	bl	8003e26 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80056ec:	4603      	mov	r3, r0
  }
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	2106      	movs	r1, #6
 8005704:	4618      	mov	r0, r3
 8005706:	f7fc f8cb 	bl	80018a0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800570a:	4603      	mov	r3, r0
  }
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	210c      	movs	r1, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fbf2 	bl	8006f0a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8005726:	4603      	mov	r3, r0
  }
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2110      	movs	r1, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fbf4 	bl	8006f2a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8005742:	4603      	mov	r3, r0
  }
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	08012968 	.word	0x08012968

0800576c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ffe9 	bl	800574c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800577a:	2104      	movs	r1, #4
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f005 fa10 	bl	800aba2 <_ZdlPvj>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	08012968 	.word	0x08012968

080057ac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ffe7 	bl	800578c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08012914 	.word	0x08012914

080057d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6858      	ldr	r0, [r3, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4798      	blx	r3
 80057f8:	4603      	mov	r3, r0
  }
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b096      	sub	sp, #88	; 0x58
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8005860:	f005 fa86 	bl	800ad70 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005864:	2300      	movs	r3, #0
 8005866:	657b      	str	r3, [r7, #84]	; 0x54
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800586e:	429a      	cmp	r2, r3
 8005870:	d267      	bcs.n	8005942 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 8005884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	461a      	mov	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4413      	add	r3, r2
 8005894:	461a      	mov	r2, r3
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800589a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800589c:	4613      	mov	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	461a      	mov	r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff fe17 	bl	80054e2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 80058c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058c6:	e117      	b.n	8005af8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 80058c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295
 80058ce:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80058d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	461a      	mov	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d113      	bne.n	8005916 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7ff febb 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 80058f4:	4603      	mov	r3, r0
 80058f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fbaf 	bl	800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80058fe:	4603      	mov	r3, r0
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fe82 	bl	800560a <_ZNK6tflite6Tensor11is_variableEv>
 8005906:	4603      	mov	r3, r0
 8005908:	f083 0301 	eor.w	r3, r3, #1
 800590c:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 8005912:	2201      	movs	r2, #1
 8005914:	e000      	b.n	8005918 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 8005916:	2200      	movs	r2, #0
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 8005922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	611a      	str	r2, [r3, #16]
 8005930:	e003      	b.n	800593a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800593a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593c:	3301      	adds	r3, #1
 800593e:	657b      	str	r3, [r7, #84]	; 0x54
 8005940:	e792      	b.n	8005868 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8005942:	68b8      	ldr	r0, [r7, #8]
 8005944:	f7ff fafc 	bl	8004f40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8005948:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800594a:	2300      	movs	r3, #0
 800594c:	653b      	str	r3, [r7, #80]	; 0x50
 800594e:	68b8      	ldr	r0, [r7, #8]
 8005950:	f7ff fe99 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8005954:	4603      	mov	r3, r0
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fa75 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800595c:	4602      	mov	r2, r0
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	4293      	cmp	r3, r2
 8005962:	bf34      	ite	cc
 8005964:	2301      	movcc	r3, #1
 8005966:	2300      	movcs	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f7ff fe89 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8005974:	4603      	mov	r3, r0
 8005976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fa73 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800597e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4613      	mov	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4413      	add	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	440b      	add	r3, r1
 8005990:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599a:	3301      	adds	r3, #1
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
 800599e:	e7d6      	b.n	800594e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80059a0:	2300      	movs	r3, #0
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	68b8      	ldr	r0, [r7, #8]
 80059a6:	f7ff fe7c 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fa4a 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bf34      	ite	cc
 80059ba:	2301      	movcc	r3, #1
 80059bc:	2300      	movcs	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 80059c4:	68b8      	ldr	r0, [r7, #8]
 80059c6:	f7ff fe6c 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 80059ca:	4603      	mov	r3, r0
 80059cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fa48 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80059d4:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	440b      	add	r3, r1
 80059e6:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	3b01      	subs	r3, #1
 80059ec:	461a      	mov	r2, r3
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80059f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f4:	3301      	adds	r3, #1
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	e7d4      	b.n	80059a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	3b01      	subs	r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	db77      	blt.n	8005af6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f7ff fa7e 	bl	8004f08 <_ZNK6tflite8SubGraph9operatorsEv>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f001 fb48 	bl	80070a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8005a18:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a20:	f7ff fe07 	bl	8005632 <_ZNK6tflite8Operator6inputsEv>
 8005a24:	4603      	mov	r3, r0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fa0d 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf34      	ite	cc
 8005a34:	2301      	movcc	r3, #1
 8005a36:	2300      	movcs	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d022      	beq.n	8005a84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 8005a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a40:	f7ff fdf7 	bl	8005632 <_ZNK6tflite8Operator6inputsEv>
 8005a44:	4603      	mov	r3, r0
 8005a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fa0b 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d004      	beq.n	8005a76 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a72:	429a      	cmp	r2, r3
 8005a74:	dd02      	ble.n	8005a7c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7a:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	3301      	adds	r3, #1
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
 8005a82:	e7cc      	b.n	8005a1e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005a84:	2300      	movs	r3, #0
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40
 8005a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8a:	f7ff fde0 	bl	800564e <_ZNK6tflite8Operator7outputsEv>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe f9d8 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bf34      	ite	cc
 8005a9e:	2301      	movcc	r3, #1
 8005aa0:	2300      	movcs	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d022      	beq.n	8005aee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 8005aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aaa:	f7ff fdd0 	bl	800564e <_ZNK6tflite8Operator7outputsEv>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe f9d6 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d004      	beq.n	8005ae0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005adc:	429a      	cmp	r2, r3
 8005ade:	da02      	bge.n	8005ae6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae4:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae8:	3301      	adds	r3, #1
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
 8005aec:	e7cc      	b.n	8005a88 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af0:	3b01      	subs	r3, #1
 8005af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af4:	e784      	b.n	8005a00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3758      	adds	r7, #88	; 0x58
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f7ff fe0f 	bl	8005730 <_ZNK6tflite5Model8metadataEv>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d060      	beq.n	8005be4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005b22:	2300      	movs	r3, #0
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f7ff fe02 	bl	8005730 <_ZNK6tflite5Model8metadataEv>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fb14 	bl	800715c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	bf34      	ite	cc
 8005b3c:	2301      	movcc	r3, #1
 8005b3e:	2300      	movcs	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d04e      	beq.n	8005be4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8005b46:	68b8      	ldr	r0, [r7, #8]
 8005b48:	f7ff fdf2 	bl	8005730 <_ZNK6tflite5Model8metadataEv>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fb11 	bl	8007178 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8005b56:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8005b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5a:	f7ff fdbe 	bl	80056da <_ZNK6tflite8Metadata4nameEv>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fe9a 	bl	800389a <_ZNK11flatbuffers6String5c_strEv>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2217      	movs	r2, #23
 8005b6a:	4921      	ldr	r1, [pc, #132]	; (8005bf0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f006 f889 	bl	800bc84 <strncmp>
 8005b72:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d02c      	beq.n	8005bdc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8005b82:	68b8      	ldr	r0, [r7, #8]
 8005b84:	f7ff fdc6 	bl	8005714 <_ZNK6tflite5Model7buffersEv>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8005b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8c:	f7ff fdb3 	bl	80056f6 <_ZNK6tflite8Metadata6bufferEv>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4619      	mov	r1, r3
 8005b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b96:	f001 fb23 	bl	80071e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8005b9a:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8005b9c:	6a38      	ldr	r0, [r7, #32]
 8005b9e:	f7ff fd8e 	bl	80056be <_ZNK6tflite6Buffer4dataEv>
 8005ba2:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8005ba4:	69f8      	ldr	r0, [r7, #28]
 8005ba6:	f001 fb29 	bl	80071fc <_ZNK11flatbuffers6VectorIhE4dataEv>
 8005baa:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d009      	beq.n	8005bdc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68d8      	ldr	r0, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4908      	ldr	r1, [pc, #32]	; (8005bf4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8005bd4:	f7fd fe22 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e004      	b.n	8005be6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	3301      	adds	r3, #1
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be2:	e7a0      	b.n	8005b26 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3730      	adds	r7, #48	; 0x30
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	080128f0 	.word	0x080128f0
 8005bf4:	0800f078 	.word	0x0800f078

08005bf8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4413      	add	r3, r2
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d232      	bcs.n	8005c80 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	440b      	add	r3, r1
 8005c4a:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2201      	movs	r2, #1
 8005c76:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e7c4      	b.n	8005c0a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3724      	adds	r7, #36	; 0x24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8005c8e:	b590      	push	{r4, r7, lr}
 8005c90:	b08b      	sub	sp, #44	; 0x2c
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d247      	bcs.n	8005d38 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	7d1b      	ldrb	r3, [r3, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d036      	beq.n	8005d30 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2110      	movs	r1, #16
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fb25 	bl	8005318 <_ZN6tflite11AlignSizeUpEjj>
 8005cce:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d114      	bne.n	8005d04 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	681c      	ldr	r4, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	68b8      	ldr	r0, [r7, #8]
 8005cf4:	47a0      	blx	r4
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74bb      	strb	r3, [r7, #18]
 8005cfa:	7cbb      	ldrb	r3, [r7, #18]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d017      	beq.n	8005d30 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8005d00:	7cbb      	ldrb	r3, [r7, #18]
 8005d02:	e01a      	b.n	8005d3a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	6898      	ldr	r0, [r3, #8]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	6912      	ldr	r2, [r2, #16]
 8005d12:	9201      	str	r2, [sp, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4603      	mov	r3, r0
 8005d18:	460a      	mov	r2, r1
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	68b8      	ldr	r0, [r7, #8]
 8005d1e:	f004 fc61 	bl	800a5e4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8005d22:	4603      	mov	r3, r0
 8005d24:	74fb      	strb	r3, [r7, #19]
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	e004      	b.n	8005d3a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e7b3      	b.n	8005ca0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3724      	adds	r7, #36	; 0x24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}

08005d42 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8005d42:	b590      	push	{r4, r7, lr}
 8005d44:	b08b      	sub	sp, #44	; 0x2c
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d22e      	bcs.n	8005dbe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4413      	add	r3, r2
 8005d70:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	7d1b      	ldrb	r3, [r3, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01d      	beq.n	8005db6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7e:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	681c      	ldr	r4, [r3, #0]
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	47a0      	blx	r4
 8005d94:	4603      	mov	r3, r0
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	7efb      	ldrb	r3, [r7, #27]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8005d9e:	7efb      	ldrb	r3, [r7, #27]
 8005da0:	e00e      	b.n	8005dc0 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4619      	mov	r1, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	440a      	add	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	3301      	adds	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	3301      	adds	r3, #1
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	e7cc      	b.n	8005d58 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	372c      	adds	r7, #44	; 0x2c
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fbfa 	bl	80055d0 <_ZNK6tflite6Tensor6bufferEv>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4619      	mov	r1, r3
 8005de0:	6838      	ldr	r0, [r7, #0]
 8005de2:	f001 f9fd 	bl	80071e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8005de6:	6138      	str	r0, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8005dee:	6938      	ldr	r0, [r7, #16]
 8005df0:	f7ff fc65 	bl	80056be <_ZNK6tflite6Buffer4dataEv>
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f001 f8a4 	bl	8006f4a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f001 f9f2 	bl	80071fc <_ZNK11flatbuffers6VectorIhE4dataEv>
 8005e18:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b08d      	sub	sp, #52	; 0x34
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 8005e3a:	f004 ff99 	bl	800ad70 <abort>

  *result = {};
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	4618      	mov	r0, r3
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	461a      	mov	r2, r3
 8005e46:	2100      	movs	r1, #0
 8005e48:	f005 f832 	bl	800aeb0 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff f989 	bl	8005164 <_ZNK6tflite6Tensor4typeEv>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f7fd fe20 	bl	8003aa0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 8005e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e72:	e127      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fbc8 	bl	800560a <_ZNK6tflite6Tensor11is_variableEv>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff9e 	bl	8005dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e90:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	751a      	strb	r2, [r3, #20]
 8005ea0:	e002      	b.n	8005ea8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eaa:	f103 0118 	add.w	r1, r3, #24
 8005eae:	f107 0210 	add.w	r2, r7, #16
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff fab3 	bl	8005420 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8005ec8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ecc:	e0fa      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff f93a 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee6:	4a79      	ldr	r2, [pc, #484]	; (80060cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 8005ee8:	609a      	str	r2, [r3, #8]
 8005eea:	e013      	b.n	8005f14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff f92b 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f001 f98a 	bl	8007214 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005f06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8005f0e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005f12:	e0d7      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fb6a 	bl	80055ee <_ZNK6tflite6Tensor12quantizationEv>
 8005f1a:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d021      	beq.n	8005f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 8005f22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f24:	f7ff fb29 	bl	800557a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8005f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f30:	f7ff fb23 	bl	800557a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f815 	bl	8006f66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8005f3c:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8005f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f44:	f7ff fb27 	bl	8005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8005f48:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 8005f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f50:	f7ff fb21 	bl	8005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f83c 	bl	8006fd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8005f5c:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8005f66:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80aa 	beq.w	80060c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8005f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f70:	f7ff fb03 	bl	800557a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 f803 	bl	8006f84 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8005f7e:	eef0 7a40 	vmov.f32	s15, s0
 8005f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f84:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8005f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8a:	f7ff fb04 	bl	8005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f82c 	bl	8006ff0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
    result->params.zero_point =
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9e:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8005fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa2:	f7ff faea 	bl	800557a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 ffdc 	bl	8006f66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	210c      	movs	r1, #12
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	4798      	blx	r3
 8005fc8:	4603      	mov	r3, r0
 8005fca:	e008      	b.n	8005fde <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	210c      	movs	r1, #12
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8005fde:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d105      	bne.n	8005ff2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 8005fe6:	493a      	ldr	r1, [pc, #232]	; (80060d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8005fe8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fea:	f7fd fc17 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e068      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006000:	6a38      	ldr	r0, [r7, #32]
 8006002:	f7fd fb81 	bl	8003708 <TfLiteIntArrayGetSizeInBytes>
 8006006:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006008:	2204      	movs	r2, #4
 800600a:	4619      	mov	r1, r3
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	47a0      	blx	r4
 8006010:	4603      	mov	r3, r0
 8006012:	e00c      	b.n	800602e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800601c:	6a38      	ldr	r0, [r7, #32]
 800601e:	f7fd fb73 	bl	8003708 <TfLiteIntArrayGetSizeInBytes>
 8006022:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006024:	2204      	movs	r2, #4
 8006026:	4619      	mov	r1, r3
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	47a0      	blx	r4
 800602c:	4603      	mov	r3, r0
    quantization->zero_point =
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800603a:	4926      	ldr	r1, [pc, #152]	; (80060d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800603c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800603e:	f7fd fbed 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8006042:	2301      	movs	r3, #1
 8006044:	e03e      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006048:	f7ff fa97 	bl	800557a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800604c:	4602      	mov	r2, r0
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 f8f7 	bl	8007246 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006058:	4603      	mov	r3, r0
 800605a:	76fb      	strb	r3, [r7, #27]
 800605c:	7efb      	ldrb	r3, [r7, #27]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 8006062:	7efb      	ldrb	r3, [r7, #27]
 8006064:	e02e      	b.n	80060c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8006076:	2300      	movs	r3, #0
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800607a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	429a      	cmp	r2, r3
 8006080:	da12      	bge.n	80060a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8006082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006084:	f7ff fa87 	bl	8005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006088:	4602      	mov	r2, r0
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f000 ffae 	bl	8006ff0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	4602      	mov	r2, r0
 800609e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	3301      	adds	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	e7e8      	b.n	800607a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 80060a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060aa:	f7ff fa82 	bl	80055b2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3734      	adds	r7, #52	; 0x34
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd90      	pop	{r4, r7, pc}
 80060cc:	08012908 	.word	0x08012908
 80060d0:	0800f0c4 	.word	0x0800f0c4
 80060d4:	0800f0f4 	.word	0x0800f0f4

080060d8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  *result = {};
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	6053      	str	r3, [r2, #4]
 80060f0:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7ff f836 	bl	8005164 <_ZNK6tflite6Tensor4typeEv>
 80060f8:	4603      	mov	r3, r0
 80060fa:	4618      	mov	r0, r3
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	3308      	adds	r3, #8
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	f7fd fccc 	bl	8003aa0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	e027      	b.n	8006166 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68b8      	ldr	r0, [r7, #8]
 800611a:	f7ff fe55 	bl	8005dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800611e:	4602      	mov	r2, r0
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8006124:	68b8      	ldr	r0, [r7, #8]
 8006126:	f7ff f80f 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800613e:	605a      	str	r2, [r3, #4]
 8006140:	e010      	b.n	8006164 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006142:	68b8      	ldr	r0, [r7, #8]
 8006144:	f7ff f800 	bl	8005148 <_ZNK6tflite6Tensor5shapeEv>
 8006148:	4602      	mov	r2, r0
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	3304      	adds	r3, #4
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 f85f 	bl	8007214 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006156:	4603      	mov	r3, r0
 8006158:	75bb      	strb	r3, [r7, #22]
 800615a:	7dbb      	ldrb	r3, [r7, #22]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8006160:	7dbb      	ldrb	r3, [r7, #22]
 8006162:	e000      	b.n	8006166 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	08012908 	.word	0x08012908

08006174 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	741a      	strb	r2, [r3, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	615a      	str	r2, [r3, #20]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	619a      	str	r2, [r3, #24]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	0801292c 	.word	0x0801292c

080061b8 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	0801292c 	.word	0x0801292c

080061d8 <_ZN6tflite14MicroAllocatorD0Ev>:
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ffe9 	bl	80061b8 <_ZN6tflite14MicroAllocatorD1Ev>
 80061e6:	211c      	movs	r1, #28
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f004 fcda 	bl	800aba2 <_ZdlPvj>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006204:	2110      	movs	r1, #16
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff f857 	bl	80052ba <_ZN6tflite14AlignPointerUpEPhj>
 800620c:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	441a      	add	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 ffe4 	bl	80091ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8006224:	4603      	mov	r3, r0
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f805 	bl	8006238 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800622e:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8006248:	f004 fd92 	bl	800ad70 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8006252:	f004 fd8d 	bl	800ad70 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800625e:	2204      	movs	r2, #4
 8006260:	211c      	movs	r1, #28
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
 8006266:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4619      	mov	r1, r3
 800626c:	201c      	movs	r0, #28
 800626e:	f7fd fb08 	bl	8003882 <_ZnwjPv>
 8006272:	4604      	mov	r4, r0
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4620      	mov	r0, r4
 800627a:	f7ff ff7b 	bl	8006174 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800627e:	60bc      	str	r4, [r7, #8]
  return allocator;
 8006280:	68bb      	ldr	r3, [r7, #8]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}
	...

0800628c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800628c:	b5b0      	push	{r4, r5, r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800629c:	f004 fd68 	bl	800ad70 <abort>

  if (model_is_allocating_) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7c1b      	ldrb	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4936      	ldr	r1, [pc, #216]	; (8006388 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd fab4 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e063      	b.n	8006380 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6858      	ldr	r0, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 80062cc:	2204      	movs	r2, #4
 80062ce:	2108      	movs	r1, #8
 80062d0:	4798      	blx	r3
 80062d2:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 80062d4:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 80062d6:	4619      	mov	r1, r3
 80062d8:	2008      	movs	r0, #8
 80062da:	f7fd fad2 	bl	8003882 <_ZnwjPv>
 80062de:	4604      	mov	r4, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4619      	mov	r1, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7ff fa60 	bl	80057ac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fd6b 	bl	8006dcc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 8006306:	2300      	movs	r3, #0
 8006308:	e03a      	b.n	8006380 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685d      	ldr	r5, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8006318:	6838      	ldr	r0, [r7, #0]
 800631a:	f7fe fe03 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 800631e:	4603      	mov	r3, r0
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fe6f 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006326:	4603      	mov	r3, r0
 8006328:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800632a:	2204      	movs	r2, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4628      	mov	r0, r5
 8006330:	47a0      	blx	r4
 8006332:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800633a:	4814      	ldr	r0, [pc, #80]	; (800638c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800633c:	f001 f98e 	bl	800765c <_Z11MicroPrintfPKcz>
    return nullptr;
 8006340:	2300      	movs	r3, #0
 8006342:	e01d      	b.n	8006380 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	331c      	adds	r3, #28
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3318      	adds	r3, #24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800637e:	68bb      	ldr	r3, [r7, #8]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bdb0      	pop	{r4, r5, r7, pc}
 8006388:	0800f124 	.word	0x0800f124
 800638c:	0800f17c 	.word	0x0800f17c

08006390 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b08b      	sub	sp, #44	; 0x2c
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	f083 0301 	eor.w	r3, r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4936      	ldr	r1, [pc, #216]	; (800648c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fd fa32 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e062      	b.n	8006482 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f7fe fdaf 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 80063c6:	4603      	mov	r3, r0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe1b 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80063ce:	4602      	mov	r2, r0
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bf34      	ite	cc
 80063d6:	2301      	movcc	r3, #1
 80063d8:	2300      	movcs	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04c      	beq.n	800647a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f7fe fd9f 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 80063e6:	4603      	mov	r3, r0
 80063e8:	69f9      	ldr	r1, [r7, #28]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fe18 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80063f0:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 80063f8:	f004 fcba 	bl	800ad70 <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3330      	adds	r3, #48	; 0x30
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6952      	ldr	r2, [r2, #20]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	e032      	b.n	8006482 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	332c      	adds	r3, #44	; 0x2c
 8006422:	681c      	ldr	r4, [r3, #0]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	460b      	mov	r3, r1
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	47a0      	blx	r4
 800643e:	4603      	mov	r3, r0
 8006440:	75bb      	strb	r3, [r7, #22]
 8006442:	7dbb      	ldrb	r3, [r7, #22]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 8006448:	7dbb      	ldrb	r3, [r7, #22]
 800644a:	e01a      	b.n	8006482 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3320      	adds	r3, #32
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	00d2      	lsls	r2, r2, #3
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	440a      	add	r2, r1
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	4798      	blx	r3
 8006464:	4603      	mov	r3, r0
 8006466:	757b      	strb	r3, [r7, #21]
 8006468:	7d7b      	ldrb	r3, [r7, #21]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800646e:	7d7b      	ldrb	r3, [r7, #21]
 8006470:	e007      	b.n	8006482 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3301      	adds	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e7a2      	b.n	80063c0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3724      	adds	r7, #36	; 0x24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
 800648a:	bf00      	nop
 800648c:	0800f1ac 	.word	0x0800f1ac

08006490 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6858      	ldr	r0, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2210      	movs	r2, #16
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4798      	blx	r3
 80064ae:	4603      	mov	r3, r0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fc9d 	bl	8006e06 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80064cc:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d20e      	bcs.n	80064fe <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4413      	add	r3, r2
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d102      	bne.n	80064f6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e7eb      	b.n	80064d6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b0b      	cmp	r3, #11
 8006502:	d908      	bls.n	8006516 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	220c      	movs	r2, #12
 800650a:	4913      	ldr	r1, [pc, #76]	; (8006558 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd f985 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8006512:	2301      	movs	r3, #1
 8006514:	e01c      	b.n	8006550 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	461a      	mov	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	461a      	mov	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	0800f1f8 	.word	0x0800f1f8

0800655c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3308      	adds	r3, #8
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc47 	bl	8006e06 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006578:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	429a      	cmp	r2, r3
 8006586:	d211      	bcs.n	80065ac <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4413      	add	r3, r2
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d105      	bne.n	80065a4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	3301      	adds	r3, #1
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e7e8      	b.n	800657e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6858      	ldr	r0, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6952      	ldr	r2, [r2, #20]
 80065be:	320c      	adds	r2, #12
 80065c0:	00d1      	lsls	r1, r2, #3
 80065c2:	2204      	movs	r2, #4
 80065c4:	4798      	blx	r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	e000      	b.n	80065d6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80065f2:	f004 fbbd 	bl	800ad70 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	68b8      	ldr	r0, [r7, #8]
 80065fc:	f7fe fc92 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006600:	4603      	mov	r3, r0
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fcfe 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006608:	4602      	mov	r2, r0
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4293      	cmp	r3, r2
 800660e:	bf34      	ite	cc
 8006610:	2301      	movcc	r3, #1
 8006612:	2300      	movcs	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d034      	beq.n	8006684 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800661a:	68b8      	ldr	r0, [r7, #8]
 800661c:	f7fe fc82 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006620:	4603      	mov	r3, r0
 8006622:	69f9      	ldr	r1, [r7, #28]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fcfb 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800662a:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8006632:	f004 fb9d 	bl	800ad70 <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8006636:	69b8      	ldr	r0, [r7, #24]
 8006638:	f7fe fc82 	bl	8004f40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800663c:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6858      	ldr	r0, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	212c      	movs	r1, #44	; 0x2c
 8006650:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 8006654:	2204      	movs	r2, #4
 8006656:	4798      	blx	r3
 8006658:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d107      	bne.n	8006670 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	490a      	ldr	r1, [pc, #40]	; (8006690 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 8006666:	4618      	mov	r0, r3
 8006668:	f7fd f8d8 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800666c:	2301      	movs	r3, #1
 800666e:	e00a      	b.n	8006686 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	e7ba      	b.n	80065fa <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	0800f230 	.word	0x0800f230

08006694 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 80066a2:	68b8      	ldr	r0, [r7, #8]
 80066a4:	f7fe fc3e 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f7fe fcb6 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80066b4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 80066bc:	f004 fb58 	bl	800ad70 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3324      	adds	r3, #36	; 0x24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	4798      	blx	r3
 80066cc:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3328      	adds	r3, #40	; 0x28
 80066d4:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 80066d6:	2300      	movs	r3, #0
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	47a0      	blx	r4
 80066e8:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4914      	ldr	r1, [pc, #80]	; (8006750 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd f88c 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 8006704:	2300      	movs	r3, #0
 8006706:	e01f      	b.n	8006748 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	6859      	ldr	r1, [r3, #4]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4413      	add	r3, r2
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8006746:	693b      	ldr	r3, [r7, #16]
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	0800f268 	.word	0x0800f268

08006754 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b089      	sub	sp, #36	; 0x24
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f7fe fbde 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006768:	4602      	mov	r2, r0
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fe fc56 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006774:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800677c:	f004 faf8 	bl	800ad70 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6858      	ldr	r0, [r3, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3310      	adds	r3, #16
 800678c:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800678e:	2204      	movs	r2, #4
 8006790:	2140      	movs	r1, #64	; 0x40
 8006792:	4798      	blx	r3
 8006794:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3328      	adds	r3, #40	; 0x28
 800679c:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800679e:	2301      	movs	r3, #1
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	47a0      	blx	r4
 80067b0:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4914      	ldr	r1, [pc, #80]	; (8006818 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd f828 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e01f      	b.n	8006810 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800680e:	693b      	ldr	r3, [r7, #16]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd90      	pop	{r4, r7, pc}
 8006818:	0800f2b4 	.word	0x0800f2b4

0800681c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4610      	mov	r0, r2
 8006834:	4798      	blx	r3
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8006840:	b5b0      	push	{r4, r5, r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8006852:	f004 fa8d 	bl	800ad70 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	68b8      	ldr	r0, [r7, #8]
 800685c:	f7fe fb62 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006860:	4603      	mov	r3, r0
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fbce 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	4293      	cmp	r3, r2
 800686e:	bf34      	ite	cc
 8006870:	2301      	movcc	r3, #1
 8006872:	2300      	movcs	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d076      	beq.n	8006968 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f7fe fb52 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006880:	4603      	mov	r3, r0
 8006882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fbcb 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800688a:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8006892:	f004 fa6d 	bl	800ad70 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 8006896:	69f8      	ldr	r0, [r7, #28]
 8006898:	f7fe fee7 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 800689c:	4603      	mov	r3, r0
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fbce 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80068a4:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6858      	ldr	r0, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4613      	mov	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	2204      	movs	r2, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	47a0      	blx	r4
 80068c4:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10c      	bne.n	80068e6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68d8      	ldr	r0, [r3, #12]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	461a      	mov	r2, r3
 80068dc:	4925      	ldr	r1, [pc, #148]	; (8006974 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 80068de:	f7fc ff9d 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e041      	b.n	800696a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 80068e6:	2300      	movs	r3, #0
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d230      	bcs.n	8006954 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80068f6:	69f8      	ldr	r0, [r7, #28]
 80068f8:	f7fe feb7 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 80068fc:	4603      	mov	r3, r0
 80068fe:	6a39      	ldr	r1, [r7, #32]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fbab 	bl	800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006906:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f7fe ff03 	bl	8005714 <_ZNK6tflite5Model7buffersEv>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	460b      	mov	r3, r1
 8006926:	4602      	mov	r2, r0
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fbd4 	bl	80060d8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8006930:	4603      	mov	r3, r0
 8006932:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	490d      	ldr	r1, [pc, #52]	; (8006978 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 8006942:	4618      	mov	r0, r3
 8006944:	f7fc ff6a 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 8006948:	2301      	movs	r3, #1
 800694a:	e00e      	b.n	800696a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	3301      	adds	r3, #1
 8006950:	623b      	str	r3, [r7, #32]
 8006952:	e7ca      	b.n	80068ea <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	3301      	adds	r3, #1
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	e778      	b.n	800685a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bdb0      	pop	{r4, r5, r7, pc}
 8006972:	bf00      	nop
 8006974:	0800f2f8 	.word	0x0800f2f8
 8006978:	0800f340 	.word	0x0800f340

0800697c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	68b8      	ldr	r0, [r7, #8]
 800698e:	f7fe fe6c 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8006992:	4603      	mov	r3, r0
 8006994:	4618      	mov	r0, r3
 8006996:	f000 fb53 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4293      	cmp	r3, r2
 80069a0:	bf34      	ite	cc
 80069a2:	2301      	movcc	r3, #1
 80069a4:	2300      	movcs	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04f      	beq.n	8006a4c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f7fe fe5c 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fb50 	bl	800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80069bc:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 80069be:	69b8      	ldr	r0, [r7, #24]
 80069c0:	f7fe fe23 	bl	800560a <_ZNK6tflite6Tensor11is_variableEv>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03c      	beq.n	8006a44 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	4613      	mov	r3, r2
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	f107 0210 	add.w	r2, r7, #16
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fd7e 	bl	80054e2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	e02c      	b.n	8006a4e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6858      	ldr	r0, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8006a14:	2210      	movs	r2, #16
 8006a16:	47a8      	blx	r5
 8006a18:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 8006a1a:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d108      	bne.n	8006a44 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4907      	ldr	r1, [pc, #28]	; (8006a58 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fc feee 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e004      	b.n	8006a4e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e79f      	b.n	800698c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bdb0      	pop	{r4, r5, r7, pc}
 8006a56:	bf00      	nop
 8006a58:	0800f360 	.word	0x0800f360

08006a5c <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6858      	ldr	r0, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8006a72:	2204      	movs	r2, #4
 8006a74:	2140      	movs	r1, #64	; 0x40
 8006a76:	4798      	blx	r3
 8006a78:	4603      	mov	r3, r0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8006a82:	b5b0      	push	{r4, r5, r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8006a94:	68b8      	ldr	r0, [r7, #8]
 8006a96:	f7fe fa45 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7fe fabd 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fdde 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 fad1 	bl	800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006aba:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8006abc:	68b8      	ldr	r0, [r7, #8]
 8006abe:	f7fe fe29 	bl	8005714 <_ZNK6tflite5Model7buffersEv>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	9201      	str	r2, [sp, #4]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7ff f9a5 	bl	8005e24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8006ada:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bdb0      	pop	{r4, r5, r7, pc}

08006ae4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b0a5      	sub	sp, #148	; 0x94
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006af8:	68b8      	ldr	r0, [r7, #8]
 8006afa:	f7fe fa13 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8006afe:	4602      	mov	r2, r0
 8006b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fa8a 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006b0c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 8006b10:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006b14:	f7fe fda9 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fa90 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006b20:	4602      	mov	r2, r0
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8006b2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	4413      	add	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6858      	ldr	r0, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3310      	adds	r3, #16
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2204      	movs	r2, #4
 8006b46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b48:	4798      	blx	r3
 8006b4a:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 8006b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d108      	bne.n	8006b64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b58:	4985      	ldr	r1, [pc, #532]	; (8006d70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc fe5e 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8006b60:	2401      	movs	r4, #1
 8006b62:	e0ff      	b.n	8006d64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8006b64:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006b68:	f7fe fd7f 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fa66 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006b74:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4613      	mov	r3, r2
 8006b86:	460a      	mov	r2, r1
 8006b88:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006b8a:	f7fe fe45 	bl	8005818 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 8006b92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe ffaf 	bl	8005b00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8006ba8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8006bb0:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 8006bb4:	e0d6      	b.n	8006d64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8006bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006bc2:	f7fe fe43 	bl	800584c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8006bcc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 8006bd4:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 8006bd8:	e0c4      	b.n	8006d64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f913 	bl	8006e06 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006be0:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 8006be2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f804 	bl	8005bf8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8006bf6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 8006bfe:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 8006c02:	e0af      	b.n	8006d64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2110      	movs	r1, #16
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 fc04 	bl	8009418 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8006c10:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6858      	ldr	r0, [r3, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2210      	movs	r2, #16
 8006c22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c24:	4798      	blx	r3
 8006c26:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8006c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10e      	bne.n	8006c4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68d8      	ldr	r0, [r3, #12]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68d9      	ldr	r1, [r3, #12]
 8006c36:	4b4f      	ldr	r3, [pc, #316]	; (8006d74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f240 33d2 	movw	r3, #978	; 0x3d2
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 8006c42:	4a4e      	ldr	r2, [pc, #312]	; (8006d7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 8006c44:	f7fc fe03 	bl	800384e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8006c48:	2401      	movs	r4, #1
 8006c4a:	e08b      	b.n	8006d64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8006c4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006c54:	4618      	mov	r0, r3
 8006c56:	f003 fc17 	bl	800a488 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68d8      	ldr	r0, [r3, #12]
 8006c5e:	f107 0114 	add.w	r1, r7, #20
 8006c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c66:	f7ff f812 	bl	8005c8e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 8006c78:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8006c7c:	e06d      	b.n	8006d5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2110      	movs	r1, #16
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 fbbe 	bl	8009418 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8006c9c:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f003 fea9 	bl	800a9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bf34      	ite	cc
 8006cb0:	2301      	movcc	r3, #1
 8006cb2:	2300      	movcs	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68dc      	ldr	r4, [r3, #12]
 8006cbe:	f107 0314 	add.w	r3, r7, #20
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f003 fe99 	bl	800a9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ccc:	492c      	ldr	r1, [pc, #176]	; (8006d80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7fc fda4 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 8006cd4:	2401      	movs	r4, #1
 8006cd6:	e040      	b.n	8006d5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68dc      	ldr	r4, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 fb8d 	bl	8009400 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	f107 0114 	add.w	r1, r7, #20
 8006cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff f825 	bl	8005d42 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 8006d06:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8006d0a:	e026      	b.n	8006d5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	4618      	mov	r0, r3
 8006d12:	f003 fe72 	bl	800a9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8006d16:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d903      	bls.n	8006d2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d2c:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6858      	ldr	r0, [r3, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	6991      	ldr	r1, [r2, #24]
 8006d40:	2210      	movs	r2, #16
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8006d4a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 8006d52:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8006d56:	e000      	b.n	8006d5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 8006d58:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8006d5a:	f107 0314 	add.w	r3, r7, #20
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 fbe4 	bl	800a52c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8006d64:	4623      	mov	r3, r4
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	378c      	adds	r7, #140	; 0x8c
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd90      	pop	{r4, r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	0800f390 	.word	0x0800f390
 8006d74:	0800f428 	.word	0x0800f428
 8006d78:	0800f3d4 	.word	0x0800f3d4
 8006d7c:	0800f410 	.word	0x0800f410
 8006d80:	0800f444 	.word	0x0800f444

08006d84 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8006d96:	f003 ffeb 	bl	800ad70 <abort>

  if (scratch_buffer_request_count_ == 0) {
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e00e      	b.n	8006dc4 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6858      	ldr	r0, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	0091      	lsls	r1, r2, #2
 8006db8:	2204      	movs	r2, #4
 8006dba:	4798      	blx	r3
 8006dbc:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6858      	ldr	r0, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2204      	movs	r2, #4
 8006dea:	2160      	movs	r1, #96	; 0x60
 8006dec:	4798      	blx	r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	e000      	b.n	8006dfe <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 faf4 	bl	8009400 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fa4c 	bl	80052ba <_ZN6tflite14AlignPointerUpEPhj>
 8006e22:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6858      	ldr	r0, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68d9      	ldr	r1, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	f000 f9e6 	bl	8007214 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006e48:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006e76:	887b      	ldrh	r3, [r7, #2]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9fc 	bl	8007278 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8006e80:	4603      	mov	r3, r0
  }
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006e96:	887b      	ldrh	r3, [r7, #2]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa0c 	bl	80072b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8006ea0:	4603      	mov	r3, r0
  }
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006eb6:	887b      	ldrh	r3, [r7, #2]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa1c 	bl	80072f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8006ec0:	4603      	mov	r3, r0
  }
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006ed6:	887b      	ldrh	r3, [r7, #2]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa2c 	bl	8007338 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006ee0:	4603      	mov	r3, r0
  }
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa3c 	bl	8007378 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8006f00:	4603      	mov	r3, r0
  }
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa4c 	bl	80073b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8006f20:	4603      	mov	r3, r0
  }
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006f36:	887b      	ldrh	r3, [r7, #2]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa5c 	bl	80073f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8006f40:	4603      	mov	r3, r0
  }
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fa fc6d 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fa fc5f 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ffe9 	bl	8006f66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006f94:	4602      	mov	r2, r0
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d306      	bcc.n	8006faa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8006f9e:	4a0b      	ldr	r2, [pc, #44]	; (8006fcc <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8006fa0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006fa4:	480a      	ldr	r0, [pc, #40]	; (8006fd0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8006fa6:	f003 feeb 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa66 	bl	800747c <_ZNK11flatbuffers6VectorIfE4DataEv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fa4b 	bl	8007450 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8006fba:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	0800f494 	.word	0x0800f494
 8006fcc:	0800f4a0 	.word	0x0800f4a0
 8006fd0:	0800f568 	.word	0x0800f568

08006fd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fa fc28 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ffea 	bl	8006fd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007000:	4602      	mov	r2, r0
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	4293      	cmp	r3, r2
 8007006:	d306      	bcc.n	8007016 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800700a:	4a0b      	ldr	r2, [pc, #44]	; (8007038 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800700c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007010:	480a      	ldr	r0, [pc, #40]	; (800703c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8007012:	f003 feb5 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa52 	bl	80074c0 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800701c:	4603      	mov	r3, r0
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fa37 	bl	8007494 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
  }
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	0800f494 	.word	0x0800f494
 8007038:	0800f5e8 	.word	0x0800f5e8
 800703c:	0800f568 	.word	0x0800f568

08007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7fa fbf2 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007052:	4603      	mov	r3, r0
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff ffea 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800706c:	4602      	mov	r2, r0
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	4293      	cmp	r3, r2
 8007072:	d306      	bcc.n	8007082 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8007074:	4b09      	ldr	r3, [pc, #36]	; (800709c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8007076:	4a0a      	ldr	r2, [pc, #40]	; (80070a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8007078:	f44f 7183 	mov.w	r1, #262	; 0x106
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800707e:	f003 fe7f 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa3c 	bl	8007500 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8007088:	4603      	mov	r3, r0
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fa23 	bl	80074d8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007092:	4603      	mov	r3, r0
  }
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	0800f494 	.word	0x0800f494
 80070a0:	0800f790 	.word	0x0800f790
 80070a4:	0800f568 	.word	0x0800f568

080070a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fd ff98 	bl	8004fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80070b8:	4602      	mov	r2, r0
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d306      	bcc.n	80070ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 80070c2:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 80070c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80070c8:	4809      	ldr	r0, [pc, #36]	; (80070f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 80070ca:	f003 fe59 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa36 	bl	8007540 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 80070d4:	4603      	mov	r3, r0
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fa1d 	bl	8007518 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 80070de:	4603      	mov	r3, r0
  }
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	0800f494 	.word	0x0800f494
 80070ec:	0800f888 	.word	0x0800f888
 80070f0:	0800f568 	.word	0x0800f568

080070f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fa fb98 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007106:	4603      	mov	r3, r0
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff ffea 	bl	80070f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8007120:	4602      	mov	r2, r0
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4293      	cmp	r3, r2
 8007126:	d306      	bcc.n	8007136 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800712c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8007132:	f003 fe25 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa22 	bl	8007580 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800713c:	4603      	mov	r3, r0
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa09 	bl	8007558 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8007146:	4603      	mov	r3, r0
  }
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	0800f494 	.word	0x0800f494
 8007154:	0800fa80 	.word	0x0800fa80
 8007158:	0800f568 	.word	0x0800f568

0800715c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7fa fb64 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800716e:	4603      	mov	r3, r0
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ffea 	bl	800715c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007188:	4602      	mov	r2, r0
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	4293      	cmp	r3, r2
 800718e:	d306      	bcc.n	800719e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8007190:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8007194:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007198:	4809      	ldr	r0, [pc, #36]	; (80071c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800719a:	f003 fdf1 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa0e 	bl	80075c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 80071a4:	4603      	mov	r3, r0
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f9f5 	bl	8007598 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 80071ae:	4603      	mov	r3, r0
  }
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	0800f494 	.word	0x0800f494
 80071bc:	0800fb78 	.word	0x0800fb78
 80071c0:	0800f568 	.word	0x0800f568

080071c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fd ff25 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff8f 	bl	8007110 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 80071f2:	4603      	mov	r3, r0
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f917 	bl	8007438 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800720a:	4603      	mov	r3, r0
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007228:	f003 fda2 	bl	800ad70 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007232:	f003 fd9d 	bl	800ad70 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800725a:	f003 fd89 	bl	800ad70 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007264:	f003 fd84 	bl	800ad70 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007284:	887b      	ldrh	r3, [r7, #2]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7f9 ff0b 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800728e:	4603      	mov	r3, r0
 8007290:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	4413      	add	r3, r2
 8007298:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800729a:	89fb      	ldrh	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 80072a0:	68b8      	ldr	r0, [r7, #8]
 80072a2:	f7fa fae1 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4413      	add	r3, r2
                        : nullptr;
 80072ac:	e000      	b.n	80072b0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80072ae:	2300      	movs	r3, #0
  }
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80072c4:	887b      	ldrh	r3, [r7, #2]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7f9 feeb 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80072ce:	4603      	mov	r3, r0
 80072d0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	89fb      	ldrh	r3, [r7, #14]
 80072d6:	4413      	add	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80072da:	89fb      	ldrh	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 80072e0:	68b8      	ldr	r0, [r7, #8]
 80072e2:	f7fa fac1 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80072e6:	4602      	mov	r2, r0
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4413      	add	r3, r2
                        : nullptr;
 80072ec:	e000      	b.n	80072f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80072ee:	2300      	movs	r3, #0
  }
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7f9 fecb 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800730e:	4603      	mov	r3, r0
 8007310:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	4413      	add	r3, r2
 8007318:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800731a:	89fb      	ldrh	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f7fa faa1 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007326:	4602      	mov	r2, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4413      	add	r3, r2
                        : nullptr;
 800732c:	e000      	b.n	8007330 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800732e:	2300      	movs	r3, #0
  }
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007344:	887b      	ldrh	r3, [r7, #2]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7f9 feab 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800734e:	4603      	mov	r3, r0
 8007350:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	4413      	add	r3, r2
 8007358:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800735a:	89fb      	ldrh	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f7fa fa81 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007366:	4602      	mov	r2, r0
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4413      	add	r3, r2
                        : nullptr;
 800736c:	e000      	b.n	8007370 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800736e:	2300      	movs	r3, #0
  }
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7f9 fe8b 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800738e:	4603      	mov	r3, r0
 8007390:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	4413      	add	r3, r2
 8007398:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800739a:	89fb      	ldrh	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 80073a0:	68b8      	ldr	r0, [r7, #8]
 80073a2:	f7fa fa61 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4413      	add	r3, r2
                        : nullptr;
 80073ac:	e000      	b.n	80073b0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80073ae:	2300      	movs	r3, #0
  }
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7f9 fe6b 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80073ce:	4603      	mov	r3, r0
 80073d0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	4413      	add	r3, r2
 80073d8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 80073e0:	68b8      	ldr	r0, [r7, #8]
 80073e2:	f7fa fa41 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4413      	add	r3, r2
                        : nullptr;
 80073ec:	e000      	b.n	80073f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80073ee:	2300      	movs	r3, #0
  }
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7f9 fe4b 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800740e:	4603      	mov	r3, r0
 8007410:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	4413      	add	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d006      	beq.n	800742e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8007420:	68b8      	ldr	r0, [r7, #8]
 8007422:	f7fa fa21 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007426:	4602      	mov	r2, r0
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4413      	add	r3, r2
                        : nullptr;
 800742c:	e000      	b.n	8007430 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800742e:	2300      	movs	r3, #0
  }
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
  }
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	edd3 7a00 	vldr	s15, [r3]
 8007466:	eeb0 0a67 	vmov.f32	s0, s15
 800746a:	f7fc fec7 	bl	80041fc <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800746e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007472:	eeb0 0a67 	vmov.f32	s0, s15
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3304      	adds	r3, #4
  }
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	f7fd fddd 	bl	800506c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
  }
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
  }
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fa f9bb 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80074f2:	4602      	mov	r2, r0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4413      	add	r3, r2
  }
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
  }
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7fa f99b 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007532:	4602      	mov	r2, r0
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4413      	add	r3, r2
  }
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
  }
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fa f97b 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007572:	4602      	mov	r2, r0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4413      	add	r3, r2
  }
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
  }
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fa f95b 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4413      	add	r3, r2
  }
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3304      	adds	r3, #4
  }
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe f8af 	bl	800574c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08012914 	.word	0x08012914

080075fc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ffe7 	bl	80075d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800760a:	2108      	movs	r1, #8
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f003 fac8 	bl	800aba2 <_ZdlPvj>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b0c2      	sub	sp, #264	; 0x108
 8007620:	af00      	add	r7, sp, #0
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	6018      	str	r0, [r3, #0]
 8007626:	463b      	mov	r3, r7
 8007628:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800762a:	463b      	mov	r3, r7
 800762c:	1d3a      	adds	r2, r7, #4
 800762e:	f107 0008 	add.w	r0, r7, #8
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800763a:	f001 fc01 	bl	8008e40 <MicroVsnprintf>
  DebugLog(log_buffer);
 800763e:	f107 0308 	add.w	r3, r7, #8
 8007642:	4618      	mov	r0, r3
 8007644:	f7fd fc56 	bl	8004ef4 <DebugLog>
  DebugLog("\r\n");
 8007648:	4803      	ldr	r0, [pc, #12]	; (8007658 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800764a:	f7fd fc53 	bl	8004ef4 <DebugLog>
#endif
}
 800764e:	bf00      	nop
 8007650:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	0800fc74 	.word	0x0800fc74

0800765c <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800765c:	b40f      	push	{r0, r1, r2, r3}
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	6938      	ldr	r0, [r7, #16]
 800766e:	f7ff ffd5 	bl	800761c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800767c:	b004      	add	sp, #16
 800767e:	4770      	bx	lr

08007680 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	68b8      	ldr	r0, [r7, #8]
 8007690:	f7ff ffc4 	bl	800761c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	4610      	mov	r0, r2
 80076d0:	4798      	blx	r3
 80076d2:	4602      	mov	r2, r0
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]
    }
  }
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6858      	ldr	r0, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	4611      	mov	r1, r2
 8007706:	4798      	blx	r3
    }
  }
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	2b20      	cmp	r3, #32
 8007720:	d102      	bne.n	8007728 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	e007      	b.n	8007738 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	4618      	mov	r0, r3
 8007730:	f7fc feb0 	bl	8004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007734:	4603      	mov	r3, r0
 8007736:	bf00      	nop
  }
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 800774e:	4a10      	ldr	r2, [pc, #64]	; (8007790 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	611a      	str	r2, [r3, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd fbd3 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	619a      	str	r2, [r3, #24]
  }
}
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	08012994 	.word	0x08012994

08007794 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	08012994 	.word	0x08012994

080077b4 <_ZN6tflite10MicroGraphD0Ev>:
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ffe9 	bl	8007794 <_ZN6tflite10MicroGraphD1Ev>
 80077c2:	211c      	movs	r1, #28
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f003 f9ec 	bl	800aba2 <_ZdlPvj>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80077e2:	2300      	movs	r3, #0
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fd fc0a 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bf34      	ite	cc
 80077f8:	2301      	movcc	r3, #1
 80077fa:	2300      	movcs	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04f      	beq.n	80078a2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8007802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	4611      	mov	r1, r2
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fbb2 	bl	8004f7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007816:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8007818:	2300      	movs	r3, #0
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	6a3a      	ldr	r2, [r7, #32]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d23a      	bcs.n	800789a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	212c      	movs	r1, #44	; 0x2c
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	4413      	add	r3, r2
      TfLiteNode* node =
 800783a:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	212c      	movs	r1, #44	; 0x2c
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b20      	cmp	r3, #32
 800785c:	d106      	bne.n	800786c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e004      	b.n	8007876 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6850      	ldr	r0, [r2, #4]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	69b9      	ldr	r1, [r7, #24]
 800788a:	4798      	blx	r3
 800788c:	4602      	mov	r2, r0
        node->user_data =
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	3301      	adds	r3, #1
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	e7c0      	b.n	800781c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	3301      	adds	r3, #1
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
 80078a0:	e7a1      	b.n	80077e6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3728      	adds	r7, #40	; 0x28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80078c2:	2300      	movs	r3, #0
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fd fb9a 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf34      	ite	cc
 80078d8:	2301      	movcc	r3, #1
 80078da:	2300      	movcs	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d053      	beq.n	800798a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80078e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fd fb42 	bl	8004f7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80078f6:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 80078f8:	2300      	movs	r3, #0
 80078fa:	623b      	str	r3, [r7, #32]
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	d23e      	bcs.n	8007982 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	212c      	movs	r1, #44	; 0x2c
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
      TfLiteNode* node =
 800791a:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	212c      	movs	r1, #44	; 0x2c
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d016      	beq.n	800796c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6852      	ldr	r2, [r2, #4]
 8007946:	6979      	ldr	r1, [r7, #20]
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 8007956:	6938      	ldr	r0, [r7, #16]
 8007958:	f7ff fedb 	bl	8007712 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800795c:	4601      	mov	r1, r0
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	480e      	ldr	r0, [pc, #56]	; (800799c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 8007964:	f7ff fe7a 	bl	800765c <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 8007968:	2301      	movs	r3, #1
 800796a:	e012      	b.n	8007992 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fdf1 	bl	800655c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	3301      	adds	r3, #1
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	e7bc      	b.n	80078fc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	3301      	adds	r3, #1
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
 8007988:	e79d      	b.n	80078c6 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	08010360 	.word	0x08010360

080079a0 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fd fb24 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80079bc:	4602      	mov	r2, r0
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	bf34      	ite	cc
 80079c4:	2301      	movcc	r3, #1
 80079c6:	2300      	movcs	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d040      	beq.n	8007a50 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fd facc 	bl	8004f7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80079e2:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d22b      	bcs.n	8007a48 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	212c      	movs	r1, #44	; 0x2c
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	4413      	add	r3, r2
      TfLiteNode* node =
 8007a06:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	212c      	movs	r1, #44	; 0x2c
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d007      	beq.n	8007a40 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6850      	ldr	r0, [r2, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	6912      	ldr	r2, [r2, #16]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	3301      	adds	r3, #1
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	e7cf      	b.n	80079e8 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	e7b0      	b.n	80079b2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8007a60:	b5b0      	push	{r4, r5, r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd fac1 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007a82:	4602      	mov	r2, r0
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	bf94      	ite	ls
 8007a8a:	2301      	movls	r3, #1
 8007a8c:	2300      	movhi	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd fab3 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	483c      	ldr	r0, [pc, #240]	; (8007b98 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 8007aa6:	f7ff fdd9 	bl	800765c <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8007aaa:	2401      	movs	r4, #1
 8007aac:	e06e      	b.n	8007b8c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fa60 	bl	8004f7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007aba:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d25d      	bcs.n	8007b84 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	212c      	movs	r1, #44	; 0x2c
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
    TfLiteNode* node =
 8007ade:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	212c      	movs	r1, #44	; 0x2c
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8007afa:	6978      	ldr	r0, [r7, #20]
 8007afc:	f7ff fe09 	bl	8007712 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8007b00:	4601      	mov	r1, r0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b08:	f107 0308 	add.w	r3, r7, #8
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fdc6 	bl	800769e <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 8007b1a:	f003 f929 	bl	800ad70 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6852      	ldr	r2, [r2, #4]
 8007b26:	69b9      	ldr	r1, [r7, #24]
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 8007b42:	7cfb      	ldrb	r3, [r7, #19]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10b      	bne.n	8007b60 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8007b48:	6978      	ldr	r0, [r7, #20]
 8007b4a:	f7ff fde2 	bl	8007712 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8007b4e:	4601      	mov	r1, r0
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b54:	4811      	ldr	r0, [pc, #68]	; (8007b9c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 8007b56:	f7ff fd81 	bl	800765c <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 8007b5a:	2401      	movs	r4, #1
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	e006      	b.n	8007b6e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8007b60:	7cfb      	ldrb	r3, [r7, #19]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 8007b66:	7cfc      	ldrb	r4, [r7, #19]
 8007b68:	2500      	movs	r5, #0
 8007b6a:	e000      	b.n	8007b6e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8007b6c:	2501      	movs	r5, #1
 8007b6e:	f107 0308 	add.w	r3, r7, #8
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fdb5 	bl	80076e2 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8007b78:	2d01      	cmp	r5, #1
 8007b7a:	d107      	bne.n	8007b8c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	3301      	adds	r3, #1
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
 8007b82:	e79d      	b.n	8007ac0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a3a      	ldr	r2, [r7, #32]
 8007b88:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	4623      	mov	r3, r4
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3728      	adds	r7, #40	; 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bdb0      	pop	{r4, r5, r7, pc}
 8007b96:	bf00      	nop
 8007b98:	08010398 	.word	0x08010398
 8007b9c:	080103cc 	.word	0x080103cc

08007ba0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	; 0x28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007ba8:	2300      	movs	r3, #0
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fd fa27 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bf34      	ite	cc
 8007bbe:	2301      	movcc	r3, #1
 8007bc0:	2300      	movcs	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d077      	beq.n	8007cb8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff faf8 	bl	80071c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8007bd4:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	69b8      	ldr	r0, [r7, #24]
 8007bdc:	f7fd fd45 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8007be0:	4603      	mov	r3, r0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fa2c 	bl	8007040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bf34      	ite	cc
 8007bf0:	2301      	movcc	r3, #1
 8007bf2:	2300      	movcs	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d05a      	beq.n	8007cb0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 8007bfa:	69b8      	ldr	r0, [r7, #24]
 8007bfc:	f7fd fd35 	bl	800566a <_ZNK6tflite8SubGraph7tensorsEv>
 8007c00:	4603      	mov	r3, r0
 8007c02:	6a39      	ldr	r1, [r7, #32]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fa29 	bl	800705c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007c0a:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 8007c0c:	6978      	ldr	r0, [r7, #20]
 8007c0e:	f7fd fcfc 	bl	800560a <_ZNK6tflite6Tensor11is_variableEv>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d047      	beq.n	8007ca8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	6859      	ldr	r1, [r3, #4]
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	f107 020c 	add.w	r2, r7, #12
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fc53 	bl	80054e2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	74fb      	strb	r3, [r7, #19]
 8007c40:	7cfb      	ldrb	r3, [r7, #19]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 8007c46:	7cfb      	ldrb	r3, [r7, #19]
 8007c48:	e037      	b.n	8007cba <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 8007c4e:	6978      	ldr	r0, [r7, #20]
 8007c50:	f7fd fa88 	bl	8005164 <_ZNK6tflite6Tensor4typeEv>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00f      	beq.n	8007c84 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 8007c64:	6978      	ldr	r0, [r7, #20]
 8007c66:	f7fd fcc2 	bl	80055ee <_ZNK6tflite6Tensor12quantizationEv>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fd fc92 	bl	8005596 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f9ba 	bl	8006ff0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4613      	mov	r3, r2
 8007c82:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	6859      	ldr	r1, [r3, #4]
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	4613      	mov	r3, r2
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f003 f904 	bl	800aeb0 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	3301      	adds	r3, #1
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	e794      	b.n	8007bda <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb6:	e779      	b.n	8007bac <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3728      	adds	r7, #40	; 0x28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fd f928 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fd f994 	bl	8005004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	611a      	str	r2, [r3, #16]
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd f907 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007d16:	4602      	mov	r2, r0
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f7fd f97f 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fd fcae 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fc f88a 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd f8e9 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007d52:	4602      	mov	r2, r0
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f7fd f961 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd fc90 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7fc f879 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007d72:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd f8be 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007da8:	4602      	mov	r2, r0
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f7fd f936 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007db4:	4603      	mov	r3, r0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fd fc73 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc f841 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd f8a0 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7fd f918 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd fc55 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fc f830 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007e04:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	2104      	movs	r1, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7f9 fd33 	bl	80018a0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8007e3a:	4603      	mov	r3, r0
  }
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	210e      	movs	r1, #14
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff f80a 	bl	8006e6a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8007e56:	4603      	mov	r3, r0
  }
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2106      	movs	r1, #6
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fd50 	bl	8008912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8007e72:	4603      	mov	r3, r0
  }
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fd f833 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd f8ac 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fd fbdb 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fb ffb7 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007ed8:	4603      	mov	r3, r0
  }
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd f818 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd f891 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd fbc0 	bl	8005686 <_ZNK6tflite8SubGraph6inputsEv>
 8007f06:	4603      	mov	r3, r0
  }
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd f801 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd f87a 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fd fbb7 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fb ff85 	bl	8003e46 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007f3c:	4603      	mov	r3, r0
  }
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc ffe6 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fd f85f 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007f62:	4603      	mov	r3, r0
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd fb9c 	bl	80056a2 <_ZNK6tflite8SubGraph7outputsEv>
 8007f6a:	4603      	mov	r3, r0
  }
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	336c      	adds	r3, #108	; 0x6c
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff ff7b 	bl	8007e7c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	225c      	movs	r2, #92	; 0x5c
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f002 ff79 	bl	800aeb0 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f7fe f918 	bl	80061f8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8007fc8:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	669a      	str	r2, [r3, #104]	; 0x68
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	f7ff fbae 	bl	8007740 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 800800c:	6a39      	ldr	r1, [r7, #32]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f826 	bl	8008060 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	336c      	adds	r3, #108	; 0x6c
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff ff32 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	336c      	adds	r3, #108	; 0x6c
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fcab 	bl	80079a0 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	336c      	adds	r3, #108	; 0x6c
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fba0 	bl	8007794 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a0d      	ldr	r2, [pc, #52]	; (80080a8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8008074:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800807a:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8008080:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a09      	ldr	r2, [pc, #36]	; (80080ac <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8008086:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800808c:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	08008825 	.word	0x08008825
 80080ac:	0800885d 	.word	0x0800885d
 80080b0:	080088ad 	.word	0x080088ad

080080b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 80080b4:	b5b0      	push	{r4, r5, r7, lr}
 80080b6:	b096      	sub	sp, #88	; 0x58
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 80080bc:	2300      	movs	r3, #0
 80080be:	657b      	str	r3, [r7, #84]	; 0x54
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	336c      	adds	r3, #108	; 0x6c
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fdfc 	bl	8007cc2 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 80080ca:	4602      	mov	r2, r0
 80080cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfb4      	ite	lt
 80080d2:	2301      	movlt	r3, #1
 80080d4:	2300      	movge	r3, #0
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8155 	beq.w	8008388 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fc ff1e 	bl	8004f24 <_ZNK6tflite5Model9subgraphsEv>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fc ff96 	bl	8005020 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80080f4:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 80080f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 80080fc:	f002 fe38 	bl	800ad70 <abort>

    auto* opcodes = model_->operator_codes();
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff feab 	bl	8007e60 <_ZNK6tflite5Model14operator_codesEv>
 800810a:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fe9e 	bl	8006e52 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 8008116:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8008118:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800811a:	f7fc ff11 	bl	8004f40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800811e:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 8008120:	2300      	movs	r3, #0
 8008122:	653b      	str	r3, [r7, #80]	; 0x50
 8008124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	429a      	cmp	r2, r3
 800812a:	f080 8129 	bcs.w	8008380 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      const auto* op = subgraph->operators()->Get(i);
 800812e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008130:	f7fc feea 	bl	8004f08 <_ZNK6tflite8SubGraph9operatorsEv>
 8008134:	4603      	mov	r3, r0
 8008136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe ffb5 	bl	80070a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800813e:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 8008140:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008142:	f7ff fe70 	bl	8007e26 <_ZNK6tflite8Operator12opcode_indexEv>
 8008146:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 8008148:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800814a:	f000 fbf2 	bl	8008932 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800814e:	4602      	mov	r2, r0
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	4293      	cmp	r3, r2
 8008154:	bf2c      	ite	cs
 8008156:	2301      	movcs	r3, #1
 8008158:	2300      	movcc	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8008160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008162:	488c      	ldr	r0, [pc, #560]	; (8008394 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8008164:	f7ff fa7a 	bl	800765c <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008168:	2301      	movs	r3, #1
 800816a:	e10e      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* opcode = opcodes->Get(index);
 800816c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800816e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008170:	f000 fbee 	bl	8008950 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8008174:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	461d      	mov	r5, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	336c      	adds	r3, #108	; 0x6c
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fe85 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800818a:	4602      	mov	r2, r0
 800818c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008196:	212c      	movs	r1, #44	; 0x2c
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800819e:	3328      	adds	r3, #40	; 0x28
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081a6:	f7fc f9b9 	bl	800451c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 80081b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00e      	beq.n	80081d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 80081b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ba:	f002 fcba 	bl	800ab32 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80081be:	4603      	mov	r3, r0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fc f967 	bl	8004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4619      	mov	r1, r3
 80081ca:	4873      	ldr	r0, [pc, #460]	; (8008398 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 80081cc:	f7ff fa46 	bl	800765c <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 80081d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081d4:	e0d9      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	336c      	adds	r3, #108	; 0x6c
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fe5a 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ec:	212c      	movs	r1, #44	; 0x2c
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
 80081f2:	4413      	add	r3, r2
                                     .registration;
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 80081fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008200:	4866      	ldr	r0, [pc, #408]	; (800839c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8008202:	f7ff fa2b 	bl	800765c <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008206:	2301      	movs	r3, #1
 8008208:	e0bf      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800820e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      const char* custom_data = nullptr;
 8008212:	2300      	movs	r3, #0
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]

      if (op_type == BuiltinOperator_CUSTOM) {
 800821e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008222:	2b20      	cmp	r3, #32
 8008224:	d11b      	bne.n	800825e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8008226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008228:	f7ff fe0c 	bl	8007e44 <_ZNK6tflite8Operator14custom_optionsEv>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d051      	beq.n	80082e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800823c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800823e:	f7ff fe01 	bl	8007e44 <_ZNK6tflite8Operator14custom_optionsEv>
 8008242:	4603      	mov	r3, r0
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe ffd9 	bl	80071fc <_ZNK11flatbuffers6VectorIhE4dataEv>
 800824a:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 800824c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800824e:	f7ff fdf9 	bl	8007e44 <_ZNK6tflite8Operator14custom_optionsEv>
 8008252:	4603      	mov	r3, r0
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fe78 	bl	8006f4a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800825a:	64b8      	str	r0, [r7, #72]	; 0x48
 800825c:	e040      	b.n	80082e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800825e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008260:	f7ff fdf0 	bl	8007e44 <_ZNK6tflite8Operator14custom_optionsEv>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	bf14      	ite	ne
 800826a:	2301      	movne	r3, #1
 800826c:	2300      	moveq	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8008274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008278:	4618      	mov	r0, r3
 800827a:	f7fc f90b 	bl	8004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800827e:	4603      	mov	r3, r0
 8008280:	4619      	mov	r1, r3
 8008282:	4847      	ldr	r0, [pc, #284]	; (80083a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8008284:	f7ff f9ea 	bl	800765c <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8008288:	2301      	movs	r3, #1
 800828a:	e07e      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3320      	adds	r3, #32
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800829e:	4610      	mov	r0, r2
 80082a0:	4798      	blx	r3
 80082a2:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 80082aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fc f8f0 	bl	8004494 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4619      	mov	r1, r3
 80082b8:	483a      	ldr	r0, [pc, #232]	; (80083a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 80082ba:	f7ff f9cf 	bl	800765c <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 80082be:	2301      	movs	r3, #1
 80082c0:	e063      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6899      	ldr	r1, [r3, #8]
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	69fc      	ldr	r4, [r7, #28]
 80082cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082d0:	47a0      	blx	r4
 80082d2:	4603      	mov	r3, r0
 80082d4:	76fb      	strb	r3, [r7, #27]
 80082d6:	7efb      	ldrb	r3, [r7, #27]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
 80082dc:	7efb      	ldrb	r3, [r7, #27]
 80082de:	e054      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80082e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082e6:	f7fd f9a4 	bl	8005632 <_ZNK6tflite8Operator6inputsEv>
 80082ea:	4601      	mov	r1, r0
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	461a      	mov	r2, r3
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fe fd9a 	bl	8006e2c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 80082f8:	4603      	mov	r3, r0
 80082fa:	76bb      	strb	r3, [r7, #26]
 80082fc:	7ebb      	ldrb	r3, [r7, #26]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x252>
 8008302:	7ebb      	ldrb	r3, [r7, #26]
 8008304:	e041      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800830a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800830c:	f7fd f99f 	bl	800564e <_ZNK6tflite8Operator7outputsEv>
 8008310:	4601      	mov	r1, r0
 8008312:	f107 0308 	add.w	r3, r7, #8
 8008316:	461a      	mov	r2, r3
 8008318:	4620      	mov	r0, r4
 800831a:	f7fe fd87 	bl	8006e2c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800831e:	4603      	mov	r3, r0
 8008320:	767b      	strb	r3, [r7, #25]
 8008322:	7e7b      	ldrb	r3, [r7, #25]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x278>
 8008328:	7e7b      	ldrb	r3, [r7, #25]
 800832a:	e02e      	b.n	800838a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	336c      	adds	r3, #108	; 0x6c
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff fdaf 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008336:	4602      	mov	r2, r0
 8008338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	4413      	add	r3, r2
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008342:	212c      	movs	r1, #44	; 0x2c
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	617b      	str	r3, [r7, #20]
      *node = {};
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	4618      	mov	r0, r3
 8008350:	2328      	movs	r3, #40	; 0x28
 8008352:	461a      	mov	r2, r3
 8008354:	2100      	movs	r1, #0
 8008356:	f002 fdab 	bl	800aeb0 <memset>
      node->inputs = inputs_array;
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008370:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 8008372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < operators_size; ++i) {
 8008378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837a:	3301      	adds	r3, #1
 800837c:	653b      	str	r3, [r7, #80]	; 0x50
 800837e:	e6d1      	b.n	8008124 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8008380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008382:	3301      	adds	r3, #1
 8008384:	657b      	str	r3, [r7, #84]	; 0x54
 8008386:	e69b      	b.n	80080c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3758      	adds	r7, #88	; 0x58
 800838e:	46bd      	mov	sp, r7
 8008390:	bdb0      	pop	{r4, r5, r7, pc}
 8008392:	bf00      	nop
 8008394:	08010f10 	.word	0x08010f10
 8008398:	08010f3c 	.word	0x08010f3c
 800839c:	08010f6c 	.word	0x08010f6c
 80083a0:	08010f90 	.word	0x08010f90
 80083a4:	08010fd8 	.word	0x08010fd8

080083a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	b088      	sub	sp, #32
 80083ae:	af02      	add	r7, sp, #8
 80083b0:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7fd ff65 	bl	800628c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 80083c2:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	49a4      	ldr	r1, [pc, #656]	; (8008660 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fb fa23 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 80083de:	2301      	movs	r3, #1
 80083e0:	e139      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	336c      	adds	r3, #108	; 0x6c
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fc7c 	bl	8007ce6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fe60 	bl	80080b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 80083f4:	4603      	mov	r3, r0
 80083f6:	72fb      	strb	r3, [r7, #11]
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	e129      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a97      	ldr	r2, [pc, #604]	; (8008664 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8008406:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a94      	ldr	r2, [pc, #592]	; (8008668 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8008418:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	336c      	adds	r3, #108	; 0x6c
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff f9d8 	bl	80077d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a91      	ldr	r2, [pc, #580]	; (800866c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8008428:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	336c      	adds	r3, #108	; 0x6c
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff fa40 	bl	80078b4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a8b      	ldr	r2, [pc, #556]	; (8008670 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8008444:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	336c      	adds	r3, #108	; 0x6c
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fd1e 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	338c      	adds	r3, #140	; 0x8c
 800845e:	4629      	mov	r1, r5
 8008460:	4620      	mov	r0, r4
 8008462:	f7fd ff95 	bl	8006390 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8008466:	4603      	mov	r3, r0
 8008468:	72bb      	strb	r3, [r7, #10]
 800846a:	7abb      	ldrb	r3, [r7, #10]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 8008470:	7abb      	ldrb	r3, [r7, #10]
 8008472:	e0f0      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	681c      	ldr	r4, [r3, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fd12 	bl	8007eac <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008488:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4619      	mov	r1, r3
 800848e:	4628      	mov	r0, r5
 8008490:	47a0      	blx	r4
 8008492:	4602      	mov	r2, r0
  input_tensors_ =
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10d      	bne.n	80084c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689c      	ldr	r4, [r3, #8]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fcff 	bl	8007eac <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80084ae:	4603      	mov	r3, r0
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	461a      	mov	r2, r3
 80084b4:	496f      	ldr	r1, [pc, #444]	; (8008674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7fb f9b0 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 80084bc:	2301      	movs	r3, #1
 80084be:	e0ca      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fcf1 	bl	8007eac <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80084ca:	4602      	mov	r2, r0
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bf34      	ite	cc
 80084d2:	2301      	movcc	r3, #1
 80084d4:	2300      	movcs	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d03c      	beq.n	8008556 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	336c      	adds	r3, #108	; 0x6c
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fcce 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80084f8:	4680      	mov	r8, r0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fcf1 	bl	8007ee2 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008500:	4603      	mov	r3, r0
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fb fcad 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800850a:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	18d4      	adds	r4, r2, r3
 8008518:	2300      	movs	r3, #0
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	460b      	mov	r3, r1
 800851e:	4642      	mov	r2, r8
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	4630      	mov	r0, r6
 8008524:	47a8      	blx	r5
 8008526:	4603      	mov	r3, r0
 8008528:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d108      	bne.n	800854e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	494d      	ldr	r1, [pc, #308]	; (8008678 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8008544:	4618      	mov	r0, r3
 8008546:	f7fb f969 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800854a:	2301      	movs	r3, #1
 800854c:	e083      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3301      	adds	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e7b6      	b.n	80084c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	681c      	ldr	r4, [r3, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff fcd3 	bl	8007f10 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800856a:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4619      	mov	r1, r3
 8008570:	4628      	mov	r0, r5
 8008572:	47a0      	blx	r4
 8008574:	4602      	mov	r2, r0
  output_tensors_ =
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10d      	bne.n	80085a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689c      	ldr	r4, [r3, #8]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fcc0 	bl	8007f10 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008590:	4603      	mov	r3, r0
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	461a      	mov	r2, r3
 8008596:	4939      	ldr	r1, [pc, #228]	; (800867c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 8008598:	4620      	mov	r0, r4
 800859a:	f7fb f93f 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800859e:	2301      	movs	r3, #1
 80085a0:	e059      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fcb2 	bl	8007f10 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 80085ac:	4602      	mov	r2, r0
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bf34      	ite	cc
 80085b4:	2301      	movcc	r3, #1
 80085b6:	2300      	movcs	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d03c      	beq.n	8008638 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	336c      	adds	r3, #108	; 0x6c
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fc5d 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80085da:	4680      	mov	r8, r0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fcb2 	bl	8007f46 <_ZNK6tflite16MicroInterpreter7outputsEv>
 80085e2:	4603      	mov	r3, r0
 80085e4:	6939      	ldr	r1, [r7, #16]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fb fc3c 	bl	8003e64 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80085ec:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	18d4      	adds	r4, r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	460b      	mov	r3, r1
 8008600:	4642      	mov	r2, r8
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	4630      	mov	r0, r6
 8008606:	47a8      	blx	r5
 8008608:	4603      	mov	r3, r0
 800860a:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d108      	bne.n	8008630 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4916      	ldr	r1, [pc, #88]	; (8008680 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8008626:	4618      	mov	r0, r3
 8008628:	f7fb f8f8 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800862c:	2301      	movs	r3, #1
 800862e:	e012      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	3301      	adds	r3, #1
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	e7b6      	b.n	80085a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f89d 	bl	8008778 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800863e:	4603      	mov	r3, r0
 8008640:	727b      	strb	r3, [r7, #9]
 8008642:	7a7b      	ldrb	r3, [r7, #9]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 8008648:	7a7b      	ldrb	r3, [r7, #9]
 800864a:	e004      	b.n	8008656 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	08010ff8 	.word	0x08010ff8
 8008664:	08008795 	.word	0x08008795
 8008668:	080088eb 	.word	0x080088eb
 800866c:	080087c1 	.word	0x080087c1
 8008670:	080087f7 	.word	0x080087f7
 8008674:	0801101c 	.word	0x0801101c
 8008678:	08011068 	.word	0x08011068
 800867c:	08011090 	.word	0x08011090
 8008680:	080110dc 	.word	0x080110dc

08008684 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	4912      	ldr	r1, [pc, #72]	; (80086e4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800869c:	4618      	mov	r0, r3
 800869e:	f7fb f8bd 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e019      	b.n	80086da <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80086ac:	f083 0301 	eor.w	r3, r3, #1
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fe76 	bl	80083a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	e007      	b.n	80086da <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	336c      	adds	r3, #108	; 0x6c
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff f9c5 	bl	8007a60 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 80086d6:	4603      	mov	r3, r0
 80086d8:	bf00      	nop
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	08011104 	.word	0x08011104

080086e8 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fbda 	bl	8007eac <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80086f8:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d308      	bcc.n	8008714 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6898      	ldr	r0, [r3, #8]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	4908      	ldr	r1, [pc, #32]	; (800872c <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800870c:	f7fb f886 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008710:	2300      	movs	r3, #0
 8008712:	e006      	b.n	8008722 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	681b      	ldr	r3, [r3, #0]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	08011134 	.word	0x08011134

08008730 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fbe8 	bl	8007f10 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008740:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d308      	bcc.n	800875c <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6898      	ldr	r0, [r3, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	4908      	ldr	r1, [pc, #32]	; (8008774 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 8008754:	f7fb f862 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008758:	2300      	movs	r3, #0
 800875a:	e006      	b.n	800876a <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	681b      	ldr	r3, [r3, #0]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	08011160 	.word	0x08011160

08008778 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	336c      	adds	r3, #108	; 0x6c
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff fa0b 	bl	8007ba0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800878a:	4603      	mov	r3, r0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 80087a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 80087a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	4610      	mov	r0, r2
 80087b4:	4798      	blx	r3
 80087b6:	4603      	mov	r3, r0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	336c      	adds	r3, #108	; 0x6c
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fb4e 	bl	8007e7c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80087e0:	4602      	mov	r2, r0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7fd fe66 	bl	80064b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 80087ec:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd90      	pop	{r4, r7, pc}

080087f6 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 8008810:	4413      	add	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	681b      	ldr	r3, [r3, #0]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 8008824:	b40e      	push	{r1, r2, r3}
 8008826:	b580      	push	{r7, lr}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 8008834:	f107 0320 	add.w	r3, r7, #32
 8008838:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6898      	ldr	r0, [r3, #8]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	69f9      	ldr	r1, [r7, #28]
 800884c:	4798      	blx	r3
  va_end(args);
#endif
}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008858:	b003      	add	sp, #12
 800885a:	4770      	bx	lr

0800885c <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af02      	add	r7, sp, #8
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3304      	adds	r3, #4
 800887a:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	336c      	adds	r3, #108	; 0x6c
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fb05 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800888a:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff fb71 	bl	8007f74 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 8008892:	4603      	mov	r3, r0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	4642      	mov	r2, r8
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47a0      	blx	r4
 80088a0:	4603      	mov	r3, r0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088ac <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	336c      	adds	r3, #108	; 0x6c
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fae7 	bl	8007e94 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80088c6:	4604      	mov	r4, r0
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fb53 	bl	8007f74 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 80088ce:	4603      	mov	r3, r0
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4423      	add	r3, r4
              .tensors[tensor_idx];
 80088d4:	6859      	ldr	r1, [r3, #4]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd90      	pop	{r4, r7, pc}

080088ea <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f83a 	bl	800899c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8008928:	4603      	mov	r3, r0
  }
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f7f8 ff79 	bl	8001836 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008944:	4603      	mov	r3, r0
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff ffe9 	bl	8008932 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8008960:	4602      	mov	r2, r0
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	4293      	cmp	r3, r2
 8008966:	d306      	bcc.n	8008976 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8008968:	4b09      	ldr	r3, [pc, #36]	; (8008990 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800896a:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800896c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008970:	4809      	ldr	r0, [pc, #36]	; (8008998 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8008972:	f002 fa05 	bl	800ad80 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f844 	bl	8008a04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800897c:	4603      	mov	r3, r0
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 f82b 	bl	80089dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8008986:	4603      	mov	r3, r0
  }
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	0801118c 	.word	0x0801118c
 8008994:	080113e4 	.word	0x080113e4
 8008998:	08011268 	.word	0x08011268

0800899c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80089a8:	887b      	ldrh	r3, [r7, #2]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7f8 fb79 	bl	80010a4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80089b2:	4603      	mov	r3, r0
 80089b4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	4413      	add	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f7f8 ff4f 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4413      	add	r3, r2
                        : nullptr;
 80089d0:	e000      	b.n	80089d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80089d2:	2300      	movs	r3, #0
  }
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7f8 ff39 	bl	8001868 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80089f6:	4602      	mov	r2, r0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4413      	add	r3, r2
  }
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3304      	adds	r3, #4
  }
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d20e      	bcs.n	8008a56 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	617a      	str	r2, [r7, #20]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1e5a      	subs	r2, r3, #1
 8008a4e:	613a      	str	r2, [r7, #16]
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8008a54:	e7ec      	b.n	8008a30 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8008a56:	687b      	ldr	r3, [r7, #4]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  char* current = main;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008a82:	e7f7      	b.n	8008a74 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00e      	beq.n	8008ab4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d20a      	bcs.n	8008ab4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	701a      	strb	r2, [r3, #0]
    ++current;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
    ++to_append;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8008ab2:	e7ec      	b.n	8008a8e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
  return current;
 8008aba:	697b      	ldr	r3, [r7, #20]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	371c      	adds	r7, #28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ae0:	fb02 f201 	mul.w	r2, r2, r1
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b09      	cmp	r3, #9
 8008aec:	dc04      	bgt.n	8008af8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	3330      	adds	r3, #48	; 0x30
 8008af4:	77fb      	strb	r3, [r7, #31]
 8008af6:	e003      	b.n	8008b00 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	3357      	adds	r3, #87	; 0x57
 8008afe:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	60ba      	str	r2, [r7, #8]
 8008b06:	7ffa      	ldrb	r2, [r7, #31]
 8008b08:	701a      	strb	r2, [r3, #0]
    i /= base;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d000      	beq.n	8008b1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8008b1a:	e7dd      	b.n	8008ad8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	69b8      	ldr	r0, [r7, #24]
 8008b26:	f7ff ff79 	bl	8008a1c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	da07      	bge.n	8008b58 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	603a      	str	r2, [r7, #0]
 8008b4e:	222d      	movs	r2, #45	; 0x2d
 8008b50:	701a      	strb	r2, [r3, #0]
    u = -u;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	425b      	negs	r3, r3
 8008b56:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8008b58:	220a      	movs	r2, #10
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff ffb3 	bl	8008ac8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8008b62:	4603      	mov	r3, r0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b090      	sub	sp, #64	; 0x40
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff ffd8 	bl	8008b34 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8008b84:	f107 0310 	add.w	r3, r7, #16
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff ff69 	bl	8008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3740      	adds	r7, #64	; 0x40
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b090      	sub	sp, #64	; 0x40
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 8008baa:	f107 0310 	add.w	r3, r7, #16
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ff88 	bl	8008ac8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8008bb8:	f107 0310 	add.w	r3, r7, #16
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff ff4f 	bl	8008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008bc6:	4603      	mov	r3, r0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3740      	adds	r7, #64	; 0x40
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b09b      	sub	sp, #108	; 0x6c
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8008bda:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	332f      	adds	r3, #47	; 0x2f
 8008be4:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8008be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 8008bec:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8008bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 8008bf2:	2317      	movs	r3, #23
 8008bf4:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 8008bf6:	237f      	movs	r3, #127	; 0x7f
 8008bf8:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 8008bfa:	4b6a      	ldr	r3, [pc, #424]	; (8008da4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bfe:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 8008c00:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	0ddb      	lsrs	r3, r3, #23
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8008c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	da05      	bge.n	8008c26 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 8008c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1c:	222d      	movs	r2, #45	; 0x2d
 8008c1e:	701a      	strb	r2, [r3, #0]
    current += 1;
 8008c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c22:	3301      	adds	r3, #1
 8008c24:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 8008c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d118      	bne.n	8008c64 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 8008c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 8008c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	4a5a      	ldr	r2, [pc, #360]	; (8008da8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 8008c40:	4619      	mov	r1, r3
 8008c42:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008c44:	f7ff ff0e 	bl	8008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008c48:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8008c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4c:	e0a5      	b.n	8008d9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8008c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	4a55      	ldr	r2, [pc, #340]	; (8008dac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 8008c56:	4619      	mov	r1, r3
 8008c58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008c5a:	f7ff ff03 	bl	8008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008c5e:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8008c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c62:	e09a      	b.n	8008d9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8008c64:	230d      	movs	r3, #13
 8008c66:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8008c68:	4b51      	ldr	r3, [pc, #324]	; (8008db0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 8008c6a:	f107 040c 	add.w	r4, r7, #12
 8008c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c70:	c407      	stmia	r4!, {r0, r1, r2}
 8008c72:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c76:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8008c78:	2300      	movs	r3, #0
 8008c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c7e:	2b0c      	cmp	r3, #12
 8008c80:	dc0f      	bgt.n	8008ca2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8008c82:	f107 020c 	add.w	r2, r7, #12
 8008c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c88:	4413      	add	r3, r2
 8008c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	40d3      	lsrs	r3, r2
 8008c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c96:	4413      	add	r3, r2
 8008c98:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8008c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca0:	e7ec      	b.n	8008c7c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 8008ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca4:	2231      	movs	r2, #49	; 0x31
 8008ca6:	701a      	strb	r2, [r3, #0]
  current += 1;
 8008ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008caa:	3301      	adds	r3, #1
 8008cac:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 8008cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb0:	222e      	movs	r2, #46	; 0x2e
 8008cb2:	701a      	strb	r2, [r3, #0]
  current += 1;
 8008cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 8008cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 8008cc0:	2307      	movs	r3, #7
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 8008cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b07      	cmp	r3, #7
 8008ccc:	dc01      	bgt.n	8008cd2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 8008cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd0:	e063      	b.n	8008d9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	dc08      	bgt.n	8008cee <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 8008cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2230      	movs	r2, #48	; 0x30
 8008ce4:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8008ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce8:	3301      	adds	r3, #1
 8008cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cec:	e7f3      	b.n	8008cd6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 8008cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8008cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf6:	1ad1      	subs	r1, r2, r3
 8008cf8:	230a      	movs	r3, #10
 8008cfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008cfe:	f7ff ff4d 	bl	8008b9c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 8008d02:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 8008d04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	f1c3 0307 	rsb	r3, r3, #7
 8008d12:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 8008d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d16:	2230      	movs	r2, #48	; 0x30
 8008d18:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d018      	beq.n	8008d52 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 8008d20:	2300      	movs	r3, #0
 8008d22:	657b      	str	r3, [r7, #84]	; 0x54
 8008d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	da0f      	bge.n	8008d4c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 8008d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d36:	4413      	add	r3, r2
 8008d38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	701a      	strb	r2, [r3, #0]
      *current = '0';
 8008d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d40:	2230      	movs	r2, #48	; 0x30
 8008d42:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 8008d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d46:	3301      	adds	r3, #1
 8008d48:	657b      	str	r3, [r7, #84]	; 0x54
 8008d4a:	e7eb      	b.n	8008d24 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 8008d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4e:	3307      	adds	r3, #7
 8008d50:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8008d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d54:	3b01      	subs	r3, #1
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b30      	cmp	r3, #48	; 0x30
 8008d5a:	d108      	bne.n	8008d6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 8008d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d203      	bcs.n	8008d6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 8008d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8008d6c:	e7f1      	b.n	8008d52 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 8008d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 8008d74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	4a0e      	ldr	r2, [pc, #56]	; (8008db4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008d80:	f7ff fe70 	bl	8008a64 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008d84:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 8008d86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008d92:	f7ff feeb 	bl	8008b6c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 8008d96:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 8008d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	376c      	adds	r7, #108	; 0x6c
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd90      	pop	{r4, r7, pc}
 8008da2:	bf00      	nop
 8008da4:	007fffff 	.word	0x007fffff
 8008da8:	080115e4 	.word	0x080115e4
 8008dac:	080115e8 	.word	0x080115e8
 8008db0:	080115f0 	.word	0x080115f0
 8008db4:	080115ec 	.word	0x080115ec

08008db8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	6838      	ldr	r0, [r7, #0]
 8008dc6:	f7ff feb5 	bl	8008b34 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad3      	subs	r3, r2, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8008de2:	220a      	movs	r2, #10
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	6838      	ldr	r0, [r7, #0]
 8008de8:	f7ff fe6e 	bl	8008ac8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8008dec:	4602      	mov	r2, r0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	1ad3      	subs	r3, r2, r3
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8008e04:	2210      	movs	r2, #16
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	6838      	ldr	r0, [r7, #0]
 8008e0a:	f7ff fe5d 	bl	8008ac8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	1ad3      	subs	r3, r2, r3
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	ed97 0a00 	vldr	s0, [r7]
 8008e2e:	f7ff fecf 	bl	8008bd0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	1ad3      	subs	r3, r2, r3
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b08b      	sub	sp, #44	; 0x2c
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8151 	beq.w	8009108 <MicroVsnprintf+0x2c8>
 8008e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	f280 814c 	bge.w	8009108 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b25      	cmp	r3, #37	; 0x25
 8008e76:	f040 813b 	bne.w	80090f0 <MicroVsnprintf+0x2b0>
      current++;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b25      	cmp	r3, #37	; 0x25
 8008e86:	f000 80e2 	beq.w	800904e <MicroVsnprintf+0x20e>
 8008e8a:	2b25      	cmp	r3, #37	; 0x25
 8008e8c:	dbe6      	blt.n	8008e5c <MicroVsnprintf+0x1c>
 8008e8e:	2b78      	cmp	r3, #120	; 0x78
 8008e90:	dce4      	bgt.n	8008e5c <MicroVsnprintf+0x1c>
 8008e92:	2b63      	cmp	r3, #99	; 0x63
 8008e94:	dbe2      	blt.n	8008e5c <MicroVsnprintf+0x1c>
 8008e96:	3b63      	subs	r3, #99	; 0x63
 8008e98:	2b15      	cmp	r3, #21
 8008e9a:	d8df      	bhi.n	8008e5c <MicroVsnprintf+0x1c>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <MicroVsnprintf+0x64>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08009067 	.word	0x08009067
 8008ea8:	08008efd 	.word	0x08008efd
 8008eac:	08008e5d 	.word	0x08008e5d
 8008eb0:	08008fe3 	.word	0x08008fe3
 8008eb4:	08008e5d 	.word	0x08008e5d
 8008eb8:	08008e5d 	.word	0x08008e5d
 8008ebc:	08008e5d 	.word	0x08008e5d
 8008ec0:	08008e5d 	.word	0x08008e5d
 8008ec4:	08008e5d 	.word	0x08008e5d
 8008ec8:	08008e5d 	.word	0x08008e5d
 8008ecc:	08008e5d 	.word	0x08008e5d
 8008ed0:	08008e5d 	.word	0x08008e5d
 8008ed4:	08008e5d 	.word	0x08008e5d
 8008ed8:	08008e5d 	.word	0x08008e5d
 8008edc:	08008e5d 	.word	0x08008e5d
 8008ee0:	08008e5d 	.word	0x08008e5d
 8008ee4:	080090a5 	.word	0x080090a5
 8008ee8:	08008e5d 	.word	0x08008e5d
 8008eec:	08008f3f 	.word	0x08008f3f
 8008ef0:	08008e5d 	.word	0x08008e5d
 8008ef4:	08008e5d 	.word	0x08008e5d
 8008ef8:	08008f81 	.word	0x08008f81
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b0a      	cmp	r3, #10
 8008f04:	dc09      	bgt.n	8008f1a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
            return output_index;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	e0ff      	b.n	800911a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	18d0      	adds	r0, r2, r3
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	1d1a      	adds	r2, r3, #4
 8008f24:	603a      	str	r2, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f7ff ff45 	bl	8008db8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 8008f2e:	4602      	mov	r2, r0
          output_index +=
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	4413      	add	r3, r2
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	623b      	str	r3, [r7, #32]
          break;
 8008f3c:	e0e3      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b0a      	cmp	r3, #10
 8008f46:	dc09      	bgt.n	8008f5c <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]
            return output_index;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	e0de      	b.n	800911a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	18d0      	adds	r0, r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	603a      	str	r2, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f7ff ff34 	bl	8008dd8 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8008f70:	4602      	mov	r2, r0
          output_index +=
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	4413      	add	r3, r2
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	623b      	str	r3, [r7, #32]
          break;
 8008f7e:	e0c2      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	dc09      	bgt.n	8008f9e <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008f90:	461a      	mov	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
            return output_index;
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	e0bd      	b.n	800911a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2230      	movs	r2, #48	; 0x30
 8008fac:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	2278      	movs	r2, #120	; 0x78
 8008fbc:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	18d0      	adds	r0, r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	603a      	str	r2, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7ff ff14 	bl	8008dfa <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8008fd2:	4602      	mov	r2, r0
          output_index +=
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	4413      	add	r3, r2
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	623b      	str	r3, [r7, #32]
          break;
 8008fe0:	e091      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ff0:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8008ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffc:	d509      	bpl.n	8009012 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	627a      	str	r2, [r7, #36]	; 0x24
 8009004:	461a      	mov	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4413      	add	r3, r2
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	e083      	b.n	800911a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	18d4      	adds	r4, r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	3307      	adds	r3, #7
 800901c:	f023 0307 	bic.w	r3, r3, #7
 8009020:	f103 0208 	add.w	r2, r3, #8
 8009024:	603a      	str	r2, [r7, #0]
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	4610      	mov	r0, r2
 800902c:	4619      	mov	r1, r3
 800902e:	f7f7 fdcd 	bl	8000bcc <__aeabi_d2f>
 8009032:	4603      	mov	r3, r0
 8009034:	ee00 3a10 	vmov	s0, r3
 8009038:	4620      	mov	r0, r4
 800903a:	f7ff feef 	bl	8008e1c <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800903e:	4602      	mov	r2, r0
          output_index +=
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	4413      	add	r3, r2
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	3301      	adds	r3, #1
 800904a:	623b      	str	r3, [r7, #32]
          break;
 800904c:	e05b      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	623a      	str	r2, [r7, #32]
 8009054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009056:	1c51      	adds	r1, r2, #1
 8009058:	6279      	str	r1, [r7, #36]	; 0x24
 800905a:	4611      	mov	r1, r2
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	440a      	add	r2, r1
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	7013      	strb	r3, [r2, #0]
          break;
 8009064:	e04f      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc09      	bgt.n	8009084 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	627a      	str	r2, [r7, #36]	; 0x24
 8009076:	461a      	mov	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	e04a      	b.n	800911a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	1d1a      	adds	r2, r3, #4
 8009088:	603a      	str	r2, [r7, #0]
 800908a:	6819      	ldr	r1, [r3, #0]
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	627a      	str	r2, [r7, #36]	; 0x24
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	b2ca      	uxtb	r2, r1
 800909a:	701a      	strb	r2, [r3, #0]
          current++;
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	3301      	adds	r3, #1
 80090a0:	623b      	str	r3, [r7, #32]
          break;
 80090a2:	e030      	b.n	8009106 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	1d1a      	adds	r2, r3, #4
 80090a8:	603a      	str	r2, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	4413      	add	r3, r2
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	dd14      	ble.n	80090e8 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00e      	beq.n	80090e8 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	61fa      	str	r2, [r7, #28]
 80090d0:	461a      	mov	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	441a      	add	r2, r3
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	1c59      	adds	r1, r3, #1
 80090da:	6279      	str	r1, [r7, #36]	; 0x24
 80090dc:	4619      	mov	r1, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	440b      	add	r3, r1
 80090e2:	7812      	ldrb	r2, [r2, #0]
 80090e4:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80090e6:	e7e4      	b.n	80090b2 <MicroVsnprintf+0x272>
          }
          current++;
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	3301      	adds	r3, #1
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	e6b5      	b.n	8008e5c <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	623a      	str	r2, [r7, #32]
 80090f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f8:	1c51      	adds	r1, r2, #1
 80090fa:	6279      	str	r1, [r7, #36]	; 0x24
 80090fc:	4611      	mov	r1, r2
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	440a      	add	r2, r1
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8009106:	e6a9      	b.n	8008e5c <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	627a      	str	r2, [r7, #36]	; 0x24
 800910e:	461a      	mov	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
  return output_index;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800911a:	4618      	mov	r0, r3
 800911c:	372c      	adds	r7, #44	; 0x2c
 800911e:	46bd      	mov	sp, r7
 8009120:	bd90      	pop	{r4, r7, pc}
 8009122:	bf00      	nop

08009124 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	4a11      	ldr	r2, [pc, #68]	; (8009174 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	605a      	str	r2, [r3, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60da      	str	r2, [r3, #12]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	611a      	str	r2, [r3, #16]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695a      	ldr	r2, [r3, #20]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	615a      	str	r2, [r3, #20]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	619a      	str	r2, [r3, #24]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	080129cc 	.word	0x080129cc

08009178 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8009186:	4a0e      	ldr	r2, [pc, #56]	; (80091c0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	605a      	str	r2, [r3, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	609a      	str	r2, [r3, #8]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	60da      	str	r2, [r3, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	611a      	str	r2, [r3, #16]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	615a      	str	r2, [r3, #20]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	619a      	str	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	080129cc 	.word	0x080129cc

080091c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	4413      	add	r3, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ffcb 	bl	8009178 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b08d      	sub	sp, #52	; 0x34
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 80091fe:	f001 fdb7 	bl	800ad70 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009208:	f001 fdb2 	bl	800ad70 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800920c:	f107 0010 	add.w	r0, r7, #16
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	f7ff ffd5 	bl	80091c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	2204      	movs	r2, #4
 8009220:	211c      	movs	r1, #28
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f87c 	bl	8009320 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8009228:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	4619      	mov	r1, r3
 800922e:	201c      	movs	r0, #28
 8009230:	f7fa fb27 	bl	8003882 <_ZnwjPv>
 8009234:	4604      	mov	r4, r0
 8009236:	f107 0310 	add.w	r3, r7, #16
 800923a:	4619      	mov	r1, r3
 800923c:	4620      	mov	r0, r4
 800923e:	f7ff ff71 	bl	8009124 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009242:	f107 0310 	add.w	r3, r7, #16
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f806 	bl	8009258 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800924c:	4623      	mov	r3, r4
}
 800924e:	4618      	mov	r0, r3
 8009250:	3734      	adds	r7, #52	; 0x34
 8009252:	46bd      	mov	sp, r7
 8009254:	bd90      	pop	{r4, r7, pc}
	...

08009258 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	4a04      	ldr	r2, [pc, #16]	; (8009274 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	080129cc 	.word	0x080129cc

08009278 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ffe9 	bl	8009258 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009286:	211c      	movs	r1, #28
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fc8a 	bl	800aba2 <_ZdlPvj>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af02      	add	r7, sp, #8
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d007      	beq.n	80092c0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	4918      	ldr	r1, [pc, #96]	; (8009318 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fa fab0 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 80092bc:	2301      	movs	r3, #1
 80092be:	e026      	b.n	800930e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fb fff7 	bl	80052ba <_ZN6tflite14AlignPointerUpEPhj>
 80092cc:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d20c      	bcs.n	80092fa <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6858      	ldr	r0, [r3, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	490a      	ldr	r1, [pc, #40]	; (800931c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 80092f2:	f7fa fa93 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e009      	b.n	800930e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	441a      	add	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	08011614 	.word	0x08011614
 800931c:	0801166c 	.word	0x0801166c

08009320 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af02      	add	r7, sp, #8
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695a      	ldr	r2, [r3, #20]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	425b      	negs	r3, r3
 8009334:	4413      	add	r3, r2
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	4618      	mov	r0, r3
 800933a:	f7fb ffd7 	bl	80052ec <_ZN6tflite16AlignPointerDownEPhj>
 800933e:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	429a      	cmp	r2, r3
 8009348:	d212      	bcs.n	8009370 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6858      	ldr	r0, [r3, #4]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	4613      	mov	r3, r2
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	4906      	ldr	r1, [pc, #24]	; (8009380 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8009368:	f7fa fa58 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800936c:	2300      	movs	r3, #0
 800936e:	e003      	b.n	8009378 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8009376:	697b      	ldr	r3, [r7, #20]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	080116b0 	.word	0x080116b0

08009384 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4618      	mov	r0, r3
 8009398:	f7fb ff8f 	bl	80052ba <_ZN6tflite14AlignPointerUpEPhj>
 800939c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	695a      	ldr	r2, [r3, #20]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d20c      	bcs.n	80093ca <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6858      	ldr	r0, [r3, #4]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4907      	ldr	r1, [pc, #28]	; (80093e0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 80093c2:	f7fa fa2b 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e005      	b.n	80093d6 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	441a      	add	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	619a      	str	r2, [r3, #24]
  return aligned_result;
 80093d4:	697b      	ldr	r3, [r7, #20]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	080116fc 	.word	0x080116fc

080093e4 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	619a      	str	r2, [r3, #24]
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f7fb ff46 	bl	80052ba <_ZN6tflite14AlignPointerUpEPhj>
 800942e:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f7fb ff58 	bl	80052ec <_ZN6tflite16AlignPointerDownEPhj>
 800943c:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	1ad3      	subs	r3, r2, r3
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800945e:	f001 fc87 	bl	800ad70 <abort>
  TFLITE_DCHECK(node != nullptr);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8009468:	f001 fc82 	bl	800ad70 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4619      	mov	r1, r3
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	4790      	blx	r2
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff ffd5 	bl	800944c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80094a2:	4603      	mov	r3, r0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80094be:	f001 fc57 	bl	800ad70 <abort>
  TFLITE_DCHECK(node != nullptr);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80094c8:	f001 fc52 	bl	800ad70 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6859      	ldr	r1, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	4619      	mov	r1, r3
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	4790      	blx	r2
 80094e2:	4603      	mov	r3, r0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80094fa:	f001 fc39 	bl	800ad70 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	e000      	b.n	8009520 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800953a:	f001 fc19 	bl	800ad70 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	e000      	b.n	8009560 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d107      	bne.n	800958e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800957e:	f7fb f98c 	bl	800489a <_ZNSt14numeric_limitsIlE3minEv>
 8009582:	4602      	mov	r2, r0
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4293      	cmp	r3, r2
 8009588:	d101      	bne.n	800958e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800958e:	2300      	movs	r3, #0
 8009590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	461a      	mov	r2, r3
 8009598:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800959c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80095a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	fb02 f203 	mul.w	r2, r2, r3
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	6a39      	ldr	r1, [r7, #32]
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	18d1      	adds	r1, r2, r3
 80095be:	6a3a      	ldr	r2, [r7, #32]
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	4419      	add	r1, r3
 80095c8:	460b      	mov	r3, r1
 80095ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80095ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80095d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	f173 0300 	sbcs.w	r3, r3, #0
 80095dc:	db02      	blt.n	80095e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 80095de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095e2:	e000      	b.n	80095e6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 80095e4:	4b18      	ldr	r3, [pc, #96]	; (8009648 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 80095e6:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4618      	mov	r0, r3
 80095ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80095f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095f4:	1884      	adds	r4, r0, r2
 80095f6:	eb41 0503 	adc.w	r5, r1, r3
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	2a00      	cmp	r2, #0
 8009600:	f173 0100 	sbcs.w	r1, r3, #0
 8009604:	da06      	bge.n	8009614 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8009606:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800960a:	f04f 0100 	mov.w	r1, #0
 800960e:	1812      	adds	r2, r2, r0
 8009610:	eb41 0303 	adc.w	r3, r1, r3
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f04f 0100 	mov.w	r1, #0
 800961c:	0fd0      	lsrs	r0, r2, #31
 800961e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009622:	17d9      	asrs	r1, r3, #31
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8009628:	4613      	mov	r3, r2
 800962a:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800962c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009630:	2b00      	cmp	r3, #0
 8009632:	d003      	beq.n	800963c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8009634:	f7fb f813 	bl	800465e <_ZNSt14numeric_limitsIlE3maxEv>
 8009638:	4603      	mov	r3, r0
 800963a:	e000      	b.n	800963e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800963c:	68bb      	ldr	r3, [r7, #8]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3730      	adds	r7, #48	; 0x30
 8009642:	46bd      	mov	sp, r7
 8009644:	bdb0      	pop	{r4, r5, r7, pc}
 8009646:	bf00      	nop
 8009648:	c0000001 	.word	0xc0000001

0800964c <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	da01      	bge.n	8009660 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800965c:	f001 fb88 	bl	800ad70 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	db01      	blt.n	800966e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800966a:	f001 fb81 	bl	800ad70 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b05      	cmp	r3, #5
 8009674:	dd06      	ble.n	8009684 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	e004      	b.n	800968e <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	685b      	ldr	r3, [r3, #4]
  }
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	dd02      	ble.n	80096ac <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	e001      	b.n	80096b0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3304      	adds	r3, #4
  }
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80096ce:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dc02      	bgt.n	80096dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	425b      	negs	r3, r3
 80096da:	e000      	b.n	80096de <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ff3e 	bl	800956c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80096f0:	4603      	mov	r3, r0
 80096f2:	6939      	ldr	r1, [r7, #16]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f805 	bl	8009704 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80096fa:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8009704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	2900      	cmp	r1, #0
 8009712:	da06      	bge.n	8009722 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8009714:	4b31      	ldr	r3, [pc, #196]	; (80097dc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8009716:	4a32      	ldr	r2, [pc, #200]	; (80097e0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8009718:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800971c:	4831      	ldr	r0, [pc, #196]	; (80097e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800971e:	f001 fb2f 	bl	800ad80 <__assert_func>
  assert(exponent <= 31);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	291f      	cmp	r1, #31
 8009726:	dd06      	ble.n	8009736 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8009728:	4b2f      	ldr	r3, [pc, #188]	; (80097e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800972a:	4a2d      	ldr	r2, [pc, #180]	; (80097e0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800972c:	f240 1167 	movw	r1, #359	; 0x167
 8009730:	482c      	ldr	r0, [pc, #176]	; (80097e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8009732:	f001 fb25 	bl	800ad80 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009736:	f04f 0001 	mov.w	r0, #1
 800973a:	f04f 0100 	mov.w	r1, #0
 800973e:	683c      	ldr	r4, [r7, #0]
 8009740:	f1a4 0620 	sub.w	r6, r4, #32
 8009744:	f1c4 0520 	rsb	r5, r4, #32
 8009748:	fa01 f304 	lsl.w	r3, r1, r4
 800974c:	fa00 f606 	lsl.w	r6, r0, r6
 8009750:	4333      	orrs	r3, r6
 8009752:	fa20 f505 	lsr.w	r5, r0, r5
 8009756:	432b      	orrs	r3, r5
 8009758:	fa00 f204 	lsl.w	r2, r0, r4
 800975c:	4613      	mov	r3, r2
 800975e:	3b01      	subs	r3, #1
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f843 	bl	80097ec <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009766:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8009768:	2000      	movs	r0, #0
 800976a:	f000 f83f 	bl	80097ec <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800976e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8009770:	2001      	movs	r0, #1
 8009772:	f000 f83b 	bl	80097ec <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009776:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8009778:	69f9      	ldr	r1, [r7, #28]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f841 	bl	8009802 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009780:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8009782:	2101      	movs	r1, #1
 8009784:	69f8      	ldr	r0, [r7, #28]
 8009786:	f000 f84a 	bl	800981e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800978a:	4604      	mov	r4, r0
 800978c:	69b9      	ldr	r1, [r7, #24]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f854 	bl	800983c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8009794:	4603      	mov	r3, r0
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f832 	bl	8009802 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800979e:	4603      	mov	r3, r0
 80097a0:	4619      	mov	r1, r3
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f85e 	bl	8009864 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80097a8:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f836 	bl	800981e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80097b2:	4604      	mov	r4, r0
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	6938      	ldr	r0, [r7, #16]
 80097b8:	f000 f862 	bl	8009880 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80097bc:	4603      	mov	r3, r0
 80097be:	6979      	ldr	r1, [r7, #20]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f81e 	bl	8009802 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80097c6:	4603      	mov	r3, r0
 80097c8:	4619      	mov	r1, r3
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 f84a 	bl	8009864 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80097d0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3724      	adds	r7, #36	; 0x24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097da:	bf00      	nop
 80097dc:	080117d0 	.word	0x080117d0
 80097e0:	080117e0 	.word	0x080117e0
 80097e4:	0801183c 	.word	0x0801183c
 80097e8:	080118b0 	.word	0x080118b0

080097ec <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  return x;
 80097f4:	687b      	ldr	r3, [r7, #4]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  return a & b;
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	4013      	ands	r3, r2
}
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	fa42 f303 	asr.w	r3, r2, r3
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	bfb4      	ite	lt
 800984e:	2301      	movlt	r3, #1
 8009850:	2300      	movge	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f827 	bl	80098a8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800985a:	4603      	mov	r3, r0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  return a + b;
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	4413      	add	r3, r2
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	bfcc      	ite	gt
 8009892:	2301      	movgt	r3, #1
 8009894:	2300      	movle	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f805 	bl	80098a8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800989e:	4603      	mov	r3, r0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80098b6:	2000      	movs	r0, #0
 80098b8:	f000 f807 	bl	80098ca <_ZN8gemmlowp6BitNotIlEET_S1_>
 80098bc:	4603      	mov	r3, r0
 80098be:	e000      	b.n	80098c2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  return ~a;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	43db      	mvns	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	4b04      	ldr	r3, [pc, #16]	; (80098fc <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eeb0 0a67 	vmov.f32	s0, s15
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	7f7fffff 	.word	0x7f7fffff

08009900 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
 8009904:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eeb0 0a67 	vmov.f32	s0, s15
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009922:	edc7 0a02 	vstr	s1, [r7, #8]
 8009926:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800992a:	f107 0208 	add.w	r2, r7, #8
 800992e:	f107 030c 	add.w	r3, r7, #12
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f7fa ff3e 	bl	80047b6 <_ZSt3maxIfERKT_S2_S2_>
 800993a:	4602      	mov	r2, r0
 800993c:	1d3b      	adds	r3, r7, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7fa ff1f 	bl	8004784 <_ZSt3minIfERKT_S2_S2_>
 8009946:	4603      	mov	r3, r0
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	ee07 3a90 	vmov	s15, r3
}
 800994e:	eeb0 0a67 	vmov.f32	s0, s15
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d10b      	bne.n	8009984 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8009974:	f7ff ffb6 	bl	80098e4 <_ZNSt14numeric_limitsIfE3maxEv>
 8009978:	eef0 7a40 	vmov.f32	s15, s0
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8009982:	e023      	b.n	80099cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	2b03      	cmp	r3, #3
 8009988:	d107      	bne.n	800999a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a0f      	ldr	r2, [pc, #60]	; (80099d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8009996:	601a      	str	r2, [r3, #0]
}
 8009998:	e018      	b.n	80099cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b02      	cmp	r3, #2
 800999e:	d107      	bne.n	80099b0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4a0d      	ldr	r2, [pc, #52]	; (80099d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80099a4:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80099ac:	601a      	str	r2, [r3, #0]
}
 80099ae:	e00d      	b.n	80099cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80099b0:	f7ff ffa6 	bl	8009900 <_ZNSt14numeric_limitsIfE6lowestEv>
 80099b4:	eef0 7a40 	vmov.f32	s15, s0
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80099be:	f7ff ff91 	bl	80098e4 <_ZNSt14numeric_limitsIfE3maxEv>
 80099c2:	eef0 7a40 	vmov.f32	s15, s0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	edc3 7a00 	vstr	s15, [r3]
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	40c00000 	.word	0x40c00000
 80099d8:	bf800000 	.word	0xbf800000

080099dc <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 80099ea:	f001 f9c1 	bl	800ad70 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 80099fa:	b590      	push	{r4, r7, lr}
 80099fc:	b087      	sub	sp, #28
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff fe1e 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009a10:	4604      	mov	r4, r0
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fe19 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d001      	beq.n	8009a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8009a20:	f001 f9a6 	bl	800ad70 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8009a24:	68b9      	ldr	r1, [r7, #8]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fe10 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe0a 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	f107 0214 	add.w	r2, r7, #20
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fb fa2c 	bl	8004ea4 <_ZSt3minIlERKT_S2_S2_>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	681b      	ldr	r3, [r3, #0]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	371c      	adds	r7, #28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd90      	pop	{r4, r7, pc}

08009a58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7fb fbc5 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009a68:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	db03      	blt.n	8009a78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	db01      	blt.n	8009a7c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8009a78:	f001 f97a 	bl	800ad70 <abort>
  const auto* dims_data = shape.DimsData();
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fe0a 	bl	8009696 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8009a82:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009a88:	2300      	movs	r3, #0
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	da12      	bge.n	8009aba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d005      	beq.n	8009aa8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	e000      	b.n	8009aaa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	fb03 f302 	mul.w	r3, r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	e7e8      	b.n	8009a8c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8009ac4:	b590      	push	{r4, r7, lr}
 8009ac6:	b091      	sub	sp, #68	; 0x44
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8009ade:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009ae0:	f7fb fb87 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009ae4:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8009ae6:	6838      	ldr	r0, [r7, #0]
 8009ae8:	f7fb fb83 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009aec:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	4619      	mov	r1, r3
 8009af4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009af6:	f7ff ffaf 	bl	8009a58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8009afa:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	1e99      	subs	r1, r3, #2
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b06:	6838      	ldr	r0, [r7, #0]
 8009b08:	f7ff ff77 	bl	80099fa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009b0c:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	4619      	mov	r1, r3
 8009b14:	6838      	ldr	r0, [r7, #0]
 8009b16:	f7ff fd99 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009b1a:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	da5f      	bge.n	8009be8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	da55      	bge.n	8009be0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	da21      	bge.n	8009b8a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8009b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	fb02 f203 	mul.w	r2, r2, r3
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	4413      	add	r3, r2
 8009b58:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	fb02 f203 	mul.w	r2, r2, r3
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b6c:	4413      	add	r3, r2
 8009b6e:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8009b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b76:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	3301      	adds	r3, #1
 8009b86:	633b      	str	r3, [r7, #48]	; 0x30
 8009b88:	e7d9      	b.n	8009b3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8009b8a:	f04f 0300 	mov.w	r3, #0
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8009b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b9c:	4413      	add	r3, r2
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8009ba2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009ba6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bb2:	fb02 f203 	mul.w	r2, r2, r3
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bbe:	18d4      	adds	r4, r2, r3
 8009bc0:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8009bc4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8009bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bcc:	f7ff fea4 	bl	8009918 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8009bd0:	eef0 7a40 	vmov.f32	s15, s0
 8009bd4:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bda:	3301      	adds	r3, #1
 8009bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bde:	e7a5      	b.n	8009b2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8009be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be2:	3301      	adds	r3, #1
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be6:	e79b      	b.n	8009b20 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8009be8:	bf00      	nop
 8009bea:	3744      	adds	r7, #68	; 0x44
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd90      	pop	{r4, r7, pc}

08009bf0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b096      	sub	sp, #88	; 0x58
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8009c28:	6838      	ldr	r0, [r7, #0]
 8009c2a:	f7fb fae2 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	dc01      	bgt.n	8009c38 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8009c34:	f001 f89c 	bl	800ad70 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8009c38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c3a:	f7fb fada 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d001      	beq.n	8009c48 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 8009c44:	f001 f894 	bl	800ad70 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	dd01      	ble.n	8009c54 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8009c50:	f001 f88e 	bl	800ad70 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8009c54:	6838      	ldr	r0, [r7, #0]
 8009c56:	f7fb facc 	bl	80051f2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009c5a:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c60:	f7ff fcf4 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009c64:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8009c66:	2101      	movs	r1, #1
 8009c68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c6a:	f7ff fcef 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	3b02      	subs	r3, #2
 8009c74:	4619      	mov	r1, r3
 8009c76:	6838      	ldr	r0, [r7, #0]
 8009c78:	f7ff fce8 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	4293      	cmp	r3, r2
 8009c82:	dd01      	ble.n	8009c88 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 8009c84:	f001 f874 	bl	800ad70 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6838      	ldr	r0, [r7, #0]
 8009c90:	f7ff fcdc 	bl	800964c <_ZNK6tflite12RuntimeShape4DimsEi>
 8009c94:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8009c96:	2300      	movs	r3, #0
 8009c98:	657b      	str	r3, [r7, #84]	; 0x54
 8009c9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	da75      	bge.n	8009d8e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ca6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	da6b      	bge.n	8009d86 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	da26      	bge.n	8009d0c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 8009cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cc2:	fb02 f203 	mul.w	r2, r2, r3
 8009cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc8:	4413      	add	r3, r2
 8009cca:	461a      	mov	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8009cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cda:	fb02 f203 	mul.w	r2, r2, r3
 8009cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce0:	4413      	add	r3, r2
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8009cec:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8009cee:	6a3a      	ldr	r2, [r7, #32]
 8009cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf2:	4413      	add	r3, r2
 8009cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cf8:	440a      	add	r2, r1
 8009cfa:	fb02 f203 	mul.w	r2, r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	4413      	add	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8009d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d06:	3301      	adds	r3, #1
 8009d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d0a:	e7d4      	b.n	8009cb6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 8009d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d007      	beq.n	8009d22 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 8009d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d18:	4413      	add	r3, r2
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	4413      	add	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fcc7 	bl	80096bc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d36:	4413      	add	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8009d3a:	f107 021c 	add.w	r2, r7, #28
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fb f8c1 	bl	8004ecc <_ZSt3maxIlERKT_S2_S2_>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8009d50:	f107 0218 	add.w	r2, r7, #24
 8009d54:	f107 0314 	add.w	r3, r7, #20
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fb f8a2 	bl	8004ea4 <_ZSt3minIlERKT_S2_S2_>
 8009d60:	4603      	mov	r3, r0
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8009d66:	6979      	ldr	r1, [r7, #20]
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d6c:	fb02 f203 	mul.w	r2, r2, r3
 8009d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d72:	4413      	add	r3, r2
 8009d74:	461a      	mov	r2, r3
 8009d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d78:	4413      	add	r3, r2
 8009d7a:	b24a      	sxtb	r2, r1
 8009d7c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d80:	3301      	adds	r3, #1
 8009d82:	653b      	str	r3, [r7, #80]	; 0x50
 8009d84:	e78f      	b.n	8009ca6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 8009d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d88:	3301      	adds	r3, #1
 8009d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8009d8c:	e785      	b.n	8009c9a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3758      	adds	r7, #88	; 0x58
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8009daa:	f000 ffe1 	bl	800ad70 <abort>
  return context->AllocatePersistentBuffer(context,
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	2120      	movs	r1, #32
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009dc4:	b5b0      	push	{r4, r5, r7, lr}
 8009dc6:	b08c      	sub	sp, #48	; 0x30
 8009dc8:	af04      	add	r7, sp, #16
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8009dd6:	f000 ffcb 	bl	800ad70 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8009de2:	f000 ffc5 	bl	800ad70 <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	61fb      	str	r3, [r7, #28]
  const auto params =
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 8009df2:	4b47      	ldr	r3, [pc, #284]	; (8009f10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7fa fdc6 	bl	800498c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009e00:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	695c      	ldr	r4, [r3, #20]
 8009e0c:	4b41      	ldr	r3, [pc, #260]	; (8009f14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	232f      	movs	r3, #47	; 0x2f
 8009e12:	4a41      	ldr	r2, [pc, #260]	; (8009f18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 8009e14:	4941      	ldr	r1, [pc, #260]	; (8009f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	47a0      	blx	r4
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e073      	b.n	8009f06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8009e1e:	4b40      	ldr	r3, [pc, #256]	; (8009f20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fa fdb0 	bl	800498c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009e2c:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	695c      	ldr	r4, [r3, #20]
 8009e38:	4b3a      	ldr	r3, [pc, #232]	; (8009f24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	2332      	movs	r3, #50	; 0x32
 8009e3e:	4a36      	ldr	r2, [pc, #216]	; (8009f18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 8009e40:	4936      	ldr	r1, [pc, #216]	; (8009f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	47a0      	blx	r4
 8009e46:	2301      	movs	r3, #1
 8009e48:	e05d      	b.n	8009f06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8009e4a:	4b37      	ldr	r3, [pc, #220]	; (8009f28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7fa fdca 	bl	80049ec <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8009e58:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8009e5a:	4b34      	ldr	r3, [pc, #208]	; (8009f2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fa fda2 	bl	80049ac <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009e68:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	695c      	ldr	r4, [r3, #20]
 8009e74:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2336      	movs	r3, #54	; 0x36
 8009e7a:	4a27      	ldr	r2, [pc, #156]	; (8009f18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 8009e7c:	4927      	ldr	r1, [pc, #156]	; (8009f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	47a0      	blx	r4
 8009e82:	2301      	movs	r3, #1
 8009e84:	e03f      	b.n	8009f06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	781a      	ldrb	r2, [r3, #0]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d01a      	beq.n	8009ec8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695c      	ldr	r4, [r3, #20]
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f9 fc42 	bl	8003724 <TfLiteTypeGetName>
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f9 fc3c 	bl	8003724 <TfLiteTypeGetName>
 8009eac:	4603      	mov	r3, r0
 8009eae:	9303      	str	r3, [sp, #12]
 8009eb0:	9502      	str	r5, [sp, #8]
 8009eb2:	4b20      	ldr	r3, [pc, #128]	; (8009f34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	4b20      	ldr	r3, [pc, #128]	; (8009f38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	2338      	movs	r3, #56	; 0x38
 8009ebc:	4a16      	ldr	r2, [pc, #88]	; (8009f18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 8009ebe:	491f      	ldr	r1, [pc, #124]	; (8009f3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	47a0      	blx	r4
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e01e      	b.n	8009f06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d006      	beq.n	8009ee2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	4919      	ldr	r1, [pc, #100]	; (8009f40 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	4798      	blx	r3
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e011      	b.n	8009f06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	7819      	ldrb	r1, [r3, #0]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	781a      	ldrb	r2, [r3, #0]
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9a8 	bl	800a252 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8009f02:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 8009f04:	bf00      	nop
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3720      	adds	r7, #32
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	080129e4 	.word	0x080129e4
 8009f14:	0801191c 	.word	0x0801191c
 8009f18:	080118c0 	.word	0x080118c0
 8009f1c:	08011904 	.word	0x08011904
 8009f20:	080129e8 	.word	0x080129e8
 8009f24:	08011930 	.word	0x08011930
 8009f28:	080129ec 	.word	0x080129ec
 8009f2c:	080129f0 	.word	0x080129f0
 8009f30:	08011944 	.word	0x08011944
 8009f34:	08011974 	.word	0x08011974
 8009f38:	08011984 	.word	0x08011984
 8009f3c:	08011958 	.word	0x08011958
 8009f40:	08011990 	.word	0x08011990

08009f44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f46:	b0d3      	sub	sp, #332	; 0x14c
 8009f48:	af06      	add	r7, sp, #24
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	6018      	str	r0, [r3, #0]
 8009f4e:	463b      	mov	r3, r7
 8009f50:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8009f52:	463b      	mov	r3, r7
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 8009f5c:	f000 ff08 	bl	800ad70 <abort>
  const auto* params =
 8009f60:	463b      	mov	r3, r7
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8009f6a:	4b8a      	ldr	r3, [pc, #552]	; (800a194 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4639      	mov	r1, r7
 8009f70:	1d3b      	adds	r3, r7, #4
 8009f72:	6809      	ldr	r1, [r1, #0]
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	f7ff fa89 	bl	800948c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009f7a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8009f7e:	4b86      	ldr	r3, [pc, #536]	; (800a198 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4639      	mov	r1, r7
 8009f84:	1d3b      	adds	r3, r7, #4
 8009f86:	6809      	ldr	r1, [r1, #0]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7ff fa7f 	bl	800948c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009f8e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8009f92:	4b82      	ldr	r3, [pc, #520]	; (800a19c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	4639      	mov	r1, r7
 8009f98:	1d3b      	adds	r3, r7, #4
 8009f9a:	6809      	ldr	r1, [r1, #0]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	f7ff fa75 	bl	800948c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009fa2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8009fa6:	4b7e      	ldr	r3, [pc, #504]	; (800a1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4639      	mov	r1, r7
 8009fac:	1d3b      	adds	r3, r7, #4
 8009fae:	6809      	ldr	r1, [r1, #0]
 8009fb0:	6818      	ldr	r0, [r3, #0]
 8009fb2:	f7ff fa7b 	bl	80094ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8009fb6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8009fba:	463b      	mov	r3, r7
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 8009fc4:	f000 fed4 	bl	800ad70 <abort>
  const auto& data =
 8009fc8:	463b      	mov	r3, r7
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8009fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fd6:	7a1b      	ldrb	r3, [r3, #8]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d002      	beq.n	8009fe2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 8009fdc:	2b09      	cmp	r3, #9
 8009fde:	d061      	beq.n	800a0a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 8009fe0:	e0bf      	b.n	800a162 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8009fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f91a 	bl	800a228 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8009ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ff8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f97e 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a002:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a006:	f7ff fa71 	bl	80094ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a00a:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800a00c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a010:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f972 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a01a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a01e:	f7ff fa65 	bl	80094ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a022:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800a024:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a028:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f966 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a032:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a036:	f7ff fa59 	bl	80094ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a03a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800a03c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a040:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f95a 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a04a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a04e:	f7ff fa5c 	bl	800950a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800a052:	4603      	mov	r3, r0
 800a054:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a058:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a05c:	f107 0008 	add.w	r0, r7, #8
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	9502      	str	r5, [sp, #8]
 800a06a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	9400      	str	r4, [sp, #0]
 800a072:	4613      	mov	r3, r2
 800a074:	4632      	mov	r2, r6
 800a076:	f7ff fd25 	bl	8009ac4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800a07a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fb f8a1 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800a084:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fb f89c 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800a08e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a092:	4618      	mov	r0, r3
 800a094:	f7fb f897 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800a098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fb f892 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800a0a2:	e071      	b.n	800a188 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800a0a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a0a8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 f891 	bl	800a1d4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800a0b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a0b6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f91f 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a0c0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a0c4:	f7ff fa32 	bl	800952c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a0c8:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800a0ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a0ce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f913 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a0d8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a0dc:	f7ff fa26 	bl	800952c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a0e0:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800a0e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a0e6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 f907 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a0f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a0f4:	f7ff fc72 	bl	80099dc <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800a0f8:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800a0fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a0fe:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f8fb 	bl	800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a108:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a10c:	f7ff fa1d 	bl	800954a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800a110:	4603      	mov	r3, r0
 800a112:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800a116:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800a11a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	9502      	str	r5, [sp, #8]
 800a128:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	9400      	str	r4, [sp, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	4632      	mov	r2, r6
 800a134:	f7ff fd5c 	bl	8009bf0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800a138:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fb f842 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800a142:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a146:	4618      	mov	r0, r3
 800a148:	f7fb f83d 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800a14c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a150:	4618      	mov	r0, r3
 800a152:	f7fb f838 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800a156:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fb f833 	bl	80051c6 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800a160:	e012      	b.n	800a188 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800a162:	1d3b      	adds	r3, r7, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695c      	ldr	r4, [r3, #20]
 800a168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a16c:	7a1b      	ldrb	r3, [r3, #8]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f9 fad8 	bl	8003724 <TfLiteTypeGetName>
 800a174:	4602      	mov	r2, r0
 800a176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a17a:	7a1b      	ldrb	r3, [r3, #8]
 800a17c:	1d38      	adds	r0, r7, #4
 800a17e:	4909      	ldr	r1, [pc, #36]	; (800a1a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800a180:	6800      	ldr	r0, [r0, #0]
 800a182:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a190:	46bd      	mov	sp, r7
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a194:	080129e4 	.word	0x080129e4
 800a198:	080129e8 	.word	0x080129e8
 800a19c:	080129ec 	.word	0x080129ec
 800a1a0:	080129f0 	.word	0x080129f0
 800a1a4:	08011a08 	.word	0x08011a08

0800a1a8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800a1a8:	b4b0      	push	{r4, r5, r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a07      	ldr	r2, [pc, #28]	; (800a1d0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800a1b4:	461c      	mov	r4, r3
 800a1b6:	4615      	mov	r5, r2
 800a1b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a1c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bcb0      	pop	{r4, r5, r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	08011a24 	.word	0x08011a24

0800a1d4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	425a      	negs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	425a      	negs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	69da      	ldr	r2, [r3, #28]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	619a      	str	r2, [r3, #24]
  return op_params;
 800a21a:	bf00      	nop
}
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f103 0220 	add.w	r2, r3, #32
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f103 011c 	add.w	r1, r3, #28
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fb88 	bl	8009958 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800a248:	bf00      	nop
}
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800a252:	b580      	push	{r7, lr}
 800a254:	b08a      	sub	sp, #40	; 0x28
 800a256:	af02      	add	r7, sp, #8
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	72fb      	strb	r3, [r7, #11]
 800a260:	4613      	mov	r3, r2
 800a262:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800a264:	7abb      	ldrb	r3, [r7, #10]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d044      	beq.n	800a2f4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	f04f 0300 	mov.w	r3, #0
 800a272:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800a276:	f107 0310 	add.w	r3, r7, #16
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7fa fbc2 	bl	8004a10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800a28c:	4603      	mov	r3, r0
 800a28e:	77fb      	strb	r3, [r7, #31]
 800a290:	7ffb      	ldrb	r3, [r7, #31]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800a296:	7ffb      	ldrb	r3, [r7, #31]
 800a298:	e02d      	b.n	800a2f6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800a29a:	ed97 7b04 	vldr	d7, [r7, #16]
 800a29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	eeb0 0a47 	vmov.f32	s0, s14
 800a2ac:	eef0 0a67 	vmov.f32	s1, s15
 800a2b0:	f7fa f9de 	bl	8004670 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691a      	ldr	r2, [r3, #16]
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800a2c4:	f000 fd54 	bl	800ad70 <abort>
    data->filter_zero_point = filter->params.zero_point;
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ce:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	691a      	ldr	r2, [r3, #16]
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d6:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2da:	f103 0208 	add.w	r2, r3, #8
 800a2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	7af9      	ldrb	r1, [r7, #11]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fa fd82 	bl	8004df4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800a2f0:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800a2f2:	e000      	b.n	800a2f6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3720      	adds	r7, #32
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d103      	bne.n	800a31e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7fa ff34 	bl	8005184 <_ZN6tflite12RuntimeShapeC1Ev>
 800a31c:	e00d      	b.n	800a33a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	3304      	adds	r3, #4
 800a32e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	6939      	ldr	r1, [r7, #16]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fa ff33 	bl	80051a0 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	4a04      	ldr	r2, [pc, #16]	; (800a360 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	08012a1c 	.word	0x08012a1c

0800a364 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	4a04      	ldr	r2, [pc, #16]	; (800a380 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	08012a1c 	.word	0x08012a1c

0800a384 <_ZN6tflite13MemoryPlannerD0Ev>:
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff ffe9 	bl	800a364 <_ZN6tflite13MemoryPlannerD1Ev>
 800a392:	2104      	movs	r1, #4
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fc04 	bl	800aba2 <_ZdlPvj>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800a3aa:	2328      	movs	r3, #40	; 0x28
 800a3ac:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800a3ae:	2328      	movs	r3, #40	; 0x28
  }
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800a3bc:	b480      	push	{r7}
 800a3be:	b089      	sub	sp, #36	; 0x24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	61bb      	str	r3, [r7, #24]
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	da4c      	bge.n	800a472 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	440b      	add	r3, r1
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	da39      	bge.n	800a46a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	441a      	add	r2, r3
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a416:	3b01      	subs	r3, #1
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	440b      	add	r3, r1
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a434:	3b01      	subs	r3, #1
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	4413      	add	r3, r2
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	441a      	add	r2, r3
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a44e:	3b01      	subs	r3, #1
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	68b9      	ldr	r1, [r7, #8]
 800a454:	440b      	add	r3, r1
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800a466:	2301      	movs	r3, #1
 800a468:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	3301      	adds	r3, #1
 800a46e:	61bb      	str	r3, [r7, #24]
 800a470:	e7ae      	b.n	800a3d0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d000      	beq.n	800a47a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800a478:	e7a6      	b.n	800a3c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800a47a:	bf00      	nop
 800a47c:	3724      	adds	r7, #36	; 0x24
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800a488:	b590      	push	{r4, r7, lr}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff ff54 	bl	800a344 <_ZN6tflite13MemoryPlannerC1Ev>
 800a49c:	4a22      	ldr	r2, [pc, #136]	; (800a528 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	609a      	str	r2, [r3, #8]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800a4b0:	687c      	ldr	r4, [r7, #4]
 800a4b2:	f7ff ff77 	bl	800a3a4 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	fbb4 f3f3 	udiv	r3, r4, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	461a      	mov	r2, r3
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	461a      	mov	r2, r3
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4618      	mov	r0, r3
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	bd90      	pop	{r4, r7, pc}
 800a528:	080129fc 	.word	0x080129fc

0800a52c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	4a05      	ldr	r2, [pc, #20]	; (800a54c <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff ff11 	bl	800a364 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	080129fc 	.word	0x080129fc

0800a550 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
}
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ffe7 	bl	800a52c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800a55e:	212c      	movs	r1, #44	; 0x2c
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fb1e 	bl	800aba2 <_ZdlPvj>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	db08      	blt.n	800a59c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	461a      	mov	r2, r3
 800a590:	4913      	ldr	r1, [pc, #76]	; (800a5e0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800a592:	68b8      	ldr	r0, [r7, #8]
 800a594:	f7f9 f942 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800a598:	2301      	movs	r3, #1
 800a59a:	e01d      	b.n	800a5d8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	4413      	add	r3, r2
 800a5a8:	617b      	str	r3, [r7, #20]
  current->size = size;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	6a3a      	ldr	r2, [r7, #32]
 800a5ba:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c2:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	08011b34 	.word	0x08011b34

0800a5e4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b089      	sub	sp, #36	; 0x24
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	011b      	lsls	r3, r3, #4
 800a5fc:	4413      	add	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	681c      	ldr	r4, [r3, #0]
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	47a0      	blx	r4
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bf14      	ite	ne
 800a61c:	2301      	movne	r3, #1
 800a61e:	2300      	moveq	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800a626:	2301      	movs	r3, #1
 800a628:	e003      	b.n	800a632 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd90      	pop	{r4, r7, pc}

0800a63a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800a63a:	b480      	push	{r7}
 800a63c:	b087      	sub	sp, #28
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800a652:	4413      	add	r3, r2
 800a654:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	da01      	bge.n	800a664 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800a660:	2300      	movs	r3, #0
 800a662:	e007      	b.n	800a674 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	dd01      	ble.n	800a672 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800a66e:	2300      	movs	r3, #0
 800a670:	e000      	b.n	800a674 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800a672:	2301      	movs	r3, #1
}
 800a674:	4618      	mov	r0, r3
 800a676:	371c      	adds	r7, #28
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800a68e:	2300      	movs	r3, #0
 800a690:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	699a      	ldr	r2, [r3, #24]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	440b      	add	r3, r1
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	e011      	b.n	800a6d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b8:	d101      	bne.n	800a6be <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e029      	b.n	800a712 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	440b      	add	r3, r1
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6939      	ldr	r1, [r7, #16]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff ffad 	bl	800a63a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	617b      	str	r3, [r7, #20]
      break;
 800a6ea:	e011      	b.n	800a710 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d00b      	beq.n	800a70e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4619      	mov	r1, r3
 800a700:	460b      	mov	r3, r1
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	440b      	add	r3, r1
 800a706:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800a708:	4413      	add	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800a70c:	e7e2      	b.n	800a6d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800a70e:	bf00      	nop
  } while (true);
  return result;
 800a710:	697b      	ldr	r3, [r7, #20]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b098      	sub	sp, #96	; 0x60
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a728:	f083 0301 	eor.w	r3, r3, #1
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f040 815f 	bne.w	800a9f2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 815a 	beq.w	800a9f2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800a750:	2300      	movs	r3, #0
 800a752:	657b      	str	r3, [r7, #84]	; 0x54
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a75a:	429a      	cmp	r2, r3
 800a75c:	da4d      	bge.n	800a7fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68da      	ldr	r2, [r3, #12]
 800a762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a764:	011b      	lsls	r3, r3, #4
 800a766:	4413      	add	r3, r2
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d11e      	bne.n	800a7ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800a770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a772:	3b01      	subs	r3, #1
 800a774:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a77c:	011b      	lsls	r3, r3, #4
 800a77e:	441a      	add	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6919      	ldr	r1, [r3, #16]
 800a784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	695a      	ldr	r2, [r3, #20]
 800a792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a79a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	e021      	b.n	800a7f2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7b4:	011b      	lsls	r3, r3, #4
 800a7b6:	441a      	add	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6919      	ldr	r1, [r3, #16]
 800a7bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695a      	ldr	r2, [r3, #20]
 800a7ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7d2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68da      	ldr	r2, [r3, #12]
 800a7d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	441a      	add	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	6852      	ldr	r2, [r2, #4]
 800a7ea:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800a7ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800a7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7f8:	e7ac      	b.n	800a754 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691a      	ldr	r2, [r3, #16]
 800a7fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	695a      	ldr	r2, [r3, #20]
 800a808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a80a:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800a80c:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800a812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	461a      	mov	r2, r3
 800a818:	f7ff fdd0 	bl	800a3bc <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699a      	ldr	r2, [r3, #24]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	4619      	mov	r1, r3
 800a832:	460b      	mov	r3, r1
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	440b      	add	r3, r1
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800a83e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800a84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a852:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	4413      	add	r3, r2
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a864:	d106      	bne.n	800a874 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a882:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800a884:	2301      	movs	r3, #1
 800a886:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a88e:	429a      	cmp	r2, r3
 800a890:	f280 80b0 	bge.w	800a9f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	695a      	ldr	r2, [r3, #20]
 800a898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	4413      	add	r3, r2
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d12d      	bne.n	800a92a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fed1 	bl	800a680 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800a8de:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800a8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d012      	beq.n	800a90c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800a8f0:	4413      	add	r3, r2
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800a8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800a8fc:	4413      	add	r3, r2
 800a8fe:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800a900:	6a3a      	ldr	r2, [r7, #32]
 800a902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a904:	429a      	cmp	r2, r3
 800a906:	dd01      	ble.n	800a90c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00f      	beq.n	800a932 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	429a      	cmp	r2, r3
 800a922:	da08      	bge.n	800a936 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800a928:	e7d3      	b.n	800a8d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a930:	e002      	b.n	800a938 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800a932:	bf00      	nop
 800a934:	e000      	b.n	800a938 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800a936:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a944:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	699a      	ldr	r2, [r3, #24]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4619      	mov	r1, r3
 800a950:	460b      	mov	r3, r1
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	440b      	add	r3, r1
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a960:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a966:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800a978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a97e:	429a      	cmp	r2, r3
 800a980:	da09      	bge.n	800a996 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1a      	ldr	r2, [r3, #32]
 800a98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	621a      	str	r2, [r3, #32]
 800a994:	e029      	b.n	800a9ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800a996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a998:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800a99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a6:	d107      	bne.n	800a9b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800a9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b4:	609a      	str	r2, [r3, #8]
          break;
 800a9b6:	e018      	b.n	800a9ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6999      	ldr	r1, [r3, #24]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	4413      	add	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	440b      	add	r3, r1
 800a9c8:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	da07      	bge.n	800a9e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800a9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800a9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	609a      	str	r2, [r3, #8]
          break;
 800a9e2:	e002      	b.n	800a9ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800a9e8:	e7d7      	b.n	800a99a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f0:	e74a      	b.n	800a888 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800a9f2:	bf00      	nop
    }
  }
}
 800a9f4:	3760      	adds	r7, #96	; 0x60
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b086      	sub	sp, #24
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fe89 	bl	800a71a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	e035      	b.n	800aa80 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	460b      	mov	r3, r1
 800aa20:	005b      	lsls	r3, r3, #1
 800aa22:	440b      	add	r3, r1
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
  while (entry) {
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d024      	beq.n	800aa7e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800aa3e:	4413      	add	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d901      	bls.n	800aa5a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d00b      	beq.n	800aa7c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	699a      	ldr	r2, [r3, #24]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	460b      	mov	r3, r1
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	440b      	add	r3, r1
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]
  while (entry) {
 800aa7a:	e7d8      	b.n	800aa2e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800aa7c:	bf00      	nop
  }
  return max_size;
 800aa7e:	693b      	ldr	r3, [r7, #16]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7ff fe33 	bl	800a71a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	db04      	blt.n	800aac4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	db08      	blt.n	800aad6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	4909      	ldr	r1, [pc, #36]	; (800aaf0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	f7f8 fea5 	bl	800381c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e008      	b.n	800aae8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08011ba8 	.word	0x08011ba8

0800aaf4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	2104      	movs	r1, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7f9 f96f 	bl	8003de6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800ab08:	4603      	mov	r3, r0
  }
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	210a      	movs	r1, #10
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f9 f932 	bl	8003d8a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ab26:	4603      	mov	r3, r0
 800ab28:	b2db      	uxtb	r3, r3
  }
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800ab40:	f000 f916 	bl	800ad70 <abort>

  return std::max(
      op_code->builtin_code(),
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff ffe4 	bl	800ab12 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff ffd0 	bl	800aaf4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800ab54:	4603      	mov	r3, r0
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	73fb      	strb	r3, [r7, #15]
 800ab5a:	f107 020f 	add.w	r2, r7, #15
 800ab5e:	f107 030e 	add.w	r3, r7, #14
 800ab62:	4611      	mov	r1, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 f806 	bl	800ab76 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	781b      	ldrb	r3, [r3, #0]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d201      	bcs.n	800ab90 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	e000      	b.n	800ab92 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800ab90:	687b      	ldr	r3, [r7, #4]
    }
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <_ZdlPv>:
 800ab9e:	f000 b957 	b.w	800ae50 <free>

0800aba2 <_ZdlPvj>:
 800aba2:	f7ff bffc 	b.w	800ab9e <_ZdlPv>

0800aba6 <_ZdaPv>:
 800aba6:	f7ff bffa 	b.w	800ab9e <_ZdlPv>

0800abaa <__cxa_guard_acquire>:
 800abaa:	6803      	ldr	r3, [r0, #0]
 800abac:	07db      	lsls	r3, r3, #31
 800abae:	d406      	bmi.n	800abbe <__cxa_guard_acquire+0x14>
 800abb0:	7843      	ldrb	r3, [r0, #1]
 800abb2:	b103      	cbz	r3, 800abb6 <__cxa_guard_acquire+0xc>
 800abb4:	deff      	udf	#255	; 0xff
 800abb6:	2301      	movs	r3, #1
 800abb8:	7043      	strb	r3, [r0, #1]
 800abba:	4618      	mov	r0, r3
 800abbc:	4770      	bx	lr
 800abbe:	2000      	movs	r0, #0
 800abc0:	4770      	bx	lr

0800abc2 <__cxa_guard_release>:
 800abc2:	2301      	movs	r3, #1
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	4770      	bx	lr

0800abc8 <_Znwj>:
 800abc8:	2801      	cmp	r0, #1
 800abca:	bf38      	it	cc
 800abcc:	2001      	movcc	r0, #1
 800abce:	b510      	push	{r4, lr}
 800abd0:	4604      	mov	r4, r0
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 f934 	bl	800ae40 <malloc>
 800abd8:	b930      	cbnz	r0, 800abe8 <_Znwj+0x20>
 800abda:	f000 f81d 	bl	800ac18 <_ZSt15get_new_handlerv>
 800abde:	b908      	cbnz	r0, 800abe4 <_Znwj+0x1c>
 800abe0:	f000 f8c6 	bl	800ad70 <abort>
 800abe4:	4780      	blx	r0
 800abe6:	e7f4      	b.n	800abd2 <_Znwj+0xa>
 800abe8:	bd10      	pop	{r4, pc}

0800abea <_Znaj>:
 800abea:	f7ff bfed 	b.w	800abc8 <_Znwj>

0800abee <__cxa_pure_virtual>:
 800abee:	b508      	push	{r3, lr}
 800abf0:	f000 f80c 	bl	800ac0c <_ZSt9terminatev>

0800abf4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800abf4:	b508      	push	{r3, lr}
 800abf6:	4780      	blx	r0
 800abf8:	f000 f8ba 	bl	800ad70 <abort>

0800abfc <_ZSt13get_terminatev>:
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <_ZSt13get_terminatev+0xc>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	f3bf 8f5b 	dmb	ish
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000010 	.word	0x20000010

0800ac0c <_ZSt9terminatev>:
 800ac0c:	b508      	push	{r3, lr}
 800ac0e:	f7ff fff5 	bl	800abfc <_ZSt13get_terminatev>
 800ac12:	f7ff ffef 	bl	800abf4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800ac18 <_ZSt15get_new_handlerv>:
 800ac18:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <_ZSt15get_new_handlerv+0xc>)
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	f3bf 8f5b 	dmb	ish
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000b90 	.word	0x20000b90

0800ac28 <frexp>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	ec55 4b10 	vmov	r4, r5, d0
 800ac30:	6001      	str	r1, [r0, #0]
 800ac32:	4916      	ldr	r1, [pc, #88]	; (800ac8c <frexp+0x64>)
 800ac34:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800ac38:	428a      	cmp	r2, r1
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	dc22      	bgt.n	800ac86 <frexp+0x5e>
 800ac40:	ee10 1a10 	vmov	r1, s0
 800ac44:	4311      	orrs	r1, r2
 800ac46:	d01e      	beq.n	800ac86 <frexp+0x5e>
 800ac48:	4911      	ldr	r1, [pc, #68]	; (800ac90 <frexp+0x68>)
 800ac4a:	4029      	ands	r1, r5
 800ac4c:	b969      	cbnz	r1, 800ac6a <frexp+0x42>
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <frexp+0x6c>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	ee10 0a10 	vmov	r0, s0
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fce0 	bl	800061c <__aeabi_dmul>
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ac62:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ac66:	4604      	mov	r4, r0
 800ac68:	6031      	str	r1, [r6, #0]
 800ac6a:	6831      	ldr	r1, [r6, #0]
 800ac6c:	1512      	asrs	r2, r2, #20
 800ac6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac72:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800ac76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac7a:	440a      	add	r2, r1
 800ac7c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800ac80:	6032      	str	r2, [r6, #0]
 800ac82:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ac86:	ec45 4b10 	vmov	d0, r4, r5
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	7fefffff 	.word	0x7fefffff
 800ac90:	7ff00000 	.word	0x7ff00000
 800ac94:	43500000 	.word	0x43500000

0800ac98 <round>:
 800ac98:	ec51 0b10 	vmov	r0, r1, d0
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800aca2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800aca6:	2c13      	cmp	r4, #19
 800aca8:	ee10 2a10 	vmov	r2, s0
 800acac:	460b      	mov	r3, r1
 800acae:	dc19      	bgt.n	800ace4 <round+0x4c>
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	da09      	bge.n	800acc8 <round+0x30>
 800acb4:	3401      	adds	r4, #1
 800acb6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800acba:	d103      	bne.n	800acc4 <round+0x2c>
 800acbc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800acc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800acc4:	2100      	movs	r1, #0
 800acc6:	e028      	b.n	800ad1a <round+0x82>
 800acc8:	4d15      	ldr	r5, [pc, #84]	; (800ad20 <round+0x88>)
 800acca:	4125      	asrs	r5, r4
 800accc:	ea01 0605 	and.w	r6, r1, r5
 800acd0:	4332      	orrs	r2, r6
 800acd2:	d00e      	beq.n	800acf2 <round+0x5a>
 800acd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800acd8:	fa42 f404 	asr.w	r4, r2, r4
 800acdc:	4423      	add	r3, r4
 800acde:	ea23 0305 	bic.w	r3, r3, r5
 800ace2:	e7ef      	b.n	800acc4 <round+0x2c>
 800ace4:	2c33      	cmp	r4, #51	; 0x33
 800ace6:	dd07      	ble.n	800acf8 <round+0x60>
 800ace8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800acec:	d101      	bne.n	800acf2 <round+0x5a>
 800acee:	f7f5 fadf 	bl	80002b0 <__adddf3>
 800acf2:	ec41 0b10 	vmov	d0, r0, r1
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800acfc:	f04f 35ff 	mov.w	r5, #4294967295
 800ad00:	40f5      	lsrs	r5, r6
 800ad02:	4228      	tst	r0, r5
 800ad04:	d0f5      	beq.n	800acf2 <round+0x5a>
 800ad06:	2101      	movs	r1, #1
 800ad08:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ad0c:	fa01 f404 	lsl.w	r4, r1, r4
 800ad10:	1912      	adds	r2, r2, r4
 800ad12:	bf28      	it	cs
 800ad14:	185b      	addcs	r3, r3, r1
 800ad16:	ea22 0105 	bic.w	r1, r2, r5
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	e7e8      	b.n	800acf2 <round+0x5a>
 800ad20:	000fffff 	.word	0x000fffff

0800ad24 <roundf>:
 800ad24:	ee10 0a10 	vmov	r0, s0
 800ad28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ad2c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ad30:	2a16      	cmp	r2, #22
 800ad32:	dc15      	bgt.n	800ad60 <roundf+0x3c>
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	da08      	bge.n	800ad4a <roundf+0x26>
 800ad38:	3201      	adds	r2, #1
 800ad3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ad3e:	d101      	bne.n	800ad44 <roundf+0x20>
 800ad40:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ad44:	ee00 3a10 	vmov	s0, r3
 800ad48:	4770      	bx	lr
 800ad4a:	4908      	ldr	r1, [pc, #32]	; (800ad6c <roundf+0x48>)
 800ad4c:	4111      	asrs	r1, r2
 800ad4e:	4208      	tst	r0, r1
 800ad50:	d0fa      	beq.n	800ad48 <roundf+0x24>
 800ad52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad56:	4113      	asrs	r3, r2
 800ad58:	4403      	add	r3, r0
 800ad5a:	ea23 0301 	bic.w	r3, r3, r1
 800ad5e:	e7f1      	b.n	800ad44 <roundf+0x20>
 800ad60:	2a80      	cmp	r2, #128	; 0x80
 800ad62:	d1f1      	bne.n	800ad48 <roundf+0x24>
 800ad64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	007fffff 	.word	0x007fffff

0800ad70 <abort>:
 800ad70:	b508      	push	{r3, lr}
 800ad72:	2006      	movs	r0, #6
 800ad74:	f000 ff4a 	bl	800bc0c <raise>
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7f7 f867 	bl	8001e4c <_exit>
	...

0800ad80 <__assert_func>:
 800ad80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad82:	4614      	mov	r4, r2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b09      	ldr	r3, [pc, #36]	; (800adac <__assert_func+0x2c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	68d8      	ldr	r0, [r3, #12]
 800ad8e:	b14c      	cbz	r4, 800ada4 <__assert_func+0x24>
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <__assert_func+0x30>)
 800ad92:	9100      	str	r1, [sp, #0]
 800ad94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad98:	4906      	ldr	r1, [pc, #24]	; (800adb4 <__assert_func+0x34>)
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	f000 f81a 	bl	800add4 <fiprintf>
 800ada0:	f7ff ffe6 	bl	800ad70 <abort>
 800ada4:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <__assert_func+0x38>)
 800ada6:	461c      	mov	r4, r3
 800ada8:	e7f3      	b.n	800ad92 <__assert_func+0x12>
 800adaa:	bf00      	nop
 800adac:	20000014 	.word	0x20000014
 800adb0:	08012a34 	.word	0x08012a34
 800adb4:	08012a41 	.word	0x08012a41
 800adb8:	08012a6f 	.word	0x08012a6f

0800adbc <atexit>:
 800adbc:	2300      	movs	r3, #0
 800adbe:	4601      	mov	r1, r0
 800adc0:	461a      	mov	r2, r3
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 b830 	b.w	800be28 <__register_exitproc>

0800adc8 <__errno>:
 800adc8:	4b01      	ldr	r3, [pc, #4]	; (800add0 <__errno+0x8>)
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	20000014 	.word	0x20000014

0800add4 <fiprintf>:
 800add4:	b40e      	push	{r1, r2, r3}
 800add6:	b503      	push	{r0, r1, lr}
 800add8:	4601      	mov	r1, r0
 800adda:	ab03      	add	r3, sp, #12
 800addc:	4805      	ldr	r0, [pc, #20]	; (800adf4 <fiprintf+0x20>)
 800adde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	f000 f93f 	bl	800b068 <_vfiprintf_r>
 800adea:	b002      	add	sp, #8
 800adec:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf0:	b003      	add	sp, #12
 800adf2:	4770      	bx	lr
 800adf4:	20000014 	.word	0x20000014

0800adf8 <__libc_init_array>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4d0d      	ldr	r5, [pc, #52]	; (800ae30 <__libc_init_array+0x38>)
 800adfc:	4c0d      	ldr	r4, [pc, #52]	; (800ae34 <__libc_init_array+0x3c>)
 800adfe:	1b64      	subs	r4, r4, r5
 800ae00:	10a4      	asrs	r4, r4, #2
 800ae02:	2600      	movs	r6, #0
 800ae04:	42a6      	cmp	r6, r4
 800ae06:	d109      	bne.n	800ae1c <__libc_init_array+0x24>
 800ae08:	4d0b      	ldr	r5, [pc, #44]	; (800ae38 <__libc_init_array+0x40>)
 800ae0a:	4c0c      	ldr	r4, [pc, #48]	; (800ae3c <__libc_init_array+0x44>)
 800ae0c:	f002 fefa 	bl	800dc04 <_init>
 800ae10:	1b64      	subs	r4, r4, r5
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	2600      	movs	r6, #0
 800ae16:	42a6      	cmp	r6, r4
 800ae18:	d105      	bne.n	800ae26 <__libc_init_array+0x2e>
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae20:	4798      	blx	r3
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7ee      	b.n	800ae04 <__libc_init_array+0xc>
 800ae26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2a:	4798      	blx	r3
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	e7f2      	b.n	800ae16 <__libc_init_array+0x1e>
 800ae30:	08012e20 	.word	0x08012e20
 800ae34:	08012e20 	.word	0x08012e20
 800ae38:	08012e20 	.word	0x08012e20
 800ae3c:	08012e24 	.word	0x08012e24

0800ae40 <malloc>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <malloc+0xc>)
 800ae42:	4601      	mov	r1, r0
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f000 b88b 	b.w	800af60 <_malloc_r>
 800ae4a:	bf00      	nop
 800ae4c:	20000014 	.word	0x20000014

0800ae50 <free>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <free+0xc>)
 800ae52:	4601      	mov	r1, r0
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f000 b833 	b.w	800aec0 <_free_r>
 800ae5a:	bf00      	nop
 800ae5c:	20000014 	.word	0x20000014

0800ae60 <memcpy>:
 800ae60:	440a      	add	r2, r1
 800ae62:	4291      	cmp	r1, r2
 800ae64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae68:	d100      	bne.n	800ae6c <memcpy+0xc>
 800ae6a:	4770      	bx	lr
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae76:	4291      	cmp	r1, r2
 800ae78:	d1f9      	bne.n	800ae6e <memcpy+0xe>
 800ae7a:	bd10      	pop	{r4, pc}

0800ae7c <memmove>:
 800ae7c:	4288      	cmp	r0, r1
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	eb01 0402 	add.w	r4, r1, r2
 800ae84:	d902      	bls.n	800ae8c <memmove+0x10>
 800ae86:	4284      	cmp	r4, r0
 800ae88:	4623      	mov	r3, r4
 800ae8a:	d807      	bhi.n	800ae9c <memmove+0x20>
 800ae8c:	1e43      	subs	r3, r0, #1
 800ae8e:	42a1      	cmp	r1, r4
 800ae90:	d008      	beq.n	800aea4 <memmove+0x28>
 800ae92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae9a:	e7f8      	b.n	800ae8e <memmove+0x12>
 800ae9c:	4402      	add	r2, r0
 800ae9e:	4601      	mov	r1, r0
 800aea0:	428a      	cmp	r2, r1
 800aea2:	d100      	bne.n	800aea6 <memmove+0x2a>
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeae:	e7f7      	b.n	800aea0 <memmove+0x24>

0800aeb0 <memset>:
 800aeb0:	4402      	add	r2, r0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d100      	bne.n	800aeba <memset+0xa>
 800aeb8:	4770      	bx	lr
 800aeba:	f803 1b01 	strb.w	r1, [r3], #1
 800aebe:	e7f9      	b.n	800aeb4 <memset+0x4>

0800aec0 <_free_r>:
 800aec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aec2:	2900      	cmp	r1, #0
 800aec4:	d048      	beq.n	800af58 <_free_r+0x98>
 800aec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeca:	9001      	str	r0, [sp, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f1a1 0404 	sub.w	r4, r1, #4
 800aed2:	bfb8      	it	lt
 800aed4:	18e4      	addlt	r4, r4, r3
 800aed6:	f002 f8a7 	bl	800d028 <__malloc_lock>
 800aeda:	4a20      	ldr	r2, [pc, #128]	; (800af5c <_free_r+0x9c>)
 800aedc:	9801      	ldr	r0, [sp, #4]
 800aede:	6813      	ldr	r3, [r2, #0]
 800aee0:	4615      	mov	r5, r2
 800aee2:	b933      	cbnz	r3, 800aef2 <_free_r+0x32>
 800aee4:	6063      	str	r3, [r4, #4]
 800aee6:	6014      	str	r4, [r2, #0]
 800aee8:	b003      	add	sp, #12
 800aeea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeee:	f002 b8a1 	b.w	800d034 <__malloc_unlock>
 800aef2:	42a3      	cmp	r3, r4
 800aef4:	d90b      	bls.n	800af0e <_free_r+0x4e>
 800aef6:	6821      	ldr	r1, [r4, #0]
 800aef8:	1862      	adds	r2, r4, r1
 800aefa:	4293      	cmp	r3, r2
 800aefc:	bf04      	itt	eq
 800aefe:	681a      	ldreq	r2, [r3, #0]
 800af00:	685b      	ldreq	r3, [r3, #4]
 800af02:	6063      	str	r3, [r4, #4]
 800af04:	bf04      	itt	eq
 800af06:	1852      	addeq	r2, r2, r1
 800af08:	6022      	streq	r2, [r4, #0]
 800af0a:	602c      	str	r4, [r5, #0]
 800af0c:	e7ec      	b.n	800aee8 <_free_r+0x28>
 800af0e:	461a      	mov	r2, r3
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	b10b      	cbz	r3, 800af18 <_free_r+0x58>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d9fa      	bls.n	800af0e <_free_r+0x4e>
 800af18:	6811      	ldr	r1, [r2, #0]
 800af1a:	1855      	adds	r5, r2, r1
 800af1c:	42a5      	cmp	r5, r4
 800af1e:	d10b      	bne.n	800af38 <_free_r+0x78>
 800af20:	6824      	ldr	r4, [r4, #0]
 800af22:	4421      	add	r1, r4
 800af24:	1854      	adds	r4, r2, r1
 800af26:	42a3      	cmp	r3, r4
 800af28:	6011      	str	r1, [r2, #0]
 800af2a:	d1dd      	bne.n	800aee8 <_free_r+0x28>
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6053      	str	r3, [r2, #4]
 800af32:	4421      	add	r1, r4
 800af34:	6011      	str	r1, [r2, #0]
 800af36:	e7d7      	b.n	800aee8 <_free_r+0x28>
 800af38:	d902      	bls.n	800af40 <_free_r+0x80>
 800af3a:	230c      	movs	r3, #12
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	e7d3      	b.n	800aee8 <_free_r+0x28>
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	1961      	adds	r1, r4, r5
 800af44:	428b      	cmp	r3, r1
 800af46:	bf04      	itt	eq
 800af48:	6819      	ldreq	r1, [r3, #0]
 800af4a:	685b      	ldreq	r3, [r3, #4]
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	bf04      	itt	eq
 800af50:	1949      	addeq	r1, r1, r5
 800af52:	6021      	streq	r1, [r4, #0]
 800af54:	6054      	str	r4, [r2, #4]
 800af56:	e7c7      	b.n	800aee8 <_free_r+0x28>
 800af58:	b003      	add	sp, #12
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	20000b94 	.word	0x20000b94

0800af60 <_malloc_r>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	1ccd      	adds	r5, r1, #3
 800af64:	f025 0503 	bic.w	r5, r5, #3
 800af68:	3508      	adds	r5, #8
 800af6a:	2d0c      	cmp	r5, #12
 800af6c:	bf38      	it	cc
 800af6e:	250c      	movcc	r5, #12
 800af70:	2d00      	cmp	r5, #0
 800af72:	4606      	mov	r6, r0
 800af74:	db01      	blt.n	800af7a <_malloc_r+0x1a>
 800af76:	42a9      	cmp	r1, r5
 800af78:	d903      	bls.n	800af82 <_malloc_r+0x22>
 800af7a:	230c      	movs	r3, #12
 800af7c:	6033      	str	r3, [r6, #0]
 800af7e:	2000      	movs	r0, #0
 800af80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af82:	f002 f851 	bl	800d028 <__malloc_lock>
 800af86:	4921      	ldr	r1, [pc, #132]	; (800b00c <_malloc_r+0xac>)
 800af88:	680a      	ldr	r2, [r1, #0]
 800af8a:	4614      	mov	r4, r2
 800af8c:	b99c      	cbnz	r4, 800afb6 <_malloc_r+0x56>
 800af8e:	4f20      	ldr	r7, [pc, #128]	; (800b010 <_malloc_r+0xb0>)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	b923      	cbnz	r3, 800af9e <_malloc_r+0x3e>
 800af94:	4621      	mov	r1, r4
 800af96:	4630      	mov	r0, r6
 800af98:	f000 fe00 	bl	800bb9c <_sbrk_r>
 800af9c:	6038      	str	r0, [r7, #0]
 800af9e:	4629      	mov	r1, r5
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 fdfb 	bl	800bb9c <_sbrk_r>
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	d123      	bne.n	800aff2 <_malloc_r+0x92>
 800afaa:	230c      	movs	r3, #12
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	4630      	mov	r0, r6
 800afb0:	f002 f840 	bl	800d034 <__malloc_unlock>
 800afb4:	e7e3      	b.n	800af7e <_malloc_r+0x1e>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	1b5b      	subs	r3, r3, r5
 800afba:	d417      	bmi.n	800afec <_malloc_r+0x8c>
 800afbc:	2b0b      	cmp	r3, #11
 800afbe:	d903      	bls.n	800afc8 <_malloc_r+0x68>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	441c      	add	r4, r3
 800afc4:	6025      	str	r5, [r4, #0]
 800afc6:	e004      	b.n	800afd2 <_malloc_r+0x72>
 800afc8:	6863      	ldr	r3, [r4, #4]
 800afca:	42a2      	cmp	r2, r4
 800afcc:	bf0c      	ite	eq
 800afce:	600b      	streq	r3, [r1, #0]
 800afd0:	6053      	strne	r3, [r2, #4]
 800afd2:	4630      	mov	r0, r6
 800afd4:	f002 f82e 	bl	800d034 <__malloc_unlock>
 800afd8:	f104 000b 	add.w	r0, r4, #11
 800afdc:	1d23      	adds	r3, r4, #4
 800afde:	f020 0007 	bic.w	r0, r0, #7
 800afe2:	1ac2      	subs	r2, r0, r3
 800afe4:	d0cc      	beq.n	800af80 <_malloc_r+0x20>
 800afe6:	1a1b      	subs	r3, r3, r0
 800afe8:	50a3      	str	r3, [r4, r2]
 800afea:	e7c9      	b.n	800af80 <_malloc_r+0x20>
 800afec:	4622      	mov	r2, r4
 800afee:	6864      	ldr	r4, [r4, #4]
 800aff0:	e7cc      	b.n	800af8c <_malloc_r+0x2c>
 800aff2:	1cc4      	adds	r4, r0, #3
 800aff4:	f024 0403 	bic.w	r4, r4, #3
 800aff8:	42a0      	cmp	r0, r4
 800affa:	d0e3      	beq.n	800afc4 <_malloc_r+0x64>
 800affc:	1a21      	subs	r1, r4, r0
 800affe:	4630      	mov	r0, r6
 800b000:	f000 fdcc 	bl	800bb9c <_sbrk_r>
 800b004:	3001      	adds	r0, #1
 800b006:	d1dd      	bne.n	800afc4 <_malloc_r+0x64>
 800b008:	e7cf      	b.n	800afaa <_malloc_r+0x4a>
 800b00a:	bf00      	nop
 800b00c:	20000b94 	.word	0x20000b94
 800b010:	20000b98 	.word	0x20000b98

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f000 be3b 	b.w	800bca8 <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	; 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6983      	ldr	r3, [r0, #24]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f001 feca 	bl	800ce14 <__sinit>
 800b080:	4b89      	ldr	r3, [pc, #548]	; (800b2a8 <_vfiprintf_r+0x240>)
 800b082:	429d      	cmp	r5, r3
 800b084:	d11b      	bne.n	800b0be <_vfiprintf_r+0x56>
 800b086:	6875      	ldr	r5, [r6, #4]
 800b088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b08a:	07d9      	lsls	r1, r3, #31
 800b08c:	d405      	bmi.n	800b09a <_vfiprintf_r+0x32>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	059a      	lsls	r2, r3, #22
 800b092:	d402      	bmi.n	800b09a <_vfiprintf_r+0x32>
 800b094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b096:	f001 ff60 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	071b      	lsls	r3, r3, #28
 800b09e:	d501      	bpl.n	800b0a4 <_vfiprintf_r+0x3c>
 800b0a0:	692b      	ldr	r3, [r5, #16]
 800b0a2:	b9eb      	cbnz	r3, 800b0e0 <_vfiprintf_r+0x78>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f000 fe50 	bl	800bd4c <__swsetup_r>
 800b0ac:	b1c0      	cbz	r0, 800b0e0 <_vfiprintf_r+0x78>
 800b0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b0:	07dc      	lsls	r4, r3, #31
 800b0b2:	d50e      	bpl.n	800b0d2 <_vfiprintf_r+0x6a>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	b01d      	add	sp, #116	; 0x74
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	4b7b      	ldr	r3, [pc, #492]	; (800b2ac <_vfiprintf_r+0x244>)
 800b0c0:	429d      	cmp	r5, r3
 800b0c2:	d101      	bne.n	800b0c8 <_vfiprintf_r+0x60>
 800b0c4:	68b5      	ldr	r5, [r6, #8]
 800b0c6:	e7df      	b.n	800b088 <_vfiprintf_r+0x20>
 800b0c8:	4b79      	ldr	r3, [pc, #484]	; (800b2b0 <_vfiprintf_r+0x248>)
 800b0ca:	429d      	cmp	r5, r3
 800b0cc:	bf08      	it	eq
 800b0ce:	68f5      	ldreq	r5, [r6, #12]
 800b0d0:	e7da      	b.n	800b088 <_vfiprintf_r+0x20>
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	0598      	lsls	r0, r3, #22
 800b0d6:	d4ed      	bmi.n	800b0b4 <_vfiprintf_r+0x4c>
 800b0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0da:	f001 ff40 	bl	800cf5e <__retarget_lock_release_recursive>
 800b0de:	e7e9      	b.n	800b0b4 <_vfiprintf_r+0x4c>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e4:	2320      	movs	r3, #32
 800b0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ee:	2330      	movs	r3, #48	; 0x30
 800b0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2b4 <_vfiprintf_r+0x24c>
 800b0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f8:	f04f 0901 	mov.w	r9, #1
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	469a      	mov	sl, r3
 800b100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b104:	b10a      	cbz	r2, 800b10a <_vfiprintf_r+0xa2>
 800b106:	2a25      	cmp	r2, #37	; 0x25
 800b108:	d1f9      	bne.n	800b0fe <_vfiprintf_r+0x96>
 800b10a:	ebba 0b04 	subs.w	fp, sl, r4
 800b10e:	d00b      	beq.n	800b128 <_vfiprintf_r+0xc0>
 800b110:	465b      	mov	r3, fp
 800b112:	4622      	mov	r2, r4
 800b114:	4629      	mov	r1, r5
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff ff93 	bl	800b042 <__sfputs_r>
 800b11c:	3001      	adds	r0, #1
 800b11e:	f000 80aa 	beq.w	800b276 <_vfiprintf_r+0x20e>
 800b122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b124:	445a      	add	r2, fp
 800b126:	9209      	str	r2, [sp, #36]	; 0x24
 800b128:	f89a 3000 	ldrb.w	r3, [sl]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 80a2 	beq.w	800b276 <_vfiprintf_r+0x20e>
 800b132:	2300      	movs	r3, #0
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13c:	f10a 0a01 	add.w	sl, sl, #1
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	9307      	str	r3, [sp, #28]
 800b144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b148:	931a      	str	r3, [sp, #104]	; 0x68
 800b14a:	4654      	mov	r4, sl
 800b14c:	2205      	movs	r2, #5
 800b14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b152:	4858      	ldr	r0, [pc, #352]	; (800b2b4 <_vfiprintf_r+0x24c>)
 800b154:	f7f5 f844 	bl	80001e0 <memchr>
 800b158:	9a04      	ldr	r2, [sp, #16]
 800b15a:	b9d8      	cbnz	r0, 800b194 <_vfiprintf_r+0x12c>
 800b15c:	06d1      	lsls	r1, r2, #27
 800b15e:	bf44      	itt	mi
 800b160:	2320      	movmi	r3, #32
 800b162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b166:	0713      	lsls	r3, r2, #28
 800b168:	bf44      	itt	mi
 800b16a:	232b      	movmi	r3, #43	; 0x2b
 800b16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b170:	f89a 3000 	ldrb.w	r3, [sl]
 800b174:	2b2a      	cmp	r3, #42	; 0x2a
 800b176:	d015      	beq.n	800b1a4 <_vfiprintf_r+0x13c>
 800b178:	9a07      	ldr	r2, [sp, #28]
 800b17a:	4654      	mov	r4, sl
 800b17c:	2000      	movs	r0, #0
 800b17e:	f04f 0c0a 	mov.w	ip, #10
 800b182:	4621      	mov	r1, r4
 800b184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b188:	3b30      	subs	r3, #48	; 0x30
 800b18a:	2b09      	cmp	r3, #9
 800b18c:	d94e      	bls.n	800b22c <_vfiprintf_r+0x1c4>
 800b18e:	b1b0      	cbz	r0, 800b1be <_vfiprintf_r+0x156>
 800b190:	9207      	str	r2, [sp, #28]
 800b192:	e014      	b.n	800b1be <_vfiprintf_r+0x156>
 800b194:	eba0 0308 	sub.w	r3, r0, r8
 800b198:	fa09 f303 	lsl.w	r3, r9, r3
 800b19c:	4313      	orrs	r3, r2
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	46a2      	mov	sl, r4
 800b1a2:	e7d2      	b.n	800b14a <_vfiprintf_r+0xe2>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	1d19      	adds	r1, r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	9103      	str	r1, [sp, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bfbb      	ittet	lt
 800b1b0:	425b      	neglt	r3, r3
 800b1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b6:	9307      	strge	r3, [sp, #28]
 800b1b8:	9307      	strlt	r3, [sp, #28]
 800b1ba:	bfb8      	it	lt
 800b1bc:	9204      	strlt	r2, [sp, #16]
 800b1be:	7823      	ldrb	r3, [r4, #0]
 800b1c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c2:	d10c      	bne.n	800b1de <_vfiprintf_r+0x176>
 800b1c4:	7863      	ldrb	r3, [r4, #1]
 800b1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c8:	d135      	bne.n	800b236 <_vfiprintf_r+0x1ce>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	1d1a      	adds	r2, r3, #4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	9203      	str	r2, [sp, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bfb8      	it	lt
 800b1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1da:	3402      	adds	r4, #2
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2c4 <_vfiprintf_r+0x25c>
 800b1e2:	7821      	ldrb	r1, [r4, #0]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	f7f4 fffa 	bl	80001e0 <memchr>
 800b1ec:	b140      	cbz	r0, 800b200 <_vfiprintf_r+0x198>
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	eba0 000a 	sub.w	r0, r0, sl
 800b1f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	4303      	orrs	r3, r0
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	9304      	str	r3, [sp, #16]
 800b200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b204:	482c      	ldr	r0, [pc, #176]	; (800b2b8 <_vfiprintf_r+0x250>)
 800b206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b20a:	2206      	movs	r2, #6
 800b20c:	f7f4 ffe8 	bl	80001e0 <memchr>
 800b210:	2800      	cmp	r0, #0
 800b212:	d03f      	beq.n	800b294 <_vfiprintf_r+0x22c>
 800b214:	4b29      	ldr	r3, [pc, #164]	; (800b2bc <_vfiprintf_r+0x254>)
 800b216:	bb1b      	cbnz	r3, 800b260 <_vfiprintf_r+0x1f8>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	3307      	adds	r3, #7
 800b21c:	f023 0307 	bic.w	r3, r3, #7
 800b220:	3308      	adds	r3, #8
 800b222:	9303      	str	r3, [sp, #12]
 800b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b226:	443b      	add	r3, r7
 800b228:	9309      	str	r3, [sp, #36]	; 0x24
 800b22a:	e767      	b.n	800b0fc <_vfiprintf_r+0x94>
 800b22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b230:	460c      	mov	r4, r1
 800b232:	2001      	movs	r0, #1
 800b234:	e7a5      	b.n	800b182 <_vfiprintf_r+0x11a>
 800b236:	2300      	movs	r3, #0
 800b238:	3401      	adds	r4, #1
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	4619      	mov	r1, r3
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4620      	mov	r0, r4
 800b244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b248:	3a30      	subs	r2, #48	; 0x30
 800b24a:	2a09      	cmp	r2, #9
 800b24c:	d903      	bls.n	800b256 <_vfiprintf_r+0x1ee>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0c5      	beq.n	800b1de <_vfiprintf_r+0x176>
 800b252:	9105      	str	r1, [sp, #20]
 800b254:	e7c3      	b.n	800b1de <_vfiprintf_r+0x176>
 800b256:	fb0c 2101 	mla	r1, ip, r1, r2
 800b25a:	4604      	mov	r4, r0
 800b25c:	2301      	movs	r3, #1
 800b25e:	e7f0      	b.n	800b242 <_vfiprintf_r+0x1da>
 800b260:	ab03      	add	r3, sp, #12
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	462a      	mov	r2, r5
 800b266:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <_vfiprintf_r+0x258>)
 800b268:	a904      	add	r1, sp, #16
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 f8cc 	bl	800b408 <_printf_float>
 800b270:	4607      	mov	r7, r0
 800b272:	1c78      	adds	r0, r7, #1
 800b274:	d1d6      	bne.n	800b224 <_vfiprintf_r+0x1bc>
 800b276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b278:	07d9      	lsls	r1, r3, #31
 800b27a:	d405      	bmi.n	800b288 <_vfiprintf_r+0x220>
 800b27c:	89ab      	ldrh	r3, [r5, #12]
 800b27e:	059a      	lsls	r2, r3, #22
 800b280:	d402      	bmi.n	800b288 <_vfiprintf_r+0x220>
 800b282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b284:	f001 fe6b 	bl	800cf5e <__retarget_lock_release_recursive>
 800b288:	89ab      	ldrh	r3, [r5, #12]
 800b28a:	065b      	lsls	r3, r3, #25
 800b28c:	f53f af12 	bmi.w	800b0b4 <_vfiprintf_r+0x4c>
 800b290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b292:	e711      	b.n	800b0b8 <_vfiprintf_r+0x50>
 800b294:	ab03      	add	r3, sp, #12
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	462a      	mov	r2, r5
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <_vfiprintf_r+0x258>)
 800b29c:	a904      	add	r1, sp, #16
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f000 fb56 	bl	800b950 <_printf_i>
 800b2a4:	e7e4      	b.n	800b270 <_vfiprintf_r+0x208>
 800b2a6:	bf00      	nop
 800b2a8:	08012c70 	.word	0x08012c70
 800b2ac:	08012c90 	.word	0x08012c90
 800b2b0:	08012c50 	.word	0x08012c50
 800b2b4:	08012a74 	.word	0x08012a74
 800b2b8:	08012a7e 	.word	0x08012a7e
 800b2bc:	0800b409 	.word	0x0800b409
 800b2c0:	0800b043 	.word	0x0800b043
 800b2c4:	08012a7a 	.word	0x08012a7a

0800b2c8 <__cvt>:
 800b2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	ec55 4b10 	vmov	r4, r5, d0
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	460e      	mov	r6, r1
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	bfbb      	ittet	lt
 800b2da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b2de:	461d      	movlt	r5, r3
 800b2e0:	2300      	movge	r3, #0
 800b2e2:	232d      	movlt	r3, #45	; 0x2d
 800b2e4:	700b      	strb	r3, [r1, #0]
 800b2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2ec:	4691      	mov	r9, r2
 800b2ee:	f023 0820 	bic.w	r8, r3, #32
 800b2f2:	bfbc      	itt	lt
 800b2f4:	4622      	movlt	r2, r4
 800b2f6:	4614      	movlt	r4, r2
 800b2f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2fc:	d005      	beq.n	800b30a <__cvt+0x42>
 800b2fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b302:	d100      	bne.n	800b306 <__cvt+0x3e>
 800b304:	3601      	adds	r6, #1
 800b306:	2102      	movs	r1, #2
 800b308:	e000      	b.n	800b30c <__cvt+0x44>
 800b30a:	2103      	movs	r1, #3
 800b30c:	ab03      	add	r3, sp, #12
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	ab02      	add	r3, sp, #8
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	ec45 4b10 	vmov	d0, r4, r5
 800b318:	4653      	mov	r3, sl
 800b31a:	4632      	mov	r2, r6
 800b31c:	f000 fe74 	bl	800c008 <_dtoa_r>
 800b320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b324:	4607      	mov	r7, r0
 800b326:	d102      	bne.n	800b32e <__cvt+0x66>
 800b328:	f019 0f01 	tst.w	r9, #1
 800b32c:	d022      	beq.n	800b374 <__cvt+0xac>
 800b32e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b332:	eb07 0906 	add.w	r9, r7, r6
 800b336:	d110      	bne.n	800b35a <__cvt+0x92>
 800b338:	783b      	ldrb	r3, [r7, #0]
 800b33a:	2b30      	cmp	r3, #48	; 0x30
 800b33c:	d10a      	bne.n	800b354 <__cvt+0x8c>
 800b33e:	2200      	movs	r2, #0
 800b340:	2300      	movs	r3, #0
 800b342:	4620      	mov	r0, r4
 800b344:	4629      	mov	r1, r5
 800b346:	f7f5 fbd1 	bl	8000aec <__aeabi_dcmpeq>
 800b34a:	b918      	cbnz	r0, 800b354 <__cvt+0x8c>
 800b34c:	f1c6 0601 	rsb	r6, r6, #1
 800b350:	f8ca 6000 	str.w	r6, [sl]
 800b354:	f8da 3000 	ldr.w	r3, [sl]
 800b358:	4499      	add	r9, r3
 800b35a:	2200      	movs	r2, #0
 800b35c:	2300      	movs	r3, #0
 800b35e:	4620      	mov	r0, r4
 800b360:	4629      	mov	r1, r5
 800b362:	f7f5 fbc3 	bl	8000aec <__aeabi_dcmpeq>
 800b366:	b108      	cbz	r0, 800b36c <__cvt+0xa4>
 800b368:	f8cd 900c 	str.w	r9, [sp, #12]
 800b36c:	2230      	movs	r2, #48	; 0x30
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	454b      	cmp	r3, r9
 800b372:	d307      	bcc.n	800b384 <__cvt+0xbc>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b378:	1bdb      	subs	r3, r3, r7
 800b37a:	4638      	mov	r0, r7
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	b004      	add	sp, #16
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	1c59      	adds	r1, r3, #1
 800b386:	9103      	str	r1, [sp, #12]
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	e7f0      	b.n	800b36e <__cvt+0xa6>

0800b38c <__exponent>:
 800b38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38e:	4603      	mov	r3, r0
 800b390:	2900      	cmp	r1, #0
 800b392:	bfb8      	it	lt
 800b394:	4249      	neglt	r1, r1
 800b396:	f803 2b02 	strb.w	r2, [r3], #2
 800b39a:	bfb4      	ite	lt
 800b39c:	222d      	movlt	r2, #45	; 0x2d
 800b39e:	222b      	movge	r2, #43	; 0x2b
 800b3a0:	2909      	cmp	r1, #9
 800b3a2:	7042      	strb	r2, [r0, #1]
 800b3a4:	dd2a      	ble.n	800b3fc <__exponent+0x70>
 800b3a6:	f10d 0407 	add.w	r4, sp, #7
 800b3aa:	46a4      	mov	ip, r4
 800b3ac:	270a      	movs	r7, #10
 800b3ae:	46a6      	mov	lr, r4
 800b3b0:	460a      	mov	r2, r1
 800b3b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b3b6:	fb07 1516 	mls	r5, r7, r6, r1
 800b3ba:	3530      	adds	r5, #48	; 0x30
 800b3bc:	2a63      	cmp	r2, #99	; 0x63
 800b3be:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	dcf1      	bgt.n	800b3ae <__exponent+0x22>
 800b3ca:	3130      	adds	r1, #48	; 0x30
 800b3cc:	f1ae 0502 	sub.w	r5, lr, #2
 800b3d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b3d4:	1c44      	adds	r4, r0, #1
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4561      	cmp	r1, ip
 800b3da:	d30a      	bcc.n	800b3f2 <__exponent+0x66>
 800b3dc:	f10d 0209 	add.w	r2, sp, #9
 800b3e0:	eba2 020e 	sub.w	r2, r2, lr
 800b3e4:	4565      	cmp	r5, ip
 800b3e6:	bf88      	it	hi
 800b3e8:	2200      	movhi	r2, #0
 800b3ea:	4413      	add	r3, r2
 800b3ec:	1a18      	subs	r0, r3, r0
 800b3ee:	b003      	add	sp, #12
 800b3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b3fa:	e7ed      	b.n	800b3d8 <__exponent+0x4c>
 800b3fc:	2330      	movs	r3, #48	; 0x30
 800b3fe:	3130      	adds	r1, #48	; 0x30
 800b400:	7083      	strb	r3, [r0, #2]
 800b402:	70c1      	strb	r1, [r0, #3]
 800b404:	1d03      	adds	r3, r0, #4
 800b406:	e7f1      	b.n	800b3ec <__exponent+0x60>

0800b408 <_printf_float>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	ed2d 8b02 	vpush	{d8}
 800b410:	b08d      	sub	sp, #52	; 0x34
 800b412:	460c      	mov	r4, r1
 800b414:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b418:	4616      	mov	r6, r2
 800b41a:	461f      	mov	r7, r3
 800b41c:	4605      	mov	r5, r0
 800b41e:	f001 fd97 	bl	800cf50 <_localeconv_r>
 800b422:	f8d0 a000 	ldr.w	sl, [r0]
 800b426:	4650      	mov	r0, sl
 800b428:	f7f4 ff34 	bl	8000294 <strlen>
 800b42c:	2300      	movs	r3, #0
 800b42e:	930a      	str	r3, [sp, #40]	; 0x28
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	9305      	str	r3, [sp, #20]
 800b434:	f8d8 3000 	ldr.w	r3, [r8]
 800b438:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b43c:	3307      	adds	r3, #7
 800b43e:	f023 0307 	bic.w	r3, r3, #7
 800b442:	f103 0208 	add.w	r2, r3, #8
 800b446:	f8c8 2000 	str.w	r2, [r8]
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b452:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b45a:	9307      	str	r3, [sp, #28]
 800b45c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b460:	ee08 0a10 	vmov	s16, r0
 800b464:	4b9f      	ldr	r3, [pc, #636]	; (800b6e4 <_printf_float+0x2dc>)
 800b466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	f7f5 fb6f 	bl	8000b50 <__aeabi_dcmpun>
 800b472:	bb88      	cbnz	r0, 800b4d8 <_printf_float+0xd0>
 800b474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b478:	4b9a      	ldr	r3, [pc, #616]	; (800b6e4 <_printf_float+0x2dc>)
 800b47a:	f04f 32ff 	mov.w	r2, #4294967295
 800b47e:	f7f5 fb49 	bl	8000b14 <__aeabi_dcmple>
 800b482:	bb48      	cbnz	r0, 800b4d8 <_printf_float+0xd0>
 800b484:	2200      	movs	r2, #0
 800b486:	2300      	movs	r3, #0
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	f7f5 fb38 	bl	8000b00 <__aeabi_dcmplt>
 800b490:	b110      	cbz	r0, 800b498 <_printf_float+0x90>
 800b492:	232d      	movs	r3, #45	; 0x2d
 800b494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b498:	4b93      	ldr	r3, [pc, #588]	; (800b6e8 <_printf_float+0x2e0>)
 800b49a:	4894      	ldr	r0, [pc, #592]	; (800b6ec <_printf_float+0x2e4>)
 800b49c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4a0:	bf94      	ite	ls
 800b4a2:	4698      	movls	r8, r3
 800b4a4:	4680      	movhi	r8, r0
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	9b05      	ldr	r3, [sp, #20]
 800b4ac:	f023 0204 	bic.w	r2, r3, #4
 800b4b0:	6022      	str	r2, [r4, #0]
 800b4b2:	f04f 0900 	mov.w	r9, #0
 800b4b6:	9700      	str	r7, [sp, #0]
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f000 f9d8 	bl	800b874 <_printf_common>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f040 8090 	bne.w	800b5ea <_printf_float+0x1e2>
 800b4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ce:	b00d      	add	sp, #52	; 0x34
 800b4d0:	ecbd 8b02 	vpop	{d8}
 800b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	4640      	mov	r0, r8
 800b4de:	4649      	mov	r1, r9
 800b4e0:	f7f5 fb36 	bl	8000b50 <__aeabi_dcmpun>
 800b4e4:	b140      	cbz	r0, 800b4f8 <_printf_float+0xf0>
 800b4e6:	464b      	mov	r3, r9
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	bfbc      	itt	lt
 800b4ec:	232d      	movlt	r3, #45	; 0x2d
 800b4ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4f2:	487f      	ldr	r0, [pc, #508]	; (800b6f0 <_printf_float+0x2e8>)
 800b4f4:	4b7f      	ldr	r3, [pc, #508]	; (800b6f4 <_printf_float+0x2ec>)
 800b4f6:	e7d1      	b.n	800b49c <_printf_float+0x94>
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b4fe:	9206      	str	r2, [sp, #24]
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	d13f      	bne.n	800b584 <_printf_float+0x17c>
 800b504:	2306      	movs	r3, #6
 800b506:	6063      	str	r3, [r4, #4]
 800b508:	9b05      	ldr	r3, [sp, #20]
 800b50a:	6861      	ldr	r1, [r4, #4]
 800b50c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b510:	2300      	movs	r3, #0
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	ab0a      	add	r3, sp, #40	; 0x28
 800b516:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b51a:	ab09      	add	r3, sp, #36	; 0x24
 800b51c:	ec49 8b10 	vmov	d0, r8, r9
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	6022      	str	r2, [r4, #0]
 800b524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b528:	4628      	mov	r0, r5
 800b52a:	f7ff fecd 	bl	800b2c8 <__cvt>
 800b52e:	9b06      	ldr	r3, [sp, #24]
 800b530:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b532:	2b47      	cmp	r3, #71	; 0x47
 800b534:	4680      	mov	r8, r0
 800b536:	d108      	bne.n	800b54a <_printf_float+0x142>
 800b538:	1cc8      	adds	r0, r1, #3
 800b53a:	db02      	blt.n	800b542 <_printf_float+0x13a>
 800b53c:	6863      	ldr	r3, [r4, #4]
 800b53e:	4299      	cmp	r1, r3
 800b540:	dd41      	ble.n	800b5c6 <_printf_float+0x1be>
 800b542:	f1ab 0b02 	sub.w	fp, fp, #2
 800b546:	fa5f fb8b 	uxtb.w	fp, fp
 800b54a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b54e:	d820      	bhi.n	800b592 <_printf_float+0x18a>
 800b550:	3901      	subs	r1, #1
 800b552:	465a      	mov	r2, fp
 800b554:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b558:	9109      	str	r1, [sp, #36]	; 0x24
 800b55a:	f7ff ff17 	bl	800b38c <__exponent>
 800b55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b560:	1813      	adds	r3, r2, r0
 800b562:	2a01      	cmp	r2, #1
 800b564:	4681      	mov	r9, r0
 800b566:	6123      	str	r3, [r4, #16]
 800b568:	dc02      	bgt.n	800b570 <_printf_float+0x168>
 800b56a:	6822      	ldr	r2, [r4, #0]
 800b56c:	07d2      	lsls	r2, r2, #31
 800b56e:	d501      	bpl.n	800b574 <_printf_float+0x16c>
 800b570:	3301      	adds	r3, #1
 800b572:	6123      	str	r3, [r4, #16]
 800b574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d09c      	beq.n	800b4b6 <_printf_float+0xae>
 800b57c:	232d      	movs	r3, #45	; 0x2d
 800b57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b582:	e798      	b.n	800b4b6 <_printf_float+0xae>
 800b584:	9a06      	ldr	r2, [sp, #24]
 800b586:	2a47      	cmp	r2, #71	; 0x47
 800b588:	d1be      	bne.n	800b508 <_printf_float+0x100>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1bc      	bne.n	800b508 <_printf_float+0x100>
 800b58e:	2301      	movs	r3, #1
 800b590:	e7b9      	b.n	800b506 <_printf_float+0xfe>
 800b592:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b596:	d118      	bne.n	800b5ca <_printf_float+0x1c2>
 800b598:	2900      	cmp	r1, #0
 800b59a:	6863      	ldr	r3, [r4, #4]
 800b59c:	dd0b      	ble.n	800b5b6 <_printf_float+0x1ae>
 800b59e:	6121      	str	r1, [r4, #16]
 800b5a0:	b913      	cbnz	r3, 800b5a8 <_printf_float+0x1a0>
 800b5a2:	6822      	ldr	r2, [r4, #0]
 800b5a4:	07d0      	lsls	r0, r2, #31
 800b5a6:	d502      	bpl.n	800b5ae <_printf_float+0x1a6>
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	440b      	add	r3, r1
 800b5ac:	6123      	str	r3, [r4, #16]
 800b5ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5b0:	f04f 0900 	mov.w	r9, #0
 800b5b4:	e7de      	b.n	800b574 <_printf_float+0x16c>
 800b5b6:	b913      	cbnz	r3, 800b5be <_printf_float+0x1b6>
 800b5b8:	6822      	ldr	r2, [r4, #0]
 800b5ba:	07d2      	lsls	r2, r2, #31
 800b5bc:	d501      	bpl.n	800b5c2 <_printf_float+0x1ba>
 800b5be:	3302      	adds	r3, #2
 800b5c0:	e7f4      	b.n	800b5ac <_printf_float+0x1a4>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e7f2      	b.n	800b5ac <_printf_float+0x1a4>
 800b5c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5cc:	4299      	cmp	r1, r3
 800b5ce:	db05      	blt.n	800b5dc <_printf_float+0x1d4>
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	6121      	str	r1, [r4, #16]
 800b5d4:	07d8      	lsls	r0, r3, #31
 800b5d6:	d5ea      	bpl.n	800b5ae <_printf_float+0x1a6>
 800b5d8:	1c4b      	adds	r3, r1, #1
 800b5da:	e7e7      	b.n	800b5ac <_printf_float+0x1a4>
 800b5dc:	2900      	cmp	r1, #0
 800b5de:	bfd4      	ite	le
 800b5e0:	f1c1 0202 	rsble	r2, r1, #2
 800b5e4:	2201      	movgt	r2, #1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	e7e0      	b.n	800b5ac <_printf_float+0x1a4>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	055a      	lsls	r2, r3, #21
 800b5ee:	d407      	bmi.n	800b600 <_printf_float+0x1f8>
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	4642      	mov	r2, r8
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47b8      	blx	r7
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d12c      	bne.n	800b658 <_printf_float+0x250>
 800b5fe:	e764      	b.n	800b4ca <_printf_float+0xc2>
 800b600:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b604:	f240 80e0 	bls.w	800b7c8 <_printf_float+0x3c0>
 800b608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b60c:	2200      	movs	r2, #0
 800b60e:	2300      	movs	r3, #0
 800b610:	f7f5 fa6c 	bl	8000aec <__aeabi_dcmpeq>
 800b614:	2800      	cmp	r0, #0
 800b616:	d034      	beq.n	800b682 <_printf_float+0x27a>
 800b618:	4a37      	ldr	r2, [pc, #220]	; (800b6f8 <_printf_float+0x2f0>)
 800b61a:	2301      	movs	r3, #1
 800b61c:	4631      	mov	r1, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	47b8      	blx	r7
 800b622:	3001      	adds	r0, #1
 800b624:	f43f af51 	beq.w	800b4ca <_printf_float+0xc2>
 800b628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b62c:	429a      	cmp	r2, r3
 800b62e:	db02      	blt.n	800b636 <_printf_float+0x22e>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	07d8      	lsls	r0, r3, #31
 800b634:	d510      	bpl.n	800b658 <_printf_float+0x250>
 800b636:	ee18 3a10 	vmov	r3, s16
 800b63a:	4652      	mov	r2, sl
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f af41 	beq.w	800b4ca <_printf_float+0xc2>
 800b648:	f04f 0800 	mov.w	r8, #0
 800b64c:	f104 091a 	add.w	r9, r4, #26
 800b650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b652:	3b01      	subs	r3, #1
 800b654:	4543      	cmp	r3, r8
 800b656:	dc09      	bgt.n	800b66c <_printf_float+0x264>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	079b      	lsls	r3, r3, #30
 800b65c:	f100 8105 	bmi.w	800b86a <_printf_float+0x462>
 800b660:	68e0      	ldr	r0, [r4, #12]
 800b662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b664:	4298      	cmp	r0, r3
 800b666:	bfb8      	it	lt
 800b668:	4618      	movlt	r0, r3
 800b66a:	e730      	b.n	800b4ce <_printf_float+0xc6>
 800b66c:	2301      	movs	r3, #1
 800b66e:	464a      	mov	r2, r9
 800b670:	4631      	mov	r1, r6
 800b672:	4628      	mov	r0, r5
 800b674:	47b8      	blx	r7
 800b676:	3001      	adds	r0, #1
 800b678:	f43f af27 	beq.w	800b4ca <_printf_float+0xc2>
 800b67c:	f108 0801 	add.w	r8, r8, #1
 800b680:	e7e6      	b.n	800b650 <_printf_float+0x248>
 800b682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	dc39      	bgt.n	800b6fc <_printf_float+0x2f4>
 800b688:	4a1b      	ldr	r2, [pc, #108]	; (800b6f8 <_printf_float+0x2f0>)
 800b68a:	2301      	movs	r3, #1
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af19 	beq.w	800b4ca <_printf_float+0xc2>
 800b698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b69c:	4313      	orrs	r3, r2
 800b69e:	d102      	bne.n	800b6a6 <_printf_float+0x29e>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	07d9      	lsls	r1, r3, #31
 800b6a4:	d5d8      	bpl.n	800b658 <_printf_float+0x250>
 800b6a6:	ee18 3a10 	vmov	r3, s16
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f af09 	beq.w	800b4ca <_printf_float+0xc2>
 800b6b8:	f04f 0900 	mov.w	r9, #0
 800b6bc:	f104 0a1a 	add.w	sl, r4, #26
 800b6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c2:	425b      	negs	r3, r3
 800b6c4:	454b      	cmp	r3, r9
 800b6c6:	dc01      	bgt.n	800b6cc <_printf_float+0x2c4>
 800b6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ca:	e792      	b.n	800b5f2 <_printf_float+0x1ea>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	47b8      	blx	r7
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	f43f aef7 	beq.w	800b4ca <_printf_float+0xc2>
 800b6dc:	f109 0901 	add.w	r9, r9, #1
 800b6e0:	e7ee      	b.n	800b6c0 <_printf_float+0x2b8>
 800b6e2:	bf00      	nop
 800b6e4:	7fefffff 	.word	0x7fefffff
 800b6e8:	08012a85 	.word	0x08012a85
 800b6ec:	08012a89 	.word	0x08012a89
 800b6f0:	08012a91 	.word	0x08012a91
 800b6f4:	08012a8d 	.word	0x08012a8d
 800b6f8:	08012a95 	.word	0x08012a95
 800b6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b700:	429a      	cmp	r2, r3
 800b702:	bfa8      	it	ge
 800b704:	461a      	movge	r2, r3
 800b706:	2a00      	cmp	r2, #0
 800b708:	4691      	mov	r9, r2
 800b70a:	dc37      	bgt.n	800b77c <_printf_float+0x374>
 800b70c:	f04f 0b00 	mov.w	fp, #0
 800b710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b714:	f104 021a 	add.w	r2, r4, #26
 800b718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b71a:	9305      	str	r3, [sp, #20]
 800b71c:	eba3 0309 	sub.w	r3, r3, r9
 800b720:	455b      	cmp	r3, fp
 800b722:	dc33      	bgt.n	800b78c <_printf_float+0x384>
 800b724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b728:	429a      	cmp	r2, r3
 800b72a:	db3b      	blt.n	800b7a4 <_printf_float+0x39c>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	07da      	lsls	r2, r3, #31
 800b730:	d438      	bmi.n	800b7a4 <_printf_float+0x39c>
 800b732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b734:	9b05      	ldr	r3, [sp, #20]
 800b736:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	eba2 0901 	sub.w	r9, r2, r1
 800b73e:	4599      	cmp	r9, r3
 800b740:	bfa8      	it	ge
 800b742:	4699      	movge	r9, r3
 800b744:	f1b9 0f00 	cmp.w	r9, #0
 800b748:	dc35      	bgt.n	800b7b6 <_printf_float+0x3ae>
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b752:	f104 0a1a 	add.w	sl, r4, #26
 800b756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	eba3 0309 	sub.w	r3, r3, r9
 800b760:	4543      	cmp	r3, r8
 800b762:	f77f af79 	ble.w	800b658 <_printf_float+0x250>
 800b766:	2301      	movs	r3, #1
 800b768:	4652      	mov	r2, sl
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f aeaa 	beq.w	800b4ca <_printf_float+0xc2>
 800b776:	f108 0801 	add.w	r8, r8, #1
 800b77a:	e7ec      	b.n	800b756 <_printf_float+0x34e>
 800b77c:	4613      	mov	r3, r2
 800b77e:	4631      	mov	r1, r6
 800b780:	4642      	mov	r2, r8
 800b782:	4628      	mov	r0, r5
 800b784:	47b8      	blx	r7
 800b786:	3001      	adds	r0, #1
 800b788:	d1c0      	bne.n	800b70c <_printf_float+0x304>
 800b78a:	e69e      	b.n	800b4ca <_printf_float+0xc2>
 800b78c:	2301      	movs	r3, #1
 800b78e:	4631      	mov	r1, r6
 800b790:	4628      	mov	r0, r5
 800b792:	9205      	str	r2, [sp, #20]
 800b794:	47b8      	blx	r7
 800b796:	3001      	adds	r0, #1
 800b798:	f43f ae97 	beq.w	800b4ca <_printf_float+0xc2>
 800b79c:	9a05      	ldr	r2, [sp, #20]
 800b79e:	f10b 0b01 	add.w	fp, fp, #1
 800b7a2:	e7b9      	b.n	800b718 <_printf_float+0x310>
 800b7a4:	ee18 3a10 	vmov	r3, s16
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b8      	blx	r7
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d1be      	bne.n	800b732 <_printf_float+0x32a>
 800b7b4:	e689      	b.n	800b4ca <_printf_float+0xc2>
 800b7b6:	9a05      	ldr	r2, [sp, #20]
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	4442      	add	r2, r8
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d1c1      	bne.n	800b74a <_printf_float+0x342>
 800b7c6:	e680      	b.n	800b4ca <_printf_float+0xc2>
 800b7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	dc01      	bgt.n	800b7d2 <_printf_float+0x3ca>
 800b7ce:	07db      	lsls	r3, r3, #31
 800b7d0:	d538      	bpl.n	800b844 <_printf_float+0x43c>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b8      	blx	r7
 800b7dc:	3001      	adds	r0, #1
 800b7de:	f43f ae74 	beq.w	800b4ca <_printf_float+0xc2>
 800b7e2:	ee18 3a10 	vmov	r3, s16
 800b7e6:	4652      	mov	r2, sl
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47b8      	blx	r7
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	f43f ae6b 	beq.w	800b4ca <_printf_float+0xc2>
 800b7f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f7f5 f976 	bl	8000aec <__aeabi_dcmpeq>
 800b800:	b9d8      	cbnz	r0, 800b83a <_printf_float+0x432>
 800b802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b804:	f108 0201 	add.w	r2, r8, #1
 800b808:	3b01      	subs	r3, #1
 800b80a:	4631      	mov	r1, r6
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b8      	blx	r7
 800b810:	3001      	adds	r0, #1
 800b812:	d10e      	bne.n	800b832 <_printf_float+0x42a>
 800b814:	e659      	b.n	800b4ca <_printf_float+0xc2>
 800b816:	2301      	movs	r3, #1
 800b818:	4652      	mov	r2, sl
 800b81a:	4631      	mov	r1, r6
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b8      	blx	r7
 800b820:	3001      	adds	r0, #1
 800b822:	f43f ae52 	beq.w	800b4ca <_printf_float+0xc2>
 800b826:	f108 0801 	add.w	r8, r8, #1
 800b82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b82c:	3b01      	subs	r3, #1
 800b82e:	4543      	cmp	r3, r8
 800b830:	dcf1      	bgt.n	800b816 <_printf_float+0x40e>
 800b832:	464b      	mov	r3, r9
 800b834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b838:	e6dc      	b.n	800b5f4 <_printf_float+0x1ec>
 800b83a:	f04f 0800 	mov.w	r8, #0
 800b83e:	f104 0a1a 	add.w	sl, r4, #26
 800b842:	e7f2      	b.n	800b82a <_printf_float+0x422>
 800b844:	2301      	movs	r3, #1
 800b846:	4642      	mov	r2, r8
 800b848:	e7df      	b.n	800b80a <_printf_float+0x402>
 800b84a:	2301      	movs	r3, #1
 800b84c:	464a      	mov	r2, r9
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f ae38 	beq.w	800b4ca <_printf_float+0xc2>
 800b85a:	f108 0801 	add.w	r8, r8, #1
 800b85e:	68e3      	ldr	r3, [r4, #12]
 800b860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b862:	1a5b      	subs	r3, r3, r1
 800b864:	4543      	cmp	r3, r8
 800b866:	dcf0      	bgt.n	800b84a <_printf_float+0x442>
 800b868:	e6fa      	b.n	800b660 <_printf_float+0x258>
 800b86a:	f04f 0800 	mov.w	r8, #0
 800b86e:	f104 0919 	add.w	r9, r4, #25
 800b872:	e7f4      	b.n	800b85e <_printf_float+0x456>

0800b874 <_printf_common>:
 800b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b878:	4616      	mov	r6, r2
 800b87a:	4699      	mov	r9, r3
 800b87c:	688a      	ldr	r2, [r1, #8]
 800b87e:	690b      	ldr	r3, [r1, #16]
 800b880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b884:	4293      	cmp	r3, r2
 800b886:	bfb8      	it	lt
 800b888:	4613      	movlt	r3, r2
 800b88a:	6033      	str	r3, [r6, #0]
 800b88c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b890:	4607      	mov	r7, r0
 800b892:	460c      	mov	r4, r1
 800b894:	b10a      	cbz	r2, 800b89a <_printf_common+0x26>
 800b896:	3301      	adds	r3, #1
 800b898:	6033      	str	r3, [r6, #0]
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	0699      	lsls	r1, r3, #26
 800b89e:	bf42      	ittt	mi
 800b8a0:	6833      	ldrmi	r3, [r6, #0]
 800b8a2:	3302      	addmi	r3, #2
 800b8a4:	6033      	strmi	r3, [r6, #0]
 800b8a6:	6825      	ldr	r5, [r4, #0]
 800b8a8:	f015 0506 	ands.w	r5, r5, #6
 800b8ac:	d106      	bne.n	800b8bc <_printf_common+0x48>
 800b8ae:	f104 0a19 	add.w	sl, r4, #25
 800b8b2:	68e3      	ldr	r3, [r4, #12]
 800b8b4:	6832      	ldr	r2, [r6, #0]
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	42ab      	cmp	r3, r5
 800b8ba:	dc26      	bgt.n	800b90a <_printf_common+0x96>
 800b8bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c0:	1e13      	subs	r3, r2, #0
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	bf18      	it	ne
 800b8c6:	2301      	movne	r3, #1
 800b8c8:	0692      	lsls	r2, r2, #26
 800b8ca:	d42b      	bmi.n	800b924 <_printf_common+0xb0>
 800b8cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	47c0      	blx	r8
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	d01e      	beq.n	800b918 <_printf_common+0xa4>
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	68e5      	ldr	r5, [r4, #12]
 800b8de:	6832      	ldr	r2, [r6, #0]
 800b8e0:	f003 0306 	and.w	r3, r3, #6
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	bf08      	it	eq
 800b8e8:	1aad      	subeq	r5, r5, r2
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	6922      	ldr	r2, [r4, #16]
 800b8ee:	bf0c      	ite	eq
 800b8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f4:	2500      	movne	r5, #0
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	bfc4      	itt	gt
 800b8fa:	1a9b      	subgt	r3, r3, r2
 800b8fc:	18ed      	addgt	r5, r5, r3
 800b8fe:	2600      	movs	r6, #0
 800b900:	341a      	adds	r4, #26
 800b902:	42b5      	cmp	r5, r6
 800b904:	d11a      	bne.n	800b93c <_printf_common+0xc8>
 800b906:	2000      	movs	r0, #0
 800b908:	e008      	b.n	800b91c <_printf_common+0xa8>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4652      	mov	r2, sl
 800b90e:	4649      	mov	r1, r9
 800b910:	4638      	mov	r0, r7
 800b912:	47c0      	blx	r8
 800b914:	3001      	adds	r0, #1
 800b916:	d103      	bne.n	800b920 <_printf_common+0xac>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b920:	3501      	adds	r5, #1
 800b922:	e7c6      	b.n	800b8b2 <_printf_common+0x3e>
 800b924:	18e1      	adds	r1, r4, r3
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	2030      	movs	r0, #48	; 0x30
 800b92a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b92e:	4422      	add	r2, r4
 800b930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b938:	3302      	adds	r3, #2
 800b93a:	e7c7      	b.n	800b8cc <_printf_common+0x58>
 800b93c:	2301      	movs	r3, #1
 800b93e:	4622      	mov	r2, r4
 800b940:	4649      	mov	r1, r9
 800b942:	4638      	mov	r0, r7
 800b944:	47c0      	blx	r8
 800b946:	3001      	adds	r0, #1
 800b948:	d0e6      	beq.n	800b918 <_printf_common+0xa4>
 800b94a:	3601      	adds	r6, #1
 800b94c:	e7d9      	b.n	800b902 <_printf_common+0x8e>
	...

0800b950 <_printf_i>:
 800b950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	4691      	mov	r9, r2
 800b958:	7e27      	ldrb	r7, [r4, #24]
 800b95a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b95c:	2f78      	cmp	r7, #120	; 0x78
 800b95e:	4680      	mov	r8, r0
 800b960:	469a      	mov	sl, r3
 800b962:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b966:	d807      	bhi.n	800b978 <_printf_i+0x28>
 800b968:	2f62      	cmp	r7, #98	; 0x62
 800b96a:	d80a      	bhi.n	800b982 <_printf_i+0x32>
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	f000 80d8 	beq.w	800bb22 <_printf_i+0x1d2>
 800b972:	2f58      	cmp	r7, #88	; 0x58
 800b974:	f000 80a3 	beq.w	800babe <_printf_i+0x16e>
 800b978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b97c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b980:	e03a      	b.n	800b9f8 <_printf_i+0xa8>
 800b982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b986:	2b15      	cmp	r3, #21
 800b988:	d8f6      	bhi.n	800b978 <_printf_i+0x28>
 800b98a:	a001      	add	r0, pc, #4	; (adr r0, 800b990 <_printf_i+0x40>)
 800b98c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b990:	0800b9e9 	.word	0x0800b9e9
 800b994:	0800b9fd 	.word	0x0800b9fd
 800b998:	0800b979 	.word	0x0800b979
 800b99c:	0800b979 	.word	0x0800b979
 800b9a0:	0800b979 	.word	0x0800b979
 800b9a4:	0800b979 	.word	0x0800b979
 800b9a8:	0800b9fd 	.word	0x0800b9fd
 800b9ac:	0800b979 	.word	0x0800b979
 800b9b0:	0800b979 	.word	0x0800b979
 800b9b4:	0800b979 	.word	0x0800b979
 800b9b8:	0800b979 	.word	0x0800b979
 800b9bc:	0800bb09 	.word	0x0800bb09
 800b9c0:	0800ba2d 	.word	0x0800ba2d
 800b9c4:	0800baeb 	.word	0x0800baeb
 800b9c8:	0800b979 	.word	0x0800b979
 800b9cc:	0800b979 	.word	0x0800b979
 800b9d0:	0800bb2b 	.word	0x0800bb2b
 800b9d4:	0800b979 	.word	0x0800b979
 800b9d8:	0800ba2d 	.word	0x0800ba2d
 800b9dc:	0800b979 	.word	0x0800b979
 800b9e0:	0800b979 	.word	0x0800b979
 800b9e4:	0800baf3 	.word	0x0800baf3
 800b9e8:	680b      	ldr	r3, [r1, #0]
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	600a      	str	r2, [r1, #0]
 800b9f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e0a3      	b.n	800bb44 <_printf_i+0x1f4>
 800b9fc:	6825      	ldr	r5, [r4, #0]
 800b9fe:	6808      	ldr	r0, [r1, #0]
 800ba00:	062e      	lsls	r6, r5, #24
 800ba02:	f100 0304 	add.w	r3, r0, #4
 800ba06:	d50a      	bpl.n	800ba1e <_printf_i+0xce>
 800ba08:	6805      	ldr	r5, [r0, #0]
 800ba0a:	600b      	str	r3, [r1, #0]
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	da03      	bge.n	800ba18 <_printf_i+0xc8>
 800ba10:	232d      	movs	r3, #45	; 0x2d
 800ba12:	426d      	negs	r5, r5
 800ba14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba18:	485e      	ldr	r0, [pc, #376]	; (800bb94 <_printf_i+0x244>)
 800ba1a:	230a      	movs	r3, #10
 800ba1c:	e019      	b.n	800ba52 <_printf_i+0x102>
 800ba1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba22:	6805      	ldr	r5, [r0, #0]
 800ba24:	600b      	str	r3, [r1, #0]
 800ba26:	bf18      	it	ne
 800ba28:	b22d      	sxthne	r5, r5
 800ba2a:	e7ef      	b.n	800ba0c <_printf_i+0xbc>
 800ba2c:	680b      	ldr	r3, [r1, #0]
 800ba2e:	6825      	ldr	r5, [r4, #0]
 800ba30:	1d18      	adds	r0, r3, #4
 800ba32:	6008      	str	r0, [r1, #0]
 800ba34:	0628      	lsls	r0, r5, #24
 800ba36:	d501      	bpl.n	800ba3c <_printf_i+0xec>
 800ba38:	681d      	ldr	r5, [r3, #0]
 800ba3a:	e002      	b.n	800ba42 <_printf_i+0xf2>
 800ba3c:	0669      	lsls	r1, r5, #25
 800ba3e:	d5fb      	bpl.n	800ba38 <_printf_i+0xe8>
 800ba40:	881d      	ldrh	r5, [r3, #0]
 800ba42:	4854      	ldr	r0, [pc, #336]	; (800bb94 <_printf_i+0x244>)
 800ba44:	2f6f      	cmp	r7, #111	; 0x6f
 800ba46:	bf0c      	ite	eq
 800ba48:	2308      	moveq	r3, #8
 800ba4a:	230a      	movne	r3, #10
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba52:	6866      	ldr	r6, [r4, #4]
 800ba54:	60a6      	str	r6, [r4, #8]
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	bfa2      	ittt	ge
 800ba5a:	6821      	ldrge	r1, [r4, #0]
 800ba5c:	f021 0104 	bicge.w	r1, r1, #4
 800ba60:	6021      	strge	r1, [r4, #0]
 800ba62:	b90d      	cbnz	r5, 800ba68 <_printf_i+0x118>
 800ba64:	2e00      	cmp	r6, #0
 800ba66:	d04d      	beq.n	800bb04 <_printf_i+0x1b4>
 800ba68:	4616      	mov	r6, r2
 800ba6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba72:	5dc7      	ldrb	r7, [r0, r7]
 800ba74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba78:	462f      	mov	r7, r5
 800ba7a:	42bb      	cmp	r3, r7
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	d9f4      	bls.n	800ba6a <_printf_i+0x11a>
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d10b      	bne.n	800ba9c <_printf_i+0x14c>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	07df      	lsls	r7, r3, #31
 800ba88:	d508      	bpl.n	800ba9c <_printf_i+0x14c>
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	6861      	ldr	r1, [r4, #4]
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	bfde      	ittt	le
 800ba92:	2330      	movle	r3, #48	; 0x30
 800ba94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba9c:	1b92      	subs	r2, r2, r6
 800ba9e:	6122      	str	r2, [r4, #16]
 800baa0:	f8cd a000 	str.w	sl, [sp]
 800baa4:	464b      	mov	r3, r9
 800baa6:	aa03      	add	r2, sp, #12
 800baa8:	4621      	mov	r1, r4
 800baaa:	4640      	mov	r0, r8
 800baac:	f7ff fee2 	bl	800b874 <_printf_common>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d14c      	bne.n	800bb4e <_printf_i+0x1fe>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	b004      	add	sp, #16
 800baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babe:	4835      	ldr	r0, [pc, #212]	; (800bb94 <_printf_i+0x244>)
 800bac0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	680e      	ldr	r6, [r1, #0]
 800bac8:	061f      	lsls	r7, r3, #24
 800baca:	f856 5b04 	ldr.w	r5, [r6], #4
 800bace:	600e      	str	r6, [r1, #0]
 800bad0:	d514      	bpl.n	800bafc <_printf_i+0x1ac>
 800bad2:	07d9      	lsls	r1, r3, #31
 800bad4:	bf44      	itt	mi
 800bad6:	f043 0320 	orrmi.w	r3, r3, #32
 800bada:	6023      	strmi	r3, [r4, #0]
 800badc:	b91d      	cbnz	r5, 800bae6 <_printf_i+0x196>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	f023 0320 	bic.w	r3, r3, #32
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	2310      	movs	r3, #16
 800bae8:	e7b0      	b.n	800ba4c <_printf_i+0xfc>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	f043 0320 	orr.w	r3, r3, #32
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	2378      	movs	r3, #120	; 0x78
 800baf4:	4828      	ldr	r0, [pc, #160]	; (800bb98 <_printf_i+0x248>)
 800baf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bafa:	e7e3      	b.n	800bac4 <_printf_i+0x174>
 800bafc:	065e      	lsls	r6, r3, #25
 800bafe:	bf48      	it	mi
 800bb00:	b2ad      	uxthmi	r5, r5
 800bb02:	e7e6      	b.n	800bad2 <_printf_i+0x182>
 800bb04:	4616      	mov	r6, r2
 800bb06:	e7bb      	b.n	800ba80 <_printf_i+0x130>
 800bb08:	680b      	ldr	r3, [r1, #0]
 800bb0a:	6826      	ldr	r6, [r4, #0]
 800bb0c:	6960      	ldr	r0, [r4, #20]
 800bb0e:	1d1d      	adds	r5, r3, #4
 800bb10:	600d      	str	r5, [r1, #0]
 800bb12:	0635      	lsls	r5, r6, #24
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	d501      	bpl.n	800bb1c <_printf_i+0x1cc>
 800bb18:	6018      	str	r0, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <_printf_i+0x1d2>
 800bb1c:	0671      	lsls	r1, r6, #25
 800bb1e:	d5fb      	bpl.n	800bb18 <_printf_i+0x1c8>
 800bb20:	8018      	strh	r0, [r3, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	4616      	mov	r6, r2
 800bb28:	e7ba      	b.n	800baa0 <_printf_i+0x150>
 800bb2a:	680b      	ldr	r3, [r1, #0]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	600a      	str	r2, [r1, #0]
 800bb30:	681e      	ldr	r6, [r3, #0]
 800bb32:	6862      	ldr	r2, [r4, #4]
 800bb34:	2100      	movs	r1, #0
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7f4 fb52 	bl	80001e0 <memchr>
 800bb3c:	b108      	cbz	r0, 800bb42 <_printf_i+0x1f2>
 800bb3e:	1b80      	subs	r0, r0, r6
 800bb40:	6060      	str	r0, [r4, #4]
 800bb42:	6863      	ldr	r3, [r4, #4]
 800bb44:	6123      	str	r3, [r4, #16]
 800bb46:	2300      	movs	r3, #0
 800bb48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4c:	e7a8      	b.n	800baa0 <_printf_i+0x150>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4649      	mov	r1, r9
 800bb54:	4640      	mov	r0, r8
 800bb56:	47d0      	blx	sl
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d0ab      	beq.n	800bab4 <_printf_i+0x164>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	079b      	lsls	r3, r3, #30
 800bb60:	d413      	bmi.n	800bb8a <_printf_i+0x23a>
 800bb62:	68e0      	ldr	r0, [r4, #12]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	4298      	cmp	r0, r3
 800bb68:	bfb8      	it	lt
 800bb6a:	4618      	movlt	r0, r3
 800bb6c:	e7a4      	b.n	800bab8 <_printf_i+0x168>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4632      	mov	r2, r6
 800bb72:	4649      	mov	r1, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	47d0      	blx	sl
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d09b      	beq.n	800bab4 <_printf_i+0x164>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	9903      	ldr	r1, [sp, #12]
 800bb82:	1a5b      	subs	r3, r3, r1
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dcf2      	bgt.n	800bb6e <_printf_i+0x21e>
 800bb88:	e7eb      	b.n	800bb62 <_printf_i+0x212>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	f104 0619 	add.w	r6, r4, #25
 800bb90:	e7f5      	b.n	800bb7e <_printf_i+0x22e>
 800bb92:	bf00      	nop
 800bb94:	08012a97 	.word	0x08012a97
 800bb98:	08012aa8 	.word	0x08012aa8

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	; (800bbb8 <_sbrk_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f6 f9c8 	bl	8001f3c <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20000c3c 	.word	0x20000c3c

0800bbbc <_raise_r>:
 800bbbc:	291f      	cmp	r1, #31
 800bbbe:	b538      	push	{r3, r4, r5, lr}
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	d904      	bls.n	800bbd0 <_raise_r+0x14>
 800bbc6:	2316      	movs	r3, #22
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbd2:	b112      	cbz	r2, 800bbda <_raise_r+0x1e>
 800bbd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbd8:	b94b      	cbnz	r3, 800bbee <_raise_r+0x32>
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f830 	bl	800bc40 <_getpid_r>
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbea:	f000 b817 	b.w	800bc1c <_kill_r>
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d00a      	beq.n	800bc08 <_raise_r+0x4c>
 800bbf2:	1c59      	adds	r1, r3, #1
 800bbf4:	d103      	bne.n	800bbfe <_raise_r+0x42>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7e7      	b.n	800bbce <_raise_r+0x12>
 800bbfe:	2400      	movs	r4, #0
 800bc00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc04:	4628      	mov	r0, r5
 800bc06:	4798      	blx	r3
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7e0      	b.n	800bbce <_raise_r+0x12>

0800bc0c <raise>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <raise+0xc>)
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f7ff bfd3 	b.w	800bbbc <_raise_r>
 800bc16:	bf00      	nop
 800bc18:	20000014 	.word	0x20000014

0800bc1c <_kill_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d07      	ldr	r5, [pc, #28]	; (800bc3c <_kill_r+0x20>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	f7f6 f8ff 	bl	8001e2c <_kill>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d102      	bne.n	800bc38 <_kill_r+0x1c>
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	b103      	cbz	r3, 800bc38 <_kill_r+0x1c>
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000c3c 	.word	0x20000c3c

0800bc40 <_getpid_r>:
 800bc40:	f7f6 b8ec 	b.w	8001e1c <_getpid>

0800bc44 <siprintf>:
 800bc44:	b40e      	push	{r1, r2, r3}
 800bc46:	b500      	push	{lr}
 800bc48:	b09c      	sub	sp, #112	; 0x70
 800bc4a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc4c:	9002      	str	r0, [sp, #8]
 800bc4e:	9006      	str	r0, [sp, #24]
 800bc50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc54:	4809      	ldr	r0, [pc, #36]	; (800bc7c <siprintf+0x38>)
 800bc56:	9107      	str	r1, [sp, #28]
 800bc58:	9104      	str	r1, [sp, #16]
 800bc5a:	4909      	ldr	r1, [pc, #36]	; (800bc80 <siprintf+0x3c>)
 800bc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc60:	9105      	str	r1, [sp, #20]
 800bc62:	6800      	ldr	r0, [r0, #0]
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	a902      	add	r1, sp, #8
 800bc68:	f001 fdf8 	bl	800d85c <_svfiprintf_r>
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	b01c      	add	sp, #112	; 0x70
 800bc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc78:	b003      	add	sp, #12
 800bc7a:	4770      	bx	lr
 800bc7c:	20000014 	.word	0x20000014
 800bc80:	ffff0208 	.word	0xffff0208

0800bc84 <strncmp>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	b16a      	cbz	r2, 800bca4 <strncmp+0x20>
 800bc88:	3901      	subs	r1, #1
 800bc8a:	1884      	adds	r4, r0, r2
 800bc8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d103      	bne.n	800bca0 <strncmp+0x1c>
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d001      	beq.n	800bca0 <strncmp+0x1c>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f5      	bne.n	800bc8c <strncmp+0x8>
 800bca0:	1a98      	subs	r0, r3, r2
 800bca2:	bd10      	pop	{r4, pc}
 800bca4:	4610      	mov	r0, r2
 800bca6:	e7fc      	b.n	800bca2 <strncmp+0x1e>

0800bca8 <__swbuf_r>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	460e      	mov	r6, r1
 800bcac:	4614      	mov	r4, r2
 800bcae:	4605      	mov	r5, r0
 800bcb0:	b118      	cbz	r0, 800bcba <__swbuf_r+0x12>
 800bcb2:	6983      	ldr	r3, [r0, #24]
 800bcb4:	b90b      	cbnz	r3, 800bcba <__swbuf_r+0x12>
 800bcb6:	f001 f8ad 	bl	800ce14 <__sinit>
 800bcba:	4b21      	ldr	r3, [pc, #132]	; (800bd40 <__swbuf_r+0x98>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	d12b      	bne.n	800bd18 <__swbuf_r+0x70>
 800bcc0:	686c      	ldr	r4, [r5, #4]
 800bcc2:	69a3      	ldr	r3, [r4, #24]
 800bcc4:	60a3      	str	r3, [r4, #8]
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	071a      	lsls	r2, r3, #28
 800bcca:	d52f      	bpl.n	800bd2c <__swbuf_r+0x84>
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	b36b      	cbz	r3, 800bd2c <__swbuf_r+0x84>
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	6820      	ldr	r0, [r4, #0]
 800bcd4:	1ac0      	subs	r0, r0, r3
 800bcd6:	6963      	ldr	r3, [r4, #20]
 800bcd8:	b2f6      	uxtb	r6, r6
 800bcda:	4283      	cmp	r3, r0
 800bcdc:	4637      	mov	r7, r6
 800bcde:	dc04      	bgt.n	800bcea <__swbuf_r+0x42>
 800bce0:	4621      	mov	r1, r4
 800bce2:	4628      	mov	r0, r5
 800bce4:	f001 f802 	bl	800ccec <_fflush_r>
 800bce8:	bb30      	cbnz	r0, 800bd38 <__swbuf_r+0x90>
 800bcea:	68a3      	ldr	r3, [r4, #8]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	60a3      	str	r3, [r4, #8]
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	6022      	str	r2, [r4, #0]
 800bcf6:	701e      	strb	r6, [r3, #0]
 800bcf8:	6963      	ldr	r3, [r4, #20]
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	4283      	cmp	r3, r0
 800bcfe:	d004      	beq.n	800bd0a <__swbuf_r+0x62>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	07db      	lsls	r3, r3, #31
 800bd04:	d506      	bpl.n	800bd14 <__swbuf_r+0x6c>
 800bd06:	2e0a      	cmp	r6, #10
 800bd08:	d104      	bne.n	800bd14 <__swbuf_r+0x6c>
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	f000 ffed 	bl	800ccec <_fflush_r>
 800bd12:	b988      	cbnz	r0, 800bd38 <__swbuf_r+0x90>
 800bd14:	4638      	mov	r0, r7
 800bd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <__swbuf_r+0x9c>)
 800bd1a:	429c      	cmp	r4, r3
 800bd1c:	d101      	bne.n	800bd22 <__swbuf_r+0x7a>
 800bd1e:	68ac      	ldr	r4, [r5, #8]
 800bd20:	e7cf      	b.n	800bcc2 <__swbuf_r+0x1a>
 800bd22:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <__swbuf_r+0xa0>)
 800bd24:	429c      	cmp	r4, r3
 800bd26:	bf08      	it	eq
 800bd28:	68ec      	ldreq	r4, [r5, #12]
 800bd2a:	e7ca      	b.n	800bcc2 <__swbuf_r+0x1a>
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f000 f80c 	bl	800bd4c <__swsetup_r>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d0cb      	beq.n	800bcd0 <__swbuf_r+0x28>
 800bd38:	f04f 37ff 	mov.w	r7, #4294967295
 800bd3c:	e7ea      	b.n	800bd14 <__swbuf_r+0x6c>
 800bd3e:	bf00      	nop
 800bd40:	08012c70 	.word	0x08012c70
 800bd44:	08012c90 	.word	0x08012c90
 800bd48:	08012c50 	.word	0x08012c50

0800bd4c <__swsetup_r>:
 800bd4c:	4b32      	ldr	r3, [pc, #200]	; (800be18 <__swsetup_r+0xcc>)
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	681d      	ldr	r5, [r3, #0]
 800bd52:	4606      	mov	r6, r0
 800bd54:	460c      	mov	r4, r1
 800bd56:	b125      	cbz	r5, 800bd62 <__swsetup_r+0x16>
 800bd58:	69ab      	ldr	r3, [r5, #24]
 800bd5a:	b913      	cbnz	r3, 800bd62 <__swsetup_r+0x16>
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	f001 f859 	bl	800ce14 <__sinit>
 800bd62:	4b2e      	ldr	r3, [pc, #184]	; (800be1c <__swsetup_r+0xd0>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	d10f      	bne.n	800bd88 <__swsetup_r+0x3c>
 800bd68:	686c      	ldr	r4, [r5, #4]
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd70:	0719      	lsls	r1, r3, #28
 800bd72:	d42c      	bmi.n	800bdce <__swsetup_r+0x82>
 800bd74:	06dd      	lsls	r5, r3, #27
 800bd76:	d411      	bmi.n	800bd9c <__swsetup_r+0x50>
 800bd78:	2309      	movs	r3, #9
 800bd7a:	6033      	str	r3, [r6, #0]
 800bd7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd80:	81a3      	strh	r3, [r4, #12]
 800bd82:	f04f 30ff 	mov.w	r0, #4294967295
 800bd86:	e03e      	b.n	800be06 <__swsetup_r+0xba>
 800bd88:	4b25      	ldr	r3, [pc, #148]	; (800be20 <__swsetup_r+0xd4>)
 800bd8a:	429c      	cmp	r4, r3
 800bd8c:	d101      	bne.n	800bd92 <__swsetup_r+0x46>
 800bd8e:	68ac      	ldr	r4, [r5, #8]
 800bd90:	e7eb      	b.n	800bd6a <__swsetup_r+0x1e>
 800bd92:	4b24      	ldr	r3, [pc, #144]	; (800be24 <__swsetup_r+0xd8>)
 800bd94:	429c      	cmp	r4, r3
 800bd96:	bf08      	it	eq
 800bd98:	68ec      	ldreq	r4, [r5, #12]
 800bd9a:	e7e6      	b.n	800bd6a <__swsetup_r+0x1e>
 800bd9c:	0758      	lsls	r0, r3, #29
 800bd9e:	d512      	bpl.n	800bdc6 <__swsetup_r+0x7a>
 800bda0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bda2:	b141      	cbz	r1, 800bdb6 <__swsetup_r+0x6a>
 800bda4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <__swsetup_r+0x66>
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff f887 	bl	800aec0 <_free_r>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	6923      	ldr	r3, [r4, #16]
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	f043 0308 	orr.w	r3, r3, #8
 800bdcc:	81a3      	strh	r3, [r4, #12]
 800bdce:	6923      	ldr	r3, [r4, #16]
 800bdd0:	b94b      	cbnz	r3, 800bde6 <__swsetup_r+0x9a>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bddc:	d003      	beq.n	800bde6 <__swsetup_r+0x9a>
 800bdde:	4621      	mov	r1, r4
 800bde0:	4630      	mov	r0, r6
 800bde2:	f001 f8e1 	bl	800cfa8 <__smakebuf_r>
 800bde6:	89a0      	ldrh	r0, [r4, #12]
 800bde8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdec:	f010 0301 	ands.w	r3, r0, #1
 800bdf0:	d00a      	beq.n	800be08 <__swsetup_r+0xbc>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60a3      	str	r3, [r4, #8]
 800bdf6:	6963      	ldr	r3, [r4, #20]
 800bdf8:	425b      	negs	r3, r3
 800bdfa:	61a3      	str	r3, [r4, #24]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	b943      	cbnz	r3, 800be12 <__swsetup_r+0xc6>
 800be00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be04:	d1ba      	bne.n	800bd7c <__swsetup_r+0x30>
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	0781      	lsls	r1, r0, #30
 800be0a:	bf58      	it	pl
 800be0c:	6963      	ldrpl	r3, [r4, #20]
 800be0e:	60a3      	str	r3, [r4, #8]
 800be10:	e7f4      	b.n	800bdfc <__swsetup_r+0xb0>
 800be12:	2000      	movs	r0, #0
 800be14:	e7f7      	b.n	800be06 <__swsetup_r+0xba>
 800be16:	bf00      	nop
 800be18:	20000014 	.word	0x20000014
 800be1c:	08012c70 	.word	0x08012c70
 800be20:	08012c90 	.word	0x08012c90
 800be24:	08012c50 	.word	0x08012c50

0800be28 <__register_exitproc>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800bee8 <__register_exitproc+0xc0>
 800be30:	4606      	mov	r6, r0
 800be32:	f8d8 0000 	ldr.w	r0, [r8]
 800be36:	461f      	mov	r7, r3
 800be38:	460d      	mov	r5, r1
 800be3a:	4691      	mov	r9, r2
 800be3c:	f001 f88d 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800be40:	4b25      	ldr	r3, [pc, #148]	; (800bed8 <__register_exitproc+0xb0>)
 800be42:	681c      	ldr	r4, [r3, #0]
 800be44:	b934      	cbnz	r4, 800be54 <__register_exitproc+0x2c>
 800be46:	4c25      	ldr	r4, [pc, #148]	; (800bedc <__register_exitproc+0xb4>)
 800be48:	601c      	str	r4, [r3, #0]
 800be4a:	4b25      	ldr	r3, [pc, #148]	; (800bee0 <__register_exitproc+0xb8>)
 800be4c:	b113      	cbz	r3, 800be54 <__register_exitproc+0x2c>
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	2b1f      	cmp	r3, #31
 800be58:	dd07      	ble.n	800be6a <__register_exitproc+0x42>
 800be5a:	f8d8 0000 	ldr.w	r0, [r8]
 800be5e:	f001 f87e 	bl	800cf5e <__retarget_lock_release_recursive>
 800be62:	f04f 30ff 	mov.w	r0, #4294967295
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	b34e      	cbz	r6, 800bec0 <__register_exitproc+0x98>
 800be6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800be70:	b988      	cbnz	r0, 800be96 <__register_exitproc+0x6e>
 800be72:	4b1c      	ldr	r3, [pc, #112]	; (800bee4 <__register_exitproc+0xbc>)
 800be74:	b923      	cbnz	r3, 800be80 <__register_exitproc+0x58>
 800be76:	f8d8 0000 	ldr.w	r0, [r8]
 800be7a:	f001 f86f 	bl	800cf5c <__retarget_lock_release>
 800be7e:	e7f0      	b.n	800be62 <__register_exitproc+0x3a>
 800be80:	f44f 7084 	mov.w	r0, #264	; 0x108
 800be84:	f7fe ffdc 	bl	800ae40 <malloc>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d0f4      	beq.n	800be76 <__register_exitproc+0x4e>
 800be8c:	2300      	movs	r3, #0
 800be8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800be92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800be96:	6863      	ldr	r3, [r4, #4]
 800be98:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800be9c:	2201      	movs	r2, #1
 800be9e:	409a      	lsls	r2, r3
 800bea0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800bea4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800bea8:	4313      	orrs	r3, r2
 800beaa:	2e02      	cmp	r6, #2
 800beac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800beb0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800beb4:	bf02      	ittt	eq
 800beb6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800beba:	431a      	orreq	r2, r3
 800bebc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800bec0:	6863      	ldr	r3, [r4, #4]
 800bec2:	f8d8 0000 	ldr.w	r0, [r8]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	3302      	adds	r3, #2
 800beca:	6062      	str	r2, [r4, #4]
 800becc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800bed0:	f001 f845 	bl	800cf5e <__retarget_lock_release_recursive>
 800bed4:	2000      	movs	r0, #0
 800bed6:	e7c6      	b.n	800be66 <__register_exitproc+0x3e>
 800bed8:	20000c28 	.word	0x20000c28
 800bedc:	20000b9c 	.word	0x20000b9c
 800bee0:	00000000 	.word	0x00000000
 800bee4:	0800ae41 	.word	0x0800ae41
 800bee8:	20000078 	.word	0x20000078

0800beec <quorem>:
 800beec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef0:	6903      	ldr	r3, [r0, #16]
 800bef2:	690c      	ldr	r4, [r1, #16]
 800bef4:	42a3      	cmp	r3, r4
 800bef6:	4607      	mov	r7, r0
 800bef8:	f2c0 8081 	blt.w	800bffe <quorem+0x112>
 800befc:	3c01      	subs	r4, #1
 800befe:	f101 0814 	add.w	r8, r1, #20
 800bf02:	f100 0514 	add.w	r5, r0, #20
 800bf06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf14:	3301      	adds	r3, #1
 800bf16:	429a      	cmp	r2, r3
 800bf18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf20:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf24:	d331      	bcc.n	800bf8a <quorem+0x9e>
 800bf26:	f04f 0e00 	mov.w	lr, #0
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	46ac      	mov	ip, r5
 800bf2e:	46f2      	mov	sl, lr
 800bf30:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf34:	b293      	uxth	r3, r2
 800bf36:	fb06 e303 	mla	r3, r6, r3, lr
 800bf3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	ebaa 0303 	sub.w	r3, sl, r3
 800bf44:	0c12      	lsrs	r2, r2, #16
 800bf46:	f8dc a000 	ldr.w	sl, [ip]
 800bf4a:	fb06 e202 	mla	r2, r6, r2, lr
 800bf4e:	fa13 f38a 	uxtah	r3, r3, sl
 800bf52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf56:	fa1f fa82 	uxth.w	sl, r2
 800bf5a:	f8dc 2000 	ldr.w	r2, [ip]
 800bf5e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bf62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf6c:	4581      	cmp	r9, r0
 800bf6e:	f84c 3b04 	str.w	r3, [ip], #4
 800bf72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf76:	d2db      	bcs.n	800bf30 <quorem+0x44>
 800bf78:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf7c:	b92b      	cbnz	r3, 800bf8a <quorem+0x9e>
 800bf7e:	9b01      	ldr	r3, [sp, #4]
 800bf80:	3b04      	subs	r3, #4
 800bf82:	429d      	cmp	r5, r3
 800bf84:	461a      	mov	r2, r3
 800bf86:	d32e      	bcc.n	800bfe6 <quorem+0xfa>
 800bf88:	613c      	str	r4, [r7, #16]
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f001 fad6 	bl	800d53c <__mcmp>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	db24      	blt.n	800bfde <quorem+0xf2>
 800bf94:	3601      	adds	r6, #1
 800bf96:	4628      	mov	r0, r5
 800bf98:	f04f 0c00 	mov.w	ip, #0
 800bf9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfa0:	f8d0 e000 	ldr.w	lr, [r0]
 800bfa4:	b293      	uxth	r3, r2
 800bfa6:	ebac 0303 	sub.w	r3, ip, r3
 800bfaa:	0c12      	lsrs	r2, r2, #16
 800bfac:	fa13 f38e 	uxtah	r3, r3, lr
 800bfb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfbe:	45c1      	cmp	r9, r8
 800bfc0:	f840 3b04 	str.w	r3, [r0], #4
 800bfc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfc8:	d2e8      	bcs.n	800bf9c <quorem+0xb0>
 800bfca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfd2:	b922      	cbnz	r2, 800bfde <quorem+0xf2>
 800bfd4:	3b04      	subs	r3, #4
 800bfd6:	429d      	cmp	r5, r3
 800bfd8:	461a      	mov	r2, r3
 800bfda:	d30a      	bcc.n	800bff2 <quorem+0x106>
 800bfdc:	613c      	str	r4, [r7, #16]
 800bfde:	4630      	mov	r0, r6
 800bfe0:	b003      	add	sp, #12
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	6812      	ldr	r2, [r2, #0]
 800bfe8:	3b04      	subs	r3, #4
 800bfea:	2a00      	cmp	r2, #0
 800bfec:	d1cc      	bne.n	800bf88 <quorem+0x9c>
 800bfee:	3c01      	subs	r4, #1
 800bff0:	e7c7      	b.n	800bf82 <quorem+0x96>
 800bff2:	6812      	ldr	r2, [r2, #0]
 800bff4:	3b04      	subs	r3, #4
 800bff6:	2a00      	cmp	r2, #0
 800bff8:	d1f0      	bne.n	800bfdc <quorem+0xf0>
 800bffa:	3c01      	subs	r4, #1
 800bffc:	e7eb      	b.n	800bfd6 <quorem+0xea>
 800bffe:	2000      	movs	r0, #0
 800c000:	e7ee      	b.n	800bfe0 <quorem+0xf4>
 800c002:	0000      	movs	r0, r0
 800c004:	0000      	movs	r0, r0
	...

0800c008 <_dtoa_r>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	ed2d 8b02 	vpush	{d8}
 800c010:	ec57 6b10 	vmov	r6, r7, d0
 800c014:	b095      	sub	sp, #84	; 0x54
 800c016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c018:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c01c:	9105      	str	r1, [sp, #20]
 800c01e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c022:	4604      	mov	r4, r0
 800c024:	9209      	str	r2, [sp, #36]	; 0x24
 800c026:	930f      	str	r3, [sp, #60]	; 0x3c
 800c028:	b975      	cbnz	r5, 800c048 <_dtoa_r+0x40>
 800c02a:	2010      	movs	r0, #16
 800c02c:	f7fe ff08 	bl	800ae40 <malloc>
 800c030:	4602      	mov	r2, r0
 800c032:	6260      	str	r0, [r4, #36]	; 0x24
 800c034:	b920      	cbnz	r0, 800c040 <_dtoa_r+0x38>
 800c036:	4bb2      	ldr	r3, [pc, #712]	; (800c300 <_dtoa_r+0x2f8>)
 800c038:	21ea      	movs	r1, #234	; 0xea
 800c03a:	48b2      	ldr	r0, [pc, #712]	; (800c304 <_dtoa_r+0x2fc>)
 800c03c:	f7fe fea0 	bl	800ad80 <__assert_func>
 800c040:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c044:	6005      	str	r5, [r0, #0]
 800c046:	60c5      	str	r5, [r0, #12]
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	b151      	cbz	r1, 800c064 <_dtoa_r+0x5c>
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	604a      	str	r2, [r1, #4]
 800c052:	2301      	movs	r3, #1
 800c054:	4093      	lsls	r3, r2
 800c056:	608b      	str	r3, [r1, #8]
 800c058:	4620      	mov	r0, r4
 800c05a:	f001 f831 	bl	800d0c0 <_Bfree>
 800c05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	1e3b      	subs	r3, r7, #0
 800c066:	bfb9      	ittee	lt
 800c068:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	9303      	strlt	r3, [sp, #12]
 800c06e:	2300      	movge	r3, #0
 800c070:	f8c8 3000 	strge.w	r3, [r8]
 800c074:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c078:	4ba3      	ldr	r3, [pc, #652]	; (800c308 <_dtoa_r+0x300>)
 800c07a:	bfbc      	itt	lt
 800c07c:	2201      	movlt	r2, #1
 800c07e:	f8c8 2000 	strlt.w	r2, [r8]
 800c082:	ea33 0309 	bics.w	r3, r3, r9
 800c086:	d11b      	bne.n	800c0c0 <_dtoa_r+0xb8>
 800c088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c08a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c094:	4333      	orrs	r3, r6
 800c096:	f000 857a 	beq.w	800cb8e <_dtoa_r+0xb86>
 800c09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c09c:	b963      	cbnz	r3, 800c0b8 <_dtoa_r+0xb0>
 800c09e:	4b9b      	ldr	r3, [pc, #620]	; (800c30c <_dtoa_r+0x304>)
 800c0a0:	e024      	b.n	800c0ec <_dtoa_r+0xe4>
 800c0a2:	4b9b      	ldr	r3, [pc, #620]	; (800c310 <_dtoa_r+0x308>)
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	9800      	ldr	r0, [sp, #0]
 800c0ae:	b015      	add	sp, #84	; 0x54
 800c0b0:	ecbd 8b02 	vpop	{d8}
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	4b94      	ldr	r3, [pc, #592]	; (800c30c <_dtoa_r+0x304>)
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	3303      	adds	r3, #3
 800c0be:	e7f3      	b.n	800c0a8 <_dtoa_r+0xa0>
 800c0c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	ec51 0b17 	vmov	r0, r1, d7
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c0d0:	f7f4 fd0c 	bl	8000aec <__aeabi_dcmpeq>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	b158      	cbz	r0, 800c0f0 <_dtoa_r+0xe8>
 800c0d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0da:	2301      	movs	r3, #1
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8551 	beq.w	800cb88 <_dtoa_r+0xb80>
 800c0e6:	488b      	ldr	r0, [pc, #556]	; (800c314 <_dtoa_r+0x30c>)
 800c0e8:	6018      	str	r0, [r3, #0]
 800c0ea:	1e43      	subs	r3, r0, #1
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	e7dd      	b.n	800c0ac <_dtoa_r+0xa4>
 800c0f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c0f4:	aa12      	add	r2, sp, #72	; 0x48
 800c0f6:	a913      	add	r1, sp, #76	; 0x4c
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f001 fac3 	bl	800d684 <__d2b>
 800c0fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c102:	4683      	mov	fp, r0
 800c104:	2d00      	cmp	r5, #0
 800c106:	d07c      	beq.n	800c202 <_dtoa_r+0x1fa>
 800c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c10e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c112:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c116:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c11a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c122:	4b7d      	ldr	r3, [pc, #500]	; (800c318 <_dtoa_r+0x310>)
 800c124:	2200      	movs	r2, #0
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 f8bf 	bl	80002ac <__aeabi_dsub>
 800c12e:	a36e      	add	r3, pc, #440	; (adr r3, 800c2e8 <_dtoa_r+0x2e0>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	f7f4 fa72 	bl	800061c <__aeabi_dmul>
 800c138:	a36d      	add	r3, pc, #436	; (adr r3, 800c2f0 <_dtoa_r+0x2e8>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 f8b7 	bl	80002b0 <__adddf3>
 800c142:	4606      	mov	r6, r0
 800c144:	4628      	mov	r0, r5
 800c146:	460f      	mov	r7, r1
 800c148:	f7f4 f9fe 	bl	8000548 <__aeabi_i2d>
 800c14c:	a36a      	add	r3, pc, #424	; (adr r3, 800c2f8 <_dtoa_r+0x2f0>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	f7f4 fa63 	bl	800061c <__aeabi_dmul>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4630      	mov	r0, r6
 800c15c:	4639      	mov	r1, r7
 800c15e:	f7f4 f8a7 	bl	80002b0 <__adddf3>
 800c162:	4606      	mov	r6, r0
 800c164:	460f      	mov	r7, r1
 800c166:	f7f4 fd09 	bl	8000b7c <__aeabi_d2iz>
 800c16a:	2200      	movs	r2, #0
 800c16c:	4682      	mov	sl, r0
 800c16e:	2300      	movs	r3, #0
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fcc4 	bl	8000b00 <__aeabi_dcmplt>
 800c178:	b148      	cbz	r0, 800c18e <_dtoa_r+0x186>
 800c17a:	4650      	mov	r0, sl
 800c17c:	f7f4 f9e4 	bl	8000548 <__aeabi_i2d>
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	f7f4 fcb2 	bl	8000aec <__aeabi_dcmpeq>
 800c188:	b908      	cbnz	r0, 800c18e <_dtoa_r+0x186>
 800c18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c18e:	f1ba 0f16 	cmp.w	sl, #22
 800c192:	d854      	bhi.n	800c23e <_dtoa_r+0x236>
 800c194:	4b61      	ldr	r3, [pc, #388]	; (800c31c <_dtoa_r+0x314>)
 800c196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1a2:	f7f4 fcad 	bl	8000b00 <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d04b      	beq.n	800c242 <_dtoa_r+0x23a>
 800c1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c1b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1b4:	1b5d      	subs	r5, r3, r5
 800c1b6:	1e6b      	subs	r3, r5, #1
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	bf43      	ittte	mi
 800c1bc:	2300      	movmi	r3, #0
 800c1be:	f1c5 0801 	rsbmi	r8, r5, #1
 800c1c2:	9304      	strmi	r3, [sp, #16]
 800c1c4:	f04f 0800 	movpl.w	r8, #0
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	db3b      	blt.n	800c246 <_dtoa_r+0x23e>
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c1d4:	4453      	add	r3, sl
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9306      	str	r3, [sp, #24]
 800c1dc:	9b05      	ldr	r3, [sp, #20]
 800c1de:	2b09      	cmp	r3, #9
 800c1e0:	d869      	bhi.n	800c2b6 <_dtoa_r+0x2ae>
 800c1e2:	2b05      	cmp	r3, #5
 800c1e4:	bfc4      	itt	gt
 800c1e6:	3b04      	subgt	r3, #4
 800c1e8:	9305      	strgt	r3, [sp, #20]
 800c1ea:	9b05      	ldr	r3, [sp, #20]
 800c1ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c1f0:	bfcc      	ite	gt
 800c1f2:	2500      	movgt	r5, #0
 800c1f4:	2501      	movle	r5, #1
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d869      	bhi.n	800c2ce <_dtoa_r+0x2c6>
 800c1fa:	e8df f003 	tbb	[pc, r3]
 800c1fe:	4e2c      	.short	0x4e2c
 800c200:	5a4c      	.short	0x5a4c
 800c202:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c206:	441d      	add	r5, r3
 800c208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c20c:	2b20      	cmp	r3, #32
 800c20e:	bfc1      	itttt	gt
 800c210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c214:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c218:	fa09 f303 	lslgt.w	r3, r9, r3
 800c21c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c220:	bfda      	itte	le
 800c222:	f1c3 0320 	rsble	r3, r3, #32
 800c226:	fa06 f003 	lslle.w	r0, r6, r3
 800c22a:	4318      	orrgt	r0, r3
 800c22c:	f7f4 f97c 	bl	8000528 <__aeabi_ui2d>
 800c230:	2301      	movs	r3, #1
 800c232:	4606      	mov	r6, r0
 800c234:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c238:	3d01      	subs	r5, #1
 800c23a:	9310      	str	r3, [sp, #64]	; 0x40
 800c23c:	e771      	b.n	800c122 <_dtoa_r+0x11a>
 800c23e:	2301      	movs	r3, #1
 800c240:	e7b6      	b.n	800c1b0 <_dtoa_r+0x1a8>
 800c242:	900e      	str	r0, [sp, #56]	; 0x38
 800c244:	e7b5      	b.n	800c1b2 <_dtoa_r+0x1aa>
 800c246:	f1ca 0300 	rsb	r3, sl, #0
 800c24a:	9306      	str	r3, [sp, #24]
 800c24c:	2300      	movs	r3, #0
 800c24e:	eba8 080a 	sub.w	r8, r8, sl
 800c252:	930d      	str	r3, [sp, #52]	; 0x34
 800c254:	e7c2      	b.n	800c1dc <_dtoa_r+0x1d4>
 800c256:	2300      	movs	r3, #0
 800c258:	9308      	str	r3, [sp, #32]
 800c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc39      	bgt.n	800c2d4 <_dtoa_r+0x2cc>
 800c260:	f04f 0901 	mov.w	r9, #1
 800c264:	f8cd 9004 	str.w	r9, [sp, #4]
 800c268:	464b      	mov	r3, r9
 800c26a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c26e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c270:	2200      	movs	r2, #0
 800c272:	6042      	str	r2, [r0, #4]
 800c274:	2204      	movs	r2, #4
 800c276:	f102 0614 	add.w	r6, r2, #20
 800c27a:	429e      	cmp	r6, r3
 800c27c:	6841      	ldr	r1, [r0, #4]
 800c27e:	d92f      	bls.n	800c2e0 <_dtoa_r+0x2d8>
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fedd 	bl	800d040 <_Balloc>
 800c286:	9000      	str	r0, [sp, #0]
 800c288:	2800      	cmp	r0, #0
 800c28a:	d14b      	bne.n	800c324 <_dtoa_r+0x31c>
 800c28c:	4b24      	ldr	r3, [pc, #144]	; (800c320 <_dtoa_r+0x318>)
 800c28e:	4602      	mov	r2, r0
 800c290:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c294:	e6d1      	b.n	800c03a <_dtoa_r+0x32>
 800c296:	2301      	movs	r3, #1
 800c298:	e7de      	b.n	800c258 <_dtoa_r+0x250>
 800c29a:	2300      	movs	r3, #0
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a0:	eb0a 0903 	add.w	r9, sl, r3
 800c2a4:	f109 0301 	add.w	r3, r9, #1
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	bfb8      	it	lt
 800c2ae:	2301      	movlt	r3, #1
 800c2b0:	e7dd      	b.n	800c26e <_dtoa_r+0x266>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e7f2      	b.n	800c29c <_dtoa_r+0x294>
 800c2b6:	2501      	movs	r5, #1
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9305      	str	r3, [sp, #20]
 800c2bc:	9508      	str	r5, [sp, #32]
 800c2be:	f04f 39ff 	mov.w	r9, #4294967295
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2c8:	2312      	movs	r3, #18
 800c2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c2cc:	e7cf      	b.n	800c26e <_dtoa_r+0x266>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	9308      	str	r3, [sp, #32]
 800c2d2:	e7f4      	b.n	800c2be <_dtoa_r+0x2b6>
 800c2d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2dc:	464b      	mov	r3, r9
 800c2de:	e7c6      	b.n	800c26e <_dtoa_r+0x266>
 800c2e0:	3101      	adds	r1, #1
 800c2e2:	6041      	str	r1, [r0, #4]
 800c2e4:	0052      	lsls	r2, r2, #1
 800c2e6:	e7c6      	b.n	800c276 <_dtoa_r+0x26e>
 800c2e8:	636f4361 	.word	0x636f4361
 800c2ec:	3fd287a7 	.word	0x3fd287a7
 800c2f0:	8b60c8b3 	.word	0x8b60c8b3
 800c2f4:	3fc68a28 	.word	0x3fc68a28
 800c2f8:	509f79fb 	.word	0x509f79fb
 800c2fc:	3fd34413 	.word	0x3fd34413
 800c300:	08012bc7 	.word	0x08012bc7
 800c304:	08012bde 	.word	0x08012bde
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	08012bc3 	.word	0x08012bc3
 800c310:	08012bba 	.word	0x08012bba
 800c314:	08012a96 	.word	0x08012a96
 800c318:	3ff80000 	.word	0x3ff80000
 800c31c:	08012d38 	.word	0x08012d38
 800c320:	08012c3d 	.word	0x08012c3d
 800c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c326:	9a00      	ldr	r2, [sp, #0]
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	2b0e      	cmp	r3, #14
 800c32e:	f200 80ad 	bhi.w	800c48c <_dtoa_r+0x484>
 800c332:	2d00      	cmp	r5, #0
 800c334:	f000 80aa 	beq.w	800c48c <_dtoa_r+0x484>
 800c338:	f1ba 0f00 	cmp.w	sl, #0
 800c33c:	dd36      	ble.n	800c3ac <_dtoa_r+0x3a4>
 800c33e:	4ac3      	ldr	r2, [pc, #780]	; (800c64c <_dtoa_r+0x644>)
 800c340:	f00a 030f 	and.w	r3, sl, #15
 800c344:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c348:	ed93 7b00 	vldr	d7, [r3]
 800c34c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c350:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c354:	eeb0 8a47 	vmov.f32	s16, s14
 800c358:	eef0 8a67 	vmov.f32	s17, s15
 800c35c:	d016      	beq.n	800c38c <_dtoa_r+0x384>
 800c35e:	4bbc      	ldr	r3, [pc, #752]	; (800c650 <_dtoa_r+0x648>)
 800c360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c368:	f7f4 fa82 	bl	8000870 <__aeabi_ddiv>
 800c36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c370:	f007 070f 	and.w	r7, r7, #15
 800c374:	2503      	movs	r5, #3
 800c376:	4eb6      	ldr	r6, [pc, #728]	; (800c650 <_dtoa_r+0x648>)
 800c378:	b957      	cbnz	r7, 800c390 <_dtoa_r+0x388>
 800c37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37e:	ec53 2b18 	vmov	r2, r3, d8
 800c382:	f7f4 fa75 	bl	8000870 <__aeabi_ddiv>
 800c386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c38a:	e029      	b.n	800c3e0 <_dtoa_r+0x3d8>
 800c38c:	2502      	movs	r5, #2
 800c38e:	e7f2      	b.n	800c376 <_dtoa_r+0x36e>
 800c390:	07f9      	lsls	r1, r7, #31
 800c392:	d508      	bpl.n	800c3a6 <_dtoa_r+0x39e>
 800c394:	ec51 0b18 	vmov	r0, r1, d8
 800c398:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c39c:	f7f4 f93e 	bl	800061c <__aeabi_dmul>
 800c3a0:	ec41 0b18 	vmov	d8, r0, r1
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	107f      	asrs	r7, r7, #1
 800c3a8:	3608      	adds	r6, #8
 800c3aa:	e7e5      	b.n	800c378 <_dtoa_r+0x370>
 800c3ac:	f000 80a6 	beq.w	800c4fc <_dtoa_r+0x4f4>
 800c3b0:	f1ca 0600 	rsb	r6, sl, #0
 800c3b4:	4ba5      	ldr	r3, [pc, #660]	; (800c64c <_dtoa_r+0x644>)
 800c3b6:	4fa6      	ldr	r7, [pc, #664]	; (800c650 <_dtoa_r+0x648>)
 800c3b8:	f006 020f 	and.w	r2, r6, #15
 800c3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3c8:	f7f4 f928 	bl	800061c <__aeabi_dmul>
 800c3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d0:	1136      	asrs	r6, r6, #4
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2502      	movs	r5, #2
 800c3d6:	2e00      	cmp	r6, #0
 800c3d8:	f040 8085 	bne.w	800c4e6 <_dtoa_r+0x4de>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1d2      	bne.n	800c386 <_dtoa_r+0x37e>
 800c3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 808c 	beq.w	800c500 <_dtoa_r+0x4f8>
 800c3e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3ec:	4b99      	ldr	r3, [pc, #612]	; (800c654 <_dtoa_r+0x64c>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	f7f4 fb84 	bl	8000b00 <__aeabi_dcmplt>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f000 8081 	beq.w	800c500 <_dtoa_r+0x4f8>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d07d      	beq.n	800c500 <_dtoa_r+0x4f8>
 800c404:	f1b9 0f00 	cmp.w	r9, #0
 800c408:	dd3c      	ble.n	800c484 <_dtoa_r+0x47c>
 800c40a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c40e:	9307      	str	r3, [sp, #28]
 800c410:	2200      	movs	r2, #0
 800c412:	4b91      	ldr	r3, [pc, #580]	; (800c658 <_dtoa_r+0x650>)
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f4 f900 	bl	800061c <__aeabi_dmul>
 800c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c420:	3501      	adds	r5, #1
 800c422:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7f4 f88c 	bl	8000548 <__aeabi_i2d>
 800c430:	4632      	mov	r2, r6
 800c432:	463b      	mov	r3, r7
 800c434:	f7f4 f8f2 	bl	800061c <__aeabi_dmul>
 800c438:	4b88      	ldr	r3, [pc, #544]	; (800c65c <_dtoa_r+0x654>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	f7f3 ff38 	bl	80002b0 <__adddf3>
 800c440:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c448:	9303      	str	r3, [sp, #12]
 800c44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d15c      	bne.n	800c50a <_dtoa_r+0x502>
 800c450:	4b83      	ldr	r3, [pc, #524]	; (800c660 <_dtoa_r+0x658>)
 800c452:	2200      	movs	r2, #0
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	f7f3 ff28 	bl	80002ac <__aeabi_dsub>
 800c45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	f7f4 fb6a 	bl	8000b3c <__aeabi_dcmpgt>
 800c468:	2800      	cmp	r0, #0
 800c46a:	f040 8296 	bne.w	800c99a <_dtoa_r+0x992>
 800c46e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c472:	4630      	mov	r0, r6
 800c474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 fb41 	bl	8000b00 <__aeabi_dcmplt>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f040 8288 	bne.w	800c994 <_dtoa_r+0x98c>
 800c484:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c488:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c48c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f2c0 8158 	blt.w	800c744 <_dtoa_r+0x73c>
 800c494:	f1ba 0f0e 	cmp.w	sl, #14
 800c498:	f300 8154 	bgt.w	800c744 <_dtoa_r+0x73c>
 800c49c:	4b6b      	ldr	r3, [pc, #428]	; (800c64c <_dtoa_r+0x644>)
 800c49e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f280 80e3 	bge.w	800c674 <_dtoa_r+0x66c>
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f300 80df 	bgt.w	800c674 <_dtoa_r+0x66c>
 800c4b6:	f040 826d 	bne.w	800c994 <_dtoa_r+0x98c>
 800c4ba:	4b69      	ldr	r3, [pc, #420]	; (800c660 <_dtoa_r+0x658>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 f8ab 	bl	800061c <__aeabi_dmul>
 800c4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ca:	f7f4 fb2d 	bl	8000b28 <__aeabi_dcmpge>
 800c4ce:	9e01      	ldr	r6, [sp, #4]
 800c4d0:	4637      	mov	r7, r6
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f040 8243 	bne.w	800c95e <_dtoa_r+0x956>
 800c4d8:	9d00      	ldr	r5, [sp, #0]
 800c4da:	2331      	movs	r3, #49	; 0x31
 800c4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800c4e0:	f10a 0a01 	add.w	sl, sl, #1
 800c4e4:	e23f      	b.n	800c966 <_dtoa_r+0x95e>
 800c4e6:	07f2      	lsls	r2, r6, #31
 800c4e8:	d505      	bpl.n	800c4f6 <_dtoa_r+0x4ee>
 800c4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ee:	f7f4 f895 	bl	800061c <__aeabi_dmul>
 800c4f2:	3501      	adds	r5, #1
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	1076      	asrs	r6, r6, #1
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	e76c      	b.n	800c3d6 <_dtoa_r+0x3ce>
 800c4fc:	2502      	movs	r5, #2
 800c4fe:	e76f      	b.n	800c3e0 <_dtoa_r+0x3d8>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	f8cd a01c 	str.w	sl, [sp, #28]
 800c506:	930c      	str	r3, [sp, #48]	; 0x30
 800c508:	e78d      	b.n	800c426 <_dtoa_r+0x41e>
 800c50a:	9900      	ldr	r1, [sp, #0]
 800c50c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c510:	4b4e      	ldr	r3, [pc, #312]	; (800c64c <_dtoa_r+0x644>)
 800c512:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c516:	4401      	add	r1, r0
 800c518:	9102      	str	r1, [sp, #8]
 800c51a:	9908      	ldr	r1, [sp, #32]
 800c51c:	eeb0 8a47 	vmov.f32	s16, s14
 800c520:	eef0 8a67 	vmov.f32	s17, s15
 800c524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c52c:	2900      	cmp	r1, #0
 800c52e:	d045      	beq.n	800c5bc <_dtoa_r+0x5b4>
 800c530:	494c      	ldr	r1, [pc, #304]	; (800c664 <_dtoa_r+0x65c>)
 800c532:	2000      	movs	r0, #0
 800c534:	f7f4 f99c 	bl	8000870 <__aeabi_ddiv>
 800c538:	ec53 2b18 	vmov	r2, r3, d8
 800c53c:	f7f3 feb6 	bl	80002ac <__aeabi_dsub>
 800c540:	9d00      	ldr	r5, [sp, #0]
 800c542:	ec41 0b18 	vmov	d8, r0, r1
 800c546:	4639      	mov	r1, r7
 800c548:	4630      	mov	r0, r6
 800c54a:	f7f4 fb17 	bl	8000b7c <__aeabi_d2iz>
 800c54e:	900c      	str	r0, [sp, #48]	; 0x30
 800c550:	f7f3 fffa 	bl	8000548 <__aeabi_i2d>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f3 fea6 	bl	80002ac <__aeabi_dsub>
 800c560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c562:	3330      	adds	r3, #48	; 0x30
 800c564:	f805 3b01 	strb.w	r3, [r5], #1
 800c568:	ec53 2b18 	vmov	r2, r3, d8
 800c56c:	4606      	mov	r6, r0
 800c56e:	460f      	mov	r7, r1
 800c570:	f7f4 fac6 	bl	8000b00 <__aeabi_dcmplt>
 800c574:	2800      	cmp	r0, #0
 800c576:	d165      	bne.n	800c644 <_dtoa_r+0x63c>
 800c578:	4632      	mov	r2, r6
 800c57a:	463b      	mov	r3, r7
 800c57c:	4935      	ldr	r1, [pc, #212]	; (800c654 <_dtoa_r+0x64c>)
 800c57e:	2000      	movs	r0, #0
 800c580:	f7f3 fe94 	bl	80002ac <__aeabi_dsub>
 800c584:	ec53 2b18 	vmov	r2, r3, d8
 800c588:	f7f4 faba 	bl	8000b00 <__aeabi_dcmplt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f040 80b9 	bne.w	800c704 <_dtoa_r+0x6fc>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	429d      	cmp	r5, r3
 800c596:	f43f af75 	beq.w	800c484 <_dtoa_r+0x47c>
 800c59a:	4b2f      	ldr	r3, [pc, #188]	; (800c658 <_dtoa_r+0x650>)
 800c59c:	ec51 0b18 	vmov	r0, r1, d8
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f7f4 f83b 	bl	800061c <__aeabi_dmul>
 800c5a6:	4b2c      	ldr	r3, [pc, #176]	; (800c658 <_dtoa_r+0x650>)
 800c5a8:	ec41 0b18 	vmov	d8, r0, r1
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	f7f4 f833 	bl	800061c <__aeabi_dmul>
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	460f      	mov	r7, r1
 800c5ba:	e7c4      	b.n	800c546 <_dtoa_r+0x53e>
 800c5bc:	ec51 0b17 	vmov	r0, r1, d7
 800c5c0:	f7f4 f82c 	bl	800061c <__aeabi_dmul>
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	9d00      	ldr	r5, [sp, #0]
 800c5c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c5ca:	ec41 0b18 	vmov	d8, r0, r1
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7f4 fad3 	bl	8000b7c <__aeabi_d2iz>
 800c5d6:	9011      	str	r0, [sp, #68]	; 0x44
 800c5d8:	f7f3 ffb6 	bl	8000548 <__aeabi_i2d>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f3 fe62 	bl	80002ac <__aeabi_dsub>
 800c5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ea:	3330      	adds	r3, #48	; 0x30
 800c5ec:	f805 3b01 	strb.w	r3, [r5], #1
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	460f      	mov	r7, r1
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	d134      	bne.n	800c668 <_dtoa_r+0x660>
 800c5fe:	4b19      	ldr	r3, [pc, #100]	; (800c664 <_dtoa_r+0x65c>)
 800c600:	ec51 0b18 	vmov	r0, r1, d8
 800c604:	f7f3 fe54 	bl	80002b0 <__adddf3>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f4 fa94 	bl	8000b3c <__aeabi_dcmpgt>
 800c614:	2800      	cmp	r0, #0
 800c616:	d175      	bne.n	800c704 <_dtoa_r+0x6fc>
 800c618:	ec53 2b18 	vmov	r2, r3, d8
 800c61c:	4911      	ldr	r1, [pc, #68]	; (800c664 <_dtoa_r+0x65c>)
 800c61e:	2000      	movs	r0, #0
 800c620:	f7f3 fe44 	bl	80002ac <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4630      	mov	r0, r6
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 fa68 	bl	8000b00 <__aeabi_dcmplt>
 800c630:	2800      	cmp	r0, #0
 800c632:	f43f af27 	beq.w	800c484 <_dtoa_r+0x47c>
 800c636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c638:	1e6b      	subs	r3, r5, #1
 800c63a:	930c      	str	r3, [sp, #48]	; 0x30
 800c63c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c640:	2b30      	cmp	r3, #48	; 0x30
 800c642:	d0f8      	beq.n	800c636 <_dtoa_r+0x62e>
 800c644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c648:	e04a      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c64a:	bf00      	nop
 800c64c:	08012d38 	.word	0x08012d38
 800c650:	08012d10 	.word	0x08012d10
 800c654:	3ff00000 	.word	0x3ff00000
 800c658:	40240000 	.word	0x40240000
 800c65c:	401c0000 	.word	0x401c0000
 800c660:	40140000 	.word	0x40140000
 800c664:	3fe00000 	.word	0x3fe00000
 800c668:	4baf      	ldr	r3, [pc, #700]	; (800c928 <_dtoa_r+0x920>)
 800c66a:	f7f3 ffd7 	bl	800061c <__aeabi_dmul>
 800c66e:	4606      	mov	r6, r0
 800c670:	460f      	mov	r7, r1
 800c672:	e7ac      	b.n	800c5ce <_dtoa_r+0x5c6>
 800c674:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c678:	9d00      	ldr	r5, [sp, #0]
 800c67a:	4642      	mov	r2, r8
 800c67c:	464b      	mov	r3, r9
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 f8f5 	bl	8000870 <__aeabi_ddiv>
 800c686:	f7f4 fa79 	bl	8000b7c <__aeabi_d2iz>
 800c68a:	9002      	str	r0, [sp, #8]
 800c68c:	f7f3 ff5c 	bl	8000548 <__aeabi_i2d>
 800c690:	4642      	mov	r2, r8
 800c692:	464b      	mov	r3, r9
 800c694:	f7f3 ffc2 	bl	800061c <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f3 fe04 	bl	80002ac <__aeabi_dsub>
 800c6a4:	9e02      	ldr	r6, [sp, #8]
 800c6a6:	9f01      	ldr	r7, [sp, #4]
 800c6a8:	3630      	adds	r6, #48	; 0x30
 800c6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ae:	9e00      	ldr	r6, [sp, #0]
 800c6b0:	1bae      	subs	r6, r5, r6
 800c6b2:	42b7      	cmp	r7, r6
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	d137      	bne.n	800c72a <_dtoa_r+0x722>
 800c6ba:	f7f3 fdf9 	bl	80002b0 <__adddf3>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	f7f4 fa39 	bl	8000b3c <__aeabi_dcmpgt>
 800c6ca:	b9c8      	cbnz	r0, 800c700 <_dtoa_r+0x6f8>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f4 fa0a 	bl	8000aec <__aeabi_dcmpeq>
 800c6d8:	b110      	cbz	r0, 800c6e0 <_dtoa_r+0x6d8>
 800c6da:	9b02      	ldr	r3, [sp, #8]
 800c6dc:	07d9      	lsls	r1, r3, #31
 800c6de:	d40f      	bmi.n	800c700 <_dtoa_r+0x6f8>
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	4659      	mov	r1, fp
 800c6e4:	f000 fcec 	bl	800d0c0 <_Bfree>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	702b      	strb	r3, [r5, #0]
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6ee:	f10a 0001 	add.w	r0, sl, #1
 800c6f2:	6018      	str	r0, [r3, #0]
 800c6f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f43f acd8 	beq.w	800c0ac <_dtoa_r+0xa4>
 800c6fc:	601d      	str	r5, [r3, #0]
 800c6fe:	e4d5      	b.n	800c0ac <_dtoa_r+0xa4>
 800c700:	f8cd a01c 	str.w	sl, [sp, #28]
 800c704:	462b      	mov	r3, r5
 800c706:	461d      	mov	r5, r3
 800c708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c70c:	2a39      	cmp	r2, #57	; 0x39
 800c70e:	d108      	bne.n	800c722 <_dtoa_r+0x71a>
 800c710:	9a00      	ldr	r2, [sp, #0]
 800c712:	429a      	cmp	r2, r3
 800c714:	d1f7      	bne.n	800c706 <_dtoa_r+0x6fe>
 800c716:	9a07      	ldr	r2, [sp, #28]
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	3201      	adds	r2, #1
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	2230      	movs	r2, #48	; 0x30
 800c720:	700a      	strb	r2, [r1, #0]
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	3201      	adds	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	e78c      	b.n	800c644 <_dtoa_r+0x63c>
 800c72a:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <_dtoa_r+0x920>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	f7f3 ff75 	bl	800061c <__aeabi_dmul>
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	f7f4 f9d7 	bl	8000aec <__aeabi_dcmpeq>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d09b      	beq.n	800c67a <_dtoa_r+0x672>
 800c742:	e7cd      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c744:	9a08      	ldr	r2, [sp, #32]
 800c746:	2a00      	cmp	r2, #0
 800c748:	f000 80c4 	beq.w	800c8d4 <_dtoa_r+0x8cc>
 800c74c:	9a05      	ldr	r2, [sp, #20]
 800c74e:	2a01      	cmp	r2, #1
 800c750:	f300 80a8 	bgt.w	800c8a4 <_dtoa_r+0x89c>
 800c754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c756:	2a00      	cmp	r2, #0
 800c758:	f000 80a0 	beq.w	800c89c <_dtoa_r+0x894>
 800c75c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c760:	9e06      	ldr	r6, [sp, #24]
 800c762:	4645      	mov	r5, r8
 800c764:	9a04      	ldr	r2, [sp, #16]
 800c766:	2101      	movs	r1, #1
 800c768:	441a      	add	r2, r3
 800c76a:	4620      	mov	r0, r4
 800c76c:	4498      	add	r8, r3
 800c76e:	9204      	str	r2, [sp, #16]
 800c770:	f000 fd62 	bl	800d238 <__i2b>
 800c774:	4607      	mov	r7, r0
 800c776:	2d00      	cmp	r5, #0
 800c778:	dd0b      	ble.n	800c792 <_dtoa_r+0x78a>
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd08      	ble.n	800c792 <_dtoa_r+0x78a>
 800c780:	42ab      	cmp	r3, r5
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	bfa8      	it	ge
 800c786:	462b      	movge	r3, r5
 800c788:	eba8 0803 	sub.w	r8, r8, r3
 800c78c:	1aed      	subs	r5, r5, r3
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	b1fb      	cbz	r3, 800c7d6 <_dtoa_r+0x7ce>
 800c796:	9b08      	ldr	r3, [sp, #32]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 809f 	beq.w	800c8dc <_dtoa_r+0x8d4>
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	dd11      	ble.n	800c7c6 <_dtoa_r+0x7be>
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 fe02 	bl	800d3b0 <__pow5mult>
 800c7ac:	465a      	mov	r2, fp
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 fd56 	bl	800d264 <__multiply>
 800c7b8:	4659      	mov	r1, fp
 800c7ba:	9007      	str	r0, [sp, #28]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 fc7f 	bl	800d0c0 <_Bfree>
 800c7c2:	9b07      	ldr	r3, [sp, #28]
 800c7c4:	469b      	mov	fp, r3
 800c7c6:	9b06      	ldr	r3, [sp, #24]
 800c7c8:	1b9a      	subs	r2, r3, r6
 800c7ca:	d004      	beq.n	800c7d6 <_dtoa_r+0x7ce>
 800c7cc:	4659      	mov	r1, fp
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fdee 	bl	800d3b0 <__pow5mult>
 800c7d4:	4683      	mov	fp, r0
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fd2d 	bl	800d238 <__i2b>
 800c7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	dd7c      	ble.n	800c8e0 <_dtoa_r+0x8d8>
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fde0 	bl	800d3b0 <__pow5mult>
 800c7f0:	9b05      	ldr	r3, [sp, #20]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	dd76      	ble.n	800c8e6 <_dtoa_r+0x8de>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	9306      	str	r3, [sp, #24]
 800c7fc:	6933      	ldr	r3, [r6, #16]
 800c7fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c802:	6918      	ldr	r0, [r3, #16]
 800c804:	f000 fcc8 	bl	800d198 <__hi0bits>
 800c808:	f1c0 0020 	rsb	r0, r0, #32
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4418      	add	r0, r3
 800c810:	f010 001f 	ands.w	r0, r0, #31
 800c814:	f000 8086 	beq.w	800c924 <_dtoa_r+0x91c>
 800c818:	f1c0 0320 	rsb	r3, r0, #32
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	dd7f      	ble.n	800c920 <_dtoa_r+0x918>
 800c820:	f1c0 001c 	rsb	r0, r0, #28
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	4403      	add	r3, r0
 800c828:	4480      	add	r8, r0
 800c82a:	4405      	add	r5, r0
 800c82c:	9304      	str	r3, [sp, #16]
 800c82e:	f1b8 0f00 	cmp.w	r8, #0
 800c832:	dd05      	ble.n	800c840 <_dtoa_r+0x838>
 800c834:	4659      	mov	r1, fp
 800c836:	4642      	mov	r2, r8
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fe13 	bl	800d464 <__lshift>
 800c83e:	4683      	mov	fp, r0
 800c840:	9b04      	ldr	r3, [sp, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	dd05      	ble.n	800c852 <_dtoa_r+0x84a>
 800c846:	4631      	mov	r1, r6
 800c848:	461a      	mov	r2, r3
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fe0a 	bl	800d464 <__lshift>
 800c850:	4606      	mov	r6, r0
 800c852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c854:	2b00      	cmp	r3, #0
 800c856:	d069      	beq.n	800c92c <_dtoa_r+0x924>
 800c858:	4631      	mov	r1, r6
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fe6e 	bl	800d53c <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	da63      	bge.n	800c92c <_dtoa_r+0x924>
 800c864:	2300      	movs	r3, #0
 800c866:	4659      	mov	r1, fp
 800c868:	220a      	movs	r2, #10
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fc4a 	bl	800d104 <__multadd>
 800c870:	9b08      	ldr	r3, [sp, #32]
 800c872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c876:	4683      	mov	fp, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 818f 	beq.w	800cb9c <_dtoa_r+0xb94>
 800c87e:	4639      	mov	r1, r7
 800c880:	2300      	movs	r3, #0
 800c882:	220a      	movs	r2, #10
 800c884:	4620      	mov	r0, r4
 800c886:	f000 fc3d 	bl	800d104 <__multadd>
 800c88a:	f1b9 0f00 	cmp.w	r9, #0
 800c88e:	4607      	mov	r7, r0
 800c890:	f300 808e 	bgt.w	800c9b0 <_dtoa_r+0x9a8>
 800c894:	9b05      	ldr	r3, [sp, #20]
 800c896:	2b02      	cmp	r3, #2
 800c898:	dc50      	bgt.n	800c93c <_dtoa_r+0x934>
 800c89a:	e089      	b.n	800c9b0 <_dtoa_r+0x9a8>
 800c89c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8a2:	e75d      	b.n	800c760 <_dtoa_r+0x758>
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	1e5e      	subs	r6, r3, #1
 800c8a8:	9b06      	ldr	r3, [sp, #24]
 800c8aa:	42b3      	cmp	r3, r6
 800c8ac:	bfbf      	itttt	lt
 800c8ae:	9b06      	ldrlt	r3, [sp, #24]
 800c8b0:	9606      	strlt	r6, [sp, #24]
 800c8b2:	1af2      	sublt	r2, r6, r3
 800c8b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c8b6:	bfb6      	itet	lt
 800c8b8:	189b      	addlt	r3, r3, r2
 800c8ba:	1b9e      	subge	r6, r3, r6
 800c8bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c8be:	9b01      	ldr	r3, [sp, #4]
 800c8c0:	bfb8      	it	lt
 800c8c2:	2600      	movlt	r6, #0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	bfb5      	itete	lt
 800c8c8:	eba8 0503 	sublt.w	r5, r8, r3
 800c8cc:	9b01      	ldrge	r3, [sp, #4]
 800c8ce:	2300      	movlt	r3, #0
 800c8d0:	4645      	movge	r5, r8
 800c8d2:	e747      	b.n	800c764 <_dtoa_r+0x75c>
 800c8d4:	9e06      	ldr	r6, [sp, #24]
 800c8d6:	9f08      	ldr	r7, [sp, #32]
 800c8d8:	4645      	mov	r5, r8
 800c8da:	e74c      	b.n	800c776 <_dtoa_r+0x76e>
 800c8dc:	9a06      	ldr	r2, [sp, #24]
 800c8de:	e775      	b.n	800c7cc <_dtoa_r+0x7c4>
 800c8e0:	9b05      	ldr	r3, [sp, #20]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	dc18      	bgt.n	800c918 <_dtoa_r+0x910>
 800c8e6:	9b02      	ldr	r3, [sp, #8]
 800c8e8:	b9b3      	cbnz	r3, 800c918 <_dtoa_r+0x910>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8f0:	b9a3      	cbnz	r3, 800c91c <_dtoa_r+0x914>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f8:	0d1b      	lsrs	r3, r3, #20
 800c8fa:	051b      	lsls	r3, r3, #20
 800c8fc:	b12b      	cbz	r3, 800c90a <_dtoa_r+0x902>
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	3301      	adds	r3, #1
 800c902:	9304      	str	r3, [sp, #16]
 800c904:	f108 0801 	add.w	r8, r8, #1
 800c908:	2301      	movs	r3, #1
 800c90a:	9306      	str	r3, [sp, #24]
 800c90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f47f af74 	bne.w	800c7fc <_dtoa_r+0x7f4>
 800c914:	2001      	movs	r0, #1
 800c916:	e779      	b.n	800c80c <_dtoa_r+0x804>
 800c918:	2300      	movs	r3, #0
 800c91a:	e7f6      	b.n	800c90a <_dtoa_r+0x902>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	e7f4      	b.n	800c90a <_dtoa_r+0x902>
 800c920:	d085      	beq.n	800c82e <_dtoa_r+0x826>
 800c922:	4618      	mov	r0, r3
 800c924:	301c      	adds	r0, #28
 800c926:	e77d      	b.n	800c824 <_dtoa_r+0x81c>
 800c928:	40240000 	.word	0x40240000
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dc38      	bgt.n	800c9a4 <_dtoa_r+0x99c>
 800c932:	9b05      	ldr	r3, [sp, #20]
 800c934:	2b02      	cmp	r3, #2
 800c936:	dd35      	ble.n	800c9a4 <_dtoa_r+0x99c>
 800c938:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c93c:	f1b9 0f00 	cmp.w	r9, #0
 800c940:	d10d      	bne.n	800c95e <_dtoa_r+0x956>
 800c942:	4631      	mov	r1, r6
 800c944:	464b      	mov	r3, r9
 800c946:	2205      	movs	r2, #5
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fbdb 	bl	800d104 <__multadd>
 800c94e:	4601      	mov	r1, r0
 800c950:	4606      	mov	r6, r0
 800c952:	4658      	mov	r0, fp
 800c954:	f000 fdf2 	bl	800d53c <__mcmp>
 800c958:	2800      	cmp	r0, #0
 800c95a:	f73f adbd 	bgt.w	800c4d8 <_dtoa_r+0x4d0>
 800c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c960:	9d00      	ldr	r5, [sp, #0]
 800c962:	ea6f 0a03 	mvn.w	sl, r3
 800c966:	f04f 0800 	mov.w	r8, #0
 800c96a:	4631      	mov	r1, r6
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 fba7 	bl	800d0c0 <_Bfree>
 800c972:	2f00      	cmp	r7, #0
 800c974:	f43f aeb4 	beq.w	800c6e0 <_dtoa_r+0x6d8>
 800c978:	f1b8 0f00 	cmp.w	r8, #0
 800c97c:	d005      	beq.n	800c98a <_dtoa_r+0x982>
 800c97e:	45b8      	cmp	r8, r7
 800c980:	d003      	beq.n	800c98a <_dtoa_r+0x982>
 800c982:	4641      	mov	r1, r8
 800c984:	4620      	mov	r0, r4
 800c986:	f000 fb9b 	bl	800d0c0 <_Bfree>
 800c98a:	4639      	mov	r1, r7
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fb97 	bl	800d0c0 <_Bfree>
 800c992:	e6a5      	b.n	800c6e0 <_dtoa_r+0x6d8>
 800c994:	2600      	movs	r6, #0
 800c996:	4637      	mov	r7, r6
 800c998:	e7e1      	b.n	800c95e <_dtoa_r+0x956>
 800c99a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c99c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c9a0:	4637      	mov	r7, r6
 800c9a2:	e599      	b.n	800c4d8 <_dtoa_r+0x4d0>
 800c9a4:	9b08      	ldr	r3, [sp, #32]
 800c9a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 80fd 	beq.w	800cbaa <_dtoa_r+0xba2>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	dd05      	ble.n	800c9c0 <_dtoa_r+0x9b8>
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	462a      	mov	r2, r5
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 fd53 	bl	800d464 <__lshift>
 800c9be:	4607      	mov	r7, r0
 800c9c0:	9b06      	ldr	r3, [sp, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05c      	beq.n	800ca80 <_dtoa_r+0xa78>
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f000 fb39 	bl	800d040 <_Balloc>
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <_dtoa_r+0x9d6>
 800c9d2:	4b80      	ldr	r3, [pc, #512]	; (800cbd4 <_dtoa_r+0xbcc>)
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9da:	f7ff bb2e 	b.w	800c03a <_dtoa_r+0x32>
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	3202      	adds	r2, #2
 800c9e2:	0092      	lsls	r2, r2, #2
 800c9e4:	f107 010c 	add.w	r1, r7, #12
 800c9e8:	300c      	adds	r0, #12
 800c9ea:	f7fe fa39 	bl	800ae60 <memcpy>
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fd36 	bl	800d464 <__lshift>
 800c9f8:	9b00      	ldr	r3, [sp, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	444b      	add	r3, r9
 800ca02:	9307      	str	r3, [sp, #28]
 800ca04:	9b02      	ldr	r3, [sp, #8]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	46b8      	mov	r8, r7
 800ca0c:	9306      	str	r3, [sp, #24]
 800ca0e:	4607      	mov	r7, r0
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	4631      	mov	r1, r6
 800ca14:	3b01      	subs	r3, #1
 800ca16:	4658      	mov	r0, fp
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	f7ff fa67 	bl	800beec <quorem>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	3330      	adds	r3, #48	; 0x30
 800ca22:	9004      	str	r0, [sp, #16]
 800ca24:	4641      	mov	r1, r8
 800ca26:	4658      	mov	r0, fp
 800ca28:	9308      	str	r3, [sp, #32]
 800ca2a:	f000 fd87 	bl	800d53c <__mcmp>
 800ca2e:	463a      	mov	r2, r7
 800ca30:	4681      	mov	r9, r0
 800ca32:	4631      	mov	r1, r6
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 fd9d 	bl	800d574 <__mdiff>
 800ca3a:	68c2      	ldr	r2, [r0, #12]
 800ca3c:	9b08      	ldr	r3, [sp, #32]
 800ca3e:	4605      	mov	r5, r0
 800ca40:	bb02      	cbnz	r2, 800ca84 <_dtoa_r+0xa7c>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4658      	mov	r0, fp
 800ca46:	f000 fd79 	bl	800d53c <__mcmp>
 800ca4a:	9b08      	ldr	r3, [sp, #32]
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4620      	mov	r0, r4
 800ca52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ca56:	f000 fb33 	bl	800d0c0 <_Bfree>
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5e:	9d01      	ldr	r5, [sp, #4]
 800ca60:	ea43 0102 	orr.w	r1, r3, r2
 800ca64:	9b06      	ldr	r3, [sp, #24]
 800ca66:	430b      	orrs	r3, r1
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	d10d      	bne.n	800ca88 <_dtoa_r+0xa80>
 800ca6c:	2b39      	cmp	r3, #57	; 0x39
 800ca6e:	d029      	beq.n	800cac4 <_dtoa_r+0xabc>
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	dd01      	ble.n	800ca7a <_dtoa_r+0xa72>
 800ca76:	9b04      	ldr	r3, [sp, #16]
 800ca78:	3331      	adds	r3, #49	; 0x31
 800ca7a:	9a02      	ldr	r2, [sp, #8]
 800ca7c:	7013      	strb	r3, [r2, #0]
 800ca7e:	e774      	b.n	800c96a <_dtoa_r+0x962>
 800ca80:	4638      	mov	r0, r7
 800ca82:	e7b9      	b.n	800c9f8 <_dtoa_r+0x9f0>
 800ca84:	2201      	movs	r2, #1
 800ca86:	e7e2      	b.n	800ca4e <_dtoa_r+0xa46>
 800ca88:	f1b9 0f00 	cmp.w	r9, #0
 800ca8c:	db06      	blt.n	800ca9c <_dtoa_r+0xa94>
 800ca8e:	9905      	ldr	r1, [sp, #20]
 800ca90:	ea41 0909 	orr.w	r9, r1, r9
 800ca94:	9906      	ldr	r1, [sp, #24]
 800ca96:	ea59 0101 	orrs.w	r1, r9, r1
 800ca9a:	d120      	bne.n	800cade <_dtoa_r+0xad6>
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	ddec      	ble.n	800ca7a <_dtoa_r+0xa72>
 800caa0:	4659      	mov	r1, fp
 800caa2:	2201      	movs	r2, #1
 800caa4:	4620      	mov	r0, r4
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	f000 fcdc 	bl	800d464 <__lshift>
 800caac:	4631      	mov	r1, r6
 800caae:	4683      	mov	fp, r0
 800cab0:	f000 fd44 	bl	800d53c <__mcmp>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	dc02      	bgt.n	800cac0 <_dtoa_r+0xab8>
 800caba:	d1de      	bne.n	800ca7a <_dtoa_r+0xa72>
 800cabc:	07da      	lsls	r2, r3, #31
 800cabe:	d5dc      	bpl.n	800ca7a <_dtoa_r+0xa72>
 800cac0:	2b39      	cmp	r3, #57	; 0x39
 800cac2:	d1d8      	bne.n	800ca76 <_dtoa_r+0xa6e>
 800cac4:	9a02      	ldr	r2, [sp, #8]
 800cac6:	2339      	movs	r3, #57	; 0x39
 800cac8:	7013      	strb	r3, [r2, #0]
 800caca:	462b      	mov	r3, r5
 800cacc:	461d      	mov	r5, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cad4:	2a39      	cmp	r2, #57	; 0x39
 800cad6:	d050      	beq.n	800cb7a <_dtoa_r+0xb72>
 800cad8:	3201      	adds	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
 800cadc:	e745      	b.n	800c96a <_dtoa_r+0x962>
 800cade:	2a00      	cmp	r2, #0
 800cae0:	dd03      	ble.n	800caea <_dtoa_r+0xae2>
 800cae2:	2b39      	cmp	r3, #57	; 0x39
 800cae4:	d0ee      	beq.n	800cac4 <_dtoa_r+0xabc>
 800cae6:	3301      	adds	r3, #1
 800cae8:	e7c7      	b.n	800ca7a <_dtoa_r+0xa72>
 800caea:	9a01      	ldr	r2, [sp, #4]
 800caec:	9907      	ldr	r1, [sp, #28]
 800caee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800caf2:	428a      	cmp	r2, r1
 800caf4:	d02a      	beq.n	800cb4c <_dtoa_r+0xb44>
 800caf6:	4659      	mov	r1, fp
 800caf8:	2300      	movs	r3, #0
 800cafa:	220a      	movs	r2, #10
 800cafc:	4620      	mov	r0, r4
 800cafe:	f000 fb01 	bl	800d104 <__multadd>
 800cb02:	45b8      	cmp	r8, r7
 800cb04:	4683      	mov	fp, r0
 800cb06:	f04f 0300 	mov.w	r3, #0
 800cb0a:	f04f 020a 	mov.w	r2, #10
 800cb0e:	4641      	mov	r1, r8
 800cb10:	4620      	mov	r0, r4
 800cb12:	d107      	bne.n	800cb24 <_dtoa_r+0xb1c>
 800cb14:	f000 faf6 	bl	800d104 <__multadd>
 800cb18:	4680      	mov	r8, r0
 800cb1a:	4607      	mov	r7, r0
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	e775      	b.n	800ca10 <_dtoa_r+0xa08>
 800cb24:	f000 faee 	bl	800d104 <__multadd>
 800cb28:	4639      	mov	r1, r7
 800cb2a:	4680      	mov	r8, r0
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	220a      	movs	r2, #10
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 fae7 	bl	800d104 <__multadd>
 800cb36:	4607      	mov	r7, r0
 800cb38:	e7f0      	b.n	800cb1c <_dtoa_r+0xb14>
 800cb3a:	f1b9 0f00 	cmp.w	r9, #0
 800cb3e:	9a00      	ldr	r2, [sp, #0]
 800cb40:	bfcc      	ite	gt
 800cb42:	464d      	movgt	r5, r9
 800cb44:	2501      	movle	r5, #1
 800cb46:	4415      	add	r5, r2
 800cb48:	f04f 0800 	mov.w	r8, #0
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	2201      	movs	r2, #1
 800cb50:	4620      	mov	r0, r4
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	f000 fc86 	bl	800d464 <__lshift>
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4683      	mov	fp, r0
 800cb5c:	f000 fcee 	bl	800d53c <__mcmp>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	dcb2      	bgt.n	800caca <_dtoa_r+0xac2>
 800cb64:	d102      	bne.n	800cb6c <_dtoa_r+0xb64>
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	07db      	lsls	r3, r3, #31
 800cb6a:	d4ae      	bmi.n	800caca <_dtoa_r+0xac2>
 800cb6c:	462b      	mov	r3, r5
 800cb6e:	461d      	mov	r5, r3
 800cb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb74:	2a30      	cmp	r2, #48	; 0x30
 800cb76:	d0fa      	beq.n	800cb6e <_dtoa_r+0xb66>
 800cb78:	e6f7      	b.n	800c96a <_dtoa_r+0x962>
 800cb7a:	9a00      	ldr	r2, [sp, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d1a5      	bne.n	800cacc <_dtoa_r+0xac4>
 800cb80:	f10a 0a01 	add.w	sl, sl, #1
 800cb84:	2331      	movs	r3, #49	; 0x31
 800cb86:	e779      	b.n	800ca7c <_dtoa_r+0xa74>
 800cb88:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <_dtoa_r+0xbd0>)
 800cb8a:	f7ff baaf 	b.w	800c0ec <_dtoa_r+0xe4>
 800cb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f47f aa86 	bne.w	800c0a2 <_dtoa_r+0x9a>
 800cb96:	4b11      	ldr	r3, [pc, #68]	; (800cbdc <_dtoa_r+0xbd4>)
 800cb98:	f7ff baa8 	b.w	800c0ec <_dtoa_r+0xe4>
 800cb9c:	f1b9 0f00 	cmp.w	r9, #0
 800cba0:	dc03      	bgt.n	800cbaa <_dtoa_r+0xba2>
 800cba2:	9b05      	ldr	r3, [sp, #20]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	f73f aec9 	bgt.w	800c93c <_dtoa_r+0x934>
 800cbaa:	9d00      	ldr	r5, [sp, #0]
 800cbac:	4631      	mov	r1, r6
 800cbae:	4658      	mov	r0, fp
 800cbb0:	f7ff f99c 	bl	800beec <quorem>
 800cbb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cbb8:	f805 3b01 	strb.w	r3, [r5], #1
 800cbbc:	9a00      	ldr	r2, [sp, #0]
 800cbbe:	1aaa      	subs	r2, r5, r2
 800cbc0:	4591      	cmp	r9, r2
 800cbc2:	ddba      	ble.n	800cb3a <_dtoa_r+0xb32>
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	220a      	movs	r2, #10
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fa9a 	bl	800d104 <__multadd>
 800cbd0:	4683      	mov	fp, r0
 800cbd2:	e7eb      	b.n	800cbac <_dtoa_r+0xba4>
 800cbd4:	08012c3d 	.word	0x08012c3d
 800cbd8:	08012a95 	.word	0x08012a95
 800cbdc:	08012bba 	.word	0x08012bba

0800cbe0 <__sflush_r>:
 800cbe0:	898a      	ldrh	r2, [r1, #12]
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	0710      	lsls	r0, r2, #28
 800cbea:	460c      	mov	r4, r1
 800cbec:	d458      	bmi.n	800cca0 <__sflush_r+0xc0>
 800cbee:	684b      	ldr	r3, [r1, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dc05      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dc02      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	d0f9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc06:	2300      	movs	r3, #0
 800cc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc0c:	682f      	ldr	r7, [r5, #0]
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	d032      	beq.n	800cc78 <__sflush_r+0x98>
 800cc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	075a      	lsls	r2, r3, #29
 800cc18:	d505      	bpl.n	800cc26 <__sflush_r+0x46>
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	1ac0      	subs	r0, r0, r3
 800cc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc20:	b10b      	cbz	r3, 800cc26 <__sflush_r+0x46>
 800cc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc24:	1ac0      	subs	r0, r0, r3
 800cc26:	2300      	movs	r3, #0
 800cc28:	4602      	mov	r2, r0
 800cc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2c:	6a21      	ldr	r1, [r4, #32]
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b0      	blx	r6
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	d106      	bne.n	800cc46 <__sflush_r+0x66>
 800cc38:	6829      	ldr	r1, [r5, #0]
 800cc3a:	291d      	cmp	r1, #29
 800cc3c:	d82c      	bhi.n	800cc98 <__sflush_r+0xb8>
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <__sflush_r+0x108>)
 800cc40:	40ca      	lsrs	r2, r1
 800cc42:	07d6      	lsls	r6, r2, #31
 800cc44:	d528      	bpl.n	800cc98 <__sflush_r+0xb8>
 800cc46:	2200      	movs	r2, #0
 800cc48:	6062      	str	r2, [r4, #4]
 800cc4a:	04d9      	lsls	r1, r3, #19
 800cc4c:	6922      	ldr	r2, [r4, #16]
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	d504      	bpl.n	800cc5c <__sflush_r+0x7c>
 800cc52:	1c42      	adds	r2, r0, #1
 800cc54:	d101      	bne.n	800cc5a <__sflush_r+0x7a>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b903      	cbnz	r3, 800cc5c <__sflush_r+0x7c>
 800cc5a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc5e:	602f      	str	r7, [r5, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d0ca      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc68:	4299      	cmp	r1, r3
 800cc6a:	d002      	beq.n	800cc72 <__sflush_r+0x92>
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f7fe f927 	bl	800aec0 <_free_r>
 800cc72:	2000      	movs	r0, #0
 800cc74:	6360      	str	r0, [r4, #52]	; 0x34
 800cc76:	e7c1      	b.n	800cbfc <__sflush_r+0x1c>
 800cc78:	6a21      	ldr	r1, [r4, #32]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b0      	blx	r6
 800cc80:	1c41      	adds	r1, r0, #1
 800cc82:	d1c7      	bne.n	800cc14 <__sflush_r+0x34>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0c4      	beq.n	800cc14 <__sflush_r+0x34>
 800cc8a:	2b1d      	cmp	r3, #29
 800cc8c:	d001      	beq.n	800cc92 <__sflush_r+0xb2>
 800cc8e:	2b16      	cmp	r3, #22
 800cc90:	d101      	bne.n	800cc96 <__sflush_r+0xb6>
 800cc92:	602f      	str	r7, [r5, #0]
 800cc94:	e7b1      	b.n	800cbfa <__sflush_r+0x1a>
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	e7ad      	b.n	800cbfc <__sflush_r+0x1c>
 800cca0:	690f      	ldr	r7, [r1, #16]
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	d0a9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cca6:	0793      	lsls	r3, r2, #30
 800cca8:	680e      	ldr	r6, [r1, #0]
 800ccaa:	bf08      	it	eq
 800ccac:	694b      	ldreq	r3, [r1, #20]
 800ccae:	600f      	str	r7, [r1, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	2300      	movne	r3, #0
 800ccb4:	eba6 0807 	sub.w	r8, r6, r7
 800ccb8:	608b      	str	r3, [r1, #8]
 800ccba:	f1b8 0f00 	cmp.w	r8, #0
 800ccbe:	dd9c      	ble.n	800cbfa <__sflush_r+0x1a>
 800ccc0:	6a21      	ldr	r1, [r4, #32]
 800ccc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccc4:	4643      	mov	r3, r8
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b0      	blx	r6
 800cccc:	2800      	cmp	r0, #0
 800ccce:	dc06      	bgt.n	800ccde <__sflush_r+0xfe>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	e78e      	b.n	800cbfc <__sflush_r+0x1c>
 800ccde:	4407      	add	r7, r0
 800cce0:	eba8 0800 	sub.w	r8, r8, r0
 800cce4:	e7e9      	b.n	800ccba <__sflush_r+0xda>
 800cce6:	bf00      	nop
 800cce8:	20400001 	.word	0x20400001

0800ccec <_fflush_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	690b      	ldr	r3, [r1, #16]
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	b913      	cbnz	r3, 800ccfc <_fflush_r+0x10>
 800ccf6:	2500      	movs	r5, #0
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	b118      	cbz	r0, 800cd06 <_fflush_r+0x1a>
 800ccfe:	6983      	ldr	r3, [r0, #24]
 800cd00:	b90b      	cbnz	r3, 800cd06 <_fflush_r+0x1a>
 800cd02:	f000 f887 	bl	800ce14 <__sinit>
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <_fflush_r+0x6c>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d11b      	bne.n	800cd44 <_fflush_r+0x58>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0ef      	beq.n	800ccf6 <_fflush_r+0xa>
 800cd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd18:	07d0      	lsls	r0, r2, #31
 800cd1a:	d404      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd1c:	0599      	lsls	r1, r3, #22
 800cd1e:	d402      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f000 f91a 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800cd26:	4628      	mov	r0, r5
 800cd28:	4621      	mov	r1, r4
 800cd2a:	f7ff ff59 	bl	800cbe0 <__sflush_r>
 800cd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd30:	07da      	lsls	r2, r3, #31
 800cd32:	4605      	mov	r5, r0
 800cd34:	d4e0      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	059b      	lsls	r3, r3, #22
 800cd3a:	d4dd      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd3e:	f000 f90e 	bl	800cf5e <__retarget_lock_release_recursive>
 800cd42:	e7d9      	b.n	800ccf8 <_fflush_r+0xc>
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <_fflush_r+0x70>)
 800cd46:	429c      	cmp	r4, r3
 800cd48:	d101      	bne.n	800cd4e <_fflush_r+0x62>
 800cd4a:	68ac      	ldr	r4, [r5, #8]
 800cd4c:	e7df      	b.n	800cd0e <_fflush_r+0x22>
 800cd4e:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <_fflush_r+0x74>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	bf08      	it	eq
 800cd54:	68ec      	ldreq	r4, [r5, #12]
 800cd56:	e7da      	b.n	800cd0e <_fflush_r+0x22>
 800cd58:	08012c70 	.word	0x08012c70
 800cd5c:	08012c90 	.word	0x08012c90
 800cd60:	08012c50 	.word	0x08012c50

0800cd64 <std>:
 800cd64:	2300      	movs	r3, #0
 800cd66:	b510      	push	{r4, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd72:	6083      	str	r3, [r0, #8]
 800cd74:	8181      	strh	r1, [r0, #12]
 800cd76:	6643      	str	r3, [r0, #100]	; 0x64
 800cd78:	81c2      	strh	r2, [r0, #14]
 800cd7a:	6183      	str	r3, [r0, #24]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	2208      	movs	r2, #8
 800cd80:	305c      	adds	r0, #92	; 0x5c
 800cd82:	f7fe f895 	bl	800aeb0 <memset>
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <std+0x38>)
 800cd88:	6263      	str	r3, [r4, #36]	; 0x24
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <std+0x3c>)
 800cd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd8e:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <std+0x40>)
 800cd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <std+0x44>)
 800cd94:	6224      	str	r4, [r4, #32]
 800cd96:	6323      	str	r3, [r4, #48]	; 0x30
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800da5d 	.word	0x0800da5d
 800cda0:	0800da7f 	.word	0x0800da7f
 800cda4:	0800dab7 	.word	0x0800dab7
 800cda8:	0800dadb 	.word	0x0800dadb

0800cdac <_cleanup_r>:
 800cdac:	4901      	ldr	r1, [pc, #4]	; (800cdb4 <_cleanup_r+0x8>)
 800cdae:	f000 b8af 	b.w	800cf10 <_fwalk_reent>
 800cdb2:	bf00      	nop
 800cdb4:	0800cced 	.word	0x0800cced

0800cdb8 <__sfmoreglue>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	1e4a      	subs	r2, r1, #1
 800cdbc:	2568      	movs	r5, #104	; 0x68
 800cdbe:	4355      	muls	r5, r2
 800cdc0:	460e      	mov	r6, r1
 800cdc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdc6:	f7fe f8cb 	bl	800af60 <_malloc_r>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	b140      	cbz	r0, 800cde0 <__sfmoreglue+0x28>
 800cdce:	2100      	movs	r1, #0
 800cdd0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdd4:	300c      	adds	r0, #12
 800cdd6:	60a0      	str	r0, [r4, #8]
 800cdd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cddc:	f7fe f868 	bl	800aeb0 <memset>
 800cde0:	4620      	mov	r0, r4
 800cde2:	bd70      	pop	{r4, r5, r6, pc}

0800cde4 <__sfp_lock_acquire>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sfp_lock_acquire+0x8>)
 800cde6:	f000 b8b8 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	20000c34 	.word	0x20000c34

0800cdf0 <__sfp_lock_release>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__sfp_lock_release+0x8>)
 800cdf2:	f000 b8b4 	b.w	800cf5e <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	20000c34 	.word	0x20000c34

0800cdfc <__sinit_lock_acquire>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	; (800ce04 <__sinit_lock_acquire+0x8>)
 800cdfe:	f000 b8ac 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800ce02:	bf00      	nop
 800ce04:	20000c33 	.word	0x20000c33

0800ce08 <__sinit_lock_release>:
 800ce08:	4801      	ldr	r0, [pc, #4]	; (800ce10 <__sinit_lock_release+0x8>)
 800ce0a:	f000 b8a8 	b.w	800cf5e <__retarget_lock_release_recursive>
 800ce0e:	bf00      	nop
 800ce10:	20000c33 	.word	0x20000c33

0800ce14 <__sinit>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	f7ff fff0 	bl	800cdfc <__sinit_lock_acquire>
 800ce1c:	69a3      	ldr	r3, [r4, #24]
 800ce1e:	b11b      	cbz	r3, 800ce28 <__sinit+0x14>
 800ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce24:	f7ff bff0 	b.w	800ce08 <__sinit_lock_release>
 800ce28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <__sinit+0x68>)
 800ce30:	4a13      	ldr	r2, [pc, #76]	; (800ce80 <__sinit+0x6c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	bf04      	itt	eq
 800ce3a:	2301      	moveq	r3, #1
 800ce3c:	61a3      	streq	r3, [r4, #24]
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 f820 	bl	800ce84 <__sfp>
 800ce44:	6060      	str	r0, [r4, #4]
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f81c 	bl	800ce84 <__sfp>
 800ce4c:	60a0      	str	r0, [r4, #8]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 f818 	bl	800ce84 <__sfp>
 800ce54:	2200      	movs	r2, #0
 800ce56:	60e0      	str	r0, [r4, #12]
 800ce58:	2104      	movs	r1, #4
 800ce5a:	6860      	ldr	r0, [r4, #4]
 800ce5c:	f7ff ff82 	bl	800cd64 <std>
 800ce60:	68a0      	ldr	r0, [r4, #8]
 800ce62:	2201      	movs	r2, #1
 800ce64:	2109      	movs	r1, #9
 800ce66:	f7ff ff7d 	bl	800cd64 <std>
 800ce6a:	68e0      	ldr	r0, [r4, #12]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	2112      	movs	r1, #18
 800ce70:	f7ff ff78 	bl	800cd64 <std>
 800ce74:	2301      	movs	r3, #1
 800ce76:	61a3      	str	r3, [r4, #24]
 800ce78:	e7d2      	b.n	800ce20 <__sinit+0xc>
 800ce7a:	bf00      	nop
 800ce7c:	08012a70 	.word	0x08012a70
 800ce80:	0800cdad 	.word	0x0800cdad

0800ce84 <__sfp>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	4607      	mov	r7, r0
 800ce88:	f7ff ffac 	bl	800cde4 <__sfp_lock_acquire>
 800ce8c:	4b1e      	ldr	r3, [pc, #120]	; (800cf08 <__sfp+0x84>)
 800ce8e:	681e      	ldr	r6, [r3, #0]
 800ce90:	69b3      	ldr	r3, [r6, #24]
 800ce92:	b913      	cbnz	r3, 800ce9a <__sfp+0x16>
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff ffbd 	bl	800ce14 <__sinit>
 800ce9a:	3648      	adds	r6, #72	; 0x48
 800ce9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	d503      	bpl.n	800ceac <__sfp+0x28>
 800cea4:	6833      	ldr	r3, [r6, #0]
 800cea6:	b30b      	cbz	r3, 800ceec <__sfp+0x68>
 800cea8:	6836      	ldr	r6, [r6, #0]
 800ceaa:	e7f7      	b.n	800ce9c <__sfp+0x18>
 800ceac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ceb0:	b9d5      	cbnz	r5, 800cee8 <__sfp+0x64>
 800ceb2:	4b16      	ldr	r3, [pc, #88]	; (800cf0c <__sfp+0x88>)
 800ceb4:	60e3      	str	r3, [r4, #12]
 800ceb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceba:	6665      	str	r5, [r4, #100]	; 0x64
 800cebc:	f000 f84c 	bl	800cf58 <__retarget_lock_init_recursive>
 800cec0:	f7ff ff96 	bl	800cdf0 <__sfp_lock_release>
 800cec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cecc:	6025      	str	r5, [r4, #0]
 800cece:	61a5      	str	r5, [r4, #24]
 800ced0:	2208      	movs	r2, #8
 800ced2:	4629      	mov	r1, r5
 800ced4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ced8:	f7fd ffea 	bl	800aeb0 <memset>
 800cedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cee4:	4620      	mov	r0, r4
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee8:	3468      	adds	r4, #104	; 0x68
 800ceea:	e7d9      	b.n	800cea0 <__sfp+0x1c>
 800ceec:	2104      	movs	r1, #4
 800ceee:	4638      	mov	r0, r7
 800cef0:	f7ff ff62 	bl	800cdb8 <__sfmoreglue>
 800cef4:	4604      	mov	r4, r0
 800cef6:	6030      	str	r0, [r6, #0]
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d1d5      	bne.n	800cea8 <__sfp+0x24>
 800cefc:	f7ff ff78 	bl	800cdf0 <__sfp_lock_release>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	e7ee      	b.n	800cee4 <__sfp+0x60>
 800cf06:	bf00      	nop
 800cf08:	08012a70 	.word	0x08012a70
 800cf0c:	ffff0001 	.word	0xffff0001

0800cf10 <_fwalk_reent>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	4606      	mov	r6, r0
 800cf16:	4688      	mov	r8, r1
 800cf18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf1c:	2700      	movs	r7, #0
 800cf1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf22:	f1b9 0901 	subs.w	r9, r9, #1
 800cf26:	d505      	bpl.n	800cf34 <_fwalk_reent+0x24>
 800cf28:	6824      	ldr	r4, [r4, #0]
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d1f7      	bne.n	800cf1e <_fwalk_reent+0xe>
 800cf2e:	4638      	mov	r0, r7
 800cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf34:	89ab      	ldrh	r3, [r5, #12]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d907      	bls.n	800cf4a <_fwalk_reent+0x3a>
 800cf3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	d003      	beq.n	800cf4a <_fwalk_reent+0x3a>
 800cf42:	4629      	mov	r1, r5
 800cf44:	4630      	mov	r0, r6
 800cf46:	47c0      	blx	r8
 800cf48:	4307      	orrs	r7, r0
 800cf4a:	3568      	adds	r5, #104	; 0x68
 800cf4c:	e7e9      	b.n	800cf22 <_fwalk_reent+0x12>
	...

0800cf50 <_localeconv_r>:
 800cf50:	4800      	ldr	r0, [pc, #0]	; (800cf54 <_localeconv_r+0x4>)
 800cf52:	4770      	bx	lr
 800cf54:	2000016c 	.word	0x2000016c

0800cf58 <__retarget_lock_init_recursive>:
 800cf58:	4770      	bx	lr

0800cf5a <__retarget_lock_acquire_recursive>:
 800cf5a:	4770      	bx	lr

0800cf5c <__retarget_lock_release>:
 800cf5c:	4770      	bx	lr

0800cf5e <__retarget_lock_release_recursive>:
 800cf5e:	4770      	bx	lr

0800cf60 <__swhatbuf_r>:
 800cf60:	b570      	push	{r4, r5, r6, lr}
 800cf62:	460e      	mov	r6, r1
 800cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	b096      	sub	sp, #88	; 0x58
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	461d      	mov	r5, r3
 800cf70:	da07      	bge.n	800cf82 <__swhatbuf_r+0x22>
 800cf72:	2300      	movs	r3, #0
 800cf74:	602b      	str	r3, [r5, #0]
 800cf76:	89b3      	ldrh	r3, [r6, #12]
 800cf78:	061a      	lsls	r2, r3, #24
 800cf7a:	d410      	bmi.n	800cf9e <__swhatbuf_r+0x3e>
 800cf7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf80:	e00e      	b.n	800cfa0 <__swhatbuf_r+0x40>
 800cf82:	466a      	mov	r2, sp
 800cf84:	f000 fdd0 	bl	800db28 <_fstat_r>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	dbf2      	blt.n	800cf72 <__swhatbuf_r+0x12>
 800cf8c:	9a01      	ldr	r2, [sp, #4]
 800cf8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf96:	425a      	negs	r2, r3
 800cf98:	415a      	adcs	r2, r3
 800cf9a:	602a      	str	r2, [r5, #0]
 800cf9c:	e7ee      	b.n	800cf7c <__swhatbuf_r+0x1c>
 800cf9e:	2340      	movs	r3, #64	; 0x40
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	b016      	add	sp, #88	; 0x58
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}

0800cfa8 <__smakebuf_r>:
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfac:	079d      	lsls	r5, r3, #30
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	d507      	bpl.n	800cfc4 <__smakebuf_r+0x1c>
 800cfb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	6163      	str	r3, [r4, #20]
 800cfc0:	b002      	add	sp, #8
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	ab01      	add	r3, sp, #4
 800cfc6:	466a      	mov	r2, sp
 800cfc8:	f7ff ffca 	bl	800cf60 <__swhatbuf_r>
 800cfcc:	9900      	ldr	r1, [sp, #0]
 800cfce:	4605      	mov	r5, r0
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7fd ffc5 	bl	800af60 <_malloc_r>
 800cfd6:	b948      	cbnz	r0, 800cfec <__smakebuf_r+0x44>
 800cfd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d4ef      	bmi.n	800cfc0 <__smakebuf_r+0x18>
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	f043 0302 	orr.w	r3, r3, #2
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	e7e3      	b.n	800cfb4 <__smakebuf_r+0xc>
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <__smakebuf_r+0x7c>)
 800cfee:	62b3      	str	r3, [r6, #40]	; 0x28
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	6020      	str	r0, [r4, #0]
 800cff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	9b00      	ldr	r3, [sp, #0]
 800cffc:	6163      	str	r3, [r4, #20]
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	6120      	str	r0, [r4, #16]
 800d002:	b15b      	cbz	r3, 800d01c <__smakebuf_r+0x74>
 800d004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d008:	4630      	mov	r0, r6
 800d00a:	f000 fd9f 	bl	800db4c <_isatty_r>
 800d00e:	b128      	cbz	r0, 800d01c <__smakebuf_r+0x74>
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	89a0      	ldrh	r0, [r4, #12]
 800d01e:	4305      	orrs	r5, r0
 800d020:	81a5      	strh	r5, [r4, #12]
 800d022:	e7cd      	b.n	800cfc0 <__smakebuf_r+0x18>
 800d024:	0800cdad 	.word	0x0800cdad

0800d028 <__malloc_lock>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__malloc_lock+0x8>)
 800d02a:	f7ff bf96 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20000c30 	.word	0x20000c30

0800d034 <__malloc_unlock>:
 800d034:	4801      	ldr	r0, [pc, #4]	; (800d03c <__malloc_unlock+0x8>)
 800d036:	f7ff bf92 	b.w	800cf5e <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20000c30 	.word	0x20000c30

0800d040 <_Balloc>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	b976      	cbnz	r6, 800d068 <_Balloc+0x28>
 800d04a:	2010      	movs	r0, #16
 800d04c:	f7fd fef8 	bl	800ae40 <malloc>
 800d050:	4602      	mov	r2, r0
 800d052:	6260      	str	r0, [r4, #36]	; 0x24
 800d054:	b920      	cbnz	r0, 800d060 <_Balloc+0x20>
 800d056:	4b18      	ldr	r3, [pc, #96]	; (800d0b8 <_Balloc+0x78>)
 800d058:	4818      	ldr	r0, [pc, #96]	; (800d0bc <_Balloc+0x7c>)
 800d05a:	2166      	movs	r1, #102	; 0x66
 800d05c:	f7fd fe90 	bl	800ad80 <__assert_func>
 800d060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d064:	6006      	str	r6, [r0, #0]
 800d066:	60c6      	str	r6, [r0, #12]
 800d068:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d06a:	68f3      	ldr	r3, [r6, #12]
 800d06c:	b183      	cbz	r3, 800d090 <_Balloc+0x50>
 800d06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d076:	b9b8      	cbnz	r0, 800d0a8 <_Balloc+0x68>
 800d078:	2101      	movs	r1, #1
 800d07a:	fa01 f605 	lsl.w	r6, r1, r5
 800d07e:	1d72      	adds	r2, r6, #5
 800d080:	0092      	lsls	r2, r2, #2
 800d082:	4620      	mov	r0, r4
 800d084:	f000 fb5a 	bl	800d73c <_calloc_r>
 800d088:	b160      	cbz	r0, 800d0a4 <_Balloc+0x64>
 800d08a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d08e:	e00e      	b.n	800d0ae <_Balloc+0x6e>
 800d090:	2221      	movs	r2, #33	; 0x21
 800d092:	2104      	movs	r1, #4
 800d094:	4620      	mov	r0, r4
 800d096:	f000 fb51 	bl	800d73c <_calloc_r>
 800d09a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d09c:	60f0      	str	r0, [r6, #12]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1e4      	bne.n	800d06e <_Balloc+0x2e>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	6802      	ldr	r2, [r0, #0]
 800d0aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0b4:	e7f7      	b.n	800d0a6 <_Balloc+0x66>
 800d0b6:	bf00      	nop
 800d0b8:	08012bc7 	.word	0x08012bc7
 800d0bc:	08012cb0 	.word	0x08012cb0

0800d0c0 <_Bfree>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	b976      	cbnz	r6, 800d0e8 <_Bfree+0x28>
 800d0ca:	2010      	movs	r0, #16
 800d0cc:	f7fd feb8 	bl	800ae40 <malloc>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0d4:	b920      	cbnz	r0, 800d0e0 <_Bfree+0x20>
 800d0d6:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <_Bfree+0x3c>)
 800d0d8:	4809      	ldr	r0, [pc, #36]	; (800d100 <_Bfree+0x40>)
 800d0da:	218a      	movs	r1, #138	; 0x8a
 800d0dc:	f7fd fe50 	bl	800ad80 <__assert_func>
 800d0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e4:	6006      	str	r6, [r0, #0]
 800d0e6:	60c6      	str	r6, [r0, #12]
 800d0e8:	b13c      	cbz	r4, 800d0fa <_Bfree+0x3a>
 800d0ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0ec:	6862      	ldr	r2, [r4, #4]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0f4:	6021      	str	r1, [r4, #0]
 800d0f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	08012bc7 	.word	0x08012bc7
 800d100:	08012cb0 	.word	0x08012cb0

0800d104 <__multadd>:
 800d104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	690e      	ldr	r6, [r1, #16]
 800d10a:	4607      	mov	r7, r0
 800d10c:	4698      	mov	r8, r3
 800d10e:	460c      	mov	r4, r1
 800d110:	f101 0014 	add.w	r0, r1, #20
 800d114:	2300      	movs	r3, #0
 800d116:	6805      	ldr	r5, [r0, #0]
 800d118:	b2a9      	uxth	r1, r5
 800d11a:	fb02 8101 	mla	r1, r2, r1, r8
 800d11e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d122:	0c2d      	lsrs	r5, r5, #16
 800d124:	fb02 c505 	mla	r5, r2, r5, ip
 800d128:	b289      	uxth	r1, r1
 800d12a:	3301      	adds	r3, #1
 800d12c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d130:	429e      	cmp	r6, r3
 800d132:	f840 1b04 	str.w	r1, [r0], #4
 800d136:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d13a:	dcec      	bgt.n	800d116 <__multadd+0x12>
 800d13c:	f1b8 0f00 	cmp.w	r8, #0
 800d140:	d022      	beq.n	800d188 <__multadd+0x84>
 800d142:	68a3      	ldr	r3, [r4, #8]
 800d144:	42b3      	cmp	r3, r6
 800d146:	dc19      	bgt.n	800d17c <__multadd+0x78>
 800d148:	6861      	ldr	r1, [r4, #4]
 800d14a:	4638      	mov	r0, r7
 800d14c:	3101      	adds	r1, #1
 800d14e:	f7ff ff77 	bl	800d040 <_Balloc>
 800d152:	4605      	mov	r5, r0
 800d154:	b928      	cbnz	r0, 800d162 <__multadd+0x5e>
 800d156:	4602      	mov	r2, r0
 800d158:	4b0d      	ldr	r3, [pc, #52]	; (800d190 <__multadd+0x8c>)
 800d15a:	480e      	ldr	r0, [pc, #56]	; (800d194 <__multadd+0x90>)
 800d15c:	21b5      	movs	r1, #181	; 0xb5
 800d15e:	f7fd fe0f 	bl	800ad80 <__assert_func>
 800d162:	6922      	ldr	r2, [r4, #16]
 800d164:	3202      	adds	r2, #2
 800d166:	f104 010c 	add.w	r1, r4, #12
 800d16a:	0092      	lsls	r2, r2, #2
 800d16c:	300c      	adds	r0, #12
 800d16e:	f7fd fe77 	bl	800ae60 <memcpy>
 800d172:	4621      	mov	r1, r4
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ffa3 	bl	800d0c0 <_Bfree>
 800d17a:	462c      	mov	r4, r5
 800d17c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d180:	3601      	adds	r6, #1
 800d182:	f8c3 8014 	str.w	r8, [r3, #20]
 800d186:	6126      	str	r6, [r4, #16]
 800d188:	4620      	mov	r0, r4
 800d18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d18e:	bf00      	nop
 800d190:	08012c3d 	.word	0x08012c3d
 800d194:	08012cb0 	.word	0x08012cb0

0800d198 <__hi0bits>:
 800d198:	0c03      	lsrs	r3, r0, #16
 800d19a:	041b      	lsls	r3, r3, #16
 800d19c:	b9d3      	cbnz	r3, 800d1d4 <__hi0bits+0x3c>
 800d19e:	0400      	lsls	r0, r0, #16
 800d1a0:	2310      	movs	r3, #16
 800d1a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1a6:	bf04      	itt	eq
 800d1a8:	0200      	lsleq	r0, r0, #8
 800d1aa:	3308      	addeq	r3, #8
 800d1ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1b0:	bf04      	itt	eq
 800d1b2:	0100      	lsleq	r0, r0, #4
 800d1b4:	3304      	addeq	r3, #4
 800d1b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1ba:	bf04      	itt	eq
 800d1bc:	0080      	lsleq	r0, r0, #2
 800d1be:	3302      	addeq	r3, #2
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	db05      	blt.n	800d1d0 <__hi0bits+0x38>
 800d1c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1c8:	f103 0301 	add.w	r3, r3, #1
 800d1cc:	bf08      	it	eq
 800d1ce:	2320      	moveq	r3, #32
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	4770      	bx	lr
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e7e4      	b.n	800d1a2 <__hi0bits+0xa>

0800d1d8 <__lo0bits>:
 800d1d8:	6803      	ldr	r3, [r0, #0]
 800d1da:	f013 0207 	ands.w	r2, r3, #7
 800d1de:	4601      	mov	r1, r0
 800d1e0:	d00b      	beq.n	800d1fa <__lo0bits+0x22>
 800d1e2:	07da      	lsls	r2, r3, #31
 800d1e4:	d424      	bmi.n	800d230 <__lo0bits+0x58>
 800d1e6:	0798      	lsls	r0, r3, #30
 800d1e8:	bf49      	itett	mi
 800d1ea:	085b      	lsrmi	r3, r3, #1
 800d1ec:	089b      	lsrpl	r3, r3, #2
 800d1ee:	2001      	movmi	r0, #1
 800d1f0:	600b      	strmi	r3, [r1, #0]
 800d1f2:	bf5c      	itt	pl
 800d1f4:	600b      	strpl	r3, [r1, #0]
 800d1f6:	2002      	movpl	r0, #2
 800d1f8:	4770      	bx	lr
 800d1fa:	b298      	uxth	r0, r3
 800d1fc:	b9b0      	cbnz	r0, 800d22c <__lo0bits+0x54>
 800d1fe:	0c1b      	lsrs	r3, r3, #16
 800d200:	2010      	movs	r0, #16
 800d202:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d206:	bf04      	itt	eq
 800d208:	0a1b      	lsreq	r3, r3, #8
 800d20a:	3008      	addeq	r0, #8
 800d20c:	071a      	lsls	r2, r3, #28
 800d20e:	bf04      	itt	eq
 800d210:	091b      	lsreq	r3, r3, #4
 800d212:	3004      	addeq	r0, #4
 800d214:	079a      	lsls	r2, r3, #30
 800d216:	bf04      	itt	eq
 800d218:	089b      	lsreq	r3, r3, #2
 800d21a:	3002      	addeq	r0, #2
 800d21c:	07da      	lsls	r2, r3, #31
 800d21e:	d403      	bmi.n	800d228 <__lo0bits+0x50>
 800d220:	085b      	lsrs	r3, r3, #1
 800d222:	f100 0001 	add.w	r0, r0, #1
 800d226:	d005      	beq.n	800d234 <__lo0bits+0x5c>
 800d228:	600b      	str	r3, [r1, #0]
 800d22a:	4770      	bx	lr
 800d22c:	4610      	mov	r0, r2
 800d22e:	e7e8      	b.n	800d202 <__lo0bits+0x2a>
 800d230:	2000      	movs	r0, #0
 800d232:	4770      	bx	lr
 800d234:	2020      	movs	r0, #32
 800d236:	4770      	bx	lr

0800d238 <__i2b>:
 800d238:	b510      	push	{r4, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	2101      	movs	r1, #1
 800d23e:	f7ff feff 	bl	800d040 <_Balloc>
 800d242:	4602      	mov	r2, r0
 800d244:	b928      	cbnz	r0, 800d252 <__i2b+0x1a>
 800d246:	4b05      	ldr	r3, [pc, #20]	; (800d25c <__i2b+0x24>)
 800d248:	4805      	ldr	r0, [pc, #20]	; (800d260 <__i2b+0x28>)
 800d24a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d24e:	f7fd fd97 	bl	800ad80 <__assert_func>
 800d252:	2301      	movs	r3, #1
 800d254:	6144      	str	r4, [r0, #20]
 800d256:	6103      	str	r3, [r0, #16]
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	bf00      	nop
 800d25c:	08012c3d 	.word	0x08012c3d
 800d260:	08012cb0 	.word	0x08012cb0

0800d264 <__multiply>:
 800d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	4614      	mov	r4, r2
 800d26a:	690a      	ldr	r2, [r1, #16]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	429a      	cmp	r2, r3
 800d270:	bfb8      	it	lt
 800d272:	460b      	movlt	r3, r1
 800d274:	460d      	mov	r5, r1
 800d276:	bfbc      	itt	lt
 800d278:	4625      	movlt	r5, r4
 800d27a:	461c      	movlt	r4, r3
 800d27c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d280:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d284:	68ab      	ldr	r3, [r5, #8]
 800d286:	6869      	ldr	r1, [r5, #4]
 800d288:	eb0a 0709 	add.w	r7, sl, r9
 800d28c:	42bb      	cmp	r3, r7
 800d28e:	b085      	sub	sp, #20
 800d290:	bfb8      	it	lt
 800d292:	3101      	addlt	r1, #1
 800d294:	f7ff fed4 	bl	800d040 <_Balloc>
 800d298:	b930      	cbnz	r0, 800d2a8 <__multiply+0x44>
 800d29a:	4602      	mov	r2, r0
 800d29c:	4b42      	ldr	r3, [pc, #264]	; (800d3a8 <__multiply+0x144>)
 800d29e:	4843      	ldr	r0, [pc, #268]	; (800d3ac <__multiply+0x148>)
 800d2a0:	f240 115d 	movw	r1, #349	; 0x15d
 800d2a4:	f7fd fd6c 	bl	800ad80 <__assert_func>
 800d2a8:	f100 0614 	add.w	r6, r0, #20
 800d2ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d2b0:	4633      	mov	r3, r6
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	4543      	cmp	r3, r8
 800d2b6:	d31e      	bcc.n	800d2f6 <__multiply+0x92>
 800d2b8:	f105 0c14 	add.w	ip, r5, #20
 800d2bc:	f104 0314 	add.w	r3, r4, #20
 800d2c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d2c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d2c8:	9202      	str	r2, [sp, #8]
 800d2ca:	ebac 0205 	sub.w	r2, ip, r5
 800d2ce:	3a15      	subs	r2, #21
 800d2d0:	f022 0203 	bic.w	r2, r2, #3
 800d2d4:	3204      	adds	r2, #4
 800d2d6:	f105 0115 	add.w	r1, r5, #21
 800d2da:	458c      	cmp	ip, r1
 800d2dc:	bf38      	it	cc
 800d2de:	2204      	movcc	r2, #4
 800d2e0:	9201      	str	r2, [sp, #4]
 800d2e2:	9a02      	ldr	r2, [sp, #8]
 800d2e4:	9303      	str	r3, [sp, #12]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d808      	bhi.n	800d2fc <__multiply+0x98>
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	dc55      	bgt.n	800d39a <__multiply+0x136>
 800d2ee:	6107      	str	r7, [r0, #16]
 800d2f0:	b005      	add	sp, #20
 800d2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f6:	f843 2b04 	str.w	r2, [r3], #4
 800d2fa:	e7db      	b.n	800d2b4 <__multiply+0x50>
 800d2fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800d300:	f1ba 0f00 	cmp.w	sl, #0
 800d304:	d020      	beq.n	800d348 <__multiply+0xe4>
 800d306:	f105 0e14 	add.w	lr, r5, #20
 800d30a:	46b1      	mov	r9, r6
 800d30c:	2200      	movs	r2, #0
 800d30e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d312:	f8d9 b000 	ldr.w	fp, [r9]
 800d316:	b2a1      	uxth	r1, r4
 800d318:	fa1f fb8b 	uxth.w	fp, fp
 800d31c:	fb0a b101 	mla	r1, sl, r1, fp
 800d320:	4411      	add	r1, r2
 800d322:	f8d9 2000 	ldr.w	r2, [r9]
 800d326:	0c24      	lsrs	r4, r4, #16
 800d328:	0c12      	lsrs	r2, r2, #16
 800d32a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d32e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d332:	b289      	uxth	r1, r1
 800d334:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d338:	45f4      	cmp	ip, lr
 800d33a:	f849 1b04 	str.w	r1, [r9], #4
 800d33e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d342:	d8e4      	bhi.n	800d30e <__multiply+0xaa>
 800d344:	9901      	ldr	r1, [sp, #4]
 800d346:	5072      	str	r2, [r6, r1]
 800d348:	9a03      	ldr	r2, [sp, #12]
 800d34a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d34e:	3304      	adds	r3, #4
 800d350:	f1b9 0f00 	cmp.w	r9, #0
 800d354:	d01f      	beq.n	800d396 <__multiply+0x132>
 800d356:	6834      	ldr	r4, [r6, #0]
 800d358:	f105 0114 	add.w	r1, r5, #20
 800d35c:	46b6      	mov	lr, r6
 800d35e:	f04f 0a00 	mov.w	sl, #0
 800d362:	880a      	ldrh	r2, [r1, #0]
 800d364:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d368:	fb09 b202 	mla	r2, r9, r2, fp
 800d36c:	4492      	add	sl, r2
 800d36e:	b2a4      	uxth	r4, r4
 800d370:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d374:	f84e 4b04 	str.w	r4, [lr], #4
 800d378:	f851 4b04 	ldr.w	r4, [r1], #4
 800d37c:	f8be 2000 	ldrh.w	r2, [lr]
 800d380:	0c24      	lsrs	r4, r4, #16
 800d382:	fb09 2404 	mla	r4, r9, r4, r2
 800d386:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d38a:	458c      	cmp	ip, r1
 800d38c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d390:	d8e7      	bhi.n	800d362 <__multiply+0xfe>
 800d392:	9a01      	ldr	r2, [sp, #4]
 800d394:	50b4      	str	r4, [r6, r2]
 800d396:	3604      	adds	r6, #4
 800d398:	e7a3      	b.n	800d2e2 <__multiply+0x7e>
 800d39a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1a5      	bne.n	800d2ee <__multiply+0x8a>
 800d3a2:	3f01      	subs	r7, #1
 800d3a4:	e7a1      	b.n	800d2ea <__multiply+0x86>
 800d3a6:	bf00      	nop
 800d3a8:	08012c3d 	.word	0x08012c3d
 800d3ac:	08012cb0 	.word	0x08012cb0

0800d3b0 <__pow5mult>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	4615      	mov	r5, r2
 800d3b6:	f012 0203 	ands.w	r2, r2, #3
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	d007      	beq.n	800d3d0 <__pow5mult+0x20>
 800d3c0:	4c25      	ldr	r4, [pc, #148]	; (800d458 <__pow5mult+0xa8>)
 800d3c2:	3a01      	subs	r2, #1
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ca:	f7ff fe9b 	bl	800d104 <__multadd>
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	10ad      	asrs	r5, r5, #2
 800d3d2:	d03d      	beq.n	800d450 <__pow5mult+0xa0>
 800d3d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3d6:	b97c      	cbnz	r4, 800d3f8 <__pow5mult+0x48>
 800d3d8:	2010      	movs	r0, #16
 800d3da:	f7fd fd31 	bl	800ae40 <malloc>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	6270      	str	r0, [r6, #36]	; 0x24
 800d3e2:	b928      	cbnz	r0, 800d3f0 <__pow5mult+0x40>
 800d3e4:	4b1d      	ldr	r3, [pc, #116]	; (800d45c <__pow5mult+0xac>)
 800d3e6:	481e      	ldr	r0, [pc, #120]	; (800d460 <__pow5mult+0xb0>)
 800d3e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3ec:	f7fd fcc8 	bl	800ad80 <__assert_func>
 800d3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f4:	6004      	str	r4, [r0, #0]
 800d3f6:	60c4      	str	r4, [r0, #12]
 800d3f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d400:	b94c      	cbnz	r4, 800d416 <__pow5mult+0x66>
 800d402:	f240 2171 	movw	r1, #625	; 0x271
 800d406:	4630      	mov	r0, r6
 800d408:	f7ff ff16 	bl	800d238 <__i2b>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d412:	4604      	mov	r4, r0
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	f04f 0900 	mov.w	r9, #0
 800d41a:	07eb      	lsls	r3, r5, #31
 800d41c:	d50a      	bpl.n	800d434 <__pow5mult+0x84>
 800d41e:	4639      	mov	r1, r7
 800d420:	4622      	mov	r2, r4
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ff1e 	bl	800d264 <__multiply>
 800d428:	4639      	mov	r1, r7
 800d42a:	4680      	mov	r8, r0
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff fe47 	bl	800d0c0 <_Bfree>
 800d432:	4647      	mov	r7, r8
 800d434:	106d      	asrs	r5, r5, #1
 800d436:	d00b      	beq.n	800d450 <__pow5mult+0xa0>
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	b938      	cbnz	r0, 800d44c <__pow5mult+0x9c>
 800d43c:	4622      	mov	r2, r4
 800d43e:	4621      	mov	r1, r4
 800d440:	4630      	mov	r0, r6
 800d442:	f7ff ff0f 	bl	800d264 <__multiply>
 800d446:	6020      	str	r0, [r4, #0]
 800d448:	f8c0 9000 	str.w	r9, [r0]
 800d44c:	4604      	mov	r4, r0
 800d44e:	e7e4      	b.n	800d41a <__pow5mult+0x6a>
 800d450:	4638      	mov	r0, r7
 800d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d456:	bf00      	nop
 800d458:	08012e00 	.word	0x08012e00
 800d45c:	08012bc7 	.word	0x08012bc7
 800d460:	08012cb0 	.word	0x08012cb0

0800d464 <__lshift>:
 800d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d468:	460c      	mov	r4, r1
 800d46a:	6849      	ldr	r1, [r1, #4]
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	4607      	mov	r7, r0
 800d476:	4691      	mov	r9, r2
 800d478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d47c:	f108 0601 	add.w	r6, r8, #1
 800d480:	42b3      	cmp	r3, r6
 800d482:	db0b      	blt.n	800d49c <__lshift+0x38>
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff fddb 	bl	800d040 <_Balloc>
 800d48a:	4605      	mov	r5, r0
 800d48c:	b948      	cbnz	r0, 800d4a2 <__lshift+0x3e>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b28      	ldr	r3, [pc, #160]	; (800d534 <__lshift+0xd0>)
 800d492:	4829      	ldr	r0, [pc, #164]	; (800d538 <__lshift+0xd4>)
 800d494:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d498:	f7fd fc72 	bl	800ad80 <__assert_func>
 800d49c:	3101      	adds	r1, #1
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	e7ee      	b.n	800d480 <__lshift+0x1c>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f100 0114 	add.w	r1, r0, #20
 800d4a8:	f100 0210 	add.w	r2, r0, #16
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	4553      	cmp	r3, sl
 800d4b0:	db33      	blt.n	800d51a <__lshift+0xb6>
 800d4b2:	6920      	ldr	r0, [r4, #16]
 800d4b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4b8:	f104 0314 	add.w	r3, r4, #20
 800d4bc:	f019 091f 	ands.w	r9, r9, #31
 800d4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4c8:	d02b      	beq.n	800d522 <__lshift+0xbe>
 800d4ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ce:	468a      	mov	sl, r1
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4d8:	4302      	orrs	r2, r0
 800d4da:	f84a 2b04 	str.w	r2, [sl], #4
 800d4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e2:	459c      	cmp	ip, r3
 800d4e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4e8:	d8f3      	bhi.n	800d4d2 <__lshift+0x6e>
 800d4ea:	ebac 0304 	sub.w	r3, ip, r4
 800d4ee:	3b15      	subs	r3, #21
 800d4f0:	f023 0303 	bic.w	r3, r3, #3
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	f104 0015 	add.w	r0, r4, #21
 800d4fa:	4584      	cmp	ip, r0
 800d4fc:	bf38      	it	cc
 800d4fe:	2304      	movcc	r3, #4
 800d500:	50ca      	str	r2, [r1, r3]
 800d502:	b10a      	cbz	r2, 800d508 <__lshift+0xa4>
 800d504:	f108 0602 	add.w	r6, r8, #2
 800d508:	3e01      	subs	r6, #1
 800d50a:	4638      	mov	r0, r7
 800d50c:	612e      	str	r6, [r5, #16]
 800d50e:	4621      	mov	r1, r4
 800d510:	f7ff fdd6 	bl	800d0c0 <_Bfree>
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d51e:	3301      	adds	r3, #1
 800d520:	e7c5      	b.n	800d4ae <__lshift+0x4a>
 800d522:	3904      	subs	r1, #4
 800d524:	f853 2b04 	ldr.w	r2, [r3], #4
 800d528:	f841 2f04 	str.w	r2, [r1, #4]!
 800d52c:	459c      	cmp	ip, r3
 800d52e:	d8f9      	bhi.n	800d524 <__lshift+0xc0>
 800d530:	e7ea      	b.n	800d508 <__lshift+0xa4>
 800d532:	bf00      	nop
 800d534:	08012c3d 	.word	0x08012c3d
 800d538:	08012cb0 	.word	0x08012cb0

0800d53c <__mcmp>:
 800d53c:	b530      	push	{r4, r5, lr}
 800d53e:	6902      	ldr	r2, [r0, #16]
 800d540:	690c      	ldr	r4, [r1, #16]
 800d542:	1b12      	subs	r2, r2, r4
 800d544:	d10e      	bne.n	800d564 <__mcmp+0x28>
 800d546:	f100 0314 	add.w	r3, r0, #20
 800d54a:	3114      	adds	r1, #20
 800d54c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d55c:	42a5      	cmp	r5, r4
 800d55e:	d003      	beq.n	800d568 <__mcmp+0x2c>
 800d560:	d305      	bcc.n	800d56e <__mcmp+0x32>
 800d562:	2201      	movs	r2, #1
 800d564:	4610      	mov	r0, r2
 800d566:	bd30      	pop	{r4, r5, pc}
 800d568:	4283      	cmp	r3, r0
 800d56a:	d3f3      	bcc.n	800d554 <__mcmp+0x18>
 800d56c:	e7fa      	b.n	800d564 <__mcmp+0x28>
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
 800d572:	e7f7      	b.n	800d564 <__mcmp+0x28>

0800d574 <__mdiff>:
 800d574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	460c      	mov	r4, r1
 800d57a:	4606      	mov	r6, r0
 800d57c:	4611      	mov	r1, r2
 800d57e:	4620      	mov	r0, r4
 800d580:	4617      	mov	r7, r2
 800d582:	f7ff ffdb 	bl	800d53c <__mcmp>
 800d586:	1e05      	subs	r5, r0, #0
 800d588:	d110      	bne.n	800d5ac <__mdiff+0x38>
 800d58a:	4629      	mov	r1, r5
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff fd57 	bl	800d040 <_Balloc>
 800d592:	b930      	cbnz	r0, 800d5a2 <__mdiff+0x2e>
 800d594:	4b39      	ldr	r3, [pc, #228]	; (800d67c <__mdiff+0x108>)
 800d596:	4602      	mov	r2, r0
 800d598:	f240 2132 	movw	r1, #562	; 0x232
 800d59c:	4838      	ldr	r0, [pc, #224]	; (800d680 <__mdiff+0x10c>)
 800d59e:	f7fd fbef 	bl	800ad80 <__assert_func>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	bfa4      	itt	ge
 800d5ae:	463b      	movge	r3, r7
 800d5b0:	4627      	movge	r7, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	bfa6      	itte	ge
 800d5b8:	461c      	movge	r4, r3
 800d5ba:	2500      	movge	r5, #0
 800d5bc:	2501      	movlt	r5, #1
 800d5be:	f7ff fd3f 	bl	800d040 <_Balloc>
 800d5c2:	b920      	cbnz	r0, 800d5ce <__mdiff+0x5a>
 800d5c4:	4b2d      	ldr	r3, [pc, #180]	; (800d67c <__mdiff+0x108>)
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5cc:	e7e6      	b.n	800d59c <__mdiff+0x28>
 800d5ce:	693e      	ldr	r6, [r7, #16]
 800d5d0:	60c5      	str	r5, [r0, #12]
 800d5d2:	6925      	ldr	r5, [r4, #16]
 800d5d4:	f107 0114 	add.w	r1, r7, #20
 800d5d8:	f104 0914 	add.w	r9, r4, #20
 800d5dc:	f100 0e14 	add.w	lr, r0, #20
 800d5e0:	f107 0210 	add.w	r2, r7, #16
 800d5e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d5e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d5ec:	46f2      	mov	sl, lr
 800d5ee:	2700      	movs	r7, #0
 800d5f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5f8:	fa1f f883 	uxth.w	r8, r3
 800d5fc:	fa17 f78b 	uxtah	r7, r7, fp
 800d600:	0c1b      	lsrs	r3, r3, #16
 800d602:	eba7 0808 	sub.w	r8, r7, r8
 800d606:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d60a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d60e:	fa1f f888 	uxth.w	r8, r8
 800d612:	141f      	asrs	r7, r3, #16
 800d614:	454d      	cmp	r5, r9
 800d616:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d61a:	f84a 3b04 	str.w	r3, [sl], #4
 800d61e:	d8e7      	bhi.n	800d5f0 <__mdiff+0x7c>
 800d620:	1b2b      	subs	r3, r5, r4
 800d622:	3b15      	subs	r3, #21
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	3304      	adds	r3, #4
 800d62a:	3415      	adds	r4, #21
 800d62c:	42a5      	cmp	r5, r4
 800d62e:	bf38      	it	cc
 800d630:	2304      	movcc	r3, #4
 800d632:	4419      	add	r1, r3
 800d634:	4473      	add	r3, lr
 800d636:	469e      	mov	lr, r3
 800d638:	460d      	mov	r5, r1
 800d63a:	4565      	cmp	r5, ip
 800d63c:	d30e      	bcc.n	800d65c <__mdiff+0xe8>
 800d63e:	f10c 0203 	add.w	r2, ip, #3
 800d642:	1a52      	subs	r2, r2, r1
 800d644:	f022 0203 	bic.w	r2, r2, #3
 800d648:	3903      	subs	r1, #3
 800d64a:	458c      	cmp	ip, r1
 800d64c:	bf38      	it	cc
 800d64e:	2200      	movcc	r2, #0
 800d650:	441a      	add	r2, r3
 800d652:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d656:	b17b      	cbz	r3, 800d678 <__mdiff+0x104>
 800d658:	6106      	str	r6, [r0, #16]
 800d65a:	e7a5      	b.n	800d5a8 <__mdiff+0x34>
 800d65c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d660:	fa17 f488 	uxtah	r4, r7, r8
 800d664:	1422      	asrs	r2, r4, #16
 800d666:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d66a:	b2a4      	uxth	r4, r4
 800d66c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d670:	f84e 4b04 	str.w	r4, [lr], #4
 800d674:	1417      	asrs	r7, r2, #16
 800d676:	e7e0      	b.n	800d63a <__mdiff+0xc6>
 800d678:	3e01      	subs	r6, #1
 800d67a:	e7ea      	b.n	800d652 <__mdiff+0xde>
 800d67c:	08012c3d 	.word	0x08012c3d
 800d680:	08012cb0 	.word	0x08012cb0

0800d684 <__d2b>:
 800d684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d688:	4689      	mov	r9, r1
 800d68a:	2101      	movs	r1, #1
 800d68c:	ec57 6b10 	vmov	r6, r7, d0
 800d690:	4690      	mov	r8, r2
 800d692:	f7ff fcd5 	bl	800d040 <_Balloc>
 800d696:	4604      	mov	r4, r0
 800d698:	b930      	cbnz	r0, 800d6a8 <__d2b+0x24>
 800d69a:	4602      	mov	r2, r0
 800d69c:	4b25      	ldr	r3, [pc, #148]	; (800d734 <__d2b+0xb0>)
 800d69e:	4826      	ldr	r0, [pc, #152]	; (800d738 <__d2b+0xb4>)
 800d6a0:	f240 310a 	movw	r1, #778	; 0x30a
 800d6a4:	f7fd fb6c 	bl	800ad80 <__assert_func>
 800d6a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6b0:	bb35      	cbnz	r5, 800d700 <__d2b+0x7c>
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	d028      	beq.n	800d70a <__d2b+0x86>
 800d6b8:	4668      	mov	r0, sp
 800d6ba:	9600      	str	r6, [sp, #0]
 800d6bc:	f7ff fd8c 	bl	800d1d8 <__lo0bits>
 800d6c0:	9900      	ldr	r1, [sp, #0]
 800d6c2:	b300      	cbz	r0, 800d706 <__d2b+0x82>
 800d6c4:	9a01      	ldr	r2, [sp, #4]
 800d6c6:	f1c0 0320 	rsb	r3, r0, #32
 800d6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ce:	430b      	orrs	r3, r1
 800d6d0:	40c2      	lsrs	r2, r0
 800d6d2:	6163      	str	r3, [r4, #20]
 800d6d4:	9201      	str	r2, [sp, #4]
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	61a3      	str	r3, [r4, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bf14      	ite	ne
 800d6de:	2202      	movne	r2, #2
 800d6e0:	2201      	moveq	r2, #1
 800d6e2:	6122      	str	r2, [r4, #16]
 800d6e4:	b1d5      	cbz	r5, 800d71c <__d2b+0x98>
 800d6e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6ea:	4405      	add	r5, r0
 800d6ec:	f8c9 5000 	str.w	r5, [r9]
 800d6f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6f4:	f8c8 0000 	str.w	r0, [r8]
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	b003      	add	sp, #12
 800d6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d704:	e7d5      	b.n	800d6b2 <__d2b+0x2e>
 800d706:	6161      	str	r1, [r4, #20]
 800d708:	e7e5      	b.n	800d6d6 <__d2b+0x52>
 800d70a:	a801      	add	r0, sp, #4
 800d70c:	f7ff fd64 	bl	800d1d8 <__lo0bits>
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	6163      	str	r3, [r4, #20]
 800d714:	2201      	movs	r2, #1
 800d716:	6122      	str	r2, [r4, #16]
 800d718:	3020      	adds	r0, #32
 800d71a:	e7e3      	b.n	800d6e4 <__d2b+0x60>
 800d71c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d724:	f8c9 0000 	str.w	r0, [r9]
 800d728:	6918      	ldr	r0, [r3, #16]
 800d72a:	f7ff fd35 	bl	800d198 <__hi0bits>
 800d72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d732:	e7df      	b.n	800d6f4 <__d2b+0x70>
 800d734:	08012c3d 	.word	0x08012c3d
 800d738:	08012cb0 	.word	0x08012cb0

0800d73c <_calloc_r>:
 800d73c:	b513      	push	{r0, r1, r4, lr}
 800d73e:	434a      	muls	r2, r1
 800d740:	4611      	mov	r1, r2
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	f7fd fc0c 	bl	800af60 <_malloc_r>
 800d748:	4604      	mov	r4, r0
 800d74a:	b118      	cbz	r0, 800d754 <_calloc_r+0x18>
 800d74c:	9a01      	ldr	r2, [sp, #4]
 800d74e:	2100      	movs	r1, #0
 800d750:	f7fd fbae 	bl	800aeb0 <memset>
 800d754:	4620      	mov	r0, r4
 800d756:	b002      	add	sp, #8
 800d758:	bd10      	pop	{r4, pc}

0800d75a <_realloc_r>:
 800d75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75c:	4607      	mov	r7, r0
 800d75e:	4614      	mov	r4, r2
 800d760:	460e      	mov	r6, r1
 800d762:	b921      	cbnz	r1, 800d76e <_realloc_r+0x14>
 800d764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d768:	4611      	mov	r1, r2
 800d76a:	f7fd bbf9 	b.w	800af60 <_malloc_r>
 800d76e:	b922      	cbnz	r2, 800d77a <_realloc_r+0x20>
 800d770:	f7fd fba6 	bl	800aec0 <_free_r>
 800d774:	4625      	mov	r5, r4
 800d776:	4628      	mov	r0, r5
 800d778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d77a:	f000 fa1b 	bl	800dbb4 <_malloc_usable_size_r>
 800d77e:	42a0      	cmp	r0, r4
 800d780:	d20f      	bcs.n	800d7a2 <_realloc_r+0x48>
 800d782:	4621      	mov	r1, r4
 800d784:	4638      	mov	r0, r7
 800d786:	f7fd fbeb 	bl	800af60 <_malloc_r>
 800d78a:	4605      	mov	r5, r0
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d0f2      	beq.n	800d776 <_realloc_r+0x1c>
 800d790:	4631      	mov	r1, r6
 800d792:	4622      	mov	r2, r4
 800d794:	f7fd fb64 	bl	800ae60 <memcpy>
 800d798:	4631      	mov	r1, r6
 800d79a:	4638      	mov	r0, r7
 800d79c:	f7fd fb90 	bl	800aec0 <_free_r>
 800d7a0:	e7e9      	b.n	800d776 <_realloc_r+0x1c>
 800d7a2:	4635      	mov	r5, r6
 800d7a4:	e7e7      	b.n	800d776 <_realloc_r+0x1c>

0800d7a6 <__ssputs_r>:
 800d7a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7aa:	688e      	ldr	r6, [r1, #8]
 800d7ac:	429e      	cmp	r6, r3
 800d7ae:	4682      	mov	sl, r0
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	4690      	mov	r8, r2
 800d7b4:	461f      	mov	r7, r3
 800d7b6:	d838      	bhi.n	800d82a <__ssputs_r+0x84>
 800d7b8:	898a      	ldrh	r2, [r1, #12]
 800d7ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7be:	d032      	beq.n	800d826 <__ssputs_r+0x80>
 800d7c0:	6825      	ldr	r5, [r4, #0]
 800d7c2:	6909      	ldr	r1, [r1, #16]
 800d7c4:	eba5 0901 	sub.w	r9, r5, r1
 800d7c8:	6965      	ldr	r5, [r4, #20]
 800d7ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	444b      	add	r3, r9
 800d7d6:	106d      	asrs	r5, r5, #1
 800d7d8:	429d      	cmp	r5, r3
 800d7da:	bf38      	it	cc
 800d7dc:	461d      	movcc	r5, r3
 800d7de:	0553      	lsls	r3, r2, #21
 800d7e0:	d531      	bpl.n	800d846 <__ssputs_r+0xa0>
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	f7fd fbbc 	bl	800af60 <_malloc_r>
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	b950      	cbnz	r0, 800d802 <__ssputs_r+0x5c>
 800d7ec:	230c      	movs	r3, #12
 800d7ee:	f8ca 3000 	str.w	r3, [sl]
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d802:	6921      	ldr	r1, [r4, #16]
 800d804:	464a      	mov	r2, r9
 800d806:	f7fd fb2b 	bl	800ae60 <memcpy>
 800d80a:	89a3      	ldrh	r3, [r4, #12]
 800d80c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d814:	81a3      	strh	r3, [r4, #12]
 800d816:	6126      	str	r6, [r4, #16]
 800d818:	6165      	str	r5, [r4, #20]
 800d81a:	444e      	add	r6, r9
 800d81c:	eba5 0509 	sub.w	r5, r5, r9
 800d820:	6026      	str	r6, [r4, #0]
 800d822:	60a5      	str	r5, [r4, #8]
 800d824:	463e      	mov	r6, r7
 800d826:	42be      	cmp	r6, r7
 800d828:	d900      	bls.n	800d82c <__ssputs_r+0x86>
 800d82a:	463e      	mov	r6, r7
 800d82c:	4632      	mov	r2, r6
 800d82e:	6820      	ldr	r0, [r4, #0]
 800d830:	4641      	mov	r1, r8
 800d832:	f7fd fb23 	bl	800ae7c <memmove>
 800d836:	68a3      	ldr	r3, [r4, #8]
 800d838:	6822      	ldr	r2, [r4, #0]
 800d83a:	1b9b      	subs	r3, r3, r6
 800d83c:	4432      	add	r2, r6
 800d83e:	60a3      	str	r3, [r4, #8]
 800d840:	6022      	str	r2, [r4, #0]
 800d842:	2000      	movs	r0, #0
 800d844:	e7db      	b.n	800d7fe <__ssputs_r+0x58>
 800d846:	462a      	mov	r2, r5
 800d848:	f7ff ff87 	bl	800d75a <_realloc_r>
 800d84c:	4606      	mov	r6, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	d1e1      	bne.n	800d816 <__ssputs_r+0x70>
 800d852:	6921      	ldr	r1, [r4, #16]
 800d854:	4650      	mov	r0, sl
 800d856:	f7fd fb33 	bl	800aec0 <_free_r>
 800d85a:	e7c7      	b.n	800d7ec <__ssputs_r+0x46>

0800d85c <_svfiprintf_r>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4698      	mov	r8, r3
 800d862:	898b      	ldrh	r3, [r1, #12]
 800d864:	061b      	lsls	r3, r3, #24
 800d866:	b09d      	sub	sp, #116	; 0x74
 800d868:	4607      	mov	r7, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	4614      	mov	r4, r2
 800d86e:	d50e      	bpl.n	800d88e <_svfiprintf_r+0x32>
 800d870:	690b      	ldr	r3, [r1, #16]
 800d872:	b963      	cbnz	r3, 800d88e <_svfiprintf_r+0x32>
 800d874:	2140      	movs	r1, #64	; 0x40
 800d876:	f7fd fb73 	bl	800af60 <_malloc_r>
 800d87a:	6028      	str	r0, [r5, #0]
 800d87c:	6128      	str	r0, [r5, #16]
 800d87e:	b920      	cbnz	r0, 800d88a <_svfiprintf_r+0x2e>
 800d880:	230c      	movs	r3, #12
 800d882:	603b      	str	r3, [r7, #0]
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	e0d1      	b.n	800da2e <_svfiprintf_r+0x1d2>
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	616b      	str	r3, [r5, #20]
 800d88e:	2300      	movs	r3, #0
 800d890:	9309      	str	r3, [sp, #36]	; 0x24
 800d892:	2320      	movs	r3, #32
 800d894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d898:	f8cd 800c 	str.w	r8, [sp, #12]
 800d89c:	2330      	movs	r3, #48	; 0x30
 800d89e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da48 <_svfiprintf_r+0x1ec>
 800d8a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a6:	f04f 0901 	mov.w	r9, #1
 800d8aa:	4623      	mov	r3, r4
 800d8ac:	469a      	mov	sl, r3
 800d8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8b2:	b10a      	cbz	r2, 800d8b8 <_svfiprintf_r+0x5c>
 800d8b4:	2a25      	cmp	r2, #37	; 0x25
 800d8b6:	d1f9      	bne.n	800d8ac <_svfiprintf_r+0x50>
 800d8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d8bc:	d00b      	beq.n	800d8d6 <_svfiprintf_r+0x7a>
 800d8be:	465b      	mov	r3, fp
 800d8c0:	4622      	mov	r2, r4
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	f7ff ff6e 	bl	800d7a6 <__ssputs_r>
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	f000 80aa 	beq.w	800da24 <_svfiprintf_r+0x1c8>
 800d8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8d2:	445a      	add	r2, fp
 800d8d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 80a2 	beq.w	800da24 <_svfiprintf_r+0x1c8>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ea:	f10a 0a01 	add.w	sl, sl, #1
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	9307      	str	r3, [sp, #28]
 800d8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f8:	4654      	mov	r4, sl
 800d8fa:	2205      	movs	r2, #5
 800d8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d900:	4851      	ldr	r0, [pc, #324]	; (800da48 <_svfiprintf_r+0x1ec>)
 800d902:	f7f2 fc6d 	bl	80001e0 <memchr>
 800d906:	9a04      	ldr	r2, [sp, #16]
 800d908:	b9d8      	cbnz	r0, 800d942 <_svfiprintf_r+0xe6>
 800d90a:	06d0      	lsls	r0, r2, #27
 800d90c:	bf44      	itt	mi
 800d90e:	2320      	movmi	r3, #32
 800d910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d914:	0711      	lsls	r1, r2, #28
 800d916:	bf44      	itt	mi
 800d918:	232b      	movmi	r3, #43	; 0x2b
 800d91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d91e:	f89a 3000 	ldrb.w	r3, [sl]
 800d922:	2b2a      	cmp	r3, #42	; 0x2a
 800d924:	d015      	beq.n	800d952 <_svfiprintf_r+0xf6>
 800d926:	9a07      	ldr	r2, [sp, #28]
 800d928:	4654      	mov	r4, sl
 800d92a:	2000      	movs	r0, #0
 800d92c:	f04f 0c0a 	mov.w	ip, #10
 800d930:	4621      	mov	r1, r4
 800d932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d936:	3b30      	subs	r3, #48	; 0x30
 800d938:	2b09      	cmp	r3, #9
 800d93a:	d94e      	bls.n	800d9da <_svfiprintf_r+0x17e>
 800d93c:	b1b0      	cbz	r0, 800d96c <_svfiprintf_r+0x110>
 800d93e:	9207      	str	r2, [sp, #28]
 800d940:	e014      	b.n	800d96c <_svfiprintf_r+0x110>
 800d942:	eba0 0308 	sub.w	r3, r0, r8
 800d946:	fa09 f303 	lsl.w	r3, r9, r3
 800d94a:	4313      	orrs	r3, r2
 800d94c:	9304      	str	r3, [sp, #16]
 800d94e:	46a2      	mov	sl, r4
 800d950:	e7d2      	b.n	800d8f8 <_svfiprintf_r+0x9c>
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	1d19      	adds	r1, r3, #4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	9103      	str	r1, [sp, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	bfbb      	ittet	lt
 800d95e:	425b      	neglt	r3, r3
 800d960:	f042 0202 	orrlt.w	r2, r2, #2
 800d964:	9307      	strge	r3, [sp, #28]
 800d966:	9307      	strlt	r3, [sp, #28]
 800d968:	bfb8      	it	lt
 800d96a:	9204      	strlt	r2, [sp, #16]
 800d96c:	7823      	ldrb	r3, [r4, #0]
 800d96e:	2b2e      	cmp	r3, #46	; 0x2e
 800d970:	d10c      	bne.n	800d98c <_svfiprintf_r+0x130>
 800d972:	7863      	ldrb	r3, [r4, #1]
 800d974:	2b2a      	cmp	r3, #42	; 0x2a
 800d976:	d135      	bne.n	800d9e4 <_svfiprintf_r+0x188>
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	1d1a      	adds	r2, r3, #4
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	9203      	str	r2, [sp, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	bfb8      	it	lt
 800d984:	f04f 33ff 	movlt.w	r3, #4294967295
 800d988:	3402      	adds	r4, #2
 800d98a:	9305      	str	r3, [sp, #20]
 800d98c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da58 <_svfiprintf_r+0x1fc>
 800d990:	7821      	ldrb	r1, [r4, #0]
 800d992:	2203      	movs	r2, #3
 800d994:	4650      	mov	r0, sl
 800d996:	f7f2 fc23 	bl	80001e0 <memchr>
 800d99a:	b140      	cbz	r0, 800d9ae <_svfiprintf_r+0x152>
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	eba0 000a 	sub.w	r0, r0, sl
 800d9a2:	fa03 f000 	lsl.w	r0, r3, r0
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	4303      	orrs	r3, r0
 800d9aa:	3401      	adds	r4, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b2:	4826      	ldr	r0, [pc, #152]	; (800da4c <_svfiprintf_r+0x1f0>)
 800d9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b8:	2206      	movs	r2, #6
 800d9ba:	f7f2 fc11 	bl	80001e0 <memchr>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d038      	beq.n	800da34 <_svfiprintf_r+0x1d8>
 800d9c2:	4b23      	ldr	r3, [pc, #140]	; (800da50 <_svfiprintf_r+0x1f4>)
 800d9c4:	bb1b      	cbnz	r3, 800da0e <_svfiprintf_r+0x1b2>
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	3307      	adds	r3, #7
 800d9ca:	f023 0307 	bic.w	r3, r3, #7
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	9303      	str	r3, [sp, #12]
 800d9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d4:	4433      	add	r3, r6
 800d9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d8:	e767      	b.n	800d8aa <_svfiprintf_r+0x4e>
 800d9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9de:	460c      	mov	r4, r1
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	e7a5      	b.n	800d930 <_svfiprintf_r+0xd4>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	9305      	str	r3, [sp, #20]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f04f 0c0a 	mov.w	ip, #10
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9f6:	3a30      	subs	r2, #48	; 0x30
 800d9f8:	2a09      	cmp	r2, #9
 800d9fa:	d903      	bls.n	800da04 <_svfiprintf_r+0x1a8>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0c5      	beq.n	800d98c <_svfiprintf_r+0x130>
 800da00:	9105      	str	r1, [sp, #20]
 800da02:	e7c3      	b.n	800d98c <_svfiprintf_r+0x130>
 800da04:	fb0c 2101 	mla	r1, ip, r1, r2
 800da08:	4604      	mov	r4, r0
 800da0a:	2301      	movs	r3, #1
 800da0c:	e7f0      	b.n	800d9f0 <_svfiprintf_r+0x194>
 800da0e:	ab03      	add	r3, sp, #12
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	462a      	mov	r2, r5
 800da14:	4b0f      	ldr	r3, [pc, #60]	; (800da54 <_svfiprintf_r+0x1f8>)
 800da16:	a904      	add	r1, sp, #16
 800da18:	4638      	mov	r0, r7
 800da1a:	f7fd fcf5 	bl	800b408 <_printf_float>
 800da1e:	1c42      	adds	r2, r0, #1
 800da20:	4606      	mov	r6, r0
 800da22:	d1d6      	bne.n	800d9d2 <_svfiprintf_r+0x176>
 800da24:	89ab      	ldrh	r3, [r5, #12]
 800da26:	065b      	lsls	r3, r3, #25
 800da28:	f53f af2c 	bmi.w	800d884 <_svfiprintf_r+0x28>
 800da2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da2e:	b01d      	add	sp, #116	; 0x74
 800da30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da34:	ab03      	add	r3, sp, #12
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	462a      	mov	r2, r5
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <_svfiprintf_r+0x1f8>)
 800da3c:	a904      	add	r1, sp, #16
 800da3e:	4638      	mov	r0, r7
 800da40:	f7fd ff86 	bl	800b950 <_printf_i>
 800da44:	e7eb      	b.n	800da1e <_svfiprintf_r+0x1c2>
 800da46:	bf00      	nop
 800da48:	08012a74 	.word	0x08012a74
 800da4c:	08012a7e 	.word	0x08012a7e
 800da50:	0800b409 	.word	0x0800b409
 800da54:	0800d7a7 	.word	0x0800d7a7
 800da58:	08012a7a 	.word	0x08012a7a

0800da5c <__sread>:
 800da5c:	b510      	push	{r4, lr}
 800da5e:	460c      	mov	r4, r1
 800da60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da64:	f000 f8ae 	bl	800dbc4 <_read_r>
 800da68:	2800      	cmp	r0, #0
 800da6a:	bfab      	itete	ge
 800da6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da6e:	89a3      	ldrhlt	r3, [r4, #12]
 800da70:	181b      	addge	r3, r3, r0
 800da72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da76:	bfac      	ite	ge
 800da78:	6563      	strge	r3, [r4, #84]	; 0x54
 800da7a:	81a3      	strhlt	r3, [r4, #12]
 800da7c:	bd10      	pop	{r4, pc}

0800da7e <__swrite>:
 800da7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da82:	461f      	mov	r7, r3
 800da84:	898b      	ldrh	r3, [r1, #12]
 800da86:	05db      	lsls	r3, r3, #23
 800da88:	4605      	mov	r5, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	4616      	mov	r6, r2
 800da8e:	d505      	bpl.n	800da9c <__swrite+0x1e>
 800da90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da94:	2302      	movs	r3, #2
 800da96:	2200      	movs	r2, #0
 800da98:	f000 f868 	bl	800db6c <_lseek_r>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daa6:	81a3      	strh	r3, [r4, #12]
 800daa8:	4632      	mov	r2, r6
 800daaa:	463b      	mov	r3, r7
 800daac:	4628      	mov	r0, r5
 800daae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dab2:	f000 b817 	b.w	800dae4 <_write_r>

0800dab6 <__sseek>:
 800dab6:	b510      	push	{r4, lr}
 800dab8:	460c      	mov	r4, r1
 800daba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dabe:	f000 f855 	bl	800db6c <_lseek_r>
 800dac2:	1c43      	adds	r3, r0, #1
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	bf15      	itete	ne
 800dac8:	6560      	strne	r0, [r4, #84]	; 0x54
 800daca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dad2:	81a3      	strheq	r3, [r4, #12]
 800dad4:	bf18      	it	ne
 800dad6:	81a3      	strhne	r3, [r4, #12]
 800dad8:	bd10      	pop	{r4, pc}

0800dada <__sclose>:
 800dada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dade:	f000 b813 	b.w	800db08 <_close_r>
	...

0800dae4 <_write_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	; (800db04 <_write_r+0x20>)
 800dae8:	4604      	mov	r4, r0
 800daea:	4608      	mov	r0, r1
 800daec:	4611      	mov	r1, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	602a      	str	r2, [r5, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	f7f4 f9d1 	bl	8001e9a <_write>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_write_r+0x1e>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_write_r+0x1e>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	20000c3c 	.word	0x20000c3c

0800db08 <_close_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	; (800db24 <_close_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f4 f9dd 	bl	8001ed2 <_close>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_close_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_close_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	20000c3c 	.word	0x20000c3c

0800db28 <_fstat_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d07      	ldr	r5, [pc, #28]	; (800db48 <_fstat_r+0x20>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	4611      	mov	r1, r2
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	f7f4 f9d8 	bl	8001eea <_fstat>
 800db3a:	1c43      	adds	r3, r0, #1
 800db3c:	d102      	bne.n	800db44 <_fstat_r+0x1c>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	b103      	cbz	r3, 800db44 <_fstat_r+0x1c>
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	bd38      	pop	{r3, r4, r5, pc}
 800db46:	bf00      	nop
 800db48:	20000c3c 	.word	0x20000c3c

0800db4c <_isatty_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d06      	ldr	r5, [pc, #24]	; (800db68 <_isatty_r+0x1c>)
 800db50:	2300      	movs	r3, #0
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	f7f4 f9d7 	bl	8001f0a <_isatty>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_isatty_r+0x1a>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_isatty_r+0x1a>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	20000c3c 	.word	0x20000c3c

0800db6c <_lseek_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d07      	ldr	r5, [pc, #28]	; (800db8c <_lseek_r+0x20>)
 800db70:	4604      	mov	r4, r0
 800db72:	4608      	mov	r0, r1
 800db74:	4611      	mov	r1, r2
 800db76:	2200      	movs	r2, #0
 800db78:	602a      	str	r2, [r5, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	f7f4 f9d0 	bl	8001f20 <_lseek>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d102      	bne.n	800db8a <_lseek_r+0x1e>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	b103      	cbz	r3, 800db8a <_lseek_r+0x1e>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	bd38      	pop	{r3, r4, r5, pc}
 800db8c:	20000c3c 	.word	0x20000c3c

0800db90 <__ascii_mbtowc>:
 800db90:	b082      	sub	sp, #8
 800db92:	b901      	cbnz	r1, 800db96 <__ascii_mbtowc+0x6>
 800db94:	a901      	add	r1, sp, #4
 800db96:	b142      	cbz	r2, 800dbaa <__ascii_mbtowc+0x1a>
 800db98:	b14b      	cbz	r3, 800dbae <__ascii_mbtowc+0x1e>
 800db9a:	7813      	ldrb	r3, [r2, #0]
 800db9c:	600b      	str	r3, [r1, #0]
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	1e10      	subs	r0, r2, #0
 800dba2:	bf18      	it	ne
 800dba4:	2001      	movne	r0, #1
 800dba6:	b002      	add	sp, #8
 800dba8:	4770      	bx	lr
 800dbaa:	4610      	mov	r0, r2
 800dbac:	e7fb      	b.n	800dba6 <__ascii_mbtowc+0x16>
 800dbae:	f06f 0001 	mvn.w	r0, #1
 800dbb2:	e7f8      	b.n	800dba6 <__ascii_mbtowc+0x16>

0800dbb4 <_malloc_usable_size_r>:
 800dbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb8:	1f18      	subs	r0, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfbc      	itt	lt
 800dbbe:	580b      	ldrlt	r3, [r1, r0]
 800dbc0:	18c0      	addlt	r0, r0, r3
 800dbc2:	4770      	bx	lr

0800dbc4 <_read_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4d07      	ldr	r5, [pc, #28]	; (800dbe4 <_read_r+0x20>)
 800dbc8:	4604      	mov	r4, r0
 800dbca:	4608      	mov	r0, r1
 800dbcc:	4611      	mov	r1, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	602a      	str	r2, [r5, #0]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f7f4 f944 	bl	8001e60 <_read>
 800dbd8:	1c43      	adds	r3, r0, #1
 800dbda:	d102      	bne.n	800dbe2 <_read_r+0x1e>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	b103      	cbz	r3, 800dbe2 <_read_r+0x1e>
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}
 800dbe4:	20000c3c 	.word	0x20000c3c

0800dbe8 <__ascii_wctomb>:
 800dbe8:	b149      	cbz	r1, 800dbfe <__ascii_wctomb+0x16>
 800dbea:	2aff      	cmp	r2, #255	; 0xff
 800dbec:	bf85      	ittet	hi
 800dbee:	238a      	movhi	r3, #138	; 0x8a
 800dbf0:	6003      	strhi	r3, [r0, #0]
 800dbf2:	700a      	strbls	r2, [r1, #0]
 800dbf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dbf8:	bf98      	it	ls
 800dbfa:	2001      	movls	r0, #1
 800dbfc:	4770      	bx	lr
 800dbfe:	4608      	mov	r0, r1
 800dc00:	4770      	bx	lr
	...

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
