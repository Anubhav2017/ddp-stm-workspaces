
f401-mnist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005184  08012290  08012290  00022290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017414  08017414  00034128  2**0
                  CONTENTS
  4 .ARM          00000008  08017414  08017414  00027414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801741c  0801741c  00034128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801741c  0801741c  0002741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017420  08017420  00027420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004128  20000000  08017424  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ebc  20004130  0801b54c  00034130  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  20016fec  0801b54c  00036fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00034128  2**0
                  CONTENTS, READONLY
 12 .debug_info   003170bf  00000000  00000000  00034158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001a2f5  00000000  00000000  0034b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00008ce8  00000000  00000000  00365510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00008a80  00000000  00000000  0036e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c383  00000000  00000000  00376c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00066439  00000000  00000000  003a2ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a6cf  00000000  00000000  00409434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00583b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002979c  00000000  00000000  00583b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20004130 	.word	0x20004130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012278 	.word	0x08012278

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20004134 	.word	0x20004134
 80001dc:	08012278 	.word	0x08012278

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c54:	f000 b9a4 	b.w	8000fa0 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f83c 	bl	8000cdc <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2lz>:
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	460d      	mov	r5, r1
 8000c7a:	f7ff ff41 	bl	8000b00 <__aeabi_dcmplt>
 8000c7e:	b928      	cbnz	r0, 8000c8c <__aeabi_d2lz+0x1c>
 8000c80:	4620      	mov	r0, r4
 8000c82:	4629      	mov	r1, r5
 8000c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c88:	f000 b80a 	b.w	8000ca0 <__aeabi_d2ulz>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c92:	f000 f805 	bl	8000ca0 <__aeabi_d2ulz>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_d2ulz>:
 8000ca0:	b5d0      	push	{r4, r6, r7, lr}
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__aeabi_d2ulz+0x34>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4606      	mov	r6, r0
 8000ca8:	460f      	mov	r7, r1
 8000caa:	f7ff fcb7 	bl	800061c <__aeabi_dmul>
 8000cae:	f000 f979 	bl	8000fa4 <__aeabi_d2uiz>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	f7ff fc38 	bl	8000528 <__aeabi_ui2d>
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <__aeabi_d2ulz+0x38>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f7ff fcae 	bl	800061c <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	f7ff faf0 	bl	80002ac <__aeabi_dsub>
 8000ccc:	f000 f96a 	bl	8000fa4 <__aeabi_d2uiz>
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd4:	3df00000 	.word	0x3df00000
 8000cd8:	41f00000 	.word	0x41f00000

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9d08      	ldr	r5, [sp, #32]
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 8083 	bne.w	8000df2 <__udivmoddi4+0x116>
 8000cec:	428a      	cmp	r2, r1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	d947      	bls.n	8000d82 <__udivmoddi4+0xa6>
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	b142      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf8:	f1c2 0020 	rsb	r0, r2, #32
 8000cfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000d00:	4091      	lsls	r1, r2
 8000d02:	4097      	lsls	r7, r2
 8000d04:	ea40 0c01 	orr.w	ip, r0, r1
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fbbc f6f8 	udiv	r6, ip, r8
 8000d14:	fa1f fe87 	uxth.w	lr, r7
 8000d18:	fb08 c116 	mls	r1, r8, r6, ip
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d20:	fb06 f10e 	mul.w	r1, r6, lr
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x60>
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2e:	f080 8119 	bcs.w	8000f64 <__udivmoddi4+0x288>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 8116 	bls.w	8000f64 <__udivmoddi4+0x288>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	443b      	add	r3, r7
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x8c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	f080 8105 	bcs.w	8000f68 <__udivmoddi4+0x28c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8102 	bls.w	8000f68 <__udivmoddi4+0x28c>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6c:	eba4 040e 	sub.w	r4, r4, lr
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa0>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	b902      	cbnz	r2, 8000d86 <__udivmoddi4+0xaa>
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d150      	bne.n	8000e30 <__udivmoddi4+0x154>
 8000d8e:	1bcb      	subs	r3, r1, r7
 8000d90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d94:	fa1f f887 	uxth.w	r8, r7
 8000d98:	2601      	movs	r6, #1
 8000d9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9e:	0c21      	lsrs	r1, r4, #16
 8000da0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0xe4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0xe2>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	f200 80e9 	bhi.w	8000f90 <__udivmoddi4+0x2b4>
 8000dbe:	4684      	mov	ip, r0
 8000dc0:	1ac9      	subs	r1, r1, r3
 8000dc2:	b2a3      	uxth	r3, r4
 8000dc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dd0:	fb08 f800 	mul.w	r8, r8, r0
 8000dd4:	45a0      	cmp	r8, r4
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x10c>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x10a>
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	f200 80d9 	bhi.w	8000f98 <__udivmoddi4+0x2bc>
 8000de6:	4618      	mov	r0, r3
 8000de8:	eba4 0408 	sub.w	r4, r4, r8
 8000dec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df0:	e7bf      	b.n	8000d72 <__udivmoddi4+0x96>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d909      	bls.n	8000e0a <__udivmoddi4+0x12e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	f000 80b1 	beq.w	8000f5e <__udivmoddi4+0x282>
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000e02:	4630      	mov	r0, r6
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	fab3 f683 	clz	r6, r3
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d14a      	bne.n	8000ea8 <__udivmoddi4+0x1cc>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0x140>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 80b8 	bhi.w	8000f8c <__udivmoddi4+0x2b0>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	468c      	mov	ip, r1
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0a8      	beq.n	8000d7c <__udivmoddi4+0xa0>
 8000e2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2e:	e7a5      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f603 	lsr.w	r6, r0, r3
 8000e38:	4097      	lsls	r7, r2
 8000e3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e42:	40d9      	lsrs	r1, r3
 8000e44:	4330      	orrs	r0, r6
 8000e46:	0c03      	lsrs	r3, r0, #16
 8000e48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e58:	fb06 f108 	mul.w	r1, r6, r8
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x19c>
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e6a:	f080 808d 	bcs.w	8000f88 <__udivmoddi4+0x2ac>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 808a 	bls.w	8000f88 <__udivmoddi4+0x2ac>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	443b      	add	r3, r7
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b281      	uxth	r1, r0
 8000e7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb00 f308 	mul.w	r3, r0, r8
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x1c4>
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e96:	d273      	bcs.n	8000f80 <__udivmoddi4+0x2a4>
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d971      	bls.n	8000f80 <__udivmoddi4+0x2a4>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4439      	add	r1, r7
 8000ea0:	1acb      	subs	r3, r1, r3
 8000ea2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea6:	e778      	b.n	8000d9a <__udivmoddi4+0xbe>
 8000ea8:	f1c6 0c20 	rsb	ip, r6, #32
 8000eac:	fa03 f406 	lsl.w	r4, r3, r6
 8000eb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb4:	431c      	orrs	r4, r3
 8000eb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eba:	fa01 f306 	lsl.w	r3, r1, r6
 8000ebe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ec2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec6:	431f      	orrs	r7, r3
 8000ec8:	0c3b      	lsrs	r3, r7, #16
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fa1f f884 	uxth.w	r8, r4
 8000ed2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eda:	fb09 fa08 	mul.w	sl, r9, r8
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x220>
 8000eea:	1861      	adds	r1, r4, r1
 8000eec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef0:	d248      	bcs.n	8000f84 <__udivmoddi4+0x2a8>
 8000ef2:	458a      	cmp	sl, r1
 8000ef4:	d946      	bls.n	8000f84 <__udivmoddi4+0x2a8>
 8000ef6:	f1a9 0902 	sub.w	r9, r9, #2
 8000efa:	4421      	add	r1, r4
 8000efc:	eba1 010a 	sub.w	r1, r1, sl
 8000f00:	b2bf      	uxth	r7, r7
 8000f02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0e:	fb00 f808 	mul.w	r8, r0, r8
 8000f12:	45b8      	cmp	r8, r7
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x24a>
 8000f16:	19e7      	adds	r7, r4, r7
 8000f18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f1c:	d22e      	bcs.n	8000f7c <__udivmoddi4+0x2a0>
 8000f1e:	45b8      	cmp	r8, r7
 8000f20:	d92c      	bls.n	8000f7c <__udivmoddi4+0x2a0>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4427      	add	r7, r4
 8000f26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f2a:	eba7 0708 	sub.w	r7, r7, r8
 8000f2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f32:	454f      	cmp	r7, r9
 8000f34:	46c6      	mov	lr, r8
 8000f36:	4649      	mov	r1, r9
 8000f38:	d31a      	bcc.n	8000f70 <__udivmoddi4+0x294>
 8000f3a:	d017      	beq.n	8000f6c <__udivmoddi4+0x290>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x27a>
 8000f3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f42:	eb67 0701 	sbc.w	r7, r7, r1
 8000f46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f4a:	40f2      	lsrs	r2, r6
 8000f4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f50:	40f7      	lsrs	r7, r6
 8000f52:	e9c5 2700 	strd	r2, r7, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	462e      	mov	r6, r5
 8000f60:	4628      	mov	r0, r5
 8000f62:	e70b      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000f64:	4606      	mov	r6, r0
 8000f66:	e6e9      	b.n	8000d3c <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fd      	b.n	8000d68 <__udivmoddi4+0x8c>
 8000f6c:	4543      	cmp	r3, r8
 8000f6e:	d2e5      	bcs.n	8000f3c <__udivmoddi4+0x260>
 8000f70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f74:	eb69 0104 	sbc.w	r1, r9, r4
 8000f78:	3801      	subs	r0, #1
 8000f7a:	e7df      	b.n	8000f3c <__udivmoddi4+0x260>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	e7d2      	b.n	8000f26 <__udivmoddi4+0x24a>
 8000f80:	4660      	mov	r0, ip
 8000f82:	e78d      	b.n	8000ea0 <__udivmoddi4+0x1c4>
 8000f84:	4681      	mov	r9, r0
 8000f86:	e7b9      	b.n	8000efc <__udivmoddi4+0x220>
 8000f88:	4666      	mov	r6, ip
 8000f8a:	e775      	b.n	8000e78 <__udivmoddi4+0x19c>
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e74a      	b.n	8000e26 <__udivmoddi4+0x14a>
 8000f90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f94:	4439      	add	r1, r7
 8000f96:	e713      	b.n	8000dc0 <__udivmoddi4+0xe4>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	443c      	add	r4, r7
 8000f9c:	e724      	b.n	8000de8 <__udivmoddi4+0x10c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2uiz>:
 8000fa4:	004a      	lsls	r2, r1, #1
 8000fa6:	d211      	bcs.n	8000fcc <__aeabi_d2uiz+0x28>
 8000fa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fac:	d211      	bcs.n	8000fd2 <__aeabi_d2uiz+0x2e>
 8000fae:	d50d      	bpl.n	8000fcc <__aeabi_d2uiz+0x28>
 8000fb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fb8:	d40e      	bmi.n	8000fd8 <__aeabi_d2uiz+0x34>
 8000fba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fd6:	d102      	bne.n	8000fde <__aeabi_d2uiz+0x3a>
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	08016f64 	.word	0x08016f64

08001004 <_ZN6tflite13ErrorReporterD0Ev>:
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffe9 	bl	8000fe4 <_ZN6tflite13ErrorReporterD1Ev>
 8001012:	2104      	movs	r1, #4
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f00f fc60 	bl	80108da <_ZdlPvj>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  int endiantest = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 800103a:	214e      	movs	r1, #78	; 0x4e
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800103e:	f00f fed9 	bl	8010df4 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08012290 	.word	0x08012290
 8001050:	080122d4 	.word	0x080122d4
 8001054:	080122f4 	.word	0x080122f4

08001058 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8001060:	687c      	ldr	r4, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fceb 	bl	8001a40 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800106a:	4603      	mov	r3, r0
 800106c:	425b      	negs	r3, r3
 800106e:	4423      	add	r3, r4
  }
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}

08001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffe7 	bl	8001058 <_ZNK11flatbuffers5Table9GetVTableEv>
 800108a:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 fcbb 	bl	8001a08 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001092:	4603      	mov	r3, r0
 8001094:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	429a      	cmp	r2, r3
 800109c:	d207      	bcs.n	80010ae <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fcaf 	bl	8001a08 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	e000      	b.n	80010b0 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80010ae:	2300      	movs	r3, #0
  }
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fcc8 	bl	8001a5c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80010cc:	4603      	mov	r3, r0
  }
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fcda 	bl	8001a98 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fcd9 	bl	8001ab0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffeb 	bl	80010ee <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ffe1 	bl	8001108 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	08016f44 	.word	0x08016f44

08001170 <_ZN6tflite10OpResolverD0Ev>:
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe9 	bl	8001150 <_ZN6tflite10OpResolverD1Ev>
 800117e:	2104      	movs	r1, #4
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f00f fbaa 	bl	80108da <_ZdlPvj>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	2301      	movs	r3, #1
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	460b      	mov	r3, r1
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3318      	adds	r3, #24
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	7afa      	ldrb	r2, [r7, #11]
 80011be:	4611      	mov	r1, r2
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
  }
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	331c      	adds	r3, #28
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	4798      	blx	r3
 80011e8:	4603      	mov	r3, r0
  }
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffa3 	bl	8001150 <_ZN6tflite10OpResolverD1Ev>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08016f18 	.word	0x08016f18

08001218 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe7 	bl	80011f4 <_ZN6tflite15MicroOpResolverD1Ev>
 8001226:	2104      	movs	r1, #4
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f00f fb56 	bl	80108da <_ZdlPvj>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fecb 	bl	8000fe4 <_ZN6tflite13ErrorReporterD1Ev>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08017264 	.word	0x08017264

0800125c <_ZN6tflite18MicroErrorReporterD0Ev>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffe7 	bl	8001238 <_ZN6tflite18MicroErrorReporterD1Ev>
 800126a:	2104      	movs	r1, #4
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f00f fb34 	bl	80108da <_ZdlPvj>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <__tcf_0>:
  MX_GPIO_Init();
  MX_TIM10_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  static tflite::MicroErrorReporter micro_error_reporter;
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
 8001280:	4801      	ldr	r0, [pc, #4]	; (8001288 <__tcf_0+0xc>)
 8001282:	f7ff ffd9 	bl	8001238 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200040a8 	.word	0x200040a8

0800128c <__tcf_1>:
    {
  	 error_reporter->Report("Model version does not match Schema");
  	 while(1);
    }
//    static tflite::AllOpsResolver resolver;
    static tflite::MicroMutableOpResolver<4> resolver;
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <__tcf_1+0xc>)
 8001292:	f000 fdbb 	bl	8001e0c <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20016df4 	.word	0x20016df4

0800129c <__tcf_2>:
  	while(1);
    }

    // Build an interpreter to run the model with.
    static tflite::MicroInterpreter static_interpreter(
        model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4801      	ldr	r0, [pc, #4]	; (80012a8 <__tcf_2+0xc>)
 80012a2:	f008 fba6 	bl	80099f2 <_ZN6tflite16MicroInterpreterD1Ev>
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20016e9c 	.word	0x20016e9c

080012ac <main>:
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0b4      	sub	sp, #208	; 0xd0
 80012b0:	af04      	add	r7, sp, #16
	int buf_len = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int imagesize = 28*28*1;
 80012b8:	f44f 7344 	mov.w	r3, #784	; 0x310
 80012bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_Init();
 80012c0:	f000 ffdc 	bl	800227c <HAL_Init>
  SystemClock_Config();
 80012c4:	f000 fa44 	bl	8001750 <_Z18SystemClock_Configv>
  HAL_TIM_Base_Start(&htim10);
 80012c8:	4886      	ldr	r0, [pc, #536]	; (80014e4 <main+0x238>)
 80012ca:	f001 ffab 	bl	8003224 <HAL_TIM_Base_Start>
  MX_GPIO_Init();
 80012ce:	f000 fb09 	bl	80018e4 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80012d2:	f000 fab1 	bl	8001838 <_ZL13MX_TIM10_Initv>
  MX_USART2_UART_Init();
 80012d6:	f000 fad7 	bl	8001888 <_ZL19MX_USART2_UART_Initv>
  static tflite::MicroErrorReporter micro_error_reporter;
 80012da:	4b83      	ldr	r3, [pc, #524]	; (80014e8 <main+0x23c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f3bf 8f5b 	dmb	ish
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d010      	beq.n	8001318 <main+0x6c>
 80012f6:	487c      	ldr	r0, [pc, #496]	; (80014e8 <main+0x23c>)
 80012f8:	f00f faf3 	bl	80108e2 <__cxa_guard_acquire>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <main+0x6c>
 800130c:	4876      	ldr	r0, [pc, #472]	; (80014e8 <main+0x23c>)
 800130e:	f00f faf4 	bl	80108fa <__cxa_guard_release>
 8001312:	4876      	ldr	r0, [pc, #472]	; (80014ec <main+0x240>)
 8001314:	f00f fd8c 	bl	8010e30 <atexit>
    error_reporter = &micro_error_reporter;
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <main+0x244>)
 800131a:	4a76      	ldr	r2, [pc, #472]	; (80014f4 <main+0x248>)
 800131c:	601a      	str	r2, [r3, #0]
    error_reporter->Report("STM32 TensorFlow Lite test");
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <main+0x244>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4975      	ldr	r1, [pc, #468]	; (80014f8 <main+0x24c>)
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fc99 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    model = tflite::GetModel(model_mnist);
 800132a:	4874      	ldr	r0, [pc, #464]	; (80014fc <main+0x250>)
 800132c:	f7ff fed3 	bl	80010d6 <_ZN6tflite8GetModelEPKv>
 8001330:	4603      	mov	r3, r0
 8001332:	4a73      	ldr	r2, [pc, #460]	; (8001500 <main+0x254>)
 8001334:	6013      	str	r3, [r2, #0]
    if (model->version() != TFLITE_SCHEMA_VERSION)
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <main+0x254>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff febc 	bl	80010b8 <_ZNK6tflite5Model7versionEv>
 8001340:	4603      	mov	r3, r0
 8001342:	2b03      	cmp	r3, #3
 8001344:	bf14      	ite	ne
 8001346:	2301      	movne	r3, #1
 8001348:	2300      	moveq	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <main+0xb2>
  	 error_reporter->Report("Model version does not match Schema");
 8001350:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <main+0x244>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	496b      	ldr	r1, [pc, #428]	; (8001504 <main+0x258>)
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fc80 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	 while(1);
 800135c:	e7fe      	b.n	800135c <main+0xb0>
    static tflite::MicroMutableOpResolver<4> resolver;
 800135e:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <main+0x25c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f3bf 8f5b 	dmb	ish
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d014      	beq.n	80013a4 <main+0xf8>
 800137a:	4863      	ldr	r0, [pc, #396]	; (8001508 <main+0x25c>)
 800137c:	f00f fab1 	bl	80108e2 <__cxa_guard_acquire>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <main+0xf8>
 8001390:	2100      	movs	r1, #0
 8001392:	485e      	ldr	r0, [pc, #376]	; (800150c <main+0x260>)
 8001394:	f000 fbbe 	bl	8001b14 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
 8001398:	485b      	ldr	r0, [pc, #364]	; (8001508 <main+0x25c>)
 800139a:	f00f faae 	bl	80108fa <__cxa_guard_release>
 800139e:	485c      	ldr	r0, [pc, #368]	; (8001510 <main+0x264>)
 80013a0:	f00f fd46 	bl	8010e30 <atexit>
    tflite_status = resolver.AddConv2D();
 80013a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00b f941 	bl	800c630 <_ZN6tflite16Register_CONV_2DEv>
 80013ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b2:	4619      	mov	r1, r3
 80013b4:	4855      	ldr	r0, [pc, #340]	; (800150c <main+0x260>)
 80013b6:	f000 fbcd 	bl	8001b54 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddConv2DERK18TfLiteRegistration>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80013c0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <main+0x12a>
    	error_reporter->Report("Could not add Conv2D op");
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <main+0x244>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4951      	ldr	r1, [pc, #324]	; (8001514 <main+0x268>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fc44 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    	while(1);
 80013d4:	e7fe      	b.n	80013d4 <main+0x128>
    tflite_status = resolver.AddReshape();
 80013d6:	484d      	ldr	r0, [pc, #308]	; (800150c <main+0x260>)
 80013d8:	f000 fbce 	bl	8001b78 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80013e2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <main+0x14c>
      error_reporter->Report("Could not add RESHAPE op");
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <main+0x244>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	494a      	ldr	r1, [pc, #296]	; (8001518 <main+0x26c>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fc33 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    	while(1);
 80013f6:	e7fe      	b.n	80013f6 <main+0x14a>
    tflite_status = resolver.AddFullyConnected();
 80013f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00c f853 	bl	800d4a8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8001402:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001406:	4619      	mov	r1, r3
 8001408:	4840      	ldr	r0, [pc, #256]	; (800150c <main+0x260>)
 800140a:	f000 fbcd 	bl	8001ba8 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
        if (tflite_status != kTfLiteOk)
 8001414:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <main+0x17e>
          error_reporter->Report("Could not add FULLY CONNECTED op");
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <main+0x244>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	493e      	ldr	r1, [pc, #248]	; (800151c <main+0x270>)
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fc1a 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        	while(1);
 8001428:	e7fe      	b.n	8001428 <main+0x17c>
    tflite_status = resolver.AddSoftmax();
 800142a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800142e:	4618      	mov	r0, r3
 8001430:	f00d fe80 	bl	800f134 <_ZN6tflite16Register_SOFTMAXEv>
 8001434:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001438:	4619      	mov	r1, r3
 800143a:	4834      	ldr	r0, [pc, #208]	; (800150c <main+0x260>)
 800143c:	f000 fbc6 	bl	8001bcc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 8001446:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <main+0x1b0>
  	error_reporter->Report("Could not add SOFTMAX op");
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <main+0x244>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4933      	ldr	r1, [pc, #204]	; (8001520 <main+0x274>)
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fc01 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 800145a:	e7fe      	b.n	800145a <main+0x1ae>
        model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800145c:	4b31      	ldr	r3, [pc, #196]	; (8001524 <main+0x278>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f3bf 8f5b 	dmb	ish
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01f      	beq.n	80014b8 <main+0x20c>
 8001478:	482a      	ldr	r0, [pc, #168]	; (8001524 <main+0x278>)
 800147a:	f00f fa32 	bl	80108e2 <__cxa_guard_acquire>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d014      	beq.n	80014b8 <main+0x20c>
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <main+0x254>)
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <main+0x244>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	9202      	str	r2, [sp, #8]
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <main+0x27c>)
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <main+0x260>)
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <main+0x280>)
 80014a8:	f008 fa5c 	bl	8009964 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <main+0x278>)
 80014ae:	f00f fa24 	bl	80108fa <__cxa_guard_release>
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <main+0x284>)
 80014b4:	f00f fcbc 	bl	8010e30 <atexit>
    interpreter = &static_interpreter;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <main+0x288>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <main+0x280>)
 80014bc:	601a      	str	r2, [r3, #0]

    tflite_status = interpreter->AllocateTensors();
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <main+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fc5a 	bl	8009d7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80014ce:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d032      	beq.n	800153c <main+0x290>
    {
      error_reporter->Report("AllocateTensors() failed");
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <main+0x244>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4917      	ldr	r1, [pc, #92]	; (8001538 <main+0x28c>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fbbd 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 80014e2:	e7fe      	b.n	80014e2 <main+0x236>
 80014e4:	2000414c 	.word	0x2000414c
 80014e8:	20016df0 	.word	0x20016df0
 80014ec:	0800127d 	.word	0x0800127d
 80014f0:	200041d8 	.word	0x200041d8
 80014f4:	200040a8 	.word	0x200040a8
 80014f8:	08012398 	.word	0x08012398
 80014fc:	20000000 	.word	0x20000000
 8001500:	200041dc 	.word	0x200041dc
 8001504:	080123b4 	.word	0x080123b4
 8001508:	20016e98 	.word	0x20016e98
 800150c:	20016df4 	.word	0x20016df4
 8001510:	0800128d 	.word	0x0800128d
 8001514:	080123d8 	.word	0x080123d8
 8001518:	080123f0 	.word	0x080123f0
 800151c:	0801240c 	.word	0x0801240c
 8001520:	08012430 	.word	0x08012430
 8001524:	20016f34 	.word	0x20016f34
 8001528:	200041f0 	.word	0x200041f0
 800152c:	20016e9c 	.word	0x20016e9c
 8001530:	0800129d 	.word	0x0800129d
 8001534:	200041e0 	.word	0x200041e0
 8001538:	0801244c 	.word	0x0801244c
    }

    model_input = interpreter->input(0);
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <main+0x400>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f008 fdba 	bl	800a0bc <_ZN6tflite16MicroInterpreter5inputEj>
 8001548:	4603      	mov	r3, r0
 800154a:	4a59      	ldr	r2, [pc, #356]	; (80016b0 <main+0x404>)
 800154c:	6013      	str	r3, [r2, #0]
      model_output = interpreter->output(0);
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <main+0x400>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fdd5 	bl	800a104 <_ZN6tflite16MicroInterpreter6outputEj>
 800155a:	4603      	mov	r3, r0
 800155c:	4a55      	ldr	r2, [pc, #340]	; (80016b4 <main+0x408>)
 800155e:	6013      	str	r3, [r2, #0]

      // Get number of elements in input tensor
      num_elements = model_input->bytes / sizeof(float);
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <main+0x404>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001572:	4951      	ldr	r1, [pc, #324]	; (80016b8 <main+0x40c>)
 8001574:	4618      	mov	r0, r3
 8001576:	f010 f8c9 	bl	801170c <siprintf>
 800157a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800157e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001582:	b29a      	uxth	r2, r3
 8001584:	1d39      	adds	r1, r7, #4
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	484c      	ldr	r0, [pc, #304]	; (80016bc <main+0x410>)
 800158a:	f001 ff72 	bl	8003472 <HAL_UART_Transmit>
      /* USER CODE END 2 */

      /* Infinite loop */
      /* USER CODE BEGIN WHILE */

      buf_len = sprintf(buf, "start!\n");
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	494b      	ldr	r1, [pc, #300]	; (80016c0 <main+0x414>)
 8001592:	4618      	mov	r0, r3
 8001594:	f010 f8ba 	bl	801170c <siprintf>
 8001598:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800159c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	1d39      	adds	r1, r7, #4
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a8:	4844      	ldr	r0, [pc, #272]	; (80016bc <main+0x410>)
 80015aa:	f001 ff62 	bl	8003472 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  readUartBytes(model_input->data.f, imagesize);
 80015ae:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <main+0x404>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f88d 	bl	80016d8 <_ZL13readUartBytesPfi>

	      // Get current timestamp
	      timestamp = htim10.Instance->CNT;
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <main+0x418>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	      /* USER CODE BEGIN 3 */

	      // Run inference
	  	tflite_status = interpreter->Invoke();
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <main+0x400>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 fd43 	bl	800a058 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	  	if (tflite_status != kTfLiteOk)
 80015d8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <main+0x340>
	  	{
	  	  error_reporter->Report("Invoke failed");
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <main+0x41c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4939      	ldr	r1, [pc, #228]	; (80016cc <main+0x420>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fb38 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  	}

	  	float max = 0.0f;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  		int maxIndex = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  		for(int i=0; i<10; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001604:	2b09      	cmp	r3, #9
 8001606:	dc20      	bgt.n	800164a <main+0x39e>
	  		{
	  			float val = model_output->data.f[i];
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <main+0x408>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  			if(max<val)
 800161c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001620:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	d507      	bpl.n	800163e <main+0x392>
	  			{
	  				max = val;
 800162e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  				maxIndex = i;
 8001636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800163a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  		for(int i=0; i<10; i++)
 800163e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001648:	e7da      	b.n	8001600 <main+0x354>
	  			}
	  		}

	  		uint32_t timestamp_next = htim10.Instance->CNT;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <main+0x418>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  		timestamp = (timestamp_next<timestamp)?(65536 - timestamp + timestamp_next):
 8001654:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <main+0x3c4>
 8001660:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800166e:	e004      	b.n	800167a <main+0x3ce>
 8001670:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  											   (timestamp_next-timestamp);

	  		buf_len = sprintf(buf,
 800167e:	1d38      	adds	r0, r7, #4
 8001680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001684:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001688:	4911      	ldr	r1, [pc, #68]	; (80016d0 <main+0x424>)
 800168a:	f010 f83f 	bl	801170c <siprintf>
 800168e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	  						  "Predicted: %u | Duration: %lu\r\n",
	  						  maxIndex,
	  						  timestamp);
	  		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001692:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001696:	b29a      	uxth	r2, r3
 8001698:	1d39      	adds	r1, r7, #4
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <main+0x410>)
 800169e:	f001 fee8 	bl	8003472 <HAL_UART_Transmit>

	  		//HAL_Delay(500);
	  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80016a2:	2102      	movs	r1, #2
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <main+0x428>)
 80016a6:	f001 f8de 	bl	8002866 <HAL_GPIO_TogglePin>
	  	  }
 80016aa:	e780      	b.n	80015ae <main+0x302>
 80016ac:	200041e0 	.word	0x200041e0
 80016b0:	200041e4 	.word	0x200041e4
 80016b4:	200041e8 	.word	0x200041e8
 80016b8:	08012468 	.word	0x08012468
 80016bc:	20004194 	.word	0x20004194
 80016c0:	08012488 	.word	0x08012488
 80016c4:	2000414c 	.word	0x2000414c
 80016c8:	200041d8 	.word	0x200041d8
 80016cc:	08012490 	.word	0x08012490
 80016d0:	080124a0 	.word	0x080124a0
 80016d4:	40020800 	.word	0x40020800

080016d8 <_ZL13readUartBytesPfi>:
 }
  /* USER CODE END 3 */

void readUartBytes(float *data, int imageSize)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    uint8_t *rxBuffer = (uint8_t *)malloc(imageSize);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00f fbe5 	bl	8010eb4 <malloc>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<imageSize;i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	da1e      	bge.n	8001738 <_ZL13readUartBytesPfi+0x60>
    {
    	HAL_UART_Receive(&huart2, (rxBuffer+i), 1, HAL_MAX_DELAY);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	18d1      	adds	r1, r2, r3
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001704:	2201      	movs	r2, #1
 8001706:	4810      	ldr	r0, [pc, #64]	; (8001748 <_ZL13readUartBytesPfi+0x70>)
 8001708:	f001 ff45 	bl	8003596 <HAL_UART_Receive>
    	data[i] = static_cast<float>(rxBuffer[i]) / 255.0f;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	eddf 6a09 	vldr	s13, [pc, #36]	; 800174c <_ZL13readUartBytesPfi+0x74>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<imageSize;i++)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e7dc      	b.n	80016f2 <_ZL13readUartBytesPfi+0x1a>
    }
    free(rxBuffer);
 8001738:	68b8      	ldr	r0, [r7, #8]
 800173a:	f00f fbc3 	bl	8010ec4 <free>
    //rxBytes = HAL_UART_Receive(&huart1, rxBuffer, imageSize, HAL_MAX_DELAY);
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20004194 	.word	0x20004194
 800174c:	437f0000 	.word	0x437f0000

08001750 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	; 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00f fbe0 	bl	8010f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <_Z18SystemClock_Configv+0xe0>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a2c      	ldr	r2, [pc, #176]	; (8001830 <_Z18SystemClock_Configv+0xe0>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <_Z18SystemClock_Configv+0xe0>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <_Z18SystemClock_Configv+0xe4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <_Z18SystemClock_Configv+0xe4>)
 800179e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <_Z18SystemClock_Configv+0xe4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b8:	2310      	movs	r3, #16
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017bc:	2302      	movs	r3, #2
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017c4:	2308      	movs	r3, #8
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80017c8:	2350      	movs	r3, #80	; 0x50
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017d0:	2307      	movs	r3, #7
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 f85f 	bl	800289c <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf14      	ite	ne
 80017e4:	2301      	movne	r3, #1
 80017e6:	2300      	moveq	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80017ee:	f000 f8fb 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f6:	2302      	movs	r3, #2
 80017f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fabc 	bl	8002d8c <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001824:	f000 f8e0 	bl	80019e8 <Error_Handler>
  }
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	; 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <_ZL13MX_TIM10_Initv+0x4c>)
 8001840:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 8001844:	224f      	movs	r2, #79	; 0x4f
 8001846:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <_ZL13MX_TIM10_Initv+0x48>)
 8001864:	f001 fc8e 	bl	8003184 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8001878:	f000 f8b6 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000414c 	.word	0x2000414c
 8001884:	40014400 	.word	0x40014400

08001888 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018c0:	f001 fd8a 	bl	80033d8 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80018d4:	f000 f888 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20004194 	.word	0x20004194
 80018e0:	40004400 	.word	0x40004400

080018e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001970:	f000 ff60 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <_ZL12MX_GPIO_Initv+0xd8>)
 800198c:	f000 fdce 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001990:	2320      	movs	r3, #32
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <_ZL12MX_GPIO_Initv+0xd4>)
 80019a8:	f000 fdc0 	bl	800252c <HAL_GPIO_Init>

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020800 	.word	0x40020800

080019c0 <DebugLog>:

/* USER CODE BEGIN 4 */

extern "C" void DebugLog(const char* s)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 100);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7fe fc63 	bl	8000294 <strlen>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	2364      	movs	r3, #100	; 0x64
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <DebugLog+0x24>)
 80019d8:	f001 fd4b 	bl	8003472 <HAL_UART_Transmit>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20004194 	.word	0x20004194

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>

080019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80019fa:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f8f6 	bl	8001c06 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffde 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001a36:	4603      	mov	r3, r0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 f8cf 	bl	8001bf0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	460b      	mov	r3, r1
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fb02 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	8afb      	ldrh	r3, [r7, #22]
 8001a82:	4413      	add	r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffcd 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	e000      	b.n	8001a90 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001a8e:	687b      	ldr	r3, [r7, #4]
  }
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8bc 	bl	8001c1e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8c2 	bl	8001c42 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f8ca 	bl	8001c5a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	08016f44 	.word	0x08016f44

08001af0 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffe8 	bl	8001ad0 <_ZN6tflite10OpResolverC1Ev>
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08016f18 	.word	0x08016f18

08001b14 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffe5 	bl	8001af0 <_ZN6tflite15MicroOpResolverC1Ev>
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x3c>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08016eec 	.word	0x08016eec

08001b54 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddConv2DERK18TfLiteRegistration>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D(
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_CONV_2D()) {
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddConv2DERK18TfLiteRegistration+0x20>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	2103      	movs	r1, #3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f88d 	bl	8001c84 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b6a:	4603      	mov	r3, r0
  }
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08004219 	.word	0x08004219

08001b78 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6, tflite::Register_RELU6(),
                      ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00c fef1 	bl	800e96c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv+0x2c>)
 8001b90:	2116      	movs	r1, #22
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f876 	bl	8001c84 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b98:	4603      	mov	r3, r0
  }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08004495 	.word	0x08004495

08001ba8 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
                      ParseFullyConnected);
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	2109      	movs	r1, #9
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f863 	bl	8001c84 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001bbe:	4603      	mov	r3, r0
  }
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	08004359 	.word	0x08004359

08001bcc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	2119      	movs	r1, #25
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f851 	bl	8001c84 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001be2:	4603      	mov	r3, r0
  }
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08004591 	.word	0x08004591

08001bf0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    return t;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	80fb      	strh	r3, [r7, #6]
    return t;
 8001c10:	88fb      	ldrh	r3, [r7, #6]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001c26:	f7ff f9fd 	bl	8001024 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fedf 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8a8 	bl	8001da0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
	{ }
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	460b      	mov	r3, r1
 8001c92:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d10d      	bne.n	8001cb6 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001caa:	493a      	ldr	r1, [pc, #232]	; (8001d94 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 ffd5 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06a      	b.n	8001d8c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3318      	adds	r3, #24
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	7afa      	ldrb	r2, [r7, #11]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	4798      	blx	r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00e      	beq.n	8001cf4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ce6:	7afa      	ldrb	r2, [r7, #11]
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 ffb6 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04b      	b.n	8001d8c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d90e      	bls.n	8001d1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8001d0e:	7afa      	ldrb	r2, [r7, #11]
 8001d10:	2304      	movs	r3, #4
 8001d12:	4922      	ldr	r1, [pc, #136]	; (8001d9c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8001d14:	f001 ffa2 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e037      	b.n	8001d8c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	015b      	lsls	r3, r3, #5
 8001d26:	4413      	add	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	1d1c      	adds	r4, r3, #4
 8001d2c:	4615      	mov	r5, r2
 8001d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d40:	7afa      	ldrb	r2, [r7, #11]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	015b      	lsls	r3, r3, #5
 8001d46:	440b      	add	r3, r1
 8001d48:	3318      	adds	r3, #24
 8001d4a:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    builtin_codes_[num_buitin_ops_] = op;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	7afa      	ldrb	r2, [r7, #11]
 8001d66:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	3322      	adds	r3, #34	; 0x22
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return kTfLiteOk;
 8001d8a:	2300      	movs	r3, #0
  }
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	080124c0 	.word	0x080124c0
 8001d98:	08012508 	.word	0x08012508
 8001d9c:	08012558 	.word	0x08012558

08001da0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d101      	bne.n	8001dcc <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e019      	b.n	8001e00 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d210      	bcs.n	8001dfe <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d101      	bne.n	8001df6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	e004      	b.n	8001e00 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e7e8      	b.n	8001dd0 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001dfe:	2300      	movs	r3, #0
  }
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f9e9 	bl	80011f4 <_ZN6tflite15MicroOpResolverD1Ev>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08016eec 	.word	0x08016eec

08001e30 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe7 	bl	8001e0c <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8001e3e:	21a4      	movs	r1, #164	; 0xa4
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f00e fd4a 	bl	80108da <_ZdlPvj>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d218      	bcs.n	8001e9c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015b      	lsls	r3, r3, #5
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d10a      	bne.n	8001e94 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f9fb 	bl	8000280 <strcmp>
 8001e8a:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	e004      	b.n	8001e9e <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e7e0      	b.n	8001e5e <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 8001e9c:	2300      	movs	r3, #0
  }
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d901      	bls.n	8001ec0 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8001ebc:	f00e ff93 	bl	8010de6 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d212      	bcs.n	8001ef6 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3388      	adds	r3, #136	; 0x88
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3322      	adds	r3, #34	; 0x22
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	e004      	b.n	8001ef8 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e7e6      	b.n	8001ec4 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8001ef6:	2300      	movs	r3, #0
  }
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f3e:	2007      	movs	r0, #7
 8001f40:	f000 fac0 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_TIM_Base_MspInit+0x3c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10d      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_TIM_Base_MspInit+0x40>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_TIM_Base_MspInit+0x40>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_TIM_Base_MspInit+0x40>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_UART_MspInit+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12b      	bne.n	800200e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffe:	2307      	movs	r3, #7
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_UART_MspInit+0x8c>)
 800200a:	f000 fa8f 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40004400 	.word	0x40004400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <NMI_Handler+0x4>

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 f956 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002092:	f00e fed3 	bl	8010e3c <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
	return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ba:	e7fe      	b.n	80020ba <_exit+0x12>

080020bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
	}

return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
	}
	return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002156:	605a      	str	r2, [r3, #4]
	return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f00e fe38 	bl	8010e3c <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20018000 	.word	0x20018000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20016f38 	.word	0x20016f38
 8002200:	20016ff0 	.word	0x20016ff0

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002252:	f7ff ffd7 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f00e fe09 	bl	8010e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff f827 	bl	80012ac <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20004128 	.word	0x20004128
  ldr r2, =_sidata
 800226c:	08017424 	.word	0x08017424
  ldr r2, =_sbss
 8002270:	20004130 	.word	0x20004130
  ldr r4, =_ebss
 8002274:	20016fec 	.word	0x20016fec

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f90d 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fe26 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f917 	bl	8002512 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022fc:	f000 f8ed 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200040ac 	.word	0x200040ac
 8002318:	200040b4 	.word	0x200040b4
 800231c:	200040b0 	.word	0x200040b0

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200040b4 	.word	0x200040b4
 8002344:	20016fd8 	.word	0x20016fd8

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20016fd8 	.word	0x20016fd8

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff47 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff5c 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffb0 	bl	8002480 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e159      	b.n	80027fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8148 	bne.w	80027f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d005      	beq.n	800257e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	2b02      	cmp	r3, #2
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d017      	beq.n	800261c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a2 	beq.w	80027f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <HAL_GPIO_Init+0x2e8>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a56      	ldr	r2, [pc, #344]	; (8002814 <HAL_GPIO_Init+0x2e8>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b54      	ldr	r3, [pc, #336]	; (8002814 <HAL_GPIO_Init+0x2e8>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_GPIO_Init+0x2ec>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x202>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a48      	ldr	r2, [pc, #288]	; (8002820 <HAL_GPIO_Init+0x2f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x1fe>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a47      	ldr	r2, [pc, #284]	; (8002824 <HAL_GPIO_Init+0x2f8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x1fa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a46      	ldr	r2, [pc, #280]	; (8002828 <HAL_GPIO_Init+0x2fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x1f6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a45      	ldr	r2, [pc, #276]	; (800282c <HAL_GPIO_Init+0x300>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x1f2>
 800271a:	2304      	movs	r3, #4
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800271e:	2307      	movs	r3, #7
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	; (8002818 <HAL_GPIO_Init+0x2ec>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_GPIO_Init+0x304>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <HAL_GPIO_Init+0x304>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_GPIO_Init+0x304>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_GPIO_Init+0x304>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_GPIO_Init+0x304>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_GPIO_Init+0x304>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_GPIO_Init+0x304>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_GPIO_Init+0x304>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f aea2 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	041a      	lsls	r2, r3, #16
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43d9      	mvns	r1, r3
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	400b      	ands	r3, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619a      	str	r2, [r3, #24]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e264      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d075      	beq.n	80029a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ba:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d00c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b9d      	ldr	r3, [pc, #628]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028de:	d10b      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	4b99      	ldr	r3, [pc, #612]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d05b      	beq.n	80029a4 <HAL_RCC_OscConfig+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d157      	bne.n	80029a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e23f      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x74>
 8002902:	4b91      	ldr	r3, [pc, #580]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a90      	ldr	r2, [pc, #576]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002934:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a83      	ldr	r2, [pc, #524]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b81      	ldr	r3, [pc, #516]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fcf8 	bl	8002348 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fcf4 	bl	8002348 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e204      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xc0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fce4 	bl	8002348 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff fce0 	bl	8002348 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1f0      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0xe8>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d116      	bne.n	8002a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x152>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e1c4      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4952      	ldr	r1, [pc, #328]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	e03a      	b.n	8002a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCC_OscConfig+0x2b0>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7ff fc99 	bl	8002348 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fc95 	bl	8002348 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1a5      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4940      	ldr	r1, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e015      	b.n	8002a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0x2b0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff fc78 	bl	8002348 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fc74 	bl	8002348 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e184      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d030      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x2b4>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7ff fc58 	bl	8002348 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fc54 	bl	8002348 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e164      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x200>
 8002aba:	e015      	b.n	8002ae8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x2b4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fc41 	bl	8002348 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aca:	f7ff fc3d 	bl	8002348 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e14d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a0 	beq.w	8002c36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d121      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fc03 	bl	8002348 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e011      	b.n	8002b6a <HAL_RCC_OscConfig+0x2ce>
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
 8002b54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7ff fbf6 	bl	8002348 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e106      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_RCC_OscConfig+0x4e4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
 8002b7e:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a80      	ldr	r2, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	e01c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x32a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x312>
 8002b94:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a7a      	ldr	r2, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b78      	ldr	r3, [pc, #480]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a77      	ldr	r2, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x32a>
 8002bae:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a74      	ldr	r2, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a71      	ldr	r2, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7ff fbbb 	bl	8002348 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7ff fbb7 	bl	8002348 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0c5      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x33a>
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7ff fba5 	bl	8002348 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7ff fba1 	bl	8002348 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0af      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 809b 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d05c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d141      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x4ec>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7ff fb75 	bl	8002348 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c62:	f7ff fb71 	bl	8002348 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e081      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c74:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	019b      	lsls	r3, r3, #6
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	4937      	ldr	r1, [pc, #220]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x4ec>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fb4a 	bl	8002348 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fb46 	bl	8002348 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e056      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002cd6:	e04e      	b.n	8002d76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_OscConfig+0x4ec>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7ff fb33 	bl	8002348 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7ff fb2f 	bl	8002348 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e03f      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x44a>
 8002d04:	e037      	b.n	8002d76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e032      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d028      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d11a      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40007000 	.word	0x40007000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470060 	.word	0x42470060

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0cc      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d90c      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d044      	beq.n	8002eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d119      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e067      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4934      	ldr	r1, [pc, #208]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7ff fa64 	bl	8002348 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7ff fa60 	bl	8002348 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e04f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d20c      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f821 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	490a      	ldr	r1, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	5ccb      	ldrb	r3, [r1, r3]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f9c4 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	08016f70 	.word	0x08016f70
 8002f50:	200040ac 	.word	0x200040ac
 8002f54:	200040b0 	.word	0x200040b0

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f70:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d00d      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x40>
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	f200 80bd 	bhi.w	80030fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x34>
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f8a:	e0b7      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f8e:	60bb      	str	r3, [r7, #8]
       break;
 8002f90:	e0b7      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f92:	4b61      	ldr	r3, [pc, #388]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f94:	60bb      	str	r3, [r7, #8]
      break;
 8002f96:	e0b4      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f98:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04d      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	ea02 0800 	and.w	r8, r2, r0
 8002fc6:	ea03 0901 	and.w	r9, r3, r1
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4649      	mov	r1, r9
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	014b      	lsls	r3, r1, #5
 8002fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fdc:	0142      	lsls	r2, r0, #5
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	ebb0 0008 	subs.w	r0, r0, r8
 8002fe6:	eb61 0109 	sbc.w	r1, r1, r9
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff8:	0182      	lsls	r2, r0, #6
 8002ffa:	1a12      	subs	r2, r2, r0
 8002ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	00d9      	lsls	r1, r3, #3
 800300a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300e:	00d0      	lsls	r0, r2, #3
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	eb12 0208 	adds.w	r2, r2, r8
 8003018:	eb43 0309 	adc.w	r3, r3, r9
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	0259      	lsls	r1, r3, #9
 8003026:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800302a:	0250      	lsls	r0, r2, #9
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f7fd fe00 	bl	8000c40 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e04a      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	461a      	mov	r2, r3
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	ea02 0400 	and.w	r4, r2, r0
 8003062:	ea03 0501 	and.w	r5, r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	014b      	lsls	r3, r1, #5
 8003074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003078:	0142      	lsls	r2, r0, #5
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	1b00      	subs	r0, r0, r4
 8003080:	eb61 0105 	sbc.w	r1, r1, r5
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	018b      	lsls	r3, r1, #6
 800308e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003092:	0182      	lsls	r2, r0, #6
 8003094:	1a12      	subs	r2, r2, r0
 8003096:	eb63 0301 	sbc.w	r3, r3, r1
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	00d9      	lsls	r1, r3, #3
 80030a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a8:	00d0      	lsls	r0, r2, #3
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	1912      	adds	r2, r2, r4
 80030b0:	eb45 0303 	adc.w	r3, r5, r3
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0299      	lsls	r1, r3, #10
 80030be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030c2:	0290      	lsls	r0, r2, #10
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f7fd fdb4 	bl	8000c40 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	3301      	adds	r3, #1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	60bb      	str	r3, [r7, #8]
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030fe:	60bb      	str	r3, [r7, #8]
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	68bb      	ldr	r3, [r7, #8]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200040ac 	.word	0x200040ac

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08016f80 	.word	0x08016f80

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	08016f80 	.word	0x08016f80

08003184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fed0 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 f888 	bl	80032d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e03c      	b.n	80032b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_TIM_Base_Start+0xa0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_TIM_Base_Start+0x5c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d013      	beq.n	8003280 <HAL_TIM_Base_Start+0x5c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_TIM_Base_Start+0xa4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_TIM_Base_Start+0x5c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_TIM_Base_Start+0xa8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_TIM_Base_Start+0x5c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_TIM_Base_Start+0xac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIM_Base_Start+0x5c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <HAL_TIM_Base_Start+0xb0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d111      	bne.n	80032a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d010      	beq.n	80032b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	e007      	b.n	80032b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	40014000 	.word	0x40014000

080032d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a34      	ldr	r2, [pc, #208]	; (80033bc <TIM_Base_SetConfig+0xe4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00f      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <TIM_Base_SetConfig+0xe8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <TIM_Base_SetConfig+0xec>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <TIM_Base_SetConfig+0xf0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0xe4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01b      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d017      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <TIM_Base_SetConfig+0xe8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <TIM_Base_SetConfig+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <TIM_Base_SetConfig+0xf0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <TIM_Base_SetConfig+0xf4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <TIM_Base_SetConfig+0xf8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_Base_SetConfig+0xfc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d108      	bne.n	8003374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <TIM_Base_SetConfig+0xe4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	615a      	str	r2, [r3, #20]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e03f      	b.n	800346a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fdc8 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f9cb 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d17c      	bne.n	800358c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_UART_Transmit+0x2c>
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e075      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x3e>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e06e      	b.n	800358e <HAL_UART_Transmit+0x11c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	; 0x21
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c6:	f7fe ff3f 	bl	8002348 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d108      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e003      	b.n	80034fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003504:	e02a      	b.n	800355c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f8e2 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e036      	b.n	800358e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3302      	adds	r3, #2
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	e007      	b.n	800354e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1cf      	bne.n	8003506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f8b2 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e006      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b08a      	sub	sp, #40	; 0x28
 800359a:	af02      	add	r7, sp, #8
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	f040 808c 	bne.w	80036d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Receive+0x2e>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e084      	b.n	80036d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Receive+0x40>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e07d      	b.n	80036d2 <HAL_UART_Receive+0x13c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2222      	movs	r2, #34	; 0x22
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f2:	f7fe fea9 	bl	8002348 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Receive+0x8a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003630:	e043      	b.n	80036ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2120      	movs	r1, #32
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f84c 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e042      	b.n	80036d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	b29a      	uxth	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	3302      	adds	r3, #2
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e01f      	b.n	80036ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	d007      	beq.n	8003686 <HAL_UART_Receive+0xf0>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_UART_Receive+0xfe>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e008      	b.n	80036a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1b6      	bne.n	8003632 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b090      	sub	sp, #64	; 0x40
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	e050      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f2:	d04c      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <UART_WaitOnFlagUntilTimeout+0x30>
 80036fa:	f7fe fe25 	bl	8002348 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003706:	429a      	cmp	r2, r3
 8003708:	d241      	bcs.n	800378e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800372a:	637a      	str	r2, [r7, #52]	; 0x34
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e5      	bne.n	800370a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	613b      	str	r3, [r7, #16]
   return(result);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3314      	adds	r3, #20
 800375c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375e:	623a      	str	r2, [r7, #32]
 8003760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	69f9      	ldr	r1, [r7, #28]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	61bb      	str	r3, [r7, #24]
   return(result);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e00f      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d09f      	beq.n	80036ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3740      	adds	r7, #64	; 0x40
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b09f      	sub	sp, #124	; 0x7c
 80037be:	af00      	add	r7, sp, #0
 80037c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	68d9      	ldr	r1, [r3, #12]
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	ea40 0301 	orr.w	r3, r0, r1
 80037d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	ea40 0301 	orr.w	r3, r0, r1
 8003820:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4bc5      	ldr	r3, [pc, #788]	; (8003b3c <UART_SetConfig+0x384>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d004      	beq.n	8003836 <UART_SetConfig+0x7e>
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4bc3      	ldr	r3, [pc, #780]	; (8003b40 <UART_SetConfig+0x388>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d103      	bne.n	800383e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003836:	f7ff fc91 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 800383a:	6778      	str	r0, [r7, #116]	; 0x74
 800383c:	e002      	b.n	8003844 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7ff fc79 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8003842:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	f040 80b6 	bne.w	80039bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003852:	461c      	mov	r4, r3
 8003854:	f04f 0500 	mov.w	r5, #0
 8003858:	4622      	mov	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	1891      	adds	r1, r2, r2
 800385e:	6439      	str	r1, [r7, #64]	; 0x40
 8003860:	415b      	adcs	r3, r3
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003868:	1912      	adds	r2, r2, r4
 800386a:	eb45 0303 	adc.w	r3, r5, r3
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	00d9      	lsls	r1, r3, #3
 8003878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800387c:	00d0      	lsls	r0, r2, #3
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1911      	adds	r1, r2, r4
 8003884:	6639      	str	r1, [r7, #96]	; 0x60
 8003886:	416b      	adcs	r3, r5
 8003888:	667b      	str	r3, [r7, #100]	; 0x64
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	1891      	adds	r1, r2, r2
 8003896:	63b9      	str	r1, [r7, #56]	; 0x38
 8003898:	415b      	adcs	r3, r3
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038a4:	f7fd f9cc 	bl	8000c40 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4ba5      	ldr	r3, [pc, #660]	; (8003b44 <UART_SetConfig+0x38c>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011e      	lsls	r6, r3, #4
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	461c      	mov	r4, r3
 80038ba:	f04f 0500 	mov.w	r5, #0
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	6339      	str	r1, [r7, #48]	; 0x30
 80038c6:	415b      	adcs	r3, r3
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ce:	1912      	adds	r2, r2, r4
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	00d9      	lsls	r1, r3, #3
 80038de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e2:	00d0      	lsls	r0, r2, #3
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	1911      	adds	r1, r2, r4
 80038ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ec:	416b      	adcs	r3, r5
 80038ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80038fe:	415b      	adcs	r3, r3
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800390a:	f7fd f999 	bl	8000c40 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4b8c      	ldr	r3, [pc, #560]	; (8003b44 <UART_SetConfig+0x38c>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <UART_SetConfig+0x38c>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003934:	441e      	add	r6, r3
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	4618      	mov	r0, r3
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	1894      	adds	r4, r2, r2
 8003944:	623c      	str	r4, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	1812      	adds	r2, r2, r0
 8003950:	eb41 0303 	adc.w	r3, r1, r3
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	f04f 0500 	mov.w	r5, #0
 800395c:	00dd      	lsls	r5, r3, #3
 800395e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003962:	00d4      	lsls	r4, r2, #3
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	1814      	adds	r4, r2, r0
 800396a:	653c      	str	r4, [r7, #80]	; 0x50
 800396c:	414b      	adcs	r3, r1
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	1891      	adds	r1, r2, r2
 800397c:	61b9      	str	r1, [r7, #24]
 800397e:	415b      	adcs	r3, r3
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800398a:	f7fd f959 	bl	8000c40 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <UART_SetConfig+0x38c>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <UART_SetConfig+0x38c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 0207 	and.w	r2, r3, #7
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4432      	add	r2, r6
 80039b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ba:	e0b9      	b.n	8003b30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039be:	461c      	mov	r4, r3
 80039c0:	f04f 0500 	mov.w	r5, #0
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	6139      	str	r1, [r7, #16]
 80039cc:	415b      	adcs	r3, r3
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d4:	1912      	adds	r2, r2, r4
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	00d9      	lsls	r1, r3, #3
 80039e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039e8:	00d0      	lsls	r0, r2, #3
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	eb12 0804 	adds.w	r8, r2, r4
 80039f2:	eb43 0905 	adc.w	r9, r3, r5
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	008b      	lsls	r3, r1, #2
 8003a0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a0e:	0082      	lsls	r2, r0, #2
 8003a10:	4640      	mov	r0, r8
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fd f914 	bl	8000c40 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	011e      	lsls	r6, r3, #4
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1894      	adds	r4, r2, r2
 8003a34:	60bc      	str	r4, [r7, #8]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a3e:	1812      	adds	r2, r2, r0
 8003a40:	eb41 0303 	adc.w	r3, r1, r3
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	f04f 0500 	mov.w	r5, #0
 8003a4c:	00dd      	lsls	r5, r3, #3
 8003a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a52:	00d4      	lsls	r4, r2, #3
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	1814      	adds	r4, r2, r0
 8003a5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	008b      	lsls	r3, r1, #2
 8003a74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a78:	0082      	lsls	r2, r0, #2
 8003a7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a7e:	f7fd f8df 	bl	8000c40 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	; 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	441e      	add	r6, r3
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	1894      	adds	r4, r2, r2
 8003ab6:	603c      	str	r4, [r7, #0]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	1812      	adds	r2, r2, r0
 8003ac2:	eb41 0303 	adc.w	r3, r1, r3
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	f04f 0500 	mov.w	r5, #0
 8003ace:	00dd      	lsls	r5, r3, #3
 8003ad0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad4:	00d4      	lsls	r4, r2, #3
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	eb12 0a00 	adds.w	sl, r2, r0
 8003ade:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afa:	0082      	lsls	r2, r0, #2
 8003afc:	4650      	mov	r0, sl
 8003afe:	4659      	mov	r1, fp
 8003b00:	f7fd f89e 	bl	8000c40 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2164      	movs	r1, #100	; 0x64
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	3332      	adds	r3, #50	; 0x32
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4432      	add	r2, r6
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	377c      	adds	r7, #124	; 0x7c
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3301      	adds	r3, #1
 8003b54:	009b      	lsls	r3, r3, #2
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d847      	bhi.n	8003c04 <TfLiteTypeGetName+0xa0>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <TfLiteTypeGetName+0x18>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003bc1 	.word	0x08003bc1
 8003b80:	08003bc5 	.word	0x08003bc5
 8003b84:	08003bcd 	.word	0x08003bcd
 8003b88:	08003bd5 	.word	0x08003bd5
 8003b8c:	08003bdd 	.word	0x08003bdd
 8003b90:	08003bf1 	.word	0x08003bf1
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003bd9 	.word	0x08003bd9
 8003ba4:	08003bf5 	.word	0x08003bf5
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003be1 	.word	0x08003be1
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003bd1 	.word	0x08003bd1
    case kTfLiteNoType:
      return "NOTYPE";
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <TfLiteTypeGetName+0xb0>)
 8003bc2:	e020      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <TfLiteTypeGetName+0xb4>)
 8003bc6:	e01e      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <TfLiteTypeGetName+0xb8>)
 8003bca:	e01c      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <TfLiteTypeGetName+0xbc>)
 8003bce:	e01a      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <TfLiteTypeGetName+0xc0>)
 8003bd2:	e018      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <TfLiteTypeGetName+0xc4>)
 8003bd6:	e016      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <TfLiteTypeGetName+0xc8>)
 8003bda:	e014      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <TfLiteTypeGetName+0xcc>)
 8003bde:	e012      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <TfLiteTypeGetName+0xd0>)
 8003be2:	e010      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <TfLiteTypeGetName+0xd4>)
 8003be6:	e00e      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <TfLiteTypeGetName+0xd8>)
 8003bea:	e00c      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <TfLiteTypeGetName+0xdc>)
 8003bee:	e00a      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <TfLiteTypeGetName+0xe0>)
 8003bf2:	e008      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <TfLiteTypeGetName+0xe4>)
 8003bf6:	e006      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <TfLiteTypeGetName+0xe8>)
 8003bfa:	e004      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <TfLiteTypeGetName+0xec>)
 8003bfe:	e002      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <TfLiteTypeGetName+0xf0>)
 8003c02:	e000      	b.n	8003c06 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <TfLiteTypeGetName+0xf4>)
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0801259c 	.word	0x0801259c
 8003c18:	080125a4 	.word	0x080125a4
 8003c1c:	080125ac 	.word	0x080125ac
 8003c20:	080125b4 	.word	0x080125b4
 8003c24:	080125bc 	.word	0x080125bc
 8003c28:	080125c4 	.word	0x080125c4
 8003c2c:	080125cc 	.word	0x080125cc
 8003c30:	080125d4 	.word	0x080125d4
 8003c34:	080125dc 	.word	0x080125dc
 8003c38:	080125e4 	.word	0x080125e4
 8003c3c:	080125ec 	.word	0x080125ec
 8003c40:	080125f8 	.word	0x080125f8
 8003c44:	08012604 	.word	0x08012604
 8003c48:	0801260c 	.word	0x0801260c
 8003c4c:	08012614 	.word	0x08012614
 8003c50:	0801261c 	.word	0x0801261c
 8003c54:	08012628 	.word	0x08012628
 8003c58:	08012630 	.word	0x08012630

08003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003c5c:	b40e      	push	{r1, r2, r3}
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003c66:	f107 0320 	add.w	r3, r7, #32
 8003c6a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	69f9      	ldr	r1, [r7, #28]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c8a:	b003      	add	sp, #12
 8003c8c:	4770      	bx	lr

08003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003c8e:	b40c      	push	{r2, r3}
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8003c9a:	f107 031c 	add.w	r3, r7, #28
 8003c9e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cbe:	b002      	add	sp, #8
 8003cc0:	4770      	bx	lr

08003cc2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fcb5 	bl	8004654 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZNK6tflite13Conv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2104      	movs	r1, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd1d 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	b2db      	uxtb	r3, r3
  }
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2106      	movs	r1, #6
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fcdf 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d28:	4603      	mov	r3, r0
  }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2108      	movs	r1, #8
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fcd0 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d46:	4603      	mov	r3, r0
  }
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fcef 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d64:	4603      	mov	r3, r0
 8003d66:	b2db      	uxtb	r3, r3
  }
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	210c      	movs	r1, #12
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fcb1 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d84:	4603      	mov	r3, r0
  }
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	210e      	movs	r1, #14
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fca2 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003da2:	4603      	mov	r3, r0
  }
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2104      	movs	r1, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fcc1 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b2db      	uxtb	r3, r3
  }
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2106      	movs	r1, #6
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fcb1 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003de0:	4603      	mov	r3, r0
 8003de2:	b2db      	uxtb	r3, r3
  }
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2108      	movs	r1, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc44 	bl	8004688 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
  }
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	210a      	movs	r1, #10
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fc30 	bl	8004688 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
  }
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003e60 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fca8 	bl	80047a2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8003e52:	eef0 7a40 	vmov.f32	s15, s0
  }
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00000000 	.word	0x00000000

08003e64 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fc56 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003e76:	4603      	mov	r3, r0
  }
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	210a      	movs	r1, #10
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fbfa 	bl	8004688 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e94:	4603      	mov	r3, r0
  }
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	210c      	movs	r1, #12
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fc0b 	bl	80046c6 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8003eb0:	4603      	mov	r3, r0
  }
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ffdc 	bl	8003e80 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d104      	bne.n	8003ed8 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffe5 	bl	8003e9e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	e000      	b.n	8003eda <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8003ed8:	2300      	movs	r3, #0
  }
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffc8 	bl	8003e80 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d104      	bne.n	8003f00 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ffd1 	bl	8003e9e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003efc:	4603      	mov	r3, r0
 8003efe:	e000      	b.n	8003f02 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003f00:	2300      	movs	r3, #0
  }
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ffb4 	bl	8003e80 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	d104      	bne.n	8003f28 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffbd 	bl	8003e9e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003f24:	4603      	mov	r3, r0
 8003f26:	e000      	b.n	8003f2a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8003f28:	2300      	movs	r3, #0
  }
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ffa0 	bl	8003e80 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b11      	cmp	r3, #17
 8003f44:	d104      	bne.n	8003f50 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ffa9 	bl	8003e9e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	e000      	b.n	8003f52 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8003f50:	2300      	movs	r3, #0
  }
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	4610      	mov	r0, r2
 8003f94:	4798      	blx	r3
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003fd0:	f00c ff09 	bl	8010de6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003fda:	f00c ff04 	bl	8010de6 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003fe4:	f00c feff 	bl	8010de6 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003fee:	f00c fefa 	bl	8010de6 <abort>
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8004010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004012:	4917      	ldr	r1, [pc, #92]	; (8004070 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f7ff fe21 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 800401a:	2301      	movs	r3, #1
 800401c:	e024      	b.n	8004068 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 fbe1 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004024:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d906      	bls.n	800403e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8004030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004032:	4910      	ldr	r1, [pc, #64]	; (8004074 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8004034:	6838      	ldr	r0, [r7, #0]
 8004036:	f7ff fe11 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 800403a:	2301      	movs	r3, #1
 800403c:	e014      	b.n	8004068 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20d      	bcs.n	8004066 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	18d4      	adds	r4, r2, r3
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f000 fbd5 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800405a:	4603      	mov	r3, r0
 800405c:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e7ed      	b.n	8004042 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}
 8004070:	08012654 	.word	0x08012654
 8004074:	08012684 	.word	0x08012684

08004078 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b05      	cmp	r3, #5
 8004086:	d81b      	bhi.n	80040c0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040b1 	.word	0x080040b1
 800409c:	080040b5 	.word	0x080040b5
 80040a0:	080040b9 	.word	0x080040b9
 80040a4:	080040bd 	.word	0x080040bd
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e00a      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e008      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80040b0:	2302      	movs	r3, #2
 80040b2:	e006      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e004      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80040b8:	2304      	movs	r3, #4
 80040ba:	e002      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80040bc:	2305      	movs	r3, #5
 80040be:	e000      	b.n	80040c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d002      	beq.n	80040ea <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 80040e4:	e003      	b.n	80040ee <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e002      	b.n	80040f0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 80040ea:	2302      	movs	r3, #2
 80040ec:	e000      	b.n	80040f0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d873      	bhi.n	80041f8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004163 	.word	0x08004163
 800411c:	08004159 	.word	0x08004159
 8004120:	08004181 	.word	0x08004181
 8004124:	08004195 	.word	0x08004195
 8004128:	080041a9 	.word	0x080041a9
 800412c:	080041bd 	.word	0x080041bd
 8004130:	080041c7 	.word	0x080041c7
 8004134:	08004177 	.word	0x08004177
 8004138:	080041d1 	.word	0x080041d1
 800413c:	0800419f 	.word	0x0800419f
 8004140:	0800416d 	.word	0x0800416d
 8004144:	080041db 	.word	0x080041db
 8004148:	080041b3 	.word	0x080041b3
 800414c:	080041e5 	.word	0x080041e5
 8004150:	080041ef 	.word	0x080041ef
 8004154:	0800418b 	.word	0x0800418b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	220a      	movs	r2, #10
 800415c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800415e:	2300      	movs	r3, #0
 8004160:	e054      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004168:	2300      	movs	r3, #0
 800416a:	e04f      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	220b      	movs	r2, #11
 8004170:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004172:	2300      	movs	r3, #0
 8004174:	e04a      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2207      	movs	r2, #7
 800417a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800417c:	2300      	movs	r3, #0
 800417e:	e045      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004186:	2300      	movs	r3, #0
 8004188:	e040      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2210      	movs	r2, #16
 800418e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004190:	2300      	movs	r3, #0
 8004192:	e03b      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2203      	movs	r2, #3
 8004198:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800419a:	2300      	movs	r3, #0
 800419c:	e036      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2209      	movs	r2, #9
 80041a2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e031      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2204      	movs	r2, #4
 80041ac:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e02c      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	220d      	movs	r2, #13
 80041b6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e027      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2205      	movs	r2, #5
 80041c0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e022      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2206      	movs	r2, #6
 80041ca:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e01d      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2208      	movs	r2, #8
 80041d4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e018      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	220c      	movs	r2, #12
 80041de:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e013      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	220e      	movs	r2, #14
 80041e8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e00e      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	220f      	movs	r2, #15
 80041f2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e009      	b.n	800420c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	461a      	mov	r2, r3
 8004202:	4904      	ldr	r1, [pc, #16]	; (8004214 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fd29 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 800420a:	2301      	movs	r3, #1
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	080127a8 	.word	0x080127a8

08004218 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8004218:	b5b0      	push	{r4, r5, r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fec5 	bl	8003fbc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004232:	f107 0318 	add.w	r3, r7, #24
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff feb0 	bl	8003f9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800423e:	f107 0310 	add.w	r3, r7, #16
 8004242:	f107 0218 	add.w	r2, r7, #24
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fb01 	bl	8004850 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fb3b 	bl	80048d0 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800425a:	4603      	mov	r3, r0
 800425c:	f083 0301 	eor.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f240 434d 	movw	r3, #1101	; 0x44d
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4b37      	ldr	r3, [pc, #220]	; (8004350 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004272:	4a38      	ldr	r2, [pc, #224]	; (8004354 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f7ff fd09 	bl	8003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800427c:	2401      	movs	r4, #1
 800427e:	e05b      	b.n	8004338 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fe1a 	bl	8003eba <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8004286:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04b      	beq.n	8004326 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800428e:	69f8      	ldr	r0, [r7, #28]
 8004290:	f7ff fd30 	bl	8003cf4 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8004294:	4603      	mov	r3, r0
 8004296:	461d      	mov	r5, r3
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fb24 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042a2:	4604      	mov	r4, r0
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7ff ff13 	bl	80040d0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80042aa:	4603      	mov	r3, r0
 80042ac:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80042ae:	f107 0310 	add.w	r3, r7, #16
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fb19 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042b8:	4604      	mov	r4, r0
 80042ba:	69f8      	ldr	r0, [r7, #28]
 80042bc:	f7ff fd2a 	bl	8003d14 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 80042c0:	4603      	mov	r3, r0
 80042c2:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80042c4:	f107 0310 	add.w	r3, r7, #16
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb0e 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042ce:	4604      	mov	r4, r0
 80042d0:	69f8      	ldr	r0, [r7, #28]
 80042d2:	f7ff fd2e 	bl	8003d32 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 80042d6:	4603      	mov	r3, r0
 80042d8:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80042da:	69f8      	ldr	r0, [r7, #28]
 80042dc:	f7ff fd38 	bl	8003d50 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 80042e0:	4603      	mov	r3, r0
 80042e2:	461d      	mov	r5, r3
    params->activation =
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fafe 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042ee:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80042f0:	4628      	mov	r0, r5
 80042f2:	f7ff fec1 	bl	8004078 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80042f6:	4603      	mov	r3, r0
    params->activation =
 80042f8:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80042fa:	f107 0310 	add.w	r3, r7, #16
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 faf3 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004304:	4604      	mov	r4, r0
 8004306:	69f8      	ldr	r0, [r7, #28]
 8004308:	f7ff fd32 	bl	8003d70 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 800430c:	4603      	mov	r3, r0
 800430e:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fae8 	bl	80048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800431a:	4604      	mov	r4, r0
 800431c:	69f8      	ldr	r0, [r7, #28]
 800431e:	f7ff fd36 	bl	8003d8e <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 8004322:	4603      	mov	r3, r0
 8004324:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fae9 	bl	8004902 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004330:	4602      	mov	r2, r0
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004336:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8004338:	f107 0310 	add.w	r3, r7, #16
 800433c:	4618      	mov	r0, r3
 800433e:	f000 faa5 	bl	800488c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004342:	4623      	mov	r3, r4
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bdb0      	pop	{r4, r5, r7, pc}
 800434c:	08012728 	.word	0x08012728
 8004350:	080126c8 	.word	0x080126c8
 8004354:	08012710 	.word	0x08012710

08004358 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff fe25 	bl	8003fbc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004372:	f107 0318 	add.w	r3, r7, #24
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fe10 	bl	8003f9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	f107 0218 	add.w	r2, r7, #24
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 face 	bl	800492a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800438e:	f107 0310 	add.w	r3, r7, #16
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb08 	bl	80049aa <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800439a:	4603      	mov	r3, r0
 800439c:	f083 0301 	eor.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	f240 531d 	movw	r3, #1309	; 0x51d
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 80043b2:	4a36      	ldr	r2, [pc, #216]	; (800448c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f7ff fc69 	bl	8003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80043bc:	2401      	movs	r4, #1
 80043be:	e056      	b.n	800446e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fd8e 	bl	8003ee2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80043c6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d046      	beq.n	800445c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80043ce:	69f8      	ldr	r0, [r7, #28]
 80043d0:	f7ff fcec 	bl	8003dac <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461d      	mov	r5, r3
    params->activation =
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 faf1 	bl	80049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043e2:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff fe47 	bl	8004078 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80043ea:	4603      	mov	r3, r0
    params->activation =
 80043ec:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80043ee:	f107 0310 	add.w	r3, r7, #16
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fae6 	bl	80049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043f8:	4604      	mov	r4, r0
 80043fa:	69f8      	ldr	r0, [r7, #28]
 80043fc:	f7ff fcf6 	bl	8003dec <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8004400:	4603      	mov	r3, r0
 8004402:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fadb 	bl	80049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800440e:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8004410:	69f8      	ldr	r0, [r7, #28]
 8004412:	f7ff fcff 	bl	8003e14 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8004416:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8004418:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 800441a:	69f8      	ldr	r0, [r7, #28]
 800441c:	f7ff fcd6 	bl	8003dcc <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 8004426:	2b01      	cmp	r3, #1
 8004428:	d009      	beq.n	800443e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800442a:	e011      	b.n	8004450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 800442c:	f107 0310 	add.w	r3, r7, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fac7 	bl	80049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004436:	4603      	mov	r3, r0
 8004438:	2200      	movs	r2, #0
 800443a:	705a      	strb	r2, [r3, #1]
        break;
 800443c:	e00e      	b.n	800445c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 800443e:	f107 0310 	add.w	r3, r7, #16
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fabe 	bl	80049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004448:	4603      	mov	r3, r0
 800444a:	2201      	movs	r2, #1
 800444c:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 800444e:	e005      	b.n	800445c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004450:	490f      	ldr	r1, [pc, #60]	; (8004490 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004452:	68b8      	ldr	r0, [r7, #8]
 8004454:	f7ff fc02 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8004458:	2401      	movs	r4, #1
 800445a:	e008      	b.n	800446e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800445c:	f107 0310 	add.w	r3, r7, #16
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fabb 	bl	80049dc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800446c:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fa77 	bl	8004966 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004478:	4623      	mov	r3, r4
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bdb0      	pop	{r4, r5, r7, pc}
 8004482:	bf00      	nop
 8004484:	08012728 	.word	0x08012728
 8004488:	080126c8 	.word	0x080126c8
 800448c:	08012710 	.word	0x08012710
 8004490:	080127cc 	.word	0x080127cc

08004494 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b08d      	sub	sp, #52	; 0x34
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff fd87 	bl	8003fbc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80044ae:	f107 0318 	add.w	r3, r7, #24
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fd72 	bl	8003f9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	f107 0218 	add.w	r2, r7, #24
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fa9d 	bl	8004a04 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80044ca:	f107 0310 	add.w	r3, r7, #16
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fad7 	bl	8004a84 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f083 0301 	eor.w	r3, r3, #1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80044e2:	4b27      	ldr	r3, [pc, #156]	; (8004580 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	f240 63c3 	movw	r3, #1731	; 0x6c3
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80044ee:	4a26      	ldr	r2, [pc, #152]	; (8004588 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f7ff fbcb 	bl	8003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80044f8:	2401      	movs	r4, #1
 80044fa:	e037      	b.n	800456c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fd18 	bl	8003f32 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d027      	beq.n	800455a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800450a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800450c:	f7ff fcaa 	bl	8003e64 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8004510:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 8004518:	f107 0310 	add.w	r3, r7, #16
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fabe 	bl	8004a9e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	4b19      	ldr	r3, [pc, #100]	; (800458c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a39      	ldr	r1, [r7, #32]
 800452e:	2020      	movs	r0, #32
 8004530:	f7ff fd64 	bl	8003ffc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8004534:	4603      	mov	r3, r0
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	7ffb      	ldrb	r3, [r7, #31]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 800453e:	7ffc      	ldrb	r4, [r7, #31]
 8004540:	e014      	b.n	800456c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8004542:	6a38      	ldr	r0, [r7, #32]
 8004544:	f000 f94f 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004548:	4604      	mov	r4, r0
 800454a:	f107 0310 	add.w	r3, r7, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f000 faa5 	bl	8004a9e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004554:	4603      	mov	r3, r0
 8004556:	4622      	mov	r2, r4
 8004558:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800455a:	f107 0310 	add.w	r3, r7, #16
 800455e:	4618      	mov	r0, r3
 8004560:	f000 faa9 	bl	8004ab6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004564:	4602      	mov	r2, r0
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800456a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa65 	bl	8004a40 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004576:	4623      	mov	r3, r4
}
 8004578:	4618      	mov	r0, r3
 800457a:	372c      	adds	r7, #44	; 0x2c
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	08012728 	.word	0x08012728
 8004584:	080126c8 	.word	0x080126c8
 8004588:	08012710 	.word	0x08012710
 800458c:	080127f8 	.word	0x080127f8

08004590 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fd09 	bl	8003fbc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fcf4 	bl	8003f9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	f107 0218 	add.w	r2, r7, #24
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa8c 	bl	8004ade <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80045c6:	f107 0310 	add.w	r3, r7, #16
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fac6 	bl	8004b5e <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	f240 734c 	movw	r3, #1868	; 0x74c
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68b8      	ldr	r0, [r7, #8]
 80045f0:	f7ff fb4d 	bl	8003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80045f4:	2401      	movs	r4, #1
 80045f6:	e01c      	b.n	8004632 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fc86 	bl	8003f0a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80045fe:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8004606:	f107 0310 	add.w	r3, r7, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fab4 	bl	8004b78 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004610:	4604      	mov	r4, r0
 8004612:	69f8      	ldr	r0, [r7, #28]
 8004614:	f7ff fc12 	bl	8003e3c <_ZNK6tflite14SoftmaxOptions4betaEv>
 8004618:	eef0 7a40 	vmov.f32	s15, s0
 800461c:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fab3 	bl	8004b90 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800462a:	4602      	mov	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004630:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fa6f 	bl	8004b1a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800463c:	4623      	mov	r3, r4
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd90      	pop	{r4, r7, pc}
 8004646:	bf00      	nop
 8004648:	08012728 	.word	0x08012728
 800464c:	080126c8 	.word	0x080126c8
 8004650:	08012710 	.word	0x08012710

08004654 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
  }
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fa9d 	bl	8004bb8 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800467e:	4603      	mov	r3, r0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc fceb 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80046a2:	4603      	mov	r3, r0
 80046a4:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	4413      	add	r3, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffda 	bl	800466c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80046b8:	4603      	mov	r3, r0
 80046ba:	e000      	b.n	80046be <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80046bc:	787b      	ldrb	r3, [r7, #1]
  }
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80046d2:	887b      	ldrh	r3, [r7, #2]
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa7a 	bl	8004bd0 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80046dc:	4603      	mov	r3, r0
  }
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b086      	sub	sp, #24
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	460b      	mov	r3, r1
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	4619      	mov	r1, r3
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7fc fcbd 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80046fe:	4603      	mov	r3, r0
 8004700:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	4413      	add	r3, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd f996 	bl	8001a40 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004714:	4603      	mov	r3, r0
 8004716:	e000      	b.n	800471a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8004718:	687b      	ldr	r3, [r7, #4]
  }
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa6c 	bl	8004c10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004738:	4603      	mov	r3, r0
  }
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	807b      	strh	r3, [r7, #2]
 800474e:	4613      	mov	r3, r2
 8004750:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fc8e 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800475c:	4603      	mov	r3, r0
 800475e:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	4413      	add	r3, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa6f 	bl	8004c50 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004772:	4603      	mov	r3, r0
 8004774:	e001      	b.n	800477a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8004776:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa6b 	bl	8004c6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8004798:	4603      	mov	r3, r0
  }
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	460b      	mov	r3, r1
 80047ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80047b0:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80047b2:	897b      	ldrh	r3, [r7, #10]
 80047b4:	4619      	mov	r1, r3
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7fc fc5e 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80047bc:	4603      	mov	r3, r0
 80047be:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80047c0:	8afb      	ldrh	r3, [r7, #22]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	8afb      	ldrh	r3, [r7, #22]
 80047ca:	4413      	add	r3, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa6e 	bl	8004cae <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 80047d2:	eef0 7a40 	vmov.f32	s15, s0
 80047d6:	e001      	b.n	80047dc <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 80047dc:	eeb0 0a67 	vmov.f32	s0, s15
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd f8fd 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffe9 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004814:	4602      	mov	r2, r0
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4293      	cmp	r3, r2
 800481a:	d306      	bcc.n	800482a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8004820:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004824:	4809      	ldr	r0, [pc, #36]	; (800484c <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8004826:	f00c fae5 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa63 	bl	8004cf6 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8004830:	4603      	mov	r3, r0
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fa4c 	bl	8004cd2 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800483a:	4603      	mov	r3, r0
  }
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	08012808 	.word	0x08012808
 8004848:	08012814 	.word	0x08012814
 800484c:	080128e4 	.word	0x080128e4

08004850 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa60 	bl	8004d24 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8004864:	4604      	mov	r4, r0
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fb72 	bl	8003f5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	461a      	mov	r2, r3
 800487c:	4621      	mov	r1, r4
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa6f 	bl	8004d62 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}

0800488c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fa78 	bl	8004d8c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800489c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa7d 	bl	8004da6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80048ac:	4604      	mov	r4, r0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa86 	bl	8004dc0 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80048b4:	4603      	mov	r3, r0
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7ff fb5c 	bl	8003f78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
      }
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}

080048d0 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa91 	bl	8004e02 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
	return get();
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa96 	bl	8004e24 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80048f8:	4603      	mov	r3, r0
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa8a 	bl	8004e24 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004910:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fa39 	bl	8004d8c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800491a:	4603      	mov	r3, r0
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
	return __p;
 8004920:	68fb      	ldr	r3, [r7, #12]
      }
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800492a:	b590      	push	{r4, r7, lr}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fa80 	bl	8004e3e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 800493e:	4604      	mov	r4, r0
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fb05 	bl	8003f5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	461a      	mov	r2, r3
 8004956:	4621      	mov	r1, r4
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa8a 	bl	8004e72 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004966:	b590      	push	{r4, r7, lr}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fa93 	bl	8004e9c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004976:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa98 	bl	8004eb6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004986:	4604      	mov	r4, r0
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 faa1 	bl	8004ed0 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800498e:	4603      	mov	r3, r0
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4620      	mov	r0, r4
 8004996:	f7ff faef 	bl	8003f78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
      }
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd90      	pop	{r4, r7, pc}

080049aa <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 faac 	bl	8004f12 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	return get();
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fab1 	bl	8004f34 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80049d2:	4603      	mov	r3, r0
      }
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 faa5 	bl	8004f34 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80049ea:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fa54 	bl	8004e9c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
	return __p;
 80049fa:	68fb      	ldr	r3, [r7, #12]
      }
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa9b 	bl	8004f4e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fa98 	bl	8003f5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4621      	mov	r1, r4
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 faa8 	bl	8004f88 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}

08004a40 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fab1 	bl	8004fb2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004a50:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fab6 	bl	8004fcc <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004a60:	4604      	mov	r4, r0
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fabf 	bl	8004fe6 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff fa82 	bl	8003f78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
      }
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}

08004a84 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 faca 	bl	8005028 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
	return get();
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 facf 	bl	800504a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004aac:	4603      	mov	r3, r0
      }
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fac3 	bl	800504a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004ac4:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa72 	bl	8004fb2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
	return __p;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
      }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fab9 	bl	8005064 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8004af2:	4604      	mov	r4, r0
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f107 030c 	add.w	r3, r7, #12
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fa2b 	bl	8003f5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004b04:	f107 030c 	add.w	r3, r7, #12
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fac2 	bl	8005096 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}

08004b1a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004b1a:	b590      	push	{r4, r7, lr}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 facb 	bl	80050c0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004b2a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fad0 	bl	80050da <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fad9 	bl	80050f4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004b42:	4603      	mov	r3, r0
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff fa15 	bl	8003f78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
      }
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}

08004b5e <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fae4 	bl	8005136 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	return get();
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fae9 	bl	8005158 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b86:	4603      	mov	r3, r0
      }
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fadd 	bl	8005158 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b9e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fa8c 	bl	80050c0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
	return __p;
 8004bae:	68fb      	ldr	r3, [r7, #12]
      }
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
    return t;
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc fa49 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004be6:	4603      	mov	r3, r0
 8004be8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f7fc ff13 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4413      	add	r3, r2
                        : nullptr;
 8004c04:	e000      	b.n	8004c08 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c06:	2300      	movs	r3, #0
  }
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc fa29 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004c26:	4603      	mov	r3, r0
 8004c28:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c32:	89fb      	ldrh	r3, [r7, #14]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8004c38:	68b8      	ldr	r0, [r7, #8]
 8004c3a:	f7fc fef3 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4413      	add	r3, r2
                        : nullptr;
 8004c44:	e000      	b.n	8004c48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c46:	2300      	movs	r3, #0
  }
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fa87 	bl	8005172 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc f9fa 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004c84:	4603      	mov	r3, r0
 8004c86:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8004c96:	68b8      	ldr	r0, [r7, #8]
 8004c98:	f7fc fec4 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4413      	add	r3, r2
                        : nullptr;
 8004ca2:	e000      	b.n	8004ca6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ca4:	2300      	movs	r3, #0
  }
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	edd3 7a00 	vldr	s15, [r3]
 8004cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc0:	f000 fa64 	bl	800518c <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8004cc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc ff82 	bl	8001bf0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004cec:	4603      	mov	r3, r0
  }
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
  }
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2204      	movs	r2, #4
 8004d34:	2118      	movs	r1, #24
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
 8004d3a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	2018      	movs	r0, #24
 8004d42:	f7fe ffbe 	bl	8003cc2 <_ZnwjPv>
 8004d46:	4601      	mov	r1, r0
 8004d48:	460a      	mov	r2, r1
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	6053      	str	r3, [r2, #4]
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
 8004d54:	6113      	str	r3, [r2, #16]
 8004d56:	6153      	str	r3, [r2, #20]
 8004d58:	460b      	mov	r3, r1
  }
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004d62:	b590      	push	{r4, r7, lr}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004d6e:	68fc      	ldr	r4, [r7, #12]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa1a 	bl	80051aa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 f82a 	bl	8004dd6 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}

08004d8c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa12 	bl	80051c0 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa12 	bl	80051da <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004dd6:	b590      	push	{r4, r7, lr}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004de2:	68fc      	ldr	r4, [r7, #12]
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff92 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f107 0308 	add.w	r3, r7, #8
 8004df0:	4619      	mov	r1, r3
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f9fe 	bl	80051f4 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd90      	pop	{r4, r7, pc}

08004e02 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f80a 	bl	8004e24 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f9f9 	bl	8005226 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2104      	movs	r1, #4
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	2004      	movs	r0, #4
 8004e5c:	f7fe ff31 	bl	8003cc2 <_ZnwjPv>
 8004e60:	4601      	mov	r1, r0
 8004e62:	460a      	mov	r2, r1
 8004e64:	2300      	movs	r3, #0
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	460b      	mov	r3, r1
  }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004e7e:	68fc      	ldr	r4, [r7, #12]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f992 	bl	80051aa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f82a 	bl	8004ee6 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}

08004e9c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f9cb 	bl	8005242 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f9cb 	bl	800525c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004ee6:	b590      	push	{r4, r7, lr}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004ef2:	68fc      	ldr	r4, [r7, #12]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff0a 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004efa:	4602      	mov	r2, r0
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	4619      	mov	r1, r3
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 f9b7 	bl	8005276 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}

08004f12 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f80a 	bl	8004f34 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f9b2 	bl	80052a8 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8004f4e:	b590      	push	{r4, r7, lr}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	2124      	movs	r1, #36	; 0x24
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
 8004f64:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2024      	movs	r0, #36	; 0x24
 8004f6c:	f7fe fea9 	bl	8003cc2 <_ZnwjPv>
 8004f70:	4604      	mov	r4, r0
 8004f72:	4620      	mov	r0, r4
 8004f74:	2324      	movs	r3, #36	; 0x24
 8004f76:	461a      	mov	r2, r3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f00b ffd3 	bl	8010f24 <memset>
 8004f7e:	4623      	mov	r3, r4
  }
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004f94:	68fc      	ldr	r4, [r7, #12]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f907 	bl	80051aa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f82a 	bl	8004ffc <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd90      	pop	{r4, r7, pc}

08004fb2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f981 	bl	80052c4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f981 	bl	80052de <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005008:	68fc      	ldr	r4, [r7, #12]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fe7f 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005010:	4602      	mov	r2, r0
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	4619      	mov	r1, r3
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f96d 	bl	80052f8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}

08005028 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f80a 	bl	800504a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f968 	bl	800532a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800505a:	4603      	mov	r3, r0
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2204      	movs	r2, #4
 8005074:	2104      	movs	r1, #4
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
 800507a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4619      	mov	r1, r3
 8005080:	2004      	movs	r0, #4
 8005082:	f7fe fe1e 	bl	8003cc2 <_ZnwjPv>
 8005086:	4603      	mov	r3, r0
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
  }
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8005096:	b590      	push	{r4, r7, lr}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80050a2:	68fc      	ldr	r4, [r7, #12]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f880 	bl	80051aa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461a      	mov	r2, r3
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 f82a 	bl	800510a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f93b 	bl	8005346 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f93b 	bl	8005360 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800510a:	b590      	push	{r4, r7, lr}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005116:	68fc      	ldr	r4, [r7, #12]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fdf8 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800511e:	4602      	mov	r2, r0
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	4619      	mov	r1, r3
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f927 	bl	800537a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}

08005136 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f80a 	bl	8005158 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f922 	bl	80053ac <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005168:	4603      	mov	r3, r0
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	71fb      	strb	r3, [r7, #7]
    return t;
 800517c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	ee07 3a90 	vmov	s15, r3
}
 800519c:	eeb0 0a67 	vmov.f32	s0, s15
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f8fc 	bl	80053c8 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f8fb 	bl	80053e0 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80051f4:	b5b0      	push	{r4, r5, r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005200:	68fc      	ldr	r4, [r7, #12]
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f000 f8f9 	bl	80053fa <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005208:	4605      	mov	r5, r0
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fd7f 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4629      	mov	r1, r5
 8005216:	4620      	mov	r0, r4
 8005218:	f000 f8fa 	bl	8005410 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bdb0      	pop	{r4, r5, r7, pc}

08005226 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f90b 	bl	800544c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005236:	4603      	mov	r3, r0
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f90a 	bl	8005466 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005252:	4603      	mov	r3, r0
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f909 	bl	800547e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800526c:	4603      	mov	r3, r0
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005276:	b5b0      	push	{r4, r5, r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005282:	68fc      	ldr	r4, [r7, #12]
 8005284:	68b8      	ldr	r0, [r7, #8]
 8005286:	f000 f907 	bl	8005498 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800528a:	4605      	mov	r5, r0
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fd3e 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	4629      	mov	r1, r5
 8005298:	4620      	mov	r0, r4
 800529a:	f000 f908 	bl	80054ae <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}

080052a8 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f919 	bl	80054ea <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80052b8:	4603      	mov	r3, r0
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f918 	bl	8005504 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f917 	bl	800551c <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80052f8:	b5b0      	push	{r4, r5, r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005304:	68fc      	ldr	r4, [r7, #12]
 8005306:	68b8      	ldr	r0, [r7, #8]
 8005308:	f000 f915 	bl	8005536 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800530c:	4605      	mov	r5, r0
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fcfd 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005314:	4603      	mov	r3, r0
 8005316:	461a      	mov	r2, r3
 8005318:	4629      	mov	r1, r5
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f916 	bl	800554c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bdb0      	pop	{r4, r5, r7, pc}

0800532a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f927 	bl	8005588 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800533a:	4603      	mov	r3, r0
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f926 	bl	80055a2 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005356:	4603      	mov	r3, r0
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f925 	bl	80055ba <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005370:	4603      	mov	r3, r0
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800537a:	b5b0      	push	{r4, r5, r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005386:	68fc      	ldr	r4, [r7, #12]
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f000 f923 	bl	80055d4 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800538e:	4605      	mov	r5, r0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fcbc 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	4629      	mov	r1, r5
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f924 	bl	80055ea <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bdb0      	pop	{r4, r5, r7, pc}

080053ac <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f935 	bl	8005626 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80053bc:	4603      	mov	r3, r0
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f954 	bl	800567e <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f928 	bl	8005640 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800541c:	68fc      	ldr	r4, [r7, #12]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fc75 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005424:	4603      	mov	r3, r0
 8005426:	4619      	mov	r1, r3
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f915 	bl	8005658 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1d1c      	adds	r4, r3, #4
 8005432:	68b8      	ldr	r0, [r7, #8]
 8005434:	f7ff ffe1 	bl	80053fa <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005438:	4603      	mov	r3, r0
 800543a:	4619      	mov	r1, r3
 800543c:	4620      	mov	r0, r4
 800543e:	f000 f92c 	bl	800569a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}

0800544c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f930 	bl	80056bc <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800545c:	4603      	mov	r3, r0
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f930 	bl	80056d4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005474:	4603      	mov	r3, r0
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 f8d9 	bl	8005640 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800548e:	4603      	mov	r3, r0
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80054ae:	b590      	push	{r4, r7, lr}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80054ba:	68fc      	ldr	r4, [r7, #12]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fc26 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4619      	mov	r1, r3
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f8c6 	bl	8005658 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1d1c      	adds	r4, r3, #4
 80054d0:	68b8      	ldr	r0, [r7, #8]
 80054d2:	f7ff ffe1 	bl	8005498 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4619      	mov	r1, r3
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f908 	bl	80056f0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}

080054ea <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f90c 	bl	8005712 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f90c 	bl	800572a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005512:	4603      	mov	r3, r0
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f88a 	bl	8005640 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800552c:	4603      	mov	r3, r0
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005558:	68fc      	ldr	r4, [r7, #12]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff fbd7 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005560:	4603      	mov	r3, r0
 8005562:	4619      	mov	r1, r3
 8005564:	4620      	mov	r0, r4
 8005566:	f000 f877 	bl	8005658 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1d1c      	adds	r4, r3, #4
 800556e:	68b8      	ldr	r0, [r7, #8]
 8005570:	f7ff ffe1 	bl	8005536 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005574:	4603      	mov	r3, r0
 8005576:	4619      	mov	r1, r3
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f8e4 	bl	8005746 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f8e8 	bl	8005768 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005598:	4603      	mov	r3, r0
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8e8 	bl	8005780 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80055b0:	4603      	mov	r3, r0
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f83b 	bl	8005640 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80055ea:	b590      	push	{r4, r7, lr}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80055f6:	68fc      	ldr	r4, [r7, #12]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fb88 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80055fe:	4603      	mov	r3, r0
 8005600:	4619      	mov	r1, r3
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f828 	bl	8005658 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1d1c      	adds	r4, r3, #4
 800560c:	68b8      	ldr	r0, [r7, #8]
 800560e:	f7ff ffe1 	bl	80055d4 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005612:	4603      	mov	r3, r0
 8005614:	4619      	mov	r1, r3
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f8c0 	bl	800579c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}

08005626 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f8c4 	bl	80057be <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005636:	4603      	mov	r3, r0
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8c4 	bl	80057d6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800564e:	4603      	mov	r3, r0
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8005658:	b590      	push	{r4, r7, lr}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005662:	687c      	ldr	r4, [r7, #4]
 8005664:	6838      	ldr	r0, [r7, #0]
 8005666:	f7ff fb52 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800566a:	4603      	mov	r3, r0
 800566c:	4619      	mov	r1, r3
 800566e:	4620      	mov	r0, r4
 8005670:	f000 f8be 	bl	80057f0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bd90      	pop	{r4, r7, pc}

0800567e <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f8c1 	bl	8005812 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 8005690:	4603      	mov	r3, r0
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80056a4:	6838      	ldr	r0, [r7, #0]
 80056a6:	f7ff fea8 	bl	80053fa <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056aa:	4603      	mov	r3, r0
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8af 	bl	8005828 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f8af 	bl	8005844 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80056fa:	6838      	ldr	r0, [r7, #0]
 80056fc:	f7ff fecc 	bl	8005498 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005700:	4603      	mov	r3, r0
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f89d 	bl	800585a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005720:	4603      	mov	r3, r0
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f89d 	bl	8005876 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800573c:	4603      	mov	r3, r0
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005750:	6838      	ldr	r0, [r7, #0]
 8005752:	f7ff fef0 	bl	8005536 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005756:	4603      	mov	r3, r0
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f88b 	bl	800588c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005776:	4603      	mov	r3, r0
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f88b 	bl	80058a8 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8005792:	4603      	mov	r3, r0
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80057a6:	6838      	ldr	r0, [r7, #0]
 80057a8:	f7ff ff14 	bl	80055d4 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80057ac:	4603      	mov	r3, r0
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f879 	bl	80058be <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f87a 	bl	80058da <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80057fa:	6838      	ldr	r0, [r7, #0]
 80057fc:	f7ff fa87 	bl	8004d0e <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f85b 	bl	80058f0 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800583a:	4603      	mov	r3, r0
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f84d 	bl	8005906 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 800586c:	4603      	mov	r3, r0
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f83f 	bl	800591c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800589e:	4603      	mov	r3, r0
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f831 	bl	8005932 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return names;
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800594e:	4618      	mov	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	08016f88 	.word	0x08016f88

0800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 8005966:	2300      	movs	r3, #0
 8005968:	72bb      	strb	r3, [r7, #10]
 800596a:	2391      	movs	r3, #145	; 0x91
 800596c:	72fb      	strb	r3, [r7, #11]
 800596e:	f107 020b 	add.w	r2, r7, #11
 8005972:	f107 010a 	add.w	r1, r7, #10
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f8a9 	bl	8005ad0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8005986:	e008      	b.n	800599a <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800598c:	f7ff ffdc 	bl	8005948 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	681b      	ldr	r3, [r3, #0]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08013058 	.word	0x08013058

080059a8 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2106      	movs	r1, #6
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fee4 	bl	8004782 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80059ba:	4603      	mov	r3, r0
  }
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	2108      	movs	r1, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fe87 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80059d8:	4603      	mov	r3, r0
  }
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80059f2:	2300      	movs	r3, #0
 80059f4:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f00a ff34 	bl	801086a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8005a02:	4603      	mov	r3, r0
 8005a04:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ffdc 	bl	80059c4 <_ZNK6tflite12OperatorCode7versionEv>
 8005a0c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 8005a0e:	7fbb      	ldrb	r3, [r7, #30]
 8005a10:	2b91      	cmp	r3, #145	; 0x91
 8005a12:	d908      	bls.n	8005a26 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 8005a14:	7fbb      	ldrb	r3, [r7, #30]
 8005a16:	461a      	mov	r2, r3
 8005a18:	492a      	ldr	r1, [pc, #168]	; (8005ac4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe f91e 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005a20:	2301      	movs	r3, #1
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e048      	b.n	8005ab8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005a26:	7fbb      	ldrb	r3, [r7, #30]
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d01a      	beq.n	8005a62 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	7fb9      	ldrb	r1, [r7, #30]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	68b8      	ldr	r0, [r7, #8]
 8005a38:	4798      	blx	r3
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d137      	bne.n	8005ab8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8005a48:	7fbb      	ldrb	r3, [r7, #30]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff86 	bl	800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	491c      	ldr	r1, [pc, #112]	; (8005ac8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fe f900 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e02a      	b.n	8005ab8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff ffa0 	bl	80059a8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf0c      	ite	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	2300      	movne	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d006      	beq.n	8005a86 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8005a78:	4914      	ldr	r1, [pc, #80]	; (8005acc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe f8ee 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8005a80:	2301      	movs	r3, #1
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e018      	b.n	8005ab8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff ff8e 	bl	80059a8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe f923 	bl	8003cda <_ZNK11flatbuffers6String5c_strEv>
 8005a94:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	4798      	blx	r3
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	0801305c 	.word	0x0801305c
 8005ac8:	080130b0 	.word	0x080130b0
 8005acc:	08013154 	.word	0x08013154

08005ad0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d305      	bcc.n	8005af4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d201      	bcs.n	8005af8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b10:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b14:	f00b f822 	bl	8010b5c <roundf>
 8005b18:	eef0 7a40 	vmov.f32	s15, s0
 8005b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005b2e:	4618      	mov	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005b38:	b5b0      	push	{r4, r5, r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b52:	f7fa ffcb 	bl	8000aec <__aeabi_dcmpeq>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
    return;
 8005b68:	e06b      	b.n	8005c42 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005b6a:	6838      	ldr	r0, [r7, #0]
 8005b6c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b70:	f00a ff76 	bl	8010a60 <frexp>
 8005b74:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005b7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b82:	f7fa fd4b 	bl	800061c <__aeabi_dmul>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	ec43 2b17 	vmov	d7, r2, r3
 8005b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b92:	eef0 0a67 	vmov.f32	s1, s15
 8005b96:	f000 f978 	bl	8005e8a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005b9a:	ec53 2b10 	vmov	r2, r3, d0
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f7fb f865 	bl	8000c70 <__aeabi_d2lz>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	4290      	cmp	r0, r2
 8005bbc:	eb71 0303 	sbcs.w	r3, r1, r3
 8005bc0:	da01      	bge.n	8005bc6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8005bc2:	f00b f910 	bl	8010de6 <abort>
  if (q_fixed == (1ll << 31)) {
 8005bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf08      	it	eq
 8005bce:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8005bd2:	d117      	bne.n	8005c04 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8005bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd8:	0fd9      	lsrs	r1, r3, #31
 8005bda:	4608      	mov	r0, r1
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	1884      	adds	r4, r0, r2
 8005be2:	eb41 0503 	adc.w	r5, r1, r3
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	0862      	lsrs	r2, r4, #1
 8005bf0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005bf4:	106b      	asrs	r3, r5, #1
 8005bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005c04:	f7ff ff8f 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	4290      	cmp	r0, r2
 8005c16:	eb71 0303 	sbcs.w	r3, r1, r3
 8005c1a:	da01      	bge.n	8005c20 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8005c1c:	f00b f8e3 	bl	8010de6 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f113 0f1f 	cmn.w	r3, #31
 8005c28:	da08      	bge.n	8005c3c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdb0      	pop	{r4, r5, r7, pc}
 8005c48:	41e00000 	.word	0x41e00000

08005c4c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	ed87 0b02 	vstr	d0, [r7, #8]
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8005c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c64:	f7fa ff6a 	bl	8000b3c <__aeabi_dcmpgt>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8005c6e:	f00b f8ba 	bl	8010de6 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c7a:	f7ff ff5d 	bl	8005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da01      	bge.n	8005c8a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8005c86:	f00b f8ae 	bl	8010de6 <abort>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	3ff00000 	.word	0x3ff00000

08005c98 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa ff27 	bl	8000b00 <__aeabi_dcmplt>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	e000      	b.n	8005cbe <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8005cbc:	687b      	ldr	r3, [r7, #4]
    }
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8005cc8:	b5b0      	push	{r4, r5, r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	ed87 0b06 	vstr	d0, [r7, #24]
 8005cd2:	ed87 1b04 	vstr	d1, [r7, #16]
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8005cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ce0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ce4:	f7fa fc9a 	bl	800061c <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	461d      	mov	r5, r3
 8005cf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fa fc24 	bl	8000548 <__aeabi_i2d>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4620      	mov	r0, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	f7fa fc88 	bl	800061c <__aeabi_dmul>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005d14:	a30e      	add	r3, pc, #56	; (adr r3, 8005d50 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d22:	f107 0320 	add.w	r3, r7, #32
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ffb5 	bl	8005c98 <_ZSt3minIdERKT_S2_S2_>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	68b8      	ldr	r0, [r7, #8]
 8005d3c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005d40:	f7ff ff84 	bl	8005c4c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8005d44:	bf00      	nop
 8005d46:	3738      	adds	r7, #56	; 0x38
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4c:	f3af 8000 	nop.w
 8005d50:	ffc00000 	.word	0xffc00000
 8005d54:	41dfffff 	.word	0x41dfffff

08005d58 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8005d66:	2201      	movs	r2, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fa fbe9 	bl	8000548 <__aeabi_i2d>
 8005d76:	4682      	mov	sl, r0
 8005d78:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad1      	subs	r1, r2, r3
 8005d80:	f04f 0201 	mov.w	r2, #1
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f1a1 0620 	sub.w	r6, r1, #32
 8005d8c:	f1c1 0020 	rsb	r0, r1, #32
 8005d90:	fa03 f901 	lsl.w	r9, r3, r1
 8005d94:	fa02 f606 	lsl.w	r6, r2, r6
 8005d98:	ea49 0906 	orr.w	r9, r9, r6
 8005d9c:	fa22 f000 	lsr.w	r0, r2, r0
 8005da0:	ea49 0900 	orr.w	r9, r9, r0
 8005da4:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fc08 	bl	80005c0 <__aeabi_l2d>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4650      	mov	r0, sl
 8005db6:	4659      	mov	r1, fp
 8005db8:	f7fa fc30 	bl	800061c <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4690      	mov	r8, r2
 8005dc2:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8005dc4:	f04f 0201 	mov.w	r2, #1
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	f1a1 0620 	sub.w	r6, r1, #32
 8005dd2:	f1c1 0020 	rsb	r0, r1, #32
 8005dd6:	fa03 f501 	lsl.w	r5, r3, r1
 8005dda:	fa02 f606 	lsl.w	r6, r2, r6
 8005dde:	4335      	orrs	r5, r6
 8005de0:	fa22 f000 	lsr.w	r0, r2, r0
 8005de4:	4305      	orrs	r5, r0
 8005de6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa fbe7 	bl	80005c0 <__aeabi_l2d>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fd39 	bl	8000870 <__aeabi_ddiv>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8005e06:	ed97 0b04 	vldr	d0, [r7, #16]
 8005e0a:	f00a fda9 	bl	8010960 <floor>
 8005e0e:	ec53 2b10 	vmov	r2, r3, d0
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa fe9b 	bl	8000b50 <__aeabi_d2iz>
 8005e1a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e26 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	ed93 7a00 	vldr	s14, [r3]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	edd3 7a00 	vldr	s15, [r3]
 8005e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	d501      	bpl.n	8005e4a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	e000      	b.n	8005e4c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005e4a:	687b      	ldr	r3, [r7, #4]
    }
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	ed93 7a00 	vldr	s14, [r3]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	d501      	bpl.n	8005e7c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	e000      	b.n	8005e7e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005e7c:	687b      	ldr	r3, [r7, #4]
    }
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	ed87 0b00 	vstr	d0, [r7]
 8005e94:	ed97 0b00 	vldr	d0, [r7]
 8005e98:	f00a fe1a 	bl	8010ad0 <round>
 8005e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8005ea0:	eef0 7a60 	vmov.f32	s15, s1
 8005ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ea8:	eef0 0a67 	vmov.f32	s1, s15
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ebc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ec0:	f7ff fe21 	bl	8005b06 <_ZSt5roundf>
 8005ec4:	eef0 7a40 	vmov.f32	s15, s0
 8005ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005ed2:	b480      	push	{r7}
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005eda:	4618      	mov	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	237f      	movs	r3, #127	; 0x7f
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	23ff      	movs	r3, #255	; 0xff
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	ffff8000 	.word	0xffff8000

08005f28 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8005f3a:	b480      	push	{r7}
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f42:	4618      	mov	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	ed87 0b00 	vstr	d0, [r7]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f78:	ec43 2b17 	vmov	d7, r2, r3
 8005f7c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f80:	eef0 0a67 	vmov.f32	s1, s15
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	019b      	lsls	r3, r3, #6
 8005fa8:	4413      	add	r3, r2
 8005faa:	e006      	b.n	8005fba <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	bf00      	nop
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db0f      	blt.n	8005ff6 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	da0b      	bge.n	8005ff6 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff0:	d001      	beq.n	8005ff6 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e001      	b.n	8005ffa <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8006016:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff ffce 	bl	8005fc2 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006026:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da01      	bge.n	8006032 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800602e:	2300      	movs	r3, #0
 8006030:	e005      	b.n	800603e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff ffaa 	bl	8005f8e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800603a:	4603      	mov	r3, r0
 800603c:	bf00      	nop
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ffd5 	bl	8006006 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800605c:	4603      	mov	r3, r0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8006076:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff9e 	bl	8005fc2 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006086:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da01      	bge.n	8006092 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800608e:	2300      	movs	r3, #0
 8006090:	e005      	b.n	800609e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006092:	6979      	ldr	r1, [r7, #20]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff ff7a 	bl	8005f8e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800609a:	4603      	mov	r3, r0
 800609c:	bf00      	nop
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ffc5 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80060bc:	4603      	mov	r3, r0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b09c      	sub	sp, #112	; 0x70
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d013      	beq.n	8006108 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	695c      	ldr	r4, [r3, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ea:	461a      	mov	r2, r3
 80060ec:	2301      	movs	r3, #1
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	4b98      	ldr	r3, [pc, #608]	; (8006354 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	4b98      	ldr	r3, [pc, #608]	; (8006358 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	23da      	movs	r3, #218	; 0xda
 80060fc:	4a97      	ldr	r2, [pc, #604]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80060fe:	4998      	ldr	r1, [pc, #608]	; (8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	47a0      	blx	r4
 8006104:	2301      	movs	r3, #1
 8006106:	e173      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800610e:	2b01      	cmp	r3, #1
 8006110:	d013      	beq.n	800613a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	695c      	ldr	r4, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800611c:	461a      	mov	r2, r3
 800611e:	2301      	movs	r3, #1
 8006120:	9303      	str	r3, [sp, #12]
 8006122:	9202      	str	r2, [sp, #8]
 8006124:	4b8b      	ldr	r3, [pc, #556]	; (8006354 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	4b8e      	ldr	r3, [pc, #568]	; (8006364 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	23dc      	movs	r3, #220	; 0xdc
 800612e:	4a8b      	ldr	r2, [pc, #556]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006130:	498b      	ldr	r1, [pc, #556]	; (8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	47a0      	blx	r4
 8006136:	2301      	movs	r3, #1
 8006138:	e15a      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8006140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	695c      	ldr	r4, [r3, #20]
 800614a:	4b87      	ldr	r3, [pc, #540]	; (8006368 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	23e7      	movs	r3, #231	; 0xe7
 8006150:	4a82      	ldr	r2, [pc, #520]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006152:	4986      	ldr	r1, [pc, #536]	; (800636c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	47a0      	blx	r4
 8006158:	2301      	movs	r3, #1
 800615a:	e149      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800615c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	695c      	ldr	r4, [r3, #20]
 8006168:	4b81      	ldr	r3, [pc, #516]	; (8006370 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	23e8      	movs	r3, #232	; 0xe8
 800616e:	4a7b      	ldr	r2, [pc, #492]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006170:	497e      	ldr	r1, [pc, #504]	; (800636c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	47a0      	blx	r4
 8006176:	2301      	movs	r3, #1
 8006178:	e13a      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800617a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	bfcc      	ite	gt
 8006184:	2301      	movgt	r3, #1
 8006186:	2300      	movle	r3, #0
 8006188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800618c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006190:	2b00      	cmp	r3, #0
 8006192:	d067      	beq.n	8006264 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b09      	cmp	r3, #9
 800619a:	d00e      	beq.n	80061ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b07      	cmp	r3, #7
 80061a2:	d00a      	beq.n	80061ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	695c      	ldr	r4, [r3, #20]
 80061a8:	4b72      	ldr	r3, [pc, #456]	; (8006374 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	23ec      	movs	r3, #236	; 0xec
 80061ae:	4a6b      	ldr	r2, [pc, #428]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061b0:	496e      	ldr	r1, [pc, #440]	; (800636c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	47a0      	blx	r4
 80061b6:	2301      	movs	r3, #1
 80061b8:	e11a      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d012      	beq.n	80061e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x120>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	695c      	ldr	r4, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	2309      	movs	r3, #9
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	4b69      	ldr	r3, [pc, #420]	; (8006378 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	4b69      	ldr	r3, [pc, #420]	; (800637c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	23ee      	movs	r3, #238	; 0xee
 80061dc:	4a5f      	ldr	r2, [pc, #380]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061de:	4960      	ldr	r1, [pc, #384]	; (8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	47a0      	blx	r4
 80061e4:	2301      	movs	r3, #1
 80061e6:	e103      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80061e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d013      	beq.n	800621e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x156>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	695c      	ldr	r4, [r3, #20]
 80061fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006204:	9203      	str	r2, [sp, #12]
 8006206:	9302      	str	r3, [sp, #8]
 8006208:	4b5d      	ldr	r3, [pc, #372]	; (8006380 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	23ef      	movs	r3, #239	; 0xef
 8006212:	4a52      	ldr	r2, [pc, #328]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006214:	4952      	ldr	r1, [pc, #328]	; (8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	47a0      	blx	r4
 800621a:	2301      	movs	r3, #1
 800621c:	e0e8      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006230:	429a      	cmp	r2, r3
 8006232:	d017      	beq.n	8006264 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	695c      	ldr	r4, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	4b4e      	ldr	r3, [pc, #312]	; (8006388 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c0>)
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	23f0      	movs	r3, #240	; 0xf0
 8006258:	4a40      	ldr	r2, [pc, #256]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800625a:	4941      	ldr	r1, [pc, #260]	; (8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	47a0      	blx	r4
 8006260:	2301      	movs	r3, #1
 8006262:	e0c5      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800626a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 8006270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3304      	adds	r3, #4
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 8006278:	2300      	movs	r3, #0
 800627a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800627e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006282:	429a      	cmp	r2, r3
 8006284:	da47      	bge.n	8006316 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8006286:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d2>
 800628e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006294:	4413      	add	r3, r2
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	e001      	b.n	800629e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
 800629a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 80062a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80062a2:	f7fa f963 	bl	800056c <__aeabi_f2d>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 80062ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80062b0:	f7fa f95c 	bl	800056c <__aeabi_f2d>
 80062b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062b8:	f7fa f9b0 	bl	800061c <__aeabi_dmul>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4614      	mov	r4, r2
 80062c2:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 80062c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80062c6:	f7fa f951 	bl	800056c <__aeabi_f2d>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa facd 	bl	8000870 <__aeabi_ddiv>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80062de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80062e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80062ee:	f7ff fc23 	bl	8005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80062f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80062fa:	4413      	add	r3, r2
 80062fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fe:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8006300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006308:	4413      	add	r3, r2
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	3301      	adds	r3, #1
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	e7b2      	b.n	800627c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d146      	bne.n	80063ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f85c 	bl	80063f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01e      	beq.n	800638c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c4>
 800634e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006352:	e04d      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
 8006354:	08013248 	.word	0x08013248
 8006358:	08013264 	.word	0x08013264
 800635c:	080131f0 	.word	0x080131f0
 8006360:	0801322c 	.word	0x0801322c
 8006364:	08013280 	.word	0x08013280
 8006368:	080132b4 	.word	0x080132b4
 800636c:	0801329c 	.word	0x0801329c
 8006370:	080132c8 	.word	0x080132c8
 8006374:	080132e4 	.word	0x080132e4
 8006378:	08013320 	.word	0x08013320
 800637c:	0801332c 	.word	0x0801332c
 8006380:	0801333c 	.word	0x0801333c
 8006384:	0801334c 	.word	0x0801334c
 8006388:	08013370 	.word	0x08013370
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800638c:	ed97 7b06 	vldr	d7, [r7, #24]
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	4619      	mov	r1, r3
 8006396:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006398:	eeb0 0a47 	vmov.f32	s0, s14
 800639c:	eef0 0a67 	vmov.f32	s1, s15
 80063a0:	f7ff fbca 	bl	8005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	425a      	negs	r2, r3
 80063a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063aa:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	d007      	beq.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d003      	beq.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
      input->type == kTfLiteInt16) {
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80063c0:	2b07      	cmp	r3, #7
 80063c2:	d114      	bne.n	80063ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80063c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c6:	7819      	ldrb	r1, [r3, #0]
 80063c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa01 	bl	80067dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80063e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
 80063e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063ec:	e000      	b.n	80063f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3760      	adds	r7, #96	; 0x60
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bdb0      	pop	{r4, r5, r7, pc}

080063f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80063f8:	b5b0      	push	{r4, r5, r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4618      	mov	r0, r3
 800640c:	f7fa f8ae 	bl	800056c <__aeabi_f2d>
 8006410:	4604      	mov	r4, r0
 8006412:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fa f8a7 	bl	800056c <__aeabi_f2d>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7fa f8f9 	bl	800061c <__aeabi_dmul>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d04b      	beq.n	80064d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4618      	mov	r0, r3
 800643e:	f7fa f895 	bl	800056c <__aeabi_f2d>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800644a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800644e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006452:	f7f9 ff2b 	bl	80002ac <__aeabi_dsub>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	ec43 2b17 	vmov	d7, r2, r3
 800645e:	eeb0 0a47 	vmov.f32	s0, s14
 8006462:	eef0 0a67 	vmov.f32	s1, s15
 8006466:	f7ff fd7e 	bl	8005f66 <_ZSt3absd>
 800646a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800646e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fa f87a 	bl	800056c <__aeabi_f2d>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006488:	f7fa f9f2 	bl	8000870 <__aeabi_ddiv>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	2301      	movs	r3, #1
 8006496:	461c      	mov	r4, r3
 8006498:	a318      	add	r3, pc, #96	; (adr r3, 80064fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7fa fb39 	bl	8000b14 <__aeabi_dcmple>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80064a8:	2300      	movs	r3, #0
 80064aa:	461c      	mov	r4, r3
 80064ac:	b2e3      	uxtb	r3, r4
 80064ae:	f083 0301 	eor.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	695c      	ldr	r4, [r3, #20]
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80064c4:	4a0b      	ldr	r2, [pc, #44]	; (80064f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80064c6:	490c      	ldr	r1, [pc, #48]	; (80064f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	47a0      	blx	r4
 80064cc:	2301      	movs	r3, #1
 80064ce:	e009      	b.n	80064e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80064d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f812 	bl	8006504 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80064e0:	4603      	mov	r3, r0
                                          multiplier);
 80064e2:	bf00      	nop
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3730      	adds	r7, #48	; 0x30
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bdb0      	pop	{r4, r5, r7, pc}
 80064ec:	f3af 8000 	nop.w
 80064f0:	080133b0 	.word	0x080133b0
 80064f4:	080131f0 	.word	0x080131f0
 80064f8:	0801329c 	.word	0x0801329c
 80064fc:	47ae147b 	.word	0x47ae147b
 8006500:	3f947ae1 	.word	0x3f947ae1

08006504 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	ed93 7a03 	vldr	s14, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	edd3 7a03 	vldr	s15, [r3, #12]
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8006522:	ee17 0a90 	vmov	r0, s15
 8006526:	f7fa f821 	bl	800056c <__aeabi_f2d>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006532:	2301      	movs	r3, #1
 8006534:	461c      	mov	r4, r3
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006542:	f7fa faf1 	bl	8000b28 <__aeabi_dcmpge>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800654c:	2300      	movs	r3, #0
 800654e:	461c      	mov	r4, r3
 8006550:	b2e3      	uxtb	r3, r4
 8006552:	f083 0301 	eor.w	r3, r3, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	695c      	ldr	r4, [r3, #20]
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f240 134b 	movw	r3, #331	; 0x14b
 8006568:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800656a:	490f      	ldr	r1, [pc, #60]	; (80065a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	47a0      	blx	r4
 8006570:	2301      	movs	r3, #1
 8006572:	e010      	b.n	8006596 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4618      	mov	r0, r3
 800657a:	f7f9 fff7 	bl	800056c <__aeabi_f2d>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006586:	f7fa f973 	bl	8000870 <__aeabi_ddiv>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006590:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	080133d4 	.word	0x080133d4
 80065a4:	080131f0 	.word	0x080131f0
 80065a8:	0801329c 	.word	0x0801329c

080065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 80065ac:	b590      	push	{r4, r7, lr}
 80065ae:	b08b      	sub	sp, #44	; 0x2c
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6178      	str	r0, [r7, #20]
 80065b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80065b8:	60f9      	str	r1, [r7, #12]
 80065ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 80065c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80065c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80065c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065cc:	eeb0 0a66 	vmov.f32	s0, s13
 80065d0:	f7ff fc6f 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80065d4:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80065d8:	f7ff fcaf 	bl	8005f3a <_ZNSt14numeric_limitsIlE3minEv>
 80065dc:	ee07 0a90 	vmov	s15, r0
 80065e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80065e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	db0e      	blt.n	8006610 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80065f2:	f7ff fa98 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 80065f6:	ee07 0a90 	vmov	s15, r0
 80065fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80065fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8006602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	d801      	bhi.n	8006610 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8006610:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006612:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8006614:	7efb      	ldrb	r3, [r7, #27]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	695c      	ldr	r4, [r3, #20]
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f240 1359 	movw	r3, #345	; 0x159
 800662c:	4a0b      	ldr	r2, [pc, #44]	; (800665c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800662e:	490c      	ldr	r1, [pc, #48]	; (8006660 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8006630:	6978      	ldr	r0, [r7, #20]
 8006632:	47a0      	blx	r4
 8006634:	2301      	movs	r3, #1
 8006636:	e00a      	b.n	800664e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8006638:	edd7 7a07 	vldr	s15, [r7, #28]
 800663c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006640:	ee17 2a90 	vmov	r2, s15
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	441a      	add	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3724      	adds	r7, #36	; 0x24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd90      	pop	{r4, r7, pc}
 8006656:	bf00      	nop
 8006658:	080133f0 	.word	0x080133f0
 800665c:	080131f0 	.word	0x080131f0
 8006660:	0801329c 	.word	0x0801329c

08006664 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	460b      	mov	r3, r1
 8006672:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d120      	bne.n	80066c8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8006686:	f107 0314 	add.w	r3, r7, #20
 800668a:	461a      	mov	r2, r3
 800668c:	eddf 0a52 	vldr	s1, [pc, #328]	; 80067d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006690:	6a39      	ldr	r1, [r7, #32]
 8006692:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff ff88 	bl	80065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800669c:	4603      	mov	r3, r0
 800669e:	76fb      	strb	r3, [r7, #27]
 80066a0:	7efb      	ldrb	r3, [r7, #27]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 80066a6:	7efb      	ldrb	r3, [r7, #27]
 80066a8:	e091      	b.n	80067ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80066aa:	f107 0214 	add.w	r2, r7, #20
 80066ae:	1d3b      	adds	r3, r7, #4
 80066b0:	4611      	mov	r1, r2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f8fe 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 80066b8:	4603      	mov	r3, r0
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e081      	b.n	80067cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d13a      	bne.n	8006744 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 80066ce:	f107 0314 	add.w	r3, r7, #20
 80066d2:	461a      	mov	r2, r3
 80066d4:	eddf 0a40 	vldr	s1, [pc, #256]	; 80067d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 80066d8:	6a39      	ldr	r1, [r7, #32]
 80066da:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff ff64 	bl	80065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80066e4:	4603      	mov	r3, r0
 80066e6:	777b      	strb	r3, [r7, #29]
 80066e8:	7f7b      	ldrb	r3, [r7, #29]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 80066ee:	7f7b      	ldrb	r3, [r7, #29]
 80066f0:	e06d      	b.n	80067ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80066f2:	f107 0214 	add.w	r2, r7, #20
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f8da 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 8006700:	4603      	mov	r3, r0
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	461a      	mov	r2, r3
 800670e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8006712:	6a39      	ldr	r1, [r7, #32]
 8006714:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ff47 	bl	80065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800671e:	4603      	mov	r3, r0
 8006720:	773b      	strb	r3, [r7, #28]
 8006722:	7f3b      	ldrb	r3, [r7, #28]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8006728:	7f3b      	ldrb	r3, [r7, #28]
 800672a:	e050      	b.n	80067ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800672c:	f107 0214 	add.w	r2, r7, #20
 8006730:	463b      	mov	r3, r7
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f8a9 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800673a:	4603      	mov	r3, r0
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e043      	b.n	80067cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d13a      	bne.n	80067c0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	461a      	mov	r2, r3
 8006750:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff ff26 	bl	80065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006760:	4603      	mov	r3, r0
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800676a:	7ffb      	ldrb	r3, [r7, #31]
 800676c:	e02f      	b.n	80067ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800676e:	f107 0214 	add.w	r2, r7, #20
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f89c 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800677c:	4603      	mov	r3, r0
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006784:	f107 0314 	add.w	r3, r7, #20
 8006788:	461a      	mov	r2, r3
 800678a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800678e:	6a39      	ldr	r1, [r7, #32]
 8006790:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff ff09 	bl	80065ac <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800679a:	4603      	mov	r3, r0
 800679c:	77bb      	strb	r3, [r7, #30]
 800679e:	7fbb      	ldrb	r3, [r7, #30]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 80067a4:	7fbb      	ldrb	r3, [r7, #30]
 80067a6:	e012      	b.n	80067ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80067a8:	f107 0214 	add.w	r2, r7, #20
 80067ac:	463b      	mov	r3, r7
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f86b 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 80067b6:	4603      	mov	r3, r0
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e005      	b.n	80067cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3728      	adds	r7, #40	; 0x28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	00000000 	.word	0x00000000

080067dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b08b      	sub	sp, #44	; 0x2c
 80067e0:	af04      	add	r7, sp, #16
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	460b      	mov	r3, r1
 80067ea:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d108      	bne.n	800680e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80067fc:	f7ff fb7a 	bl	8005ef4 <_ZNSt14numeric_limitsIhE3minEv>
 8006800:	4603      	mov	r3, r0
 8006802:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8006804:	f7ff fb7e 	bl	8005f04 <_ZNSt14numeric_limitsIhE3maxEv>
 8006808:	4603      	mov	r3, r0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e025      	b.n	800685a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b09      	cmp	r3, #9
 8006814:	d108      	bne.n	8006828 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8006816:	f7ff fb5c 	bl	8005ed2 <_ZNSt14numeric_limitsIaE3minEv>
 800681a:	4603      	mov	r3, r0
 800681c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800681e:	f7ff fb61 	bl	8005ee4 <_ZNSt14numeric_limitsIaE3maxEv>
 8006822:	4603      	mov	r3, r0
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	e018      	b.n	800685a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b07      	cmp	r3, #7
 800682e:	d108      	bne.n	8006842 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006830:	f7ff fb70 	bl	8005f14 <_ZNSt14numeric_limitsIsE3minEv>
 8006834:	4603      	mov	r3, r0
 8006836:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006838:	f7ff fb76 	bl	8005f28 <_ZNSt14numeric_limitsIsE3maxEv>
 800683c:	4603      	mov	r3, r0
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	e00b      	b.n	800685a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	695c      	ldr	r4, [r3, #20]
 8006846:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	f240 1391 	movw	r3, #401	; 0x191
 800684e:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8006850:	490d      	ldr	r1, [pc, #52]	; (8006888 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	47a0      	blx	r4
 8006856:	2301      	movs	r3, #1
 8006858:	e00d      	b.n	8006876 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800685a:	7af9      	ldrb	r1, [r7, #11]
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	9302      	str	r3, [sp, #8]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fef9 	bl	8006664 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8006872:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8006874:	bf00      	nop
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	08013418 	.word	0x08013418
 8006884:	080131f0 	.word	0x080131f0
 8006888:	0801329c 	.word	0x0801329c

0800688c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	da01      	bge.n	80068a6 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	e000      	b.n	80068a8 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 80068a6:	687b      	ldr	r3, [r7, #4]
    }
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	da01      	bge.n	80068ce <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	e000      	b.n	80068d0 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 80068ce:	687b      	ldr	r3, [r7, #4]
    }
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	210a      	movs	r1, #10
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 f847 	bl	800697c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80068ee:	4603      	mov	r3, r0
  }
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2108      	movs	r1, #8
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f849 	bl	800699c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800690a:	4603      	mov	r3, r0
  }
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffdd 	bl	80068dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff ffd2 	bl	80068dc <_ZNK6tflite8SubGraph9operatorsEv>
 8006938:	4603      	mov	r3, r0
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f83e 	bl	80069bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006940:	4603      	mov	r3, r0
 8006942:	e000      	b.n	8006946 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 8006944:	2300      	movs	r3, #0
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ffcd 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800695e:	4602      	mov	r2, r0
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f000 f845 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800696a:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff ffd1 	bl	8006914 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006972:	4603      	mov	r3, r0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f865 	bl	8006a5c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8006992:	4603      	mov	r3, r0
  }
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80069a8:	887b      	ldrh	r3, [r7, #2]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f875 	bl	8006a9c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80069b2:	4603      	mov	r3, r0
  }
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fb f812 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fb f804 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80069ea:	4603      	mov	r3, r0
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff ffea 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006a04:	4602      	mov	r2, r0
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d306      	bcc.n	8006a1a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8006a0e:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8006a10:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006a14:	4809      	ldr	r0, [pc, #36]	; (8006a3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8006a16:	f00a f9ed 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f872 	bl	8006b04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8006a20:	4603      	mov	r3, r0
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f859 	bl	8006adc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8006a2a:	4603      	mov	r3, r0
  }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	080134d0 	.word	0x080134d0
 8006a38:	080134dc 	.word	0x080134dc
 8006a3c:	080135d8 	.word	0x080135d8

08006a40 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8006a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7fa fb03 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006a72:	4603      	mov	r3, r0
 8006a74:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a7e:	89fb      	ldrh	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8006a84:	68b8      	ldr	r0, [r7, #8]
 8006a86:	f7fa ffcd 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4413      	add	r3, r2
                        : nullptr;
 8006a90:	e000      	b.n	8006a94 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a92:	2300      	movs	r3, #0
  }
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fa fae3 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	89fb      	ldrh	r3, [r7, #14]
 8006aba:	4413      	add	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006abe:	89fb      	ldrh	r3, [r7, #14]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f7fa ffad 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006aca:	4602      	mov	r2, r0
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4413      	add	r3, r2
                        : nullptr;
 8006ad0:	e000      	b.n	8006ad4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006ad2:	2300      	movs	r3, #0
  }
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fa ff97 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006af6:	4602      	mov	r2, r0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4413      	add	r3, r2
  }
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
  }
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2104      	movs	r1, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fd fdfa 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006b2e:	4603      	mov	r3, r0
  }
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	2106      	movs	r1, #6
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fdfb 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	b2db      	uxtb	r3, r3
  }
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f866 	bl	8006c5c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	dd08      	ble.n	8006bbc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f009 fe91 	bl	80108de <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	dd02      	ble.n	8006bf4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	e001      	b.n	8006bf8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
  }
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	dd08      	ble.n	8006c28 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f009 fe5b 	bl	80108de <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b05      	cmp	r3, #5
 8006c32:	dd0f      	ble.n	8006c54 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d201      	bcs.n	8006c42 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	e001      	b.n	8006c46 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c46:	4618      	mov	r0, r3
 8006c48:	f009 fe6b 	bl	8010922 <_Znaj>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff ffca 	bl	8006c04 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff ffb4 	bl	8006bde <_ZN6tflite12RuntimeShape8DimsDataEv>
 8006c76:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	6978      	ldr	r0, [r7, #20]
 8006c82:	f00a f927 	bl	8010ed4 <memcpy>
  }
 8006c86:	bf00      	nop
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	1e5a      	subs	r2, r3, #1
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8006cb0:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8006cdc:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006cde:	68bb      	ldr	r3, [r7, #8]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	2b0f      	cmp	r3, #15
 8006d2e:	d857      	bhi.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d81 	.word	0x08006d81
 8006d3c:	08006d99 	.word	0x08006d99
 8006d40:	08006da9 	.word	0x08006da9
 8006d44:	08006db9 	.word	0x08006db9
 8006d48:	08006de1 	.word	0x08006de1
 8006d4c:	08006dc9 	.word	0x08006dc9
 8006d50:	08006d91 	.word	0x08006d91
 8006d54:	08006dd1 	.word	0x08006dd1
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006d79 	.word	0x08006d79
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006dd9 	.word	0x08006dd9
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006de1 	.word	0x08006de1
 8006d70:	08006de1 	.word	0x08006de1
 8006d74:	08006da1 	.word	0x08006da1
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	601a      	str	r2, [r3, #0]
      break;
 8006d7e:	e031      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2204      	movs	r2, #4
 8006d84:	601a      	str	r2, [r3, #0]
      break;
 8006d86:	e02d      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	601a      	str	r2, [r3, #0]
      break;
 8006d8e:	e029      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2202      	movs	r2, #2
 8006d94:	601a      	str	r2, [r3, #0]
      break;
 8006d96:	e025      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	601a      	str	r2, [r3, #0]
      break;
 8006d9e:	e021      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2204      	movs	r2, #4
 8006da4:	601a      	str	r2, [r3, #0]
      break;
 8006da6:	e01d      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	601a      	str	r2, [r3, #0]
      break;
 8006dae:	e019      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
      break;
 8006db6:	e015      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2208      	movs	r2, #8
 8006dbc:	601a      	str	r2, [r3, #0]
      break;
 8006dbe:	e011      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	601a      	str	r2, [r3, #0]
      break;
 8006dc6:	e00d      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
      break;
 8006dce:	e009      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	601a      	str	r2, [r3, #0]
      break;
 8006dd6:	e005      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	601a      	str	r2, [r3, #0]
      break;
 8006dde:	e001      	b.n	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop

08006df4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fe88 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d022      	beq.n	8006e62 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fe7b 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 8006e26:	4603      	mov	r3, r0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f884 	bl	8006f36 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	bf34      	ite	cc
 8006e36:	2301      	movcc	r3, #1
 8006e38:	2300      	movcs	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff fe6b 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 8006e46:	4603      	mov	r3, r0
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd fcda 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006e50:	4602      	mov	r2, r0
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e7de      	b.n	8006e20 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff fe68 	bl	8006b38 <_ZNK6tflite6Tensor4typeEv>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f107 0315 	add.w	r3, r7, #21
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	f7fd f942 	bl	80040fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	e013      	b.n	8006eae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8006e86:	7d7b      	ldrb	r3, [r7, #21]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff ff46 	bl	8006d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75bb      	strb	r3, [r7, #22]
 8006e94:	7dbb      	ldrb	r3, [r7, #22]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8006e9a:	7dbb      	ldrb	r3, [r7, #22]
 8006e9c:	e007      	b.n	8006eae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	fb02 f203 	mul.w	r2, r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8006ec6:	f009 ff8e 	bl	8010de6 <abort>

  int element_count = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d015      	beq.n	8006f02 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	da0d      	bge.n	8006f02 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	3301      	adds	r3, #1
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	e7eb      	b.n	8006eda <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7a1b      	ldrb	r3, [r3, #8]
 8006f06:	f107 0208 	add.w	r2, r7, #8
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff ff05 	bl	8006d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	e006      	b.n	8006f2e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	fb02 f203 	mul.w	r2, r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fd fc51 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006f44:	4603      	mov	r3, r0
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2108      	movs	r1, #8
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fc7f 	bl	800885e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8006f60:	4603      	mov	r3, r0
  }
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	210a      	movs	r1, #10
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fc81 	bl	800887e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8006f7c:	4603      	mov	r3, r0
  }
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2110      	movs	r1, #16
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fd fba6 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006f9a:	4603      	mov	r3, r0
  }
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2108      	movs	r1, #8
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fa fd52 	bl	8001a5c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006fb8:	4603      	mov	r3, r0
  }
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	210c      	movs	r1, #12
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fc65 	bl	800889e <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006fd4:	4603      	mov	r3, r0
  }
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	210e      	movs	r1, #14
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd fb4b 	bl	8004688 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
  }
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2106      	movs	r1, #6
 8007012:	4618      	mov	r0, r3
 8007014:	f7fd fb85 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007018:	4603      	mov	r3, r0
  }
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2108      	movs	r1, #8
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd fb77 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007034:	4603      	mov	r3, r0
  }
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2104      	movs	r1, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fc37 	bl	80088be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007050:	4603      	mov	r3, r0
  }
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2106      	movs	r1, #6
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fb5b 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800706c:	4603      	mov	r3, r0
  }
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2108      	movs	r1, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7fd fb4d 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007088:	4603      	mov	r3, r0
  }
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2104      	movs	r1, #4
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 fbcd 	bl	800883e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80070a4:	4603      	mov	r3, r0
  }
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2104      	movs	r1, #4
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fd fb61 	bl	8004782 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80070c0:	4603      	mov	r3, r0
  }
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	2106      	movs	r1, #6
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fa fcbf 	bl	8001a5c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80070de:	4603      	mov	r3, r0
  }
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	210c      	movs	r1, #12
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fbf2 	bl	80088de <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80070fa:	4603      	mov	r3, r0
  }
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2110      	movs	r1, #16
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fbf4 	bl	80088fe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007116:	4603      	mov	r3, r0
  }
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	0801724c 	.word	0x0801724c

08007140 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ffe9 	bl	8007120 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800714e:	2104      	movs	r1, #4
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f009 fbc2 	bl	80108da <_ZdlPvj>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	4a04      	ldr	r2, [pc, #16]	; (800717c <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	0801724c 	.word	0x0801724c

08007180 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff ffe7 	bl	8007160 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8007192:	4a05      	ldr	r2, [pc, #20]	; (80071a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	080171f8 	.word	0x080171f8

080071ac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6858      	ldr	r0, [r3, #4]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4798      	blx	r3
 80071cc:	4603      	mov	r3, r0
  }
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b096      	sub	sp, #88	; 0x58
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8007234:	f009 fdd7 	bl	8010de6 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8007238:	2300      	movs	r3, #0
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007242:	429a      	cmp	r2, r3
 8007244:	d267      	bcs.n	8007316 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800724c:	4613      	mov	r3, r2
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	4413      	add	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	440b      	add	r3, r1
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 8007258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800725a:	4613      	mov	r3, r2
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	461a      	mov	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	4413      	add	r3, r2
 8007268:	461a      	mov	r2, r3
 800726a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726c:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800726e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	461a      	mov	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	4413      	add	r3, r2
 800727e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fe17 	bl	8006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800728e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 8007296:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800729a:	e117      	b.n	80074cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800729c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a2:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072aa:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80072ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ae:	4613      	mov	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	461a      	mov	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	4413      	add	r3, r2
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80072c2:	68b8      	ldr	r0, [r7, #8]
 80072c4:	f7ff febb 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 80072c8:	4603      	mov	r3, r0
 80072ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fbaf 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fe82 	bl	8006fde <_ZNK6tflite6Tensor11is_variableEv>
 80072da:	4603      	mov	r3, r0
 80072dc:	f083 0301 	eor.w	r3, r3, #1
 80072e0:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 80072e6:	2201      	movs	r2, #1
 80072e8:	e000      	b.n	80072ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 80072ea:	2200      	movs	r2, #0
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80072f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007302:	611a      	str	r2, [r3, #16]
 8007304:	e003      	b.n	800730e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730c:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800730e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007310:	3301      	adds	r3, #1
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
 8007314:	e792      	b.n	800723c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007316:	68b8      	ldr	r0, [r7, #8]
 8007318:	f7ff fafc 	bl	8006914 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800731c:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800731e:	2300      	movs	r3, #0
 8007320:	653b      	str	r3, [r7, #80]	; 0x50
 8007322:	68b8      	ldr	r0, [r7, #8]
 8007324:	f7ff fe99 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 8007328:	4603      	mov	r3, r0
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd fa5b 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007330:	4602      	mov	r2, r0
 8007332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007334:	4293      	cmp	r3, r2
 8007336:	bf34      	ite	cc
 8007338:	2301      	movcc	r3, #1
 800733a:	2300      	movcs	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 8007342:	68b8      	ldr	r0, [r7, #8]
 8007344:	f7ff fe89 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 8007348:	4603      	mov	r3, r0
 800734a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800734c:	4618      	mov	r0, r3
 800734e:	f7fd fa59 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007352:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2200      	movs	r2, #0
 800736a:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800736c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736e:	3301      	adds	r3, #1
 8007370:	653b      	str	r3, [r7, #80]	; 0x50
 8007372:	e7d6      	b.n	8007322 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8007374:	2300      	movs	r3, #0
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007378:	68b8      	ldr	r0, [r7, #8]
 800737a:	f7ff fe7c 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 800737e:	4603      	mov	r3, r0
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fa30 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007386:	4602      	mov	r2, r0
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	4293      	cmp	r3, r2
 800738c:	bf34      	ite	cc
 800738e:	2301      	movcc	r3, #1
 8007390:	2300      	movcs	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01a      	beq.n	80073ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	f7ff fe6c 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 800739e:	4603      	mov	r3, r0
 80073a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fd fa2e 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80073a8:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6819      	ldr	r1, [r3, #0]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	4613      	mov	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4413      	add	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	440b      	add	r3, r1
 80073ba:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 80073bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073be:	3b01      	subs	r3, #1
 80073c0:	461a      	mov	r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80073c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c8:	3301      	adds	r3, #1
 80073ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073cc:	e7d4      	b.n	8007378 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	3b01      	subs	r3, #1
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	db77      	blt.n	80074ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f7ff fa7e 	bl	80068dc <_ZNK6tflite8SubGraph9operatorsEv>
 80073e0:	4602      	mov	r2, r0
 80073e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f001 fb48 	bl	8008a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80073ec:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80073ee:	2300      	movs	r3, #0
 80073f0:	647b      	str	r3, [r7, #68]	; 0x44
 80073f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f4:	f7ff fe07 	bl	8007006 <_ZNK6tflite8Operator6inputsEv>
 80073f8:	4603      	mov	r3, r0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd f9f3 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007400:	4602      	mov	r2, r0
 8007402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007404:	4293      	cmp	r3, r2
 8007406:	bf34      	ite	cc
 8007408:	2301      	movcc	r3, #1
 800740a:	2300      	movcs	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d022      	beq.n	8007458 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 8007412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007414:	f7ff fdf7 	bl	8007006 <_ZNK6tflite8Operator6inputsEv>
 8007418:	4603      	mov	r3, r0
 800741a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800741c:	4618      	mov	r0, r3
 800741e:	f7fd f9f1 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007422:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	4613      	mov	r3, r2
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	4413      	add	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	440b      	add	r3, r1
 8007434:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800743e:	d004      	beq.n	800744a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007446:	429a      	cmp	r2, r3
 8007448:	dd02      	ble.n	8007450 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744e:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	3301      	adds	r3, #1
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
 8007456:	e7cc      	b.n	80073f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007458:	2300      	movs	r3, #0
 800745a:	643b      	str	r3, [r7, #64]	; 0x40
 800745c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800745e:	f7ff fde0 	bl	8007022 <_ZNK6tflite8Operator7outputsEv>
 8007462:	4603      	mov	r3, r0
 8007464:	4618      	mov	r0, r3
 8007466:	f7fd f9be 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800746a:	4602      	mov	r2, r0
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	4293      	cmp	r3, r2
 8007470:	bf34      	ite	cc
 8007472:	2301      	movcc	r3, #1
 8007474:	2300      	movcs	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d022      	beq.n	80074c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 800747c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747e:	f7ff fdd0 	bl	8007022 <_ZNK6tflite8Operator7outputsEv>
 8007482:	4603      	mov	r3, r0
 8007484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f7fd f9bc 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800748c:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	440b      	add	r3, r1
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a8:	d004      	beq.n	80074b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b0:	429a      	cmp	r2, r3
 80074b2:	da02      	bge.n	80074ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b8:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80074ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074bc:	3301      	adds	r3, #1
 80074be:	643b      	str	r3, [r7, #64]	; 0x40
 80074c0:	e7cc      	b.n	800745c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 80074c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c4:	3b01      	subs	r3, #1
 80074c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c8:	e784      	b.n	80073d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3758      	adds	r7, #88	; 0x58
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08c      	sub	sp, #48	; 0x30
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f7ff fe0f 	bl	8007104 <_ZNK6tflite5Model8metadataEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d060      	beq.n	80075b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80074f6:	2300      	movs	r3, #0
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	f7ff fe02 	bl	8007104 <_ZNK6tflite5Model8metadataEv>
 8007500:	4603      	mov	r3, r0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fb14 	bl	8008b30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007508:	4602      	mov	r2, r0
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	4293      	cmp	r3, r2
 800750e:	bf34      	ite	cc
 8007510:	2301      	movcc	r3, #1
 8007512:	2300      	movcs	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04e      	beq.n	80075b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800751a:	68b8      	ldr	r0, [r7, #8]
 800751c:	f7ff fdf2 	bl	8007104 <_ZNK6tflite5Model8metadataEv>
 8007520:	4603      	mov	r3, r0
 8007522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007524:	4618      	mov	r0, r3
 8007526:	f001 fb11 	bl	8008b4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800752a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f7ff fdbe 	bl	80070ae <_ZNK6tflite8Metadata4nameEv>
 8007532:	4603      	mov	r3, r0
 8007534:	4618      	mov	r0, r3
 8007536:	f7fc fbd0 	bl	8003cda <_ZNK11flatbuffers6String5c_strEv>
 800753a:	4603      	mov	r3, r0
 800753c:	2217      	movs	r2, #23
 800753e:	4921      	ldr	r1, [pc, #132]	; (80075c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8007540:	4618      	mov	r0, r3
 8007542:	f00a f903 	bl	801174c <strncmp>
 8007546:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02c      	beq.n	80075b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8007556:	68b8      	ldr	r0, [r7, #8]
 8007558:	f7ff fdc6 	bl	80070e8 <_ZNK6tflite5Model7buffersEv>
 800755c:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800755e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007560:	f7ff fdb3 	bl	80070ca <_ZNK6tflite8Metadata6bufferEv>
 8007564:	4603      	mov	r3, r0
 8007566:	4619      	mov	r1, r3
 8007568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800756a:	f001 fb23 	bl	8008bb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800756e:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8007570:	6a38      	ldr	r0, [r7, #32]
 8007572:	f7ff fd8e 	bl	8007092 <_ZNK6tflite6Buffer4dataEv>
 8007576:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8007578:	69f8      	ldr	r0, [r7, #28]
 800757a:	f001 fb29 	bl	8008bd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800757e:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	3308      	adds	r3, #8
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	429a      	cmp	r2, r3
 800759a:	d009      	beq.n	80075b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68d8      	ldr	r0, [r3, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4908      	ldr	r1, [pc, #32]	; (80075c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 80075a8:	f7fc fb58 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e004      	b.n	80075ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	3301      	adds	r3, #1
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b6:	e7a0      	b.n	80074fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3730      	adds	r7, #48	; 0x30
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	080171d4 	.word	0x080171d4
 80075c8:	08013770 	.word	0x08013770

080075cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	; 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	4413      	add	r3, r2
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d232      	bcs.n	8007654 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	4413      	add	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	440b      	add	r3, r1
 800761e:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007644:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2201      	movs	r2, #1
 800764a:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	3301      	adds	r3, #1
 8007650:	61fb      	str	r3, [r7, #28]
 8007652:	e7c4      	b.n	80075de <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3724      	adds	r7, #36	; 0x24
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007662:	b590      	push	{r4, r7, lr}
 8007664:	b08b      	sub	sp, #44	; 0x2c
 8007666:	af02      	add	r7, sp, #8
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d247      	bcs.n	800770c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	4613      	mov	r3, r2
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	461a      	mov	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4413      	add	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	7d1b      	ldrb	r3, [r3, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d036      	beq.n	8007704 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2110      	movs	r1, #16
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fb25 	bl	8006cec <_ZN6tflite11AlignSizeUpEjj>
 80076a2:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ac:	d114      	bne.n	80076d8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	681c      	ldr	r4, [r3, #0]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	6899      	ldr	r1, [r3, #8]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	460b      	mov	r3, r1
 80076c4:	68f9      	ldr	r1, [r7, #12]
 80076c6:	68b8      	ldr	r0, [r7, #8]
 80076c8:	47a0      	blx	r4
 80076ca:	4603      	mov	r3, r0
 80076cc:	74bb      	strb	r3, [r7, #18]
 80076ce:	7cbb      	ldrb	r3, [r7, #18]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d017      	beq.n	8007704 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80076d4:	7cbb      	ldrb	r3, [r7, #18]
 80076d6:	e01a      	b.n	800770e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80076d8:	6979      	ldr	r1, [r7, #20]
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	6898      	ldr	r0, [r3, #8]
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	6912      	ldr	r2, [r2, #16]
 80076e6:	9201      	str	r2, [sp, #4]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	4603      	mov	r3, r0
 80076ec:	460a      	mov	r2, r1
 80076ee:	68f9      	ldr	r1, [r7, #12]
 80076f0:	68b8      	ldr	r0, [r7, #8]
 80076f2:	f008 fe13 	bl	801031c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80076f6:	4603      	mov	r3, r0
 80076f8:	74fb      	strb	r3, [r7, #19]
 80076fa:	7cfb      	ldrb	r3, [r7, #19]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007700:	7cfb      	ldrb	r3, [r7, #19]
 8007702:	e004      	b.n	800770e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	e7b3      	b.n	8007674 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3724      	adds	r7, #36	; 0x24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd90      	pop	{r4, r7, pc}

08007716 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007716:	b590      	push	{r4, r7, lr}
 8007718:	b08b      	sub	sp, #44	; 0x2c
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007728:	2300      	movs	r3, #0
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	429a      	cmp	r2, r3
 8007732:	d22e      	bcs.n	8007792 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8007734:	6a3a      	ldr	r2, [r7, #32]
 8007736:	4613      	mov	r3, r2
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	4413      	add	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	461a      	mov	r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	4413      	add	r3, r2
 8007744:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	7d1b      	ldrb	r3, [r3, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01d      	beq.n	800778a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800774e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007752:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	681c      	ldr	r4, [r3, #0]
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	68b8      	ldr	r0, [r7, #8]
 8007766:	47a0      	blx	r4
 8007768:	4603      	mov	r3, r0
 800776a:	76fb      	strb	r3, [r7, #27]
 800776c:	7efb      	ldrb	r3, [r7, #27]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8007772:	7efb      	ldrb	r3, [r7, #27]
 8007774:	e00e      	b.n	8007794 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4619      	mov	r1, r3
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	440a      	add	r2, r1
 8007782:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	3301      	adds	r3, #1
 800778e:	623b      	str	r3, [r7, #32]
 8007790:	e7cc      	b.n	800772c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	372c      	adds	r7, #44	; 0x2c
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fbfa 	bl	8006fa4 <_ZNK6tflite6Tensor6bufferEv>
 80077b0:	4603      	mov	r3, r0
 80077b2:	4619      	mov	r1, r3
 80077b4:	6838      	ldr	r0, [r7, #0]
 80077b6:	f001 f9fd 	bl	8008bb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80077ba:	6138      	str	r0, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d015      	beq.n	80077ee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 80077c2:	6938      	ldr	r0, [r7, #16]
 80077c4:	f7ff fc65 	bl	8007092 <_ZNK6tflite6Buffer4dataEv>
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00e      	beq.n	80077ee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 f8a4 	bl	800891e <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f001 f9f2 	bl	8008bd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80077ec:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80077ee:	697b      	ldr	r3, [r7, #20]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b08d      	sub	sp, #52	; 0x34
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	460b      	mov	r3, r1
 8007806:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8007808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800780e:	f009 faea 	bl	8010de6 <abort>

  *result = {};
 8007812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007814:	4618      	mov	r0, r3
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	461a      	mov	r2, r3
 800781a:	2100      	movs	r1, #0
 800781c:	f009 fb82 	bl	8010f24 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff f989 	bl	8006b38 <_ZNK6tflite6Tensor4typeEv>
 8007826:	4603      	mov	r3, r0
 8007828:	4618      	mov	r0, r3
 800782a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782e:	4619      	mov	r1, r3
 8007830:	f7fc fc64 	bl	80040fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 8007842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007846:	e127      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fbc8 	bl	8006fde <_ZNK6tflite6Tensor11is_variableEv>
 800784e:	4603      	mov	r3, r0
 8007850:	461a      	mov	r2, r3
 8007852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007854:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff ff9e 	bl	800779c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007860:	4602      	mov	r2, r0
 8007862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007864:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8007866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800786e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007870:	2202      	movs	r2, #2
 8007872:	751a      	strb	r2, [r3, #20]
 8007874:	e002      	b.n	800787c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8007876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007878:	2201      	movs	r2, #1
 800787a:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800787c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787e:	f103 0118 	add.w	r1, r3, #24
 8007882:	f107 0210 	add.w	r2, r7, #16
 8007886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff fab3 	bl	8006df4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800788e:	4603      	mov	r3, r0
 8007890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007894:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800789c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80078a0:	e0fa      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff f93a 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80078b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ba:	4a79      	ldr	r2, [pc, #484]	; (8007aa0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 80078bc:	609a      	str	r2, [r3, #8]
 80078be:	e013      	b.n	80078e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff f92b 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ca:	3308      	adds	r3, #8
 80078cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f001 f98a 	bl	8008be8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80078da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 80078e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078e6:	e0d7      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fb6a 	bl	8006fc2 <_ZNK6tflite6Tensor12quantizationEv>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d021      	beq.n	800793a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 80078f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f8:	f7ff fb29 	bl	8006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01b      	beq.n	800793a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8007902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007904:	f7ff fb23 	bl	8006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007908:	4603      	mov	r3, r0
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f815 	bl	800893a <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007910:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8007916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007918:	f7ff fb27 	bl	8006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800791c:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 8007922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007924:	f7ff fb21 	bl	8006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007928:	4603      	mov	r3, r0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 f83c 	bl	80089a8 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007930:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800793a:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80aa 	beq.w	8007a96 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8007942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007944:	f7ff fb03 	bl	8006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007948:	4603      	mov	r3, r0
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f001 f803 	bl	8008958 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8007952:	eef0 7a40 	vmov.f32	s15, s0
 8007956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007958:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800795c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800795e:	f7ff fb04 	bl	8006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007962:	4603      	mov	r3, r0
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f001 f82c 	bl	80089c4 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
    result->params.zero_point =
 8007970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007972:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8007974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007976:	f7ff faea 	bl	8006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>
 800797a:	4603      	mov	r3, r0
 800797c:	4618      	mov	r0, r3
 800797e:	f000 ffdc 	bl	800893a <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007982:	4603      	mov	r3, r0
 8007984:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8007986:	7afb      	ldrb	r3, [r7, #11]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3310      	adds	r3, #16
 8007992:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8007994:	2204      	movs	r2, #4
 8007996:	210c      	movs	r1, #12
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	4798      	blx	r3
 800799c:	4603      	mov	r3, r0
 800799e:	e008      	b.n	80079b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 80079a8:	2204      	movs	r2, #4
 80079aa:	210c      	movs	r1, #12
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3
 80079b0:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 80079b2:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 80079ba:	493a      	ldr	r1, [pc, #232]	; (8007aa4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 80079bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079be:	f7fc f94d 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e068      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3310      	adds	r3, #16
 80079d2:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80079d4:	6a38      	ldr	r0, [r7, #32]
 80079d6:	f7fc f8b7 	bl	8003b48 <TfLiteIntArrayGetSizeInBytes>
 80079da:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80079dc:	2204      	movs	r2, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	47a0      	blx	r4
 80079e4:	4603      	mov	r3, r0
 80079e6:	e00c      	b.n	8007a02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80079f0:	6a38      	ldr	r0, [r7, #32]
 80079f2:	f7fc f8a9 	bl	8003b48 <TfLiteIntArrayGetSizeInBytes>
 80079f6:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 80079f8:	2204      	movs	r2, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	47a0      	blx	r4
 8007a00:	4603      	mov	r3, r0
    quantization->zero_point =
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 8007a0e:	4926      	ldr	r1, [pc, #152]	; (8007aa8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8007a10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a12:	f7fc f923 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e03e      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1c:	f7ff fa97 	bl	8006f4e <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007a20:	4602      	mov	r2, r0
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 f8f7 	bl	8008c1a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	76fb      	strb	r3, [r7, #27]
 8007a30:	7efb      	ldrb	r3, [r7, #27]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 8007a36:	7efb      	ldrb	r3, [r7, #27]
 8007a38:	e02e      	b.n	8007a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	da12      	bge.n	8007a7c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8007a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a58:	f7ff fa87 	bl	8006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f000 ffae 	bl	80089c4 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	4602      	mov	r2, r0
 8007a72:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	3301      	adds	r3, #1
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a7a:	e7e8      	b.n	8007a4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8007a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a7e:	f7ff fa82 	bl	8006f86 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8007a82:	4602      	mov	r2, r0
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8007a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3734      	adds	r7, #52	; 0x34
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd90      	pop	{r4, r7, pc}
 8007aa0:	080171ec 	.word	0x080171ec
 8007aa4:	080137bc 	.word	0x080137bc
 8007aa8:	080137ec 	.word	0x080137ec

08007aac <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
  *result = {};
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	461a      	mov	r2, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	6053      	str	r3, [r2, #4]
 8007ac4:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007ac6:	68b8      	ldr	r0, [r7, #8]
 8007ac8:	f7ff f836 	bl	8006b38 <_ZNK6tflite6Tensor4typeEv>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f7fc fb10 	bl	80040fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	e027      	b.n	8007b3a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	68b8      	ldr	r0, [r7, #8]
 8007aee:	f7ff fe55 	bl	800779c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8007af8:	68b8      	ldr	r0, [r7, #8]
 8007afa:	f7ff f80f 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	4a0c      	ldr	r2, [pc, #48]	; (8007b44 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	e010      	b.n	8007b38 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007b16:	68b8      	ldr	r0, [r7, #8]
 8007b18:	f7ff f800 	bl	8006b1c <_ZNK6tflite6Tensor5shapeEv>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	3304      	adds	r3, #4
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f001 f85f 	bl	8008be8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75bb      	strb	r3, [r7, #22]
 8007b2e:	7dbb      	ldrb	r3, [r7, #22]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8007b34:	7dbb      	ldrb	r3, [r7, #22]
 8007b36:	e000      	b.n	8007b3a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	080171ec 	.word	0x080171ec

08007b48 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8007b54:	4a0c      	ldr	r2, [pc, #48]	; (8007b88 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	605a      	str	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	741a      	strb	r2, [r3, #16]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	615a      	str	r2, [r3, #20]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	619a      	str	r2, [r3, #24]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	08017210 	.word	0x08017210

08007b8c <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	4a04      	ldr	r2, [pc, #16]	; (8007ba8 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	08017210 	.word	0x08017210

08007bac <_ZN6tflite14MicroAllocatorD0Ev>:
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ffe9 	bl	8007b8c <_ZN6tflite14MicroAllocatorD1Ev>
 8007bba:	211c      	movs	r1, #28
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f008 fe8c 	bl	80108da <_ZdlPvj>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8007bd8:	2110      	movs	r1, #16
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff f857 	bl	8006c8e <_ZN6tflite14AlignPointerUpEPhj>
 8007be0:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	441a      	add	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f003 f806 	bl	800ac04 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f805 	bl	8007c0c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007c02:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8007c1c:	f009 f8e3 	bl	8010de6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8007c26:	f009 f8de 	bl	8010de6 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8007c32:	2204      	movs	r2, #4
 8007c34:	211c      	movs	r1, #28
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	201c      	movs	r0, #28
 8007c42:	f7fc f83e 	bl	8003cc2 <_ZnwjPv>
 8007c46:	4604      	mov	r4, r0
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff ff7b 	bl	8007b48 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007c52:	60bc      	str	r4, [r7, #8]
  return allocator;
 8007c54:	68bb      	ldr	r3, [r7, #8]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd90      	pop	{r4, r7, pc}
	...

08007c60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8007c60:	b5b0      	push	{r4, r5, r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8007c70:	f009 f8b9 	bl	8010de6 <abort>

  if (model_is_allocating_) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7c1b      	ldrb	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	4936      	ldr	r1, [pc, #216]	; (8007d5c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fb ffea 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e063      	b.n	8007d54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6858      	ldr	r0, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	2108      	movs	r1, #8
 8007ca4:	4798      	blx	r3
 8007ca6:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 8007ca8:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 8007caa:	4619      	mov	r1, r3
 8007cac:	2008      	movs	r0, #8
 8007cae:	f7fc f808 	bl	8003cc2 <_ZnwjPv>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7ff fa60 	bl	8007180 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fd6b 	bl	80087a0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e03a      	b.n	8007d54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685d      	ldr	r5, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f7fe fe03 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fe6f 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8007cfe:	2204      	movs	r2, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4628      	mov	r0, r5
 8007d04:	47a0      	blx	r4
 8007d06:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8007d0e:	4814      	ldr	r0, [pc, #80]	; (8007d60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 8007d10:	f001 f98e 	bl	8009030 <_Z11MicroPrintfPKcz>
    return nullptr;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e01d      	b.n	8007d54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	331c      	adds	r3, #28
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3318      	adds	r3, #24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 8007d52:	68bb      	ldr	r3, [r7, #8]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d5c:	0801381c 	.word	0x0801381c
 8007d60:	08013874 	.word	0x08013874

08007d64 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8007d64:	b590      	push	{r4, r7, lr}
 8007d66:	b08b      	sub	sp, #44	; 0x2c
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	7c1b      	ldrb	r3, [r3, #16]
 8007d76:	f083 0301 	eor.w	r3, r3, #1
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4936      	ldr	r1, [pc, #216]	; (8007e60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fb ff68 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e062      	b.n	8007e56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	68b8      	ldr	r0, [r7, #8]
 8007d96:	f7fe fdaf 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe fe1b 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007da2:	4602      	mov	r2, r0
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	bf34      	ite	cc
 8007daa:	2301      	movcc	r3, #1
 8007dac:	2300      	movcs	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d04c      	beq.n	8007e4e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007db4:	68b8      	ldr	r0, [r7, #8]
 8007db6:	f7fe fd9f 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fe18 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007dc4:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 8007dcc:	f009 f80b 	bl	8010de6 <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3330      	adds	r3, #48	; 0x30
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6952      	ldr	r2, [r2, #20]
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	4798      	blx	r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	75fb      	strb	r3, [r7, #23]
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	e032      	b.n	8007e56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	332c      	adds	r3, #44	; 0x2c
 8007df6:	681c      	ldr	r4, [r3, #0]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	47a0      	blx	r4
 8007e12:	4603      	mov	r3, r0
 8007e14:	75bb      	strb	r3, [r7, #22]
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 8007e1c:	7dbb      	ldrb	r3, [r7, #22]
 8007e1e:	e01a      	b.n	8007e56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3320      	adds	r3, #32
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	00d2      	lsls	r2, r2, #3
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	440a      	add	r2, r1
 8007e30:	6852      	ldr	r2, [r2, #4]
 8007e32:	69b9      	ldr	r1, [r7, #24]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	4798      	blx	r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	757b      	strb	r3, [r7, #21]
 8007e3c:	7d7b      	ldrb	r3, [r7, #21]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 8007e42:	7d7b      	ldrb	r3, [r7, #21]
 8007e44:	e007      	b.n	8007e56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	e7a2      	b.n	8007d94 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3724      	adds	r7, #36	; 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd90      	pop	{r4, r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	080138a4 	.word	0x080138a4

08007e64 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6858      	ldr	r0, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fc9d 	bl	80087da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007ea0:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d20e      	bcs.n	8007ed2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4413      	add	r3, r2
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec2:	d102      	bne.n	8007eca <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	e7eb      	b.n	8007eaa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b0b      	cmp	r3, #11
 8007ed6:	d908      	bls.n	8007eea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	220c      	movs	r2, #12
 8007ede:	4913      	ldr	r1, [pc, #76]	; (8007f2c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fb febb 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e01c      	b.n	8007f24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	2300      	movs	r3, #0
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f0c:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	461a      	mov	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	080138f0 	.word	0x080138f0

08007f30 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fc47 	bl	80087da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007f4c:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d211      	bcs.n	8007f80 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6a:	d105      	bne.n	8007f78 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e7e8      	b.n	8007f52 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6858      	ldr	r0, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6952      	ldr	r2, [r2, #20]
 8007f92:	320c      	adds	r2, #12
 8007f94:	00d1      	lsls	r1, r2, #3
 8007f96:	2204      	movs	r2, #4
 8007f98:	4798      	blx	r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73fb      	strb	r3, [r7, #15]
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	e000      	b.n	8007faa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8007fc6:	f008 ff0e 	bl	8010de6 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007fca:	2300      	movs	r3, #0
 8007fcc:	61fb      	str	r3, [r7, #28]
 8007fce:	68b8      	ldr	r0, [r7, #8]
 8007fd0:	f7fe fc92 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fcfe 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	bf34      	ite	cc
 8007fe4:	2301      	movcc	r3, #1
 8007fe6:	2300      	movcs	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d034      	beq.n	8008058 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007fee:	68b8      	ldr	r0, [r7, #8]
 8007ff0:	f7fe fc82 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	69f9      	ldr	r1, [r7, #28]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fcfb 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007ffe:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8008006:	f008 feee 	bl	8010de6 <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800800a:	69b8      	ldr	r0, [r7, #24]
 800800c:	f7fe fc82 	bl	8006914 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8008010:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6858      	ldr	r0, [r3, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	212c      	movs	r1, #44	; 0x2c
 8008024:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 8008028:	2204      	movs	r2, #4
 800802a:	4798      	blx	r3
 800802c:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d107      	bne.n	8008044 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	490a      	ldr	r1, [pc, #40]	; (8008064 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 800803a:	4618      	mov	r0, r3
 800803c:	f7fb fe0e 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 8008040:	2301      	movs	r3, #1
 8008042:	e00a      	b.n	800805a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	3301      	adds	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	e7ba      	b.n	8007fce <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	08013928 	.word	0x08013928

08008068 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b089      	sub	sp, #36	; 0x24
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8008076:	68b8      	ldr	r0, [r7, #8]
 8008078:	f7fe fc3e 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800807c:	4602      	mov	r2, r0
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7fe fcb6 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008088:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008090:	f008 fea9 	bl	8010de6 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3324      	adds	r3, #36	; 0x24
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	4798      	blx	r3
 80080a0:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3328      	adds	r3, #40	; 0x28
 80080a8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 80080aa:	2300      	movs	r3, #0
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	47a0      	blx	r4
 80080bc:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	4914      	ldr	r1, [pc, #80]	; (8008124 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fb fdc2 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 80080d8:	2300      	movs	r3, #0
 80080da:	e01f      	b.n	800811c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01b      	beq.n	800811a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	4413      	add	r3, r2
 80080ea:	6859      	ldr	r1, [r3, #4]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	4613      	mov	r3, r2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	4613      	mov	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800811a:	693b      	ldr	r3, [r7, #16]
}
 800811c:	4618      	mov	r0, r3
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	bd90      	pop	{r4, r7, pc}
 8008124:	08013960 	.word	0x08013960

08008128 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008128:	b590      	push	{r4, r7, lr}
 800812a:	b089      	sub	sp, #36	; 0x24
 800812c:	af02      	add	r7, sp, #8
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8008136:	68b8      	ldr	r0, [r7, #8]
 8008138:	f7fe fbde 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800813c:	4602      	mov	r2, r0
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fc56 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008148:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008150:	f008 fe49 	bl	8010de6 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6858      	ldr	r0, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3310      	adds	r3, #16
 8008160:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8008162:	2204      	movs	r2, #4
 8008164:	2140      	movs	r1, #64	; 0x40
 8008166:	4798      	blx	r3
 8008168:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3328      	adds	r3, #40	; 0x28
 8008170:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008172:	2301      	movs	r3, #1
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	47a0      	blx	r4
 8008184:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf14      	ite	ne
 800818a:	2301      	movne	r3, #1
 800818c:	2300      	moveq	r3, #0
 800818e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4914      	ldr	r1, [pc, #80]	; (80081ec <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb fd5e 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80081a0:	2300      	movs	r3, #0
 80081a2:	e01f      	b.n	80081e4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01b      	beq.n	80081e2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	6859      	ldr	r1, [r3, #4]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	4613      	mov	r3, r2
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80081e2:	693b      	ldr	r3, [r7, #16]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}
 80081ec:	080139ac 	.word	0x080139ac

080081f0 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3314      	adds	r3, #20
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4610      	mov	r0, r2
 8008208:	4798      	blx	r3
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8008214:	b5b0      	push	{r4, r5, r7, lr}
 8008216:	b08c      	sub	sp, #48	; 0x30
 8008218:	af02      	add	r7, sp, #8
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8008226:	f008 fdde 	bl	8010de6 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800822a:	2300      	movs	r3, #0
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
 800822e:	68b8      	ldr	r0, [r7, #8]
 8008230:	f7fe fb62 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8008234:	4603      	mov	r3, r0
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fbce 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800823c:	4602      	mov	r2, r0
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	4293      	cmp	r3, r2
 8008242:	bf34      	ite	cc
 8008244:	2301      	movcc	r3, #1
 8008246:	2300      	movcs	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d076      	beq.n	800833c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800824e:	68b8      	ldr	r0, [r7, #8]
 8008250:	f7fe fb52 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8008254:	4603      	mov	r3, r0
 8008256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fbcb 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800825e:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8008266:	f008 fdbe 	bl	8010de6 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800826a:	69f8      	ldr	r0, [r7, #28]
 800826c:	f7fe fee7 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 8008270:	4603      	mov	r3, r0
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fbce 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008278:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6858      	ldr	r0, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4613      	mov	r3, r2
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	2204      	movs	r2, #4
 8008294:	4619      	mov	r1, r3
 8008296:	47a0      	blx	r4
 8008298:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10c      	bne.n	80082ba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68d8      	ldr	r0, [r3, #12]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	461a      	mov	r2, r3
 80082b0:	4925      	ldr	r1, [pc, #148]	; (8008348 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 80082b2:	f7fb fcd3 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e041      	b.n	800833e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d230      	bcs.n	8008328 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80082ca:	69f8      	ldr	r0, [r7, #28]
 80082cc:	f7fe feb7 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 80082d0:	4603      	mov	r3, r0
 80082d2:	6a39      	ldr	r1, [r7, #32]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fbab 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80082da:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082dc:	68b8      	ldr	r0, [r7, #8]
 80082de:	f7fe ff03 	bl	80070e8 <_ZNK6tflite5Model7buffersEv>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	4613      	mov	r3, r2
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	4413      	add	r3, r2
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	460b      	mov	r3, r1
 80082fa:	4602      	mov	r2, r0
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fbd4 	bl	8007aac <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8008304:	4603      	mov	r3, r0
 8008306:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8008308:	7cfb      	ldrb	r3, [r7, #19]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	490d      	ldr	r1, [pc, #52]	; (800834c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 8008316:	4618      	mov	r0, r3
 8008318:	f7fb fca0 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 800831c:	2301      	movs	r3, #1
 800831e:	e00e      	b.n	800833e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	3301      	adds	r3, #1
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	e7ca      	b.n	80082be <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	3301      	adds	r3, #1
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
 800833a:	e778      	b.n	800822e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3728      	adds	r7, #40	; 0x28
 8008342:	46bd      	mov	sp, r7
 8008344:	bdb0      	pop	{r4, r5, r7, pc}
 8008346:	bf00      	nop
 8008348:	080139f0 	.word	0x080139f0
 800834c:	08013a38 	.word	0x08013a38

08008350 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	68b8      	ldr	r0, [r7, #8]
 8008362:	f7fe fe6c 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 8008366:	4603      	mov	r3, r0
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fb53 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800836e:	4602      	mov	r2, r0
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4293      	cmp	r3, r2
 8008374:	bf34      	ite	cc
 8008376:	2301      	movcc	r3, #1
 8008378:	2300      	movcs	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d04f      	beq.n	8008420 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8008380:	68b8      	ldr	r0, [r7, #8]
 8008382:	f7fe fe5c 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 8008386:	4603      	mov	r3, r0
 8008388:	69f9      	ldr	r1, [r7, #28]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fb50 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008390:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8008392:	69b8      	ldr	r0, [r7, #24]
 8008394:	f7fe fe23 	bl	8006fde <_ZNK6tflite6Tensor11is_variableEv>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d03c      	beq.n	8008418 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	461a      	mov	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	f107 0210 	add.w	r2, r7, #16
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd7e 	bl	8006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	e02c      	b.n	8008422 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6858      	ldr	r0, [r3, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80083e8:	2210      	movs	r2, #16
 80083ea:	47a8      	blx	r5
 80083ec:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 80083ee:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	4613      	mov	r3, r2
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4413      	add	r3, r2
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d108      	bne.n	8008418 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4907      	ldr	r1, [pc, #28]	; (800842c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800840e:	4618      	mov	r0, r3
 8008410:	f7fb fc24 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8008414:	2301      	movs	r3, #1
 8008416:	e004      	b.n	8008422 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	3301      	adds	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e79f      	b.n	8008360 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bdb0      	pop	{r4, r5, r7, pc}
 800842a:	bf00      	nop
 800842c:	08013a58 	.word	0x08013a58

08008430 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6858      	ldr	r0, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008446:	2204      	movs	r2, #4
 8008448:	2140      	movs	r1, #64	; 0x40
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8008456:	b5b0      	push	{r4, r5, r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af02      	add	r7, sp, #8
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8008468:	68b8      	ldr	r0, [r7, #8]
 800846a:	f7fe fa45 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800846e:	4602      	mov	r2, r0
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe fabd 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800847a:	4603      	mov	r3, r0
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fdde 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 8008482:	4602      	mov	r2, r0
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f000 fad1 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800848e:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008490:	68b8      	ldr	r0, [r7, #8]
 8008492:	f7fe fe29 	bl	80070e8 <_ZNK6tflite5Model7buffersEv>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	9201      	str	r2, [sp, #4]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	462a      	mov	r2, r5
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7ff f9a5 	bl	80077f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80084ae:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bdb0      	pop	{r4, r5, r7, pc}

080084b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 80084b8:	b590      	push	{r4, r7, lr}
 80084ba:	b0a5      	sub	sp, #148	; 0x94
 80084bc:	af02      	add	r7, sp, #8
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80084cc:	68b8      	ldr	r0, [r7, #8]
 80084ce:	f7fe fa13 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80084d2:	4602      	mov	r2, r0
 80084d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fe fa8a 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80084e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 80084e4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80084e8:	f7fe fda9 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 80084ec:	4603      	mov	r3, r0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fa90 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4413      	add	r3, r2
 80084fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80084fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008500:	4613      	mov	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	4413      	add	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6858      	ldr	r0, [r3, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3310      	adds	r3, #16
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2204      	movs	r2, #4
 800851a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800851c:	4798      	blx	r3
 800851e:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 8008520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008522:	2b00      	cmp	r3, #0
 8008524:	d108      	bne.n	8008538 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800852c:	4985      	ldr	r1, [pc, #532]	; (8008744 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800852e:	4618      	mov	r0, r3
 8008530:	f7fb fb94 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8008534:	2401      	movs	r4, #1
 8008536:	e0ff      	b.n	8008738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8008538:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800853c:	f7fe fd7f 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 8008540:	4603      	mov	r3, r0
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fa66 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008548:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	695a      	ldr	r2, [r3, #20]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	460a      	mov	r2, r1
 800855c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800855e:	f7fe fe45 	bl	80071ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8008562:	2300      	movs	r3, #0
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 8008566:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800856a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe ffaf 	bl	80074d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800857c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8008584:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 8008588:	e0d6      	b.n	8008738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800858a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800858c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008596:	f7fe fe43 	bl	8007220 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80085a0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 80085a8:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 80085ac:	e0c4      	b.n	8008738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f913 	bl	80087da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80085b4:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 80085b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff f804 	bl	80075cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80085ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 80085d2:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 80085d6:	e0af      	b.n	8008738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2110      	movs	r1, #16
 80085de:	4618      	mov	r0, r3
 80085e0:	f002 fc26 	bl	800ae30 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80085e4:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6858      	ldr	r0, [r3, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3310      	adds	r3, #16
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2210      	movs	r2, #16
 80085f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085f8:	4798      	blx	r3
 80085fa:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80085fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10e      	bne.n	8008620 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68d8      	ldr	r0, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68d9      	ldr	r1, [r3, #12]
 800860a:	4b4f      	ldr	r3, [pc, #316]	; (8008748 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	f240 33d2 	movw	r3, #978	; 0x3d2
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4b4d      	ldr	r3, [pc, #308]	; (800874c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 8008616:	4a4e      	ldr	r2, [pc, #312]	; (8008750 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 8008618:	f7fb fb39 	bl	8003c8e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800861c:	2401      	movs	r4, #1
 800861e:	e08b      	b.n	8008738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8008620:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008628:	4618      	mov	r0, r3
 800862a:	f007 fdc9 	bl	80101c0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68d8      	ldr	r0, [r3, #12]
 8008632:	f107 0114 	add.w	r1, r7, #20
 8008636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008638:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800863a:	f7ff f812 	bl	8007662 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 800864c:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8008650:	e06d      	b.n	800872e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2110      	movs	r1, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f002 fbe0 	bl	800ae30 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8008670:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8008672:	f107 0314 	add.w	r3, r7, #20
 8008676:	4618      	mov	r0, r3
 8008678:	f008 f85b 	bl	8010732 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800867c:	4602      	mov	r2, r0
 800867e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008680:	4293      	cmp	r3, r2
 8008682:	bf34      	ite	cc
 8008684:	2301      	movcc	r3, #1
 8008686:	2300      	movcs	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68dc      	ldr	r4, [r3, #12]
 8008692:	f107 0314 	add.w	r3, r7, #20
 8008696:	4618      	mov	r0, r3
 8008698:	f008 f84b 	bl	8010732 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800869c:	4602      	mov	r2, r0
 800869e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086a0:	492c      	ldr	r1, [pc, #176]	; (8008754 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7fb fada 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 80086a8:	2401      	movs	r4, #1
 80086aa:	e040      	b.n	800872e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68dc      	ldr	r4, [r3, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f002 fbaf 	bl	800ae18 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f107 0114 	add.w	r1, r7, #20
 80086c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7ff f825 	bl	8007716 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80086d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 80086da:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80086de:	e026      	b.n	800872e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	4618      	mov	r0, r3
 80086e6:	f008 f824 	bl	8010732 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80086ea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008700:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6858      	ldr	r0, [r3, #4]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	6991      	ldr	r1, [r2, #24]
 8008714:	2210      	movs	r2, #16
 8008716:	4798      	blx	r3
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800871e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 8008726:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 800872a:	e000      	b.n	800872e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800872c:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800872e:	f107 0314 	add.w	r3, r7, #20
 8008732:	4618      	mov	r0, r3
 8008734:	f007 fd96 	bl	8010264 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8008738:	4623      	mov	r3, r4
}
 800873a:	4618      	mov	r0, r3
 800873c:	378c      	adds	r7, #140	; 0x8c
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	08013a88 	.word	0x08013a88
 8008748:	08013b20 	.word	0x08013b20
 800874c:	08013acc 	.word	0x08013acc
 8008750:	08013b08 	.word	0x08013b08
 8008754:	08013b3c 	.word	0x08013b3c

08008758 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800876a:	f008 fb3c 	bl	8010de6 <abort>

  if (scratch_buffer_request_count_ == 0) {
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8008776:	2300      	movs	r3, #0
 8008778:	e00e      	b.n	8008798 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6858      	ldr	r0, [r3, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	0091      	lsls	r1, r2, #2
 800878c:	2204      	movs	r2, #4
 800878e:	4798      	blx	r3
 8008790:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6858      	ldr	r0, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2204      	movs	r2, #4
 80087be:	2160      	movs	r1, #96	; 0x60
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	e000      	b.n	80087d2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f002 fb16 	bl	800ae18 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2104      	movs	r1, #4
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fa4c 	bl	8006c8e <_ZN6tflite14AlignPointerUpEPhj>
 80087f6:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6858      	ldr	r0, [r3, #4]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68d9      	ldr	r1, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	f000 f9e6 	bl	8008be8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800881c:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800884a:	887b      	ldrh	r3, [r7, #2]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9fc 	bl	8008c4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008854:	4603      	mov	r3, r0
  }
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800886a:	887b      	ldrh	r3, [r7, #2]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa0c 	bl	8008c8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8008874:	4603      	mov	r3, r0
  }
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa1c 	bl	8008ccc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008894:	4603      	mov	r3, r0
  }
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa2c 	bl	8008d0c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 80088b4:	4603      	mov	r3, r0
  }
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088ca:	887b      	ldrh	r3, [r7, #2]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa3c 	bl	8008d4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80088d4:	4603      	mov	r3, r0
  }
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	460b      	mov	r3, r1
 80088e8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa4c 	bl	8008d8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80088f4:	4603      	mov	r3, r0
  }
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa5c 	bl	8008dcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8008914:	4603      	mov	r3, r0
  }
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f7f9 f861 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008930:	4603      	mov	r3, r0
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7f9 f853 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800894c:	4603      	mov	r3, r0
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ffe9 	bl	800893a <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008968:	4602      	mov	r2, r0
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	4293      	cmp	r3, r2
 800896e:	d306      	bcc.n	800897e <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8008972:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8008974:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008978:	480a      	ldr	r0, [pc, #40]	; (80089a4 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800897a:	f008 fa3b 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa66 	bl	8008e50 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8008984:	4603      	mov	r3, r0
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fa4b 	bl	8008e24 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800898e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008992:	eeb0 0a67 	vmov.f32	s0, s15
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	08013b8c 	.word	0x08013b8c
 80089a0:	08013b98 	.word	0x08013b98
 80089a4:	08013c60 	.word	0x08013c60

080089a8 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7f9 f81c 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80089ba:	4603      	mov	r3, r0
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ffea 	bl	80089a8 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80089d4:	4602      	mov	r2, r0
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	4293      	cmp	r3, r2
 80089da:	d306      	bcc.n	80089ea <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 80089de:	4a0b      	ldr	r2, [pc, #44]	; (8008a0c <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 80089e0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80089e4:	480a      	ldr	r0, [pc, #40]	; (8008a10 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 80089e6:	f008 fa05 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa52 	bl	8008e94 <_ZNK11flatbuffers6VectorIxE4DataEv>
 80089f0:	4603      	mov	r3, r0
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fa37 	bl	8008e68 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
  }
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08013b8c 	.word	0x08013b8c
 8008a0c:	08013cf0 	.word	0x08013cf0
 8008a10:	08013c60 	.word	0x08013c60

08008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f8 ffe6 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008a26:	4603      	mov	r3, r0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff ffea 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008a40:	4602      	mov	r2, r0
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d306      	bcc.n	8008a56 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8008a4a:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8008a4c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a50:	4809      	ldr	r0, [pc, #36]	; (8008a78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8008a52:	f008 f9cf 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa3c 	bl	8008ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fa23 	bl	8008eac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8008a66:	4603      	mov	r3, r0
  }
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	08013b8c 	.word	0x08013b8c
 8008a74:	08013e98 	.word	0x08013e98
 8008a78:	08013c60 	.word	0x08013c60

08008a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fd ff98 	bl	80069bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d306      	bcc.n	8008aa2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8008a94:	4b09      	ldr	r3, [pc, #36]	; (8008abc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8008a96:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8008a98:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8008a9e:	f008 f9a9 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa36 	bl	8008f14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fa1d 	bl	8008eec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8008ab2:	4603      	mov	r3, r0
  }
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	08013b8c 	.word	0x08013b8c
 8008ac0:	08013f90 	.word	0x08013f90
 8008ac4:	08013c60 	.word	0x08013c60

08008ac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f8 ff8c 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008ada:	4603      	mov	r3, r0
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ffea 	bl	8008ac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8008af4:	4602      	mov	r2, r0
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d306      	bcc.n	8008b0a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8008afc:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8008afe:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8008b00:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b04:	4809      	ldr	r0, [pc, #36]	; (8008b2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8008b06:	f008 f975 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa22 	bl	8008f54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8008b10:	4603      	mov	r3, r0
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fa09 	bl	8008f2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8008b1a:	4603      	mov	r3, r0
  }
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	08013b8c 	.word	0x08013b8c
 8008b28:	08014188 	.word	0x08014188
 8008b2c:	08013c60 	.word	0x08013c60

08008b30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f8 ff58 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff ffea 	bl	8008b30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d306      	bcc.n	8008b72 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8008b64:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8008b66:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8008b68:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008b6e:	f008 f941 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa0e 	bl	8008f94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 f9f5 	bl	8008f6c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8008b82:	4603      	mov	r3, r0
  }
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08013b8c 	.word	0x08013b8c
 8008b90:	08014280 	.word	0x08014280
 8008b94:	08013c60 	.word	0x08013c60

08008b98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7fd ff25 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ff8f 	bl	8008ae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f917 	bl	8008e0c <_ZNK11flatbuffers6VectorIhE4DataEv>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008bfc:	f008 f8f3 	bl	8010de6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008c06:	f008 f8ee 	bl	8010de6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008c2e:	f008 f8da 	bl	8010de6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008c38:	f008 f8d5 	bl	8010de6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7f8 fa0b 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c62:	4603      	mov	r3, r0
 8008c64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	89fb      	ldrh	r3, [r7, #14]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8008c74:	68b8      	ldr	r0, [r7, #8]
 8008c76:	f7f8 fed5 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4413      	add	r3, r2
                        : nullptr;
 8008c80:	e000      	b.n	8008c84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c82:	2300      	movs	r3, #0
  }
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c98:	887b      	ldrh	r3, [r7, #2]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7f8 f9eb 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	89fb      	ldrh	r3, [r7, #14]
 8008caa:	4413      	add	r3, r2
 8008cac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cae:	89fb      	ldrh	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8008cb4:	68b8      	ldr	r0, [r7, #8]
 8008cb6:	f7f8 feb5 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4413      	add	r3, r2
                        : nullptr;
 8008cc0:	e000      	b.n	8008cc4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cc2:	2300      	movs	r3, #0
  }
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008cd8:	887b      	ldrh	r3, [r7, #2]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f8 f9cb 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	4413      	add	r3, r2
 8008cec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cee:	89fb      	ldrh	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f7f8 fe95 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4413      	add	r3, r2
                        : nullptr;
 8008d00:	e000      	b.n	8008d04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d02:	2300      	movs	r3, #0
  }
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d18:	887b      	ldrh	r3, [r7, #2]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7f8 f9ab 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d22:	4603      	mov	r3, r0
 8008d24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d2e:	89fb      	ldrh	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d006      	beq.n	8008d42 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008d34:	68b8      	ldr	r0, [r7, #8]
 8008d36:	f7f8 fe75 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4413      	add	r3, r2
                        : nullptr;
 8008d40:	e000      	b.n	8008d44 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d42:	2300      	movs	r3, #0
  }
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f8 f98b 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d62:	4603      	mov	r3, r0
 8008d64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	89fb      	ldrh	r3, [r7, #14]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008d74:	68b8      	ldr	r0, [r7, #8]
 8008d76:	f7f8 fe55 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4413      	add	r3, r2
                        : nullptr;
 8008d80:	e000      	b.n	8008d84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d82:	2300      	movs	r3, #0
  }
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d98:	887b      	ldrh	r3, [r7, #2]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7f8 f96b 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008da2:	4603      	mov	r3, r0
 8008da4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	89fb      	ldrh	r3, [r7, #14]
 8008daa:	4413      	add	r3, r2
 8008dac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dae:	89fb      	ldrh	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d006      	beq.n	8008dc2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f7f8 fe35 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4413      	add	r3, r2
                        : nullptr;
 8008dc0:	e000      	b.n	8008dc4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dc2:	2300      	movs	r3, #0
  }
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008dd8:	887b      	ldrh	r3, [r7, #2]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7f8 f94b 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008de2:	4603      	mov	r3, r0
 8008de4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	89fb      	ldrh	r3, [r7, #14]
 8008dea:	4413      	add	r3, r2
 8008dec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008df4:	68b8      	ldr	r0, [r7, #8]
 8008df6:	f7f8 fe15 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4413      	add	r3, r2
                        : nullptr;
 8008e00:	e000      	b.n	8008e04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008e02:	2300      	movs	r3, #0
  }
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3304      	adds	r3, #4
  }
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e3e:	f7fc f9a5 	bl	800518c <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008e42:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008e46:	eeb0 0a67 	vmov.f32	s0, s15
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
  }
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4413      	add	r3, r2
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7fd fddd 	bl	8006a40 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
  }
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3304      	adds	r3, #4
  }
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7f8 fdaf 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4413      	add	r3, r2
  }
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3304      	adds	r3, #4
  }
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7f8 fd8f 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f06:	4602      	mov	r2, r0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4413      	add	r3, r2
  }
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3304      	adds	r3, #4
  }
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7f8 fd6f 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f46:	4602      	mov	r2, r0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4413      	add	r3, r2
  }
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
  }
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7f8 fd4f 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4413      	add	r3, r2
  }
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
  }
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	4a05      	ldr	r2, [pc, #20]	; (8008fcc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe f8af 	bl	8007120 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	080171f8 	.word	0x080171f8

08008fd0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ffe7 	bl	8008fac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008fde:	2108      	movs	r1, #8
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f007 fc7a 	bl	80108da <_ZdlPvj>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b0c2      	sub	sp, #264	; 0x108
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	1d3b      	adds	r3, r7, #4
 8008ff8:	6018      	str	r0, [r3, #0]
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008ffe:	463b      	mov	r3, r7
 8009000:	1d3a      	adds	r2, r7, #4
 8009002:	f107 0008 	add.w	r0, r7, #8
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800900e:	f001 fc01 	bl	800a814 <MicroVsnprintf>
  DebugLog(log_buffer);
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f7f8 fcd2 	bl	80019c0 <DebugLog>
  DebugLog("\r\n");
 800901c:	4803      	ldr	r0, [pc, #12]	; (800902c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800901e:	f7f8 fccf 	bl	80019c0 <DebugLog>
#endif
}
 8009022:	bf00      	nop
 8009024:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	0801437c 	.word	0x0801437c

08009030 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 8009030:	b40f      	push	{r0, r1, r2, r3}
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	6938      	ldr	r0, [r7, #16]
 8009042:	f7ff ffd5 	bl	8008ff0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009050:	b004      	add	sp, #16
 8009052:	4770      	bx	lr

08009054 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  Log(format, args);
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f7ff ffc4 	bl	8008ff0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00c      	beq.n	80090ac <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68b9      	ldr	r1, [r7, #8]
 80090a2:	4610      	mov	r0, r2
 80090a4:	4798      	blx	r3
 80090a6:	4602      	mov	r2, r0
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	601a      	str	r2, [r3, #0]
    }
  }
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6858      	ldr	r0, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6812      	ldr	r2, [r2, #0]
 80090d8:	4611      	mov	r1, r2
 80090da:	4798      	blx	r3
    }
  }
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d102      	bne.n	80090fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	e007      	b.n	800910c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	4618      	mov	r0, r3
 8009104:	f7fc fc2a 	bl	800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009108:	4603      	mov	r3, r0
 800910a:	bf00      	nop
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 8009122:	4a10      	ldr	r2, [pc, #64]	; (8009164 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	605a      	str	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	60da      	str	r2, [r3, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	611a      	str	r2, [r3, #16]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fd fbd3 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8009152:	4602      	mov	r2, r0
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	619a      	str	r2, [r3, #24]
  }
}
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	08017278 	.word	0x08017278

08009168 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	4a04      	ldr	r2, [pc, #16]	; (8009184 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	08017278 	.word	0x08017278

08009188 <_ZN6tflite10MicroGraphD0Ev>:
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff ffe9 	bl	8009168 <_ZN6tflite10MicroGraphD1Ev>
 8009196:	211c      	movs	r1, #28
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f007 fb9e 	bl	80108da <_ZdlPvj>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08a      	sub	sp, #40	; 0x28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80091b6:	2300      	movs	r3, #0
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fd fc0a 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80091c4:	4602      	mov	r2, r0
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	4293      	cmp	r3, r2
 80091ca:	bf34      	ite	cc
 80091cc:	2301      	movcc	r3, #1
 80091ce:	2300      	movcs	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d04f      	beq.n	8009276 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80091d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd fbb2 	bl	800694e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80091ea:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80091ec:	2300      	movs	r3, #0
 80091ee:	623b      	str	r3, [r7, #32]
 80091f0:	6a3a      	ldr	r2, [r7, #32]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d23a      	bcs.n	800926e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	4413      	add	r3, r2
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	212c      	movs	r1, #44	; 0x2c
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
      TfLiteNode* node =
 800920e:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
              .node_and_registrations[i]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	212c      	movs	r1, #44	; 0x2c
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	2b20      	cmp	r3, #32
 8009230:	d106      	bne.n	8009240 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	e004      	b.n	800924a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6850      	ldr	r0, [r2, #4]
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	4798      	blx	r3
 8009260:	4602      	mov	r2, r0
        node->user_data =
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	3301      	adds	r3, #1
 800926a:	623b      	str	r3, [r7, #32]
 800926c:	e7c0      	b.n	80091f0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	3301      	adds	r3, #1
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
 8009274:	e7a1      	b.n	80091ba <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3728      	adds	r7, #40	; 0x28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fd fb9a 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	4293      	cmp	r3, r2
 80092aa:	bf34      	ite	cc
 80092ac:	2301      	movcc	r3, #1
 80092ae:	2300      	movcs	r3, #0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d053      	beq.n	800935e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fd fb42 	bl	800694e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80092ca:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 80092cc:	2300      	movs	r3, #0
 80092ce:	623b      	str	r3, [r7, #32]
 80092d0:	6a3a      	ldr	r2, [r7, #32]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d23e      	bcs.n	8009356 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	4413      	add	r3, r2
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	212c      	movs	r1, #44	; 0x2c
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	4413      	add	r3, r2
      TfLiteNode* node =
 80092ee:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	4413      	add	r3, r2
              .node_and_registrations[i]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	212c      	movs	r1, #44	; 0x2c
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d016      	beq.n	8009340 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6852      	ldr	r2, [r2, #4]
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f7ff fedb 	bl	80090e6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009330:	4601      	mov	r1, r0
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	480e      	ldr	r0, [pc, #56]	; (8009370 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 8009338:	f7ff fe7a 	bl	8009030 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800933c:	2301      	movs	r3, #1
 800933e:	e012      	b.n	8009366 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	6a3a      	ldr	r2, [r7, #32]
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fdf1 	bl	8007f30 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	3301      	adds	r3, #1
 8009352:	623b      	str	r3, [r7, #32]
 8009354:	e7bc      	b.n	80092d0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	3301      	adds	r3, #1
 800935a:	627b      	str	r3, [r7, #36]	; 0x24
 800935c:	e79d      	b.n	800929a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3728      	adds	r7, #40	; 0x28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	08014a68 	.word	0x08014a68

08009374 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd fb24 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009390:	4602      	mov	r2, r0
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4293      	cmp	r3, r2
 8009396:	bf34      	ite	cc
 8009398:	2301      	movcc	r3, #1
 800939a:	2300      	movcs	r3, #0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d040      	beq.n	8009424 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	4611      	mov	r1, r2
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fd facc 	bl	800694e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80093b6:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80093b8:	2300      	movs	r3, #0
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d22b      	bcs.n	800941c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691a      	ldr	r2, [r3, #16]
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	4413      	add	r3, r2
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	212c      	movs	r1, #44	; 0x2c
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	4413      	add	r3, r2
      TfLiteNode* node =
 80093da:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	4413      	add	r3, r2
              .node_and_registrations[i]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	212c      	movs	r1, #44	; 0x2c
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6850      	ldr	r0, [r2, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	6912      	ldr	r2, [r2, #16]
 8009410:	4611      	mov	r1, r2
 8009412:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	3301      	adds	r3, #1
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	e7cf      	b.n	80093bc <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	e7b0      	b.n	8009386 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8009434:	b5b0      	push	{r4, r5, r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4618      	mov	r0, r3
 8009452:	f7fd fac1 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009456:	4602      	mov	r2, r0
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	bf94      	ite	ls
 800945e:	2301      	movls	r3, #1
 8009460:	2300      	movhi	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800946c:	4618      	mov	r0, r3
 800946e:	f7fd fab3 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009472:	4603      	mov	r3, r0
 8009474:	461a      	mov	r2, r3
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	483c      	ldr	r0, [pc, #240]	; (800956c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 800947a:	f7ff fdd9 	bl	8009030 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800947e:	2401      	movs	r4, #1
 8009480:	e06e      	b.n	8009560 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fd fa60 	bl	800694e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800948e:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8009490:	2300      	movs	r3, #0
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
 8009494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	429a      	cmp	r2, r3
 800949a:	d25d      	bcs.n	8009558 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	212c      	movs	r1, #44	; 0x2c
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	4413      	add	r3, r2
    TfLiteNode* node =
 80094b2:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	212c      	movs	r1, #44	; 0x2c
 80094c4:	fb01 f303 	mul.w	r3, r1, r3
 80094c8:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 80094ce:	6978      	ldr	r0, [r7, #20]
 80094d0:	f7ff fe09 	bl	80090e6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80094d4:	4601      	mov	r1, r0
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fdc6 	bl	8009072 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 80094ee:	f007 fc7a 	bl	8010de6 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6852      	ldr	r2, [r2, #4]
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	4610      	mov	r0, r2
 80094fe:	4798      	blx	r3
 8009500:	4603      	mov	r3, r0
 8009502:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4610      	mov	r0, r2
 8009514:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 8009516:	7cfb      	ldrb	r3, [r7, #19]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d10b      	bne.n	8009534 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f7ff fde2 	bl	80090e6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009522:	4601      	mov	r1, r0
 8009524:	7cfb      	ldrb	r3, [r7, #19]
 8009526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009528:	4811      	ldr	r0, [pc, #68]	; (8009570 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 800952a:	f7ff fd81 	bl	8009030 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800952e:	2401      	movs	r4, #1
 8009530:	2500      	movs	r5, #0
 8009532:	e006      	b.n	8009542 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8009534:	7cfb      	ldrb	r3, [r7, #19]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 800953a:	7cfc      	ldrb	r4, [r7, #19]
 800953c:	2500      	movs	r5, #0
 800953e:	e000      	b.n	8009542 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8009540:	2501      	movs	r5, #1
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fdb5 	bl	80090b6 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800954c:	2d01      	cmp	r5, #1
 800954e:	d107      	bne.n	8009560 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	3301      	adds	r3, #1
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
 8009556:	e79d      	b.n	8009494 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a3a      	ldr	r2, [r7, #32]
 800955c:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800955e:	2400      	movs	r4, #0
 8009560:	4623      	mov	r3, r4
}
 8009562:	4618      	mov	r0, r3
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bdb0      	pop	{r4, r5, r7, pc}
 800956a:	bf00      	nop
 800956c:	08014aa0 	.word	0x08014aa0
 8009570:	08014ad4 	.word	0x08014ad4

08009574 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800957c:	2300      	movs	r3, #0
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd fa27 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800958a:	4602      	mov	r2, r0
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	4293      	cmp	r3, r2
 8009590:	bf34      	ite	cc
 8009592:	2301      	movcc	r3, #1
 8009594:	2300      	movcs	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d077      	beq.n	800968c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff faf8 	bl	8008b98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80095a8:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80095aa:	2300      	movs	r3, #0
 80095ac:	623b      	str	r3, [r7, #32]
 80095ae:	69b8      	ldr	r0, [r7, #24]
 80095b0:	f7fd fd45 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 80095b4:	4603      	mov	r3, r0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fa2c 	bl	8008a14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80095bc:	4602      	mov	r2, r0
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	bf34      	ite	cc
 80095c4:	2301      	movcc	r3, #1
 80095c6:	2300      	movcs	r3, #0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d05a      	beq.n	8009684 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 80095ce:	69b8      	ldr	r0, [r7, #24]
 80095d0:	f7fd fd35 	bl	800703e <_ZNK6tflite8SubGraph7tensorsEv>
 80095d4:	4603      	mov	r3, r0
 80095d6:	6a39      	ldr	r1, [r7, #32]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff fa29 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80095de:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 80095e0:	6978      	ldr	r0, [r7, #20]
 80095e2:	f7fd fcfc 	bl	8006fde <_ZNK6tflite6Tensor11is_variableEv>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d047      	beq.n	800967c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	6859      	ldr	r1, [r3, #4]
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	4613      	mov	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	f107 020c 	add.w	r2, r7, #12
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7fd fc53 	bl	8006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8009610:	4603      	mov	r3, r0
 8009612:	74fb      	strb	r3, [r7, #19]
 8009614:	7cfb      	ldrb	r3, [r7, #19]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 800961a:	7cfb      	ldrb	r3, [r7, #19]
 800961c:	e037      	b.n	800968e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 8009622:	6978      	ldr	r0, [r7, #20]
 8009624:	f7fd fa88 	bl	8006b38 <_ZNK6tflite6Tensor4typeEv>
 8009628:	4603      	mov	r3, r0
 800962a:	2b09      	cmp	r3, #9
 800962c:	bf0c      	ite	eq
 800962e:	2301      	moveq	r3, #1
 8009630:	2300      	movne	r3, #0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00f      	beq.n	8009658 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 8009638:	6978      	ldr	r0, [r7, #20]
 800963a:	f7fd fcc2 	bl	8006fc2 <_ZNK6tflite6Tensor12quantizationEv>
 800963e:	4603      	mov	r3, r0
 8009640:	4618      	mov	r0, r3
 8009642:	f7fd fc92 	bl	8006f6a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009646:	4603      	mov	r3, r0
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff f9ba 	bl	80089c4 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4613      	mov	r3, r2
 8009656:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	6a3a      	ldr	r2, [r7, #32]
 8009666:	4613      	mov	r3, r2
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	440b      	add	r3, r1
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	69f9      	ldr	r1, [r7, #28]
 8009676:	4618      	mov	r0, r3
 8009678:	f007 fc54 	bl	8010f24 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	3301      	adds	r3, #1
 8009680:	623b      	str	r3, [r7, #32]
 8009682:	e794      	b.n	80095ae <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	3301      	adds	r3, #1
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
 800968a:	e779      	b.n	8009580 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	; 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd f928 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80096a8:	4603      	mov	r3, r0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fd f994 	bl	80069d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80096b0:	4603      	mov	r3, r0
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	611a      	str	r2, [r3, #16]
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fd f907 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80096ea:	4602      	mov	r2, r0
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4619      	mov	r1, r3
 80096f0:	4610      	mov	r0, r2
 80096f2:	f7fd f97f 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80096f6:	4603      	mov	r3, r0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd fcae 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 80096fe:	4603      	mov	r3, r0
 8009700:	4618      	mov	r0, r3
 8009702:	f7fb f870 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009706:	4603      	mov	r3, r0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f7fd f8e9 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8009726:	4602      	mov	r2, r0
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4619      	mov	r1, r3
 800972c:	4610      	mov	r0, r2
 800972e:	f7fd f961 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009732:	4603      	mov	r3, r0
 8009734:	4618      	mov	r0, r3
 8009736:	f7fd fc90 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 800973a:	4602      	mov	r2, r0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4619      	mov	r1, r3
 8009740:	4610      	mov	r0, r2
 8009742:	f7fb f85f 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009746:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	4413      	add	r3, r2
 8009752:	6859      	ldr	r1, [r3, #4]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4613      	mov	r3, r2
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fd f8be 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800977c:	4602      	mov	r2, r0
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f7fd f936 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009788:	4603      	mov	r3, r0
 800978a:	4618      	mov	r0, r3
 800978c:	f7fd fc73 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 8009790:	4603      	mov	r3, r0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fb f827 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009798:	4603      	mov	r3, r0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd f8a0 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80097b8:	4602      	mov	r2, r0
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4619      	mov	r1, r3
 80097be:	4610      	mov	r0, r2
 80097c0:	f7fd f918 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80097c4:	4603      	mov	r3, r0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd fc55 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 80097cc:	4602      	mov	r2, r0
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fb f816 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80097d8:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4413      	add	r3, r2
 80097e4:	6859      	ldr	r1, [r3, #4]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	2104      	movs	r1, #4
 8009808:	4618      	mov	r0, r3
 800980a:	f7f8 f927 	bl	8001a5c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800980e:	4603      	mov	r3, r0
  }
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	210e      	movs	r1, #14
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff f80a 	bl	800883e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800982a:	4603      	mov	r3, r0
  }
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2106      	movs	r1, #6
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fd50 	bl	800a2e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8009846:	4603      	mov	r3, r0
  }
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f7fd f833 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8009892:	4603      	mov	r3, r0
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f7fd f8ac 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800989c:	4603      	mov	r3, r0
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fd fbdb 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 80098a4:	4603      	mov	r3, r0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa ff9d 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80098ac:	4603      	mov	r3, r0
  }
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd f818 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fd f891 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80098d2:	4603      	mov	r3, r0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fd fbc0 	bl	800705a <_ZNK6tflite8SubGraph6inputsEv>
 80098da:	4603      	mov	r3, r0
  }
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fd f801 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fd f87a 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009900:	4603      	mov	r3, r0
 8009902:	4618      	mov	r0, r3
 8009904:	f7fd fbb7 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 8009908:	4603      	mov	r3, r0
 800990a:	4618      	mov	r0, r3
 800990c:	f7fa ff6b 	bl	80047e6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009910:	4603      	mov	r3, r0
  }
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc ffe6 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 800992c:	4603      	mov	r3, r0
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd f85f 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009936:	4603      	mov	r3, r0
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd fb9c 	bl	8007076 <_ZNK6tflite8SubGraph7outputsEv>
 800993e:	4603      	mov	r3, r0
  }
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	336c      	adds	r3, #108	; 0x6c
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff ff7b 	bl	8009850 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800995a:	4603      	mov	r3, r0
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	609a      	str	r2, [r3, #8]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	330c      	adds	r3, #12
 8009988:	225c      	movs	r2, #92	; 0x5c
 800998a:	2100      	movs	r1, #0
 800998c:	4618      	mov	r0, r3
 800998e:	f007 fac9 	bl	8010f24 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	6838      	ldr	r0, [r7, #0]
 8009998:	f7fe f918 	bl	8007bcc <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800999c:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	669a      	str	r2, [r3, #104]	; 0x68
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	f7ff fbae 	bl	8009114 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 80099e0:	6a39      	ldr	r1, [r7, #32]
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f826 	bl	8009a34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	336c      	adds	r3, #108	; 0x6c
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff ff32 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bf14      	ite	ne
 8009a0a:	2301      	movne	r3, #1
 8009a0c:	2300      	moveq	r3, #0
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	336c      	adds	r3, #108	; 0x6c
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fcab 	bl	8009374 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	336c      	adds	r3, #108	; 0x6c
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fba0 	bl	8009168 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a0d      	ldr	r2, [pc, #52]	; (8009a7c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8009a48:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8009a54:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 8009a60:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	0800a1f9 	.word	0x0800a1f9
 8009a80:	0800a231 	.word	0x0800a231
 8009a84:	0800a281 	.word	0x0800a281

08009a88 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 8009a88:	b5b0      	push	{r4, r5, r7, lr}
 8009a8a:	b096      	sub	sp, #88	; 0x58
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009a90:	2300      	movs	r3, #0
 8009a92:	657b      	str	r3, [r7, #84]	; 0x54
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	336c      	adds	r3, #108	; 0x6c
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff fdfc 	bl	8009696 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bfb4      	ite	lt
 8009aa6:	2301      	movlt	r3, #1
 8009aa8:	2300      	movge	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8155 	beq.w	8009d5c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fc ff1e 	bl	80068f8 <_ZNK6tflite5Model9subgraphsEv>
 8009abc:	4602      	mov	r2, r0
 8009abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fc ff96 	bl	80069f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009ac8:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 8009aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 8009ad0:	f007 f989 	bl	8010de6 <abort>

    auto* opcodes = model_->operator_codes();
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff feab 	bl	8009834 <_ZNK6tflite5Model14operator_codesEv>
 8009ade:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fe9e 	bl	8008826 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 8009aea:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009aec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009aee:	f7fc ff11 	bl	8006914 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8009af2:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 8009af4:	2300      	movs	r3, #0
 8009af6:	653b      	str	r3, [r7, #80]	; 0x50
 8009af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	429a      	cmp	r2, r3
 8009afe:	f080 8129 	bcs.w	8009d54 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      const auto* op = subgraph->operators()->Get(i);
 8009b02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b04:	f7fc feea 	bl	80068dc <_ZNK6tflite8SubGraph9operatorsEv>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe ffb5 	bl	8008a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8009b12:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 8009b14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b16:	f7ff fe70 	bl	80097fa <_ZNK6tflite8Operator12opcode_indexEv>
 8009b1a:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 8009b1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b1e:	f000 fbf2 	bl	800a306 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	4293      	cmp	r3, r2
 8009b28:	bf2c      	ite	cs
 8009b2a:	2301      	movcs	r3, #1
 8009b2c:	2300      	movcc	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8009b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b36:	488c      	ldr	r0, [pc, #560]	; (8009d68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8009b38:	f7ff fa7a 	bl	8009030 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e10e      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* opcode = opcodes->Get(index);
 8009b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b44:	f000 fbee 	bl	800a324 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8009b48:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	461d      	mov	r5, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	336c      	adds	r3, #108	; 0x6c
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fe85 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b6a:	212c      	movs	r1, #44	; 0x2c
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009b72:	3328      	adds	r3, #40	; 0x28
 8009b74:	4622      	mov	r2, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b7a:	f7fb ff33 	bl	80059e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 8009b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00e      	beq.n	8009baa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 8009b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b8e:	f006 fe6c 	bl	801086a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8009b92:	4603      	mov	r3, r0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fb fee1 	bl	800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4873      	ldr	r0, [pc, #460]	; (8009d6c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 8009ba0:	f7ff fa46 	bl	8009030 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 8009ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ba8:	e0d9      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	336c      	adds	r3, #108	; 0x6c
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fe5a 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc0:	212c      	movs	r1, #44	; 0x2c
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	4413      	add	r3, r2
                                     .registration;
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d105      	bne.n	8009bde <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 8009bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bd4:	4866      	ldr	r0, [pc, #408]	; (8009d70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8009bd6:	f7ff fa2b 	bl	8009030 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e0bf      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 8009be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      const char* custom_data = nullptr;
 8009be6:	2300      	movs	r3, #0
 8009be8:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]

      if (op_type == BuiltinOperator_CUSTOM) {
 8009bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d11b      	bne.n	8009c32 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8009bfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bfc:	f7ff fe0c 	bl	8009818 <_ZNK6tflite8Operator14custom_optionsEv>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bf14      	ite	ne
 8009c06:	2301      	movne	r3, #1
 8009c08:	2300      	moveq	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d051      	beq.n	8009cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 8009c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c12:	f7ff fe01 	bl	8009818 <_ZNK6tflite8Operator14custom_optionsEv>
 8009c16:	4603      	mov	r3, r0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe ffd9 	bl	8008bd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009c1e:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 8009c20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c22:	f7ff fdf9 	bl	8009818 <_ZNK6tflite8Operator14custom_optionsEv>
 8009c26:	4603      	mov	r3, r0
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fe78 	bl	800891e <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8009c2e:	64b8      	str	r0, [r7, #72]	; 0x48
 8009c30:	e040      	b.n	8009cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 8009c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c34:	f7ff fdf0 	bl	8009818 <_ZNK6tflite8Operator14custom_optionsEv>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf14      	ite	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	2300      	moveq	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8009c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fb fe85 	bl	800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c52:	4603      	mov	r3, r0
 8009c54:	4619      	mov	r1, r3
 8009c56:	4847      	ldr	r0, [pc, #284]	; (8009d74 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8009c58:	f7ff f9ea 	bl	8009030 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e07e      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3320      	adds	r3, #32
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009c72:	4610      	mov	r0, r2
 8009c74:	4798      	blx	r3
 8009c76:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 8009c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fb fe6a 	bl	800595c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	483a      	ldr	r0, [pc, #232]	; (8009d78 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 8009c8e:	f7ff f9cf 	bl	8009030 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e063      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6899      	ldr	r1, [r3, #8]
 8009c9a:	f107 0310 	add.w	r3, r7, #16
 8009c9e:	69fc      	ldr	r4, [r7, #28]
 8009ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ca2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ca4:	47a0      	blx	r4
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	76fb      	strb	r3, [r7, #27]
 8009caa:	7efb      	ldrb	r3, [r7, #27]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
 8009cb0:	7efb      	ldrb	r3, [r7, #27]
 8009cb2:	e054      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009cb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009cba:	f7fd f9a4 	bl	8007006 <_ZNK6tflite8Operator6inputsEv>
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7fe fd9a 	bl	8008800 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	76bb      	strb	r3, [r7, #26]
 8009cd0:	7ebb      	ldrb	r3, [r7, #26]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x252>
 8009cd6:	7ebb      	ldrb	r3, [r7, #26]
 8009cd8:	e041      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009cde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ce0:	f7fd f99f 	bl	8007022 <_ZNK6tflite8Operator7outputsEv>
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	461a      	mov	r2, r3
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7fe fd87 	bl	8008800 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	767b      	strb	r3, [r7, #25]
 8009cf6:	7e7b      	ldrb	r3, [r7, #25]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x278>
 8009cfc:	7e7b      	ldrb	r3, [r7, #25]
 8009cfe:	e02e      	b.n	8009d5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	336c      	adds	r3, #108	; 0x6c
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff fdaf 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	4413      	add	r3, r2
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d16:	212c      	movs	r1, #44	; 0x2c
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
      *node = {};
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	4618      	mov	r0, r3
 8009d24:	2328      	movs	r3, #40	; 0x28
 8009d26:	461a      	mov	r2, r3
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f007 f8fb 	bl	8010f24 <memset>
      node->inputs = inputs_array;
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d44:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 8009d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < operators_size; ++i) {
 8009d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4e:	3301      	adds	r3, #1
 8009d50:	653b      	str	r3, [r7, #80]	; 0x50
 8009d52:	e6d1      	b.n	8009af8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d56:	3301      	adds	r3, #1
 8009d58:	657b      	str	r3, [r7, #84]	; 0x54
 8009d5a:	e69b      	b.n	8009a94 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3758      	adds	r7, #88	; 0x58
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bdb0      	pop	{r4, r5, r7, pc}
 8009d66:	bf00      	nop
 8009d68:	08015628 	.word	0x08015628
 8009d6c:	08015654 	.word	0x08015654
 8009d70:	08015684 	.word	0x08015684
 8009d74:	080156a8 	.word	0x080156a8
 8009d78:	080156f0 	.word	0x080156f0

08009d7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8009d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	b088      	sub	sp, #32
 8009d82:	af02      	add	r7, sp, #8
 8009d84:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4610      	mov	r0, r2
 8009d92:	f7fd ff65 	bl	8007c60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 8009d96:	60f8      	str	r0, [r7, #12]


  if (allocations == nullptr) {
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	49a4      	ldr	r1, [pc, #656]	; (800a034 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f9 ff59 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e139      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	336c      	adds	r3, #108	; 0x6c
 8009dba:	68f9      	ldr	r1, [r7, #12]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fc7c 	bl	80096ba <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff fe60 	bl	8009a88 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	72fb      	strb	r3, [r7, #11]
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	e129      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a97      	ldr	r2, [pc, #604]	; (800a038 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8009dda:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a94      	ldr	r2, [pc, #592]	; (800a03c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8009dec:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	336c      	adds	r3, #108	; 0x6c
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff f9d8 	bl	80091a8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a91      	ldr	r2, [pc, #580]	; (800a040 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8009dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	336c      	adds	r3, #108	; 0x6c
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fa40 	bl	8009288 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a8b      	ldr	r2, [pc, #556]	; (800a044 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8009e18:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681d      	ldr	r5, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	336c      	adds	r3, #108	; 0x6c
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff fd1e 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	338c      	adds	r3, #140	; 0x8c
 8009e32:	4629      	mov	r1, r5
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7fd ff95 	bl	8007d64 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	72bb      	strb	r3, [r7, #10]
 8009e3e:	7abb      	ldrb	r3, [r7, #10]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 8009e44:	7abb      	ldrb	r3, [r7, #10]
 8009e46:	e0f0      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	681c      	ldr	r4, [r3, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff fd12 	bl	8009880 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e5c:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4619      	mov	r1, r3
 8009e62:	4628      	mov	r0, r5
 8009e64:	47a0      	blx	r4
 8009e66:	4602      	mov	r2, r0
  input_tensors_ =
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10d      	bne.n	8009e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689c      	ldr	r4, [r3, #8]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff fcff 	bl	8009880 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e82:	4603      	mov	r3, r0
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	461a      	mov	r2, r3
 8009e88:	496f      	ldr	r1, [pc, #444]	; (800a048 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7f9 fee6 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e0ca      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff fcf1 	bl	8009880 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf34      	ite	cc
 8009ea6:	2301      	movcc	r3, #1
 8009ea8:	2300      	movcs	r3, #0
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d03c      	beq.n	8009f2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	336c      	adds	r3, #108	; 0x6c
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fcce 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009ecc:	4680      	mov	r8, r0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fcf1 	bl	80098b6 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	6979      	ldr	r1, [r7, #20]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fa fc93 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009ede:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	18d4      	adds	r4, r2, r3
 8009eec:	2300      	movs	r3, #0
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	47a8      	blx	r5
 8009efa:	4603      	mov	r3, r0
 8009efc:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d108      	bne.n	8009f22 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	494d      	ldr	r1, [pc, #308]	; (800a04c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f9 fe9f 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e083      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	3301      	adds	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e7b6      	b.n	8009e98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	330c      	adds	r3, #12
 8009f36:	681c      	ldr	r4, [r3, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff fcd3 	bl	80098e4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f3e:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4619      	mov	r1, r3
 8009f44:	4628      	mov	r0, r5
 8009f46:	47a0      	blx	r4
 8009f48:	4602      	mov	r2, r0
  output_tensors_ =
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10d      	bne.n	8009f76 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689c      	ldr	r4, [r3, #8]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fcc0 	bl	80098e4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f64:	4603      	mov	r3, r0
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4939      	ldr	r1, [pc, #228]	; (800a050 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7f9 fe75 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e059      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 8009f76:	2300      	movs	r3, #0
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff fcb2 	bl	80098e4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f80:	4602      	mov	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bf34      	ite	cc
 8009f88:	2301      	movcc	r3, #1
 8009f8a:	2300      	movcs	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d03c      	beq.n	800a00c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	336c      	adds	r3, #108	; 0x6c
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff fc5d 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009fae:	4680      	mov	r8, r0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff fcb2 	bl	800991a <_ZNK6tflite16MicroInterpreter7outputsEv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6939      	ldr	r1, [r7, #16]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fa fc22 	bl	8004804 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009fc0:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	18d4      	adds	r4, r2, r3
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	47a8      	blx	r5
 8009fdc:	4603      	mov	r3, r0
 8009fde:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d108      	bne.n	800a004 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	4916      	ldr	r1, [pc, #88]	; (800a054 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f9 fe2e 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800a000:	2301      	movs	r3, #1
 800a002:	e012      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	3301      	adds	r3, #1
 800a008:	613b      	str	r3, [r7, #16]
 800a00a:	e7b6      	b.n	8009f7a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f89d 	bl	800a14c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800a012:	4603      	mov	r3, r0
 800a014:	727b      	strb	r3, [r7, #9]
 800a016:	7a7b      	ldrb	r3, [r7, #9]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800a01c:	7a7b      	ldrb	r3, [r7, #9]
 800a01e:	e004      	b.n	800a02a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	08015710 	.word	0x08015710
 800a038:	0800a169 	.word	0x0800a169
 800a03c:	0800a2bf 	.word	0x0800a2bf
 800a040:	0800a195 	.word	0x0800a195
 800a044:	0800a1cb 	.word	0x0800a1cb
 800a048:	08015734 	.word	0x08015734
 800a04c:	08015780 	.word	0x08015780
 800a050:	080157a8 	.word	0x080157a8
 800a054:	080157f4 	.word	0x080157f4

0800a058 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a066:	2b00      	cmp	r3, #0
 800a068:	d007      	beq.n	800a07a <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4912      	ldr	r1, [pc, #72]	; (800a0b8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800a070:	4618      	mov	r0, r3
 800a072:	f7f9 fdf3 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800a076:	2301      	movs	r3, #1
 800a078:	e019      	b.n	800a0ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a080:	f083 0301 	eor.w	r3, r3, #1
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff fe76 	bl	8009d7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	e007      	b.n	800a0ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	336c      	adds	r3, #108	; 0x6c
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff f9c5 	bl	8009434 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	bf00      	nop
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	0801581c 	.word	0x0801581c

0800a0bc <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff fbda 	bl	8009880 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a0cc:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d308      	bcc.n	800a0e8 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6898      	ldr	r0, [r3, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	4908      	ldr	r1, [pc, #32]	; (800a100 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800a0e0:	f7f9 fdbc 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	e006      	b.n	800a0f6 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	681b      	ldr	r3, [r3, #0]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	0801584c 	.word	0x0801584c

0800a104 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff fbe8 	bl	80098e4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a114:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d308      	bcc.n	800a130 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6898      	ldr	r0, [r3, #8]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	4908      	ldr	r1, [pc, #32]	; (800a148 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800a128:	f7f9 fd98 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e006      	b.n	800a13e <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	681b      	ldr	r3, [r3, #0]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	08015878 	.word	0x08015878

0800a14c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	336c      	adds	r3, #108	; 0x6c
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff fa0b 	bl	8009574 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800a15e:	4603      	mov	r3, r0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a176:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	330c      	adds	r3, #12
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	4610      	mov	r0, r2
 800a188:	4798      	blx	r3
 800a18a:	4603      	mov	r3, r0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	336c      	adds	r3, #108	; 0x6c
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fb4e 	bl	8009850 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f7fd fe66 	bl	8007e8c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800a1c0:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd90      	pop	{r4, r7, pc}

0800a1ca <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800a1e4:	4413      	add	r3, r2
 800a1e6:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	681b      	ldr	r3, [r3, #0]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800a1f8:	b40e      	push	{r1, r2, r3}
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800a208:	f107 0320 	add.w	r3, r7, #32
 800a20c:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6898      	ldr	r0, [r3, #8]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3308      	adds	r3, #8
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	69f9      	ldr	r1, [r7, #28]
 800a220:	4798      	blx	r3
  va_end(args);
#endif
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a22c:	b003      	add	sp, #12
 800a22e:	4770      	bx	lr

0800a230 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af02      	add	r7, sp, #8
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3304      	adds	r3, #4
 800a24e:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	336c      	adds	r3, #108	; 0x6c
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff fb05 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a25e:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f7ff fb71 	bl	8009948 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a266:	4603      	mov	r3, r0
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	4642      	mov	r2, r8
 800a26e:	4631      	mov	r1, r6
 800a270:	4628      	mov	r0, r5
 800a272:	47a0      	blx	r4
 800a274:	4603      	mov	r3, r0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a280 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a280:	b590      	push	{r4, r7, lr}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	336c      	adds	r3, #108	; 0x6c
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fae7 	bl	8009868 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a29a:	4604      	mov	r4, r0
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fb53 	bl	8009948 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	440b      	add	r3, r1
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd90      	pop	{r4, r7, pc}

0800a2be <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a2f2:	887b      	ldrh	r3, [r7, #2]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f83a 	bl	800a370 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800a2fc:	4603      	mov	r3, r0
  }
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f7f7 fb6d 	bl	80019f2 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a318:	4603      	mov	r3, r0
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ffe9 	bl	800a306 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a334:	4602      	mov	r2, r0
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	4293      	cmp	r3, r2
 800a33a:	d306      	bcc.n	800a34a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800a33e:	4a0a      	ldr	r2, [pc, #40]	; (800a368 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800a340:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a344:	4809      	ldr	r0, [pc, #36]	; (800a36c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800a346:	f006 fd55 	bl	8010df4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f844 	bl	800a3d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800a350:	4603      	mov	r3, r0
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f82b 	bl	800a3b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800a35a:	4603      	mov	r3, r0
  }
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	080158a4 	.word	0x080158a4
 800a368:	08015b0c 	.word	0x08015b0c
 800a36c:	08015980 	.word	0x08015980

0800a370 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a37c:	887b      	ldrh	r3, [r7, #2]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7f6 fe79 	bl	8001078 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a386:	4603      	mov	r3, r0
 800a388:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	89fb      	ldrh	r3, [r7, #14]
 800a38e:	4413      	add	r3, r2
 800a390:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a392:	89fb      	ldrh	r3, [r7, #14]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800a398:	68b8      	ldr	r0, [r7, #8]
 800a39a:	f7f7 fb43 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4413      	add	r3, r2
                        : nullptr;
 800a3a4:	e000      	b.n	800a3a8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a3a6:	2300      	movs	r3, #0
  }
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7f7 fb2d 	bl	8001a24 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4413      	add	r3, r2
  }
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3304      	adds	r3, #4
  }
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d20e      	bcs.n	800a42a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	617a      	str	r2, [r7, #20]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	7812      	ldrb	r2, [r2, #0]
 800a41c:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	613a      	str	r2, [r7, #16]
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800a428:	e7ec      	b.n	800a404 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800a42a:	687b      	ldr	r3, [r7, #4]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
  char* current = main;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d003      	beq.n	800a458 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	3301      	adds	r3, #1
 800a454:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a456:	e7f7      	b.n	800a448 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00e      	beq.n	800a488 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d20a      	bcs.n	800a488 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	701a      	strb	r2, [r3, #0]
    ++current;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	3301      	adds	r3, #1
 800a47e:	617b      	str	r3, [r7, #20]
    ++to_append;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3301      	adds	r3, #1
 800a484:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800a486:	e7ec      	b.n	800a462 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
  return current;
 800a48e:	697b      	ldr	r3, [r7, #20]
}
 800a490:	4618      	mov	r0, r3
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4b4:	fb02 f201 	mul.w	r2, r2, r1
 800a4b8:	1a9b      	subs	r3, r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b09      	cmp	r3, #9
 800a4c0:	dc04      	bgt.n	800a4cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	3330      	adds	r3, #48	; 0x30
 800a4c8:	77fb      	strb	r3, [r7, #31]
 800a4ca:	e003      	b.n	800a4d4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	3357      	adds	r3, #87	; 0x57
 800a4d2:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	60ba      	str	r2, [r7, #8]
 800a4da:	7ffa      	ldrb	r2, [r7, #31]
 800a4dc:	701a      	strb	r2, [r3, #0]
    i /= base;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e6:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d000      	beq.n	800a4f0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800a4ee:	e7dd      	b.n	800a4ac <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	69b8      	ldr	r0, [r7, #24]
 800a4fa:	f7ff ff79 	bl	800a3f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	da07      	bge.n	800a52c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	603a      	str	r2, [r7, #0]
 800a522:	222d      	movs	r2, #45	; 0x2d
 800a524:	701a      	strb	r2, [r3, #0]
    u = -u;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	425b      	negs	r3, r3
 800a52a:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800a52c:	220a      	movs	r2, #10
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7ff ffb3 	bl	800a49c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a536:	4603      	mov	r3, r0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800a540:	b580      	push	{r7, lr}
 800a542:	b090      	sub	sp, #64	; 0x40
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800a54c:	f107 0310 	add.w	r3, r7, #16
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff ffd8 	bl	800a508 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800a558:	f107 0310 	add.w	r3, r7, #16
 800a55c:	461a      	mov	r2, r3
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff ff69 	bl	800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a566:	4603      	mov	r3, r0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3740      	adds	r7, #64	; 0x40
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b090      	sub	sp, #64	; 0x40
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800a57e:	f107 0310 	add.w	r3, r7, #16
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ff88 	bl	800a49c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800a58c:	f107 0310 	add.w	r3, r7, #16
 800a590:	461a      	mov	r2, r3
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff ff4f 	bl	800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a59a:	4603      	mov	r3, r0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3740      	adds	r7, #64	; 0x40
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800a5a4:	b590      	push	{r4, r7, lr}
 800a5a6:	b09b      	sub	sp, #108	; 0x6c
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800a5ae:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	332f      	adds	r3, #47	; 0x2f
 800a5b8:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800a5ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5be:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800a5c0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a5c4:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800a5c6:	2317      	movs	r3, #23
 800a5c8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800a5ca:	237f      	movs	r3, #127	; 0x7f
 800a5cc:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800a5ce:	4b6a      	ldr	r3, [pc, #424]	; (800a778 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800a5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d2:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800a5d4:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	0ddb      	lsrs	r3, r3, #23
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800a5de:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da05      	bge.n	800a5fa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800a5ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f0:	222d      	movs	r2, #45	; 0x2d
 800a5f2:	701a      	strb	r2, [r3, #0]
    current += 1;
 800a5f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800a5fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	2b80      	cmp	r3, #128	; 0x80
 800a604:	d118      	bne.n	800a638 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800a606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800a60c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a60e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	4a5a      	ldr	r2, [pc, #360]	; (800a77c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800a614:	4619      	mov	r1, r3
 800a616:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a618:	f7ff ff0e 	bl	800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a61c:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a61e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a620:	e0a5      	b.n	800a76e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800a622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	4a55      	ldr	r2, [pc, #340]	; (800a780 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800a62a:	4619      	mov	r1, r3
 800a62c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a62e:	f7ff ff03 	bl	800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a632:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a636:	e09a      	b.n	800a76e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800a638:	230d      	movs	r3, #13
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800a63c:	4b51      	ldr	r3, [pc, #324]	; (800a784 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800a63e:	f107 040c 	add.w	r4, r7, #12
 800a642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a644:	c407      	stmia	r4!, {r0, r1, r2}
 800a646:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800a648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64a:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a64c:	2300      	movs	r3, #0
 800a64e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a652:	2b0c      	cmp	r3, #12
 800a654:	dc0f      	bgt.n	800a676 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800a656:	f107 020c 	add.w	r2, r7, #12
 800a65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a65c:	4413      	add	r3, r2
 800a65e:	f993 3000 	ldrsb.w	r3, [r3]
 800a662:	461a      	mov	r2, r3
 800a664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a666:	40d3      	lsrs	r3, r2
 800a668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a66a:	4413      	add	r3, r2
 800a66c:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a670:	3301      	adds	r3, #1
 800a672:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a674:	e7ec      	b.n	800a650 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800a676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a678:	2231      	movs	r2, #49	; 0x31
 800a67a:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a67c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67e:	3301      	adds	r3, #1
 800a680:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800a682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a684:	222e      	movs	r2, #46	; 0x2e
 800a686:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68a:	3301      	adds	r3, #1
 800a68c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800a68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800a694:	2307      	movs	r3, #7
 800a696:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800a698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a69a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b07      	cmp	r3, #7
 800a6a0:	dc01      	bgt.n	800a6a6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800a6a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a4:	e063      	b.n	800a76e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6ac:	2b06      	cmp	r3, #6
 800a6ae:	dc08      	bgt.n	800a6c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800a6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6b4:	4413      	add	r3, r2
 800a6b6:	2230      	movs	r2, #48	; 0x30
 800a6b8:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6bc:	3301      	adds	r3, #1
 800a6be:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6c0:	e7f3      	b.n	800a6aa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800a6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800a6c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ca:	1ad1      	subs	r1, r2, r3
 800a6cc:	230a      	movs	r3, #10
 800a6ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a6d2:	f7ff ff4d 	bl	800a570 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800a6d6:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800a6d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	f1c3 0307 	rsb	r3, r3, #7
 800a6e6:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800a6e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ea:	2230      	movs	r2, #48	; 0x30
 800a6ec:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d018      	beq.n	800a726 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	da0f      	bge.n	800a720 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800a700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a702:	3b01      	subs	r3, #1
 800a704:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a70a:	4413      	add	r3, r2
 800a70c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a70e:	7812      	ldrb	r2, [r2, #0]
 800a710:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800a712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a714:	2230      	movs	r2, #48	; 0x30
 800a716:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800a718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71a:	3301      	adds	r3, #1
 800a71c:	657b      	str	r3, [r7, #84]	; 0x54
 800a71e:	e7eb      	b.n	800a6f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800a720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a722:	3307      	adds	r3, #7
 800a724:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a728:	3b01      	subs	r3, #1
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b30      	cmp	r3, #48	; 0x30
 800a72e:	d108      	bne.n	800a742 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800a730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a732:	3b01      	subs	r3, #1
 800a734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a736:	429a      	cmp	r2, r3
 800a738:	d203      	bcs.n	800a742 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800a73a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a73c:	3b01      	subs	r3, #1
 800a73e:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a740:	e7f1      	b.n	800a726 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800a742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a744:	2200      	movs	r2, #0
 800a746:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800a748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a74a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	4a0e      	ldr	r2, [pc, #56]	; (800a788 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800a750:	4619      	mov	r1, r3
 800a752:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a754:	f7ff fe70 	bl	800a438 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a758:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800a75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a75c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a762:	4619      	mov	r1, r3
 800a764:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a766:	f7ff feeb 	bl	800a540 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800a76a:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800a76c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800a76e:	4618      	mov	r0, r3
 800a770:	376c      	adds	r7, #108	; 0x6c
 800a772:	46bd      	mov	sp, r7
 800a774:	bd90      	pop	{r4, r7, pc}
 800a776:	bf00      	nop
 800a778:	007fffff 	.word	0x007fffff
 800a77c:	08015d0c 	.word	0x08015d0c
 800a780:	08015d10 	.word	0x08015d10
 800a784:	08015d18 	.word	0x08015d18
 800a788:	08015d14 	.word	0x08015d14

0800a78c <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	6838      	ldr	r0, [r7, #0]
 800a79a:	f7ff feb5 	bl	800a508 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	1ad3      	subs	r3, r2, r3
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800a7b6:	220a      	movs	r2, #10
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	6838      	ldr	r0, [r7, #0]
 800a7bc:	f7ff fe6e 	bl	800a49c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	1ad3      	subs	r3, r2, r3
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800a7d8:	2210      	movs	r2, #16
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	6838      	ldr	r0, [r7, #0]
 800a7de:	f7ff fe5d 	bl	800a49c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	1ad3      	subs	r3, r2, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	ed97 0a00 	vldr	s0, [r7]
 800a802:	f7ff fecf 	bl	800a5a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800a806:	4602      	mov	r2, r0
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	1ad3      	subs	r3, r2, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800a814:	b590      	push	{r4, r7, lr}
 800a816:	b08b      	sub	sp, #44	; 0x2c
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8151 	beq.w	800aadc <MicroVsnprintf+0x2c8>
 800a83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	429a      	cmp	r2, r3
 800a840:	f280 814c 	bge.w	800aadc <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b25      	cmp	r3, #37	; 0x25
 800a84a:	f040 813b 	bne.w	800aac4 <MicroVsnprintf+0x2b0>
      current++;
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	3301      	adds	r3, #1
 800a852:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b25      	cmp	r3, #37	; 0x25
 800a85a:	f000 80e2 	beq.w	800aa22 <MicroVsnprintf+0x20e>
 800a85e:	2b25      	cmp	r3, #37	; 0x25
 800a860:	dbe6      	blt.n	800a830 <MicroVsnprintf+0x1c>
 800a862:	2b78      	cmp	r3, #120	; 0x78
 800a864:	dce4      	bgt.n	800a830 <MicroVsnprintf+0x1c>
 800a866:	2b63      	cmp	r3, #99	; 0x63
 800a868:	dbe2      	blt.n	800a830 <MicroVsnprintf+0x1c>
 800a86a:	3b63      	subs	r3, #99	; 0x63
 800a86c:	2b15      	cmp	r3, #21
 800a86e:	d8df      	bhi.n	800a830 <MicroVsnprintf+0x1c>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <MicroVsnprintf+0x64>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800aa3b 	.word	0x0800aa3b
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800a831 	.word	0x0800a831
 800a884:	0800a9b7 	.word	0x0800a9b7
 800a888:	0800a831 	.word	0x0800a831
 800a88c:	0800a831 	.word	0x0800a831
 800a890:	0800a831 	.word	0x0800a831
 800a894:	0800a831 	.word	0x0800a831
 800a898:	0800a831 	.word	0x0800a831
 800a89c:	0800a831 	.word	0x0800a831
 800a8a0:	0800a831 	.word	0x0800a831
 800a8a4:	0800a831 	.word	0x0800a831
 800a8a8:	0800a831 	.word	0x0800a831
 800a8ac:	0800a831 	.word	0x0800a831
 800a8b0:	0800a831 	.word	0x0800a831
 800a8b4:	0800a831 	.word	0x0800a831
 800a8b8:	0800aa79 	.word	0x0800aa79
 800a8bc:	0800a831 	.word	0x0800a831
 800a8c0:	0800a913 	.word	0x0800a913
 800a8c4:	0800a831 	.word	0x0800a831
 800a8c8:	0800a831 	.word	0x0800a831
 800a8cc:	0800a955 	.word	0x0800a955
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b0a      	cmp	r3, #10
 800a8d8:	dc09      	bgt.n	800a8ee <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	627a      	str	r2, [r7, #36]	; 0x24
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	e0ff      	b.n	800aaee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	18d0      	adds	r0, r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	1d1a      	adds	r2, r3, #4
 800a8f8:	603a      	str	r2, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f7ff ff45 	bl	800a78c <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800a902:	4602      	mov	r2, r0
          output_index +=
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	4413      	add	r3, r2
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	3301      	adds	r3, #1
 800a90e:	623b      	str	r3, [r7, #32]
          break;
 800a910:	e0e3      	b.n	800aada <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	2b0a      	cmp	r3, #10
 800a91a:	dc09      	bgt.n	800a930 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	627a      	str	r2, [r7, #36]	; 0x24
 800a922:	461a      	mov	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	e0de      	b.n	800aaee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	18d0      	adds	r0, r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	1d1a      	adds	r2, r3, #4
 800a93a:	603a      	str	r2, [r7, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4619      	mov	r1, r3
 800a940:	f7ff ff34 	bl	800a7ac <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800a944:	4602      	mov	r2, r0
          output_index +=
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	4413      	add	r3, r2
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	3301      	adds	r3, #1
 800a950:	623b      	str	r3, [r7, #32]
          break;
 800a952:	e0c2      	b.n	800aada <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b09      	cmp	r3, #9
 800a95c:	dc09      	bgt.n	800a972 <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	627a      	str	r2, [r7, #36]	; 0x24
 800a964:	461a      	mov	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	e0bd      	b.n	800aaee <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	627a      	str	r2, [r7, #36]	; 0x24
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	2230      	movs	r2, #48	; 0x30
 800a980:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	627a      	str	r2, [r7, #36]	; 0x24
 800a988:	461a      	mov	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	2278      	movs	r2, #120	; 0x78
 800a990:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	18d0      	adds	r0, r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	1d1a      	adds	r2, r3, #4
 800a99c:	603a      	str	r2, [r7, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7ff ff14 	bl	800a7ce <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800a9a6:	4602      	mov	r2, r0
          output_index +=
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	4413      	add	r3, r2
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	623b      	str	r3, [r7, #32]
          break;
 800a9b4:	e091      	b.n	800aada <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9c4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800a9c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d0:	d509      	bpl.n	800a9e6 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a9d8:	461a      	mov	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	e083      	b.n	800aaee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	18d4      	adds	r4, r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	3307      	adds	r3, #7
 800a9f0:	f023 0307 	bic.w	r3, r3, #7
 800a9f4:	f103 0208 	add.w	r2, r3, #8
 800a9f8:	603a      	str	r2, [r7, #0]
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	f7f6 f8cd 	bl	8000ba0 <__aeabi_d2f>
 800aa06:	4603      	mov	r3, r0
 800aa08:	ee00 3a10 	vmov	s0, r3
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff feef 	bl	800a7f0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800aa12:	4602      	mov	r2, r0
          output_index +=
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	4413      	add	r3, r2
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	623b      	str	r3, [r7, #32]
          break;
 800aa20:	e05b      	b.n	800aada <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	623a      	str	r2, [r7, #32]
 800aa28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2a:	1c51      	adds	r1, r2, #1
 800aa2c:	6279      	str	r1, [r7, #36]	; 0x24
 800aa2e:	4611      	mov	r1, r2
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	440a      	add	r2, r1
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	7013      	strb	r3, [r2, #0]
          break;
 800aa38:	e04f      	b.n	800aada <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dc09      	bgt.n	800aa58 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	627a      	str	r2, [r7, #36]	; 0x24
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	2200      	movs	r2, #0
 800aa52:	701a      	strb	r2, [r3, #0]
            return output_index;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	e04a      	b.n	800aaee <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	1d1a      	adds	r2, r3, #4
 800aa5c:	603a      	str	r2, [r7, #0]
 800aa5e:	6819      	ldr	r1, [r3, #0]
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	627a      	str	r2, [r7, #36]	; 0x24
 800aa66:	461a      	mov	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	b2ca      	uxtb	r2, r1
 800aa6e:	701a      	strb	r2, [r3, #0]
          current++;
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	3301      	adds	r3, #1
 800aa74:	623b      	str	r3, [r7, #32]
          break;
 800aa76:	e030      	b.n	800aada <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	603a      	str	r2, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	4413      	add	r3, r2
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	dd14      	ble.n	800aabc <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4413      	add	r3, r2
 800aa98:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	61fa      	str	r2, [r7, #28]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	441a      	add	r2, r3
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	1c59      	adds	r1, r3, #1
 800aaae:	6279      	str	r1, [r7, #36]	; 0x24
 800aab0:	4619      	mov	r1, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	440b      	add	r3, r1
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aaba:	e7e4      	b.n	800aa86 <MicroVsnprintf+0x272>
          }
          current++;
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	3301      	adds	r3, #1
 800aac0:	623b      	str	r3, [r7, #32]
 800aac2:	e6b5      	b.n	800a830 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	623a      	str	r2, [r7, #32]
 800aaca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aacc:	1c51      	adds	r1, r2, #1
 800aace:	6279      	str	r1, [r7, #36]	; 0x24
 800aad0:	4611      	mov	r1, r2
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	440a      	add	r2, r1
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800aada:	e6a9      	b.n	800a830 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	627a      	str	r2, [r7, #36]	; 0x24
 800aae2:	461a      	mov	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
  return output_index;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	372c      	adds	r7, #44	; 0x2c
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd90      	pop	{r4, r7, pc}
 800aaf6:	bf00      	nop

0800aaf8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  int result = 1;
 800ab00:	2301      	movs	r3, #1
 800ab02:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800ab04:	2300      	movs	r3, #0
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	da0c      	bge.n	800ab2c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	fb02 f303 	mul.w	r3, r2, r3
 800ab22:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	3301      	adds	r3, #1
 800ab28:	60bb      	str	r3, [r7, #8]
 800ab2a:	e7ed      	b.n	800ab08 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
	...

0800ab3c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	4a11      	ldr	r2, [pc, #68]	; (800ab8c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	605a      	str	r2, [r3, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	609a      	str	r2, [r3, #8]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60da      	str	r2, [r3, #12]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	611a      	str	r2, [r3, #16]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	615a      	str	r2, [r3, #20]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	080172b0 	.word	0x080172b0

0800ab90 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800ab9e:	4a0e      	ldr	r2, [pc, #56]	; (800abd8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	60da      	str	r2, [r3, #12]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	611a      	str	r2, [r3, #16]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	615a      	str	r2, [r3, #20]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	619a      	str	r2, [r3, #24]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	080172b0 	.word	0x080172b0

0800abdc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	4413      	add	r3, r2
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff ffcb 	bl	800ab90 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800ac04:	b590      	push	{r4, r7, lr}
 800ac06:	b08d      	sub	sp, #52	; 0x34
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800ac16:	f006 f8e6 	bl	8010de6 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800ac20:	f006 f8e1 	bl	8010de6 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800ac24:	f107 0010 	add.w	r0, r7, #16
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	f7ff ffd5 	bl	800abdc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800ac32:	f107 0310 	add.w	r3, r7, #16
 800ac36:	2204      	movs	r2, #4
 800ac38:	211c      	movs	r1, #28
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f87c 	bl	800ad38 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800ac40:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	4619      	mov	r1, r3
 800ac46:	201c      	movs	r0, #28
 800ac48:	f7f9 f83b 	bl	8003cc2 <_ZnwjPv>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	f107 0310 	add.w	r3, r7, #16
 800ac52:	4619      	mov	r1, r3
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7ff ff71 	bl	800ab3c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800ac5a:	f107 0310 	add.w	r3, r7, #16
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f806 	bl	800ac70 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800ac64:	4623      	mov	r3, r4
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3734      	adds	r7, #52	; 0x34
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd90      	pop	{r4, r7, pc}
	...

0800ac70 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	4a04      	ldr	r2, [pc, #16]	; (800ac8c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	080172b0 	.word	0x080172b0

0800ac90 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff ffe9 	bl	800ac70 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800ac9e:	211c      	movs	r1, #28
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f005 fe1a 	bl	80108da <_ZdlPvj>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d007      	beq.n	800acd8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	4918      	ldr	r1, [pc, #96]	; (800ad30 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800acce:	4618      	mov	r0, r3
 800acd0:	f7f8 ffc4 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e026      	b.n	800ad26 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fb ffd5 	bl	8006c8e <_ZN6tflite14AlignPointerUpEPhj>
 800ace4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	695a      	ldr	r2, [r3, #20]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d20c      	bcs.n	800ad12 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6858      	ldr	r0, [r3, #4]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	490a      	ldr	r1, [pc, #40]	; (800ad34 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800ad0a:	f7f8 ffa7 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e009      	b.n	800ad26 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	441a      	add	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	691a      	ldr	r2, [r3, #16]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	08015d3c 	.word	0x08015d3c
 800ad34:	08015d94 	.word	0x08015d94

0800ad38 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af02      	add	r7, sp, #8
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	695a      	ldr	r2, [r3, #20]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	425b      	negs	r3, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fb ffb5 	bl	8006cc0 <_ZN6tflite16AlignPointerDownEPhj>
 800ad56:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d212      	bcs.n	800ad88 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	691a      	ldr	r2, [r3, #16]
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6858      	ldr	r0, [r3, #4]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad2      	subs	r2, r2, r3
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	4906      	ldr	r1, [pc, #24]	; (800ad98 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800ad80:	f7f8 ff6c 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800ad84:	2300      	movs	r3, #0
 800ad86:	e003      	b.n	800ad90 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800ad8e:	697b      	ldr	r3, [r7, #20]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	08015dd8 	.word	0x08015dd8

0800ad9c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fb ff6d 	bl	8006c8e <_ZN6tflite14AlignPointerUpEPhj>
 800adb4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d20c      	bcs.n	800ade2 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6858      	ldr	r0, [r3, #4]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	4907      	ldr	r1, [pc, #28]	; (800adf8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800adda:	f7f8 ff3f 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800adde:	2300      	movs	r3, #0
 800ade0:	e005      	b.n	800adee <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	441a      	add	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800adec:	697b      	ldr	r3, [r7, #20]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	08015e24 	.word	0x08015e24

0800adfc <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691a      	ldr	r2, [r3, #16]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	619a      	str	r2, [r3, #24]
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fb ff24 	bl	8006c8e <_ZN6tflite14AlignPointerUpEPhj>
 800ae46:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fb ff36 	bl	8006cc0 <_ZN6tflite16AlignPointerDownEPhj>
 800ae54:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1ad3      	subs	r3, r2, r3
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800ae6c:	f04f 0201 	mov.w	r2, #1
 800ae70:	f04f 0300 	mov.w	r3, #0
 800ae74:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	da1b      	bge.n	800aebe <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	461a      	mov	r2, r3
 800ae92:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ae96:	6979      	ldr	r1, [r7, #20]
 800ae98:	fb02 f001 	mul.w	r0, r2, r1
 800ae9c:	6939      	ldr	r1, [r7, #16]
 800ae9e:	fb03 f101 	mul.w	r1, r3, r1
 800aea2:	4401      	add	r1, r0
 800aea4:	6938      	ldr	r0, [r7, #16]
 800aea6:	fba0 2302 	umull	r2, r3, r0, r2
 800aeaa:	4419      	add	r1, r3
 800aeac:	460b      	mov	r3, r1
 800aeae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800aeb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	e7de      	b.n	800ae7c <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800aebe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800aec2:	4610      	mov	r0, r2
 800aec4:	4619      	mov	r1, r3
 800aec6:	371c      	adds	r7, #28
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800aee2:	f005 ff80 	bl	8010de6 <abort>
  TFLITE_DCHECK(node != nullptr);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800aeec:	f005 ff7b 	bl	8010de6 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6819      	ldr	r1, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	440b      	add	r3, r1
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	4619      	mov	r1, r3
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	4790      	blx	r2
 800af06:	4603      	mov	r3, r0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f7ff ffd5 	bl	800aed0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800af26:	4603      	mov	r3, r0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800af42:	f005 ff50 	bl	8010de6 <abort>
  TFLITE_DCHECK(node != nullptr);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800af4c:	f005 ff4b 	bl	8010de6 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	6859      	ldr	r1, [r3, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	4619      	mov	r1, r3
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	4790      	blx	r2
 800af66:	4603      	mov	r3, r0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800af7e:	f005 ff32 	bl	8010de6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	e000      	b.n	800afa4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800afbe:	f005 ff12 	bl	8010de6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	e000      	b.n	800afe4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800aff0:	b5b0      	push	{r4, r5, r7, lr}
 800aff2:	b08c      	sub	sp, #48	; 0x30
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d107      	bne.n	800b012 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800b002:	f7fa ff9a 	bl	8005f3a <_ZNSt14numeric_limitsIlE3minEv>
 800b006:	4602      	mov	r2, r0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d101      	bne.n	800b012 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800b012:	2300      	movs	r3, #0
 800b014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	461a      	mov	r2, r3
 800b01c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b020:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b02c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	fb02 f203 	mul.w	r2, r2, r3
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	6a39      	ldr	r1, [r7, #32]
 800b03c:	fb01 f303 	mul.w	r3, r1, r3
 800b040:	18d1      	adds	r1, r2, r3
 800b042:	6a3a      	ldr	r2, [r7, #32]
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	fba2 2303 	umull	r2, r3, r2, r3
 800b04a:	4419      	add	r1, r3
 800b04c:	460b      	mov	r3, r1
 800b04e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b052:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b056:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	f173 0300 	sbcs.w	r3, r3, #0
 800b060:	db02      	blt.n	800b068 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800b062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b066:	e000      	b.n	800b06a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800b068:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800b06a:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4618      	mov	r0, r3
 800b070:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b074:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b078:	1884      	adds	r4, r0, r2
 800b07a:	eb41 0503 	adc.w	r5, r1, r3
 800b07e:	4622      	mov	r2, r4
 800b080:	462b      	mov	r3, r5
 800b082:	2a00      	cmp	r2, #0
 800b084:	f173 0100 	sbcs.w	r1, r3, #0
 800b088:	da06      	bge.n	800b098 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800b08a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b08e:	f04f 0100 	mov.w	r1, #0
 800b092:	1812      	adds	r2, r2, r0
 800b094:	eb41 0303 	adc.w	r3, r1, r3
 800b098:	f04f 0000 	mov.w	r0, #0
 800b09c:	f04f 0100 	mov.w	r1, #0
 800b0a0:	0fd0      	lsrs	r0, r2, #31
 800b0a2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b0a6:	17d9      	asrs	r1, r3, #31
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b0b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800b0b8:	f7fa fd35 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	e000      	b.n	800b0c2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3730      	adds	r7, #48	; 0x30
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	c0000001 	.word	0xc0000001

0800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	da01      	bge.n	800b0e4 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800b0e0:	f005 fe81 	bl	8010de6 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	db01      	blt.n	800b0f2 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800b0ee:	f005 fe7a 	bl	8010de6 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b05      	cmp	r3, #5
 800b0f8:	dd06      	ble.n	800b108 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	e004      	b.n	800b112 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	685b      	ldr	r3, [r3, #4]
  }
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b05      	cmp	r3, #5
 800b128:	dd02      	ble.n	800b130 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	e001      	b.n	800b134 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3304      	adds	r3, #4
  }
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800b148:	2301      	movs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff ffe4 	bl	800b11a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800b152:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	429a      	cmp	r2, r3
 800b160:	da0c      	bge.n	800b17c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4413      	add	r3, r2
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	fb02 f303 	mul.w	r3, r2, r3
 800b172:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	3301      	adds	r3, #1
 800b178:	613b      	str	r3, [r7, #16]
 800b17a:	e7ed      	b.n	800b158 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800b17c:	697b      	ldr	r3, [r7, #20]
  }
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b186:	b580      	push	{r7, lr}
 800b188:	b086      	sub	sp, #24
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b198:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dc02      	bgt.n	800b1a6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	425b      	negs	r3, r3
 800b1a4:	e000      	b.n	800b1a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	68b9      	ldr	r1, [r7, #8]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ff1b 	bl	800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	6939      	ldr	r1, [r7, #16]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f806 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b1c4:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3718      	adds	r7, #24
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1d2:	b089      	sub	sp, #36	; 0x24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	da06      	bge.n	800b1ee <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800b1e0:	4b31      	ldr	r3, [pc, #196]	; (800b2a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800b1e2:	4a32      	ldr	r2, [pc, #200]	; (800b2ac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b1e4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b1e8:	4831      	ldr	r0, [pc, #196]	; (800b2b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b1ea:	f005 fe03 	bl	8010df4 <__assert_func>
  assert(exponent <= 31);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	291f      	cmp	r1, #31
 800b1f2:	dd06      	ble.n	800b202 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800b1f4:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800b1f6:	4a2d      	ldr	r2, [pc, #180]	; (800b2ac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b1f8:	f240 1167 	movw	r1, #359	; 0x167
 800b1fc:	482c      	ldr	r0, [pc, #176]	; (800b2b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b1fe:	f005 fdf9 	bl	8010df4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b202:	f04f 0001 	mov.w	r0, #1
 800b206:	f04f 0100 	mov.w	r1, #0
 800b20a:	683c      	ldr	r4, [r7, #0]
 800b20c:	f1a4 0620 	sub.w	r6, r4, #32
 800b210:	f1c4 0520 	rsb	r5, r4, #32
 800b214:	fa01 f304 	lsl.w	r3, r1, r4
 800b218:	fa00 f606 	lsl.w	r6, r0, r6
 800b21c:	4333      	orrs	r3, r6
 800b21e:	fa20 f505 	lsr.w	r5, r0, r5
 800b222:	432b      	orrs	r3, r5
 800b224:	fa00 f204 	lsl.w	r2, r0, r4
 800b228:	4613      	mov	r3, r2
 800b22a:	3b01      	subs	r3, #1
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f843 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b232:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800b234:	2000      	movs	r0, #0
 800b236:	f000 f83f 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b23a:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800b23c:	2001      	movs	r0, #1
 800b23e:	f000 f83b 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b242:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800b244:	69f9      	ldr	r1, [r7, #28]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f841 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b24c:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800b24e:	2101      	movs	r1, #1
 800b250:	69f8      	ldr	r0, [r7, #28]
 800b252:	f000 f84a 	bl	800b2ea <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b256:	4604      	mov	r4, r0
 800b258:	69b9      	ldr	r1, [r7, #24]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f854 	bl	800b308 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800b260:	4603      	mov	r3, r0
 800b262:	6979      	ldr	r1, [r7, #20]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f832 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b26a:	4603      	mov	r3, r0
 800b26c:	4619      	mov	r1, r3
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 f85e 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b274:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f836 	bl	800b2ea <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b27e:	4604      	mov	r4, r0
 800b280:	68f9      	ldr	r1, [r7, #12]
 800b282:	6938      	ldr	r0, [r7, #16]
 800b284:	f000 f862 	bl	800b34c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800b288:	4603      	mov	r3, r0
 800b28a:	6979      	ldr	r1, [r7, #20]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 f81e 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b292:	4603      	mov	r3, r0
 800b294:	4619      	mov	r1, r3
 800b296:	4620      	mov	r0, r4
 800b298:	f000 f84a 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b29c:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3724      	adds	r7, #36	; 0x24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	08015ef8 	.word	0x08015ef8
 800b2ac:	08015f08 	.word	0x08015f08
 800b2b0:	08015f64 	.word	0x08015f64
 800b2b4:	08015fe4 	.word	0x08015fe4

0800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  return x;
 800b2c0:	687b      	ldr	r3, [r7, #4]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
  return a & b;
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	4013      	ands	r3, r2
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	fa42 f303 	asr.w	r3, r2, r3
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	bfb4      	ite	lt
 800b31a:	2301      	movlt	r3, #1
 800b31c:	2300      	movge	r3, #0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f827 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b326:	4603      	mov	r3, r0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  return a + b;
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	4413      	add	r3, r2
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	bfcc      	ite	gt
 800b35e:	2301      	movgt	r3, #1
 800b360:	2300      	movle	r3, #0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f805 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b36a:	4603      	mov	r3, r0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800b382:	2000      	movs	r0, #0
 800b384:	f000 f807 	bl	800b396 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b388:	4603      	mov	r3, r0
 800b38a:	e000      	b.n	800b38e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  return ~a;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	43db      	mvns	r3, r3
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
	...

0800b3b0 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	7f7fffff 	.word	0x7f7fffff

0800b3cc <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7fb fbdb 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b410:	4603      	mov	r3, r0
 800b412:	2b04      	cmp	r3, #4
 800b414:	d001      	beq.n	800b41a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800b416:	f005 fce6 	bl	8010de6 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff ffe2 	bl	800b3e4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800b420:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	db04      	blt.n	800b432 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	429a      	cmp	r2, r3
 800b430:	db01      	blt.n	800b436 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800b432:	f005 fcd8 	bl	8010de6 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db05      	blt.n	800b448 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3304      	adds	r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	429a      	cmp	r2, r3
 800b446:	db01      	blt.n	800b44c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800b448:	f005 fccd 	bl	8010de6 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	db05      	blt.n	800b45e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	3308      	adds	r3, #8
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	db01      	blt.n	800b462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800b45e:	f005 fcc2 	bl	8010de6 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	2b00      	cmp	r3, #0
 800b466:	db05      	blt.n	800b474 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	330c      	adds	r3, #12
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6a3a      	ldr	r2, [r7, #32]
 800b470:	429a      	cmp	r2, r3
 800b472:	db01      	blt.n	800b478 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800b474:	f005 fcb7 	bl	8010de6 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	3304      	adds	r3, #4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	fb02 f203 	mul.w	r2, r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4413      	add	r3, r2
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	3208      	adds	r2, #8
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	fb02 f203 	mul.w	r2, r2, r3
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	4413      	add	r3, r2
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	320c      	adds	r2, #12
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	fb02 f203 	mul.w	r2, r2, r3
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	4413      	add	r3, r2
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	da01      	bge.n	800b4ca <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	e000      	b.n	800b4cc <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800b4ca:	687b      	ldr	r3, [r7, #4]
    }
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	ed87 0a03 	vstr	s0, [r7, #12]
 800b4e2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b4e6:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800b4ea:	f107 0208 	add.w	r2, r7, #8
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fa fcaf 	bl	8005e58 <_ZSt3maxIfERKT_S2_S2_>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	1d3b      	adds	r3, r7, #4
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7fa fc90 	bl	8005e26 <_ZSt3minIfERKT_S2_S2_>
 800b506:	4603      	mov	r3, r0
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	ee07 3a90 	vmov	s15, r3
}
 800b50e:	eeb0 0a67 	vmov.f32	s0, s15
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d10b      	bne.n	800b544 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f04f 0200 	mov.w	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800b534:	f7ff ff3c 	bl	800b3b0 <_ZNSt14numeric_limitsIfE3maxEv>
 800b538:	eef0 7a40 	vmov.f32	s15, s0
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800b542:	e023      	b.n	800b58c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	2b03      	cmp	r3, #3
 800b548:	d107      	bne.n	800b55a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a0f      	ldr	r2, [pc, #60]	; (800b594 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800b556:	601a      	str	r2, [r3, #0]
}
 800b558:	e018      	b.n	800b58c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d107      	bne.n	800b570 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	4a0d      	ldr	r2, [pc, #52]	; (800b598 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800b564:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	e00d      	b.n	800b58c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800b570:	f7ff ff2c 	bl	800b3cc <_ZNSt14numeric_limitsIfE6lowestEv>
 800b574:	eef0 7a40 	vmov.f32	s15, s0
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800b57e:	f7ff ff17 	bl	800b3b0 <_ZNSt14numeric_limitsIfE3maxEv>
 800b582:	eef0 7a40 	vmov.f32	s15, s0
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	edc3 7a00 	vstr	s15, [r3]
}
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	40c00000 	.word	0x40c00000
 800b598:	bf800000 	.word	0xbf800000

0800b59c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800b5aa:	f005 fc1c 	bl	8010de6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	e000      	b.n	800b5d0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800b61e:	f005 fbe2 	bl	8010de6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x12>
 800b63c:	f005 fbd3 	bl	8010de6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800b64c:	b590      	push	{r4, r7, lr}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b65a:	68b9      	ldr	r1, [r7, #8]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff fd37 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b662:	4604      	mov	r4, r0
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fd32 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b66c:	4603      	mov	r3, r0
 800b66e:	429c      	cmp	r4, r3
 800b670:	d001      	beq.n	800b676 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800b672:	f005 fbb8 	bl	8010de6 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fd29 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b67e:	4603      	mov	r3, r0
 800b680:	613b      	str	r3, [r7, #16]
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fd23 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b68a:	4603      	mov	r3, r0
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	f107 0214 	add.w	r2, r7, #20
 800b692:	f107 0310 	add.w	r3, r7, #16
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fb f8f7 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	681b      	ldr	r3, [r3, #0]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd90      	pop	{r4, r7, pc}
	...

0800b6ac <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

inline int32_t MultiplyByQuantizedMultiplier(int64_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b0:	b089      	sub	sp, #36	; 0x24
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	603b      	str	r3, [r7, #0]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	da05      	bge.n	800b6ce <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 800b6c2:	4b42      	ldr	r3, [pc, #264]	; (800b7cc <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 800b6c4:	4a42      	ldr	r2, [pc, #264]	; (800b7d0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b6c6:	21b3      	movs	r1, #179	; 0xb3
 800b6c8:	4842      	ldr	r0, [pc, #264]	; (800b7d4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b6ca:	f005 fb93 	bl	8010df4 <__assert_func>
  assert(shift >= -31 && shift < 8);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	f113 0f1f 	cmn.w	r3, #31
 800b6d4:	db02      	blt.n	800b6dc <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	dd05      	ble.n	800b6e8 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 800b6dc:	4b3e      	ldr	r3, [pc, #248]	; (800b7d8 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 800b6de:	4a3c      	ldr	r2, [pc, #240]	; (800b7d0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b6e0:	21b4      	movs	r1, #180	; 0xb4
 800b6e2:	483c      	ldr	r0, [pc, #240]	; (800b7d4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b6e4:	f005 fb86 	bl	8010df4 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 800b6e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f0:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800b6f4:	4290      	cmp	r0, r2
 800b6f6:	eb71 0303 	sbcs.w	r3, r1, r3
 800b6fa:	da09      	bge.n	800b710 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x64>
 800b6fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b704:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b708:	4290      	cmp	r0, r2
 800b70a:	eb71 0303 	sbcs.w	r3, r1, r3
 800b70e:	da05      	bge.n	800b71c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x70>
 800b710:	4b32      	ldr	r3, [pc, #200]	; (800b7dc <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 800b712:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b714:	21b5      	movs	r1, #181	; 0xb5
 800b716:	482f      	ldr	r0, [pc, #188]	; (800b7d4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b718:	f005 fb6c 	bl	8010df4 <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a30      	ldr	r2, [pc, #192]	; (800b7e0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 800b720:	4293      	cmp	r3, r2
 800b722:	dc04      	bgt.n	800b72e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x82>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b72a:	141b      	asrs	r3, r3, #16
 800b72c:	e001      	b.n	800b732 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x86>
 800b72e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 800b732:	61fb      	str	r3, [r7, #28]
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	f1c3 030f 	rsb	r3, r3, #15
 800b73a:	61bb      	str	r3, [r7, #24]
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	461a      	mov	r2, r3
 800b740:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	fb03 f001 	mul.w	r0, r3, r1
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	fb02 f101 	mul.w	r1, r2, r1
 800b750:	1846      	adds	r6, r0, r1
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	fba1 0102 	umull	r0, r1, r1, r2
 800b758:	1873      	adds	r3, r6, r1
 800b75a:	4619      	mov	r1, r3
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	1e5e      	subs	r6, r3, #1
 800b760:	f04f 0201 	mov.w	r2, #1
 800b764:	f04f 0300 	mov.w	r3, #0
 800b768:	f1a6 0e20 	sub.w	lr, r6, #32
 800b76c:	f1c6 0c20 	rsb	ip, r6, #32
 800b770:	fa03 f506 	lsl.w	r5, r3, r6
 800b774:	fa02 fe0e 	lsl.w	lr, r2, lr
 800b778:	ea45 050e 	orr.w	r5, r5, lr
 800b77c:	fa22 fc0c 	lsr.w	ip, r2, ip
 800b780:	ea45 050c 	orr.w	r5, r5, ip
 800b784:	fa02 f406 	lsl.w	r4, r2, r6
 800b788:	eb10 0a04 	adds.w	sl, r0, r4
 800b78c:	eb41 0b05 	adc.w	fp, r1, r5
 800b790:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  int32_t result = x >> total_shift;
 800b794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b798:	69b9      	ldr	r1, [r7, #24]
 800b79a:	f1c1 0420 	rsb	r4, r1, #32
 800b79e:	f1b1 0020 	subs.w	r0, r1, #32
 800b7a2:	fa22 f801 	lsr.w	r8, r2, r1
 800b7a6:	fa03 f404 	lsl.w	r4, r3, r4
 800b7aa:	ea48 0804 	orr.w	r8, r8, r4
 800b7ae:	d403      	bmi.n	800b7b8 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10c>
 800b7b0:	fa43 f000 	asr.w	r0, r3, r0
 800b7b4:	ea48 0800 	orr.w	r8, r8, r0
 800b7b8:	fa43 f901 	asr.w	r9, r3, r1
 800b7bc:	4643      	mov	r3, r8
 800b7be:	617b      	str	r3, [r7, #20]
  return result;
 800b7c0:	697b      	ldr	r3, [r7, #20]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3724      	adds	r7, #36	; 0x24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	08015ff4 	.word	0x08015ff4
 800b7d0:	08016010 	.word	0x08016010
 800b7d4:	08016058 	.word	0x08016058
 800b7d8:	080160d8 	.word	0x080160d8
 800b7dc:	080160f4 	.word	0x080160f4
 800b7e0:	7ffeffff 	.word	0x7ffeffff

0800b7e4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800b7e4:	b590      	push	{r4, r7, lr}
 800b7e6:	ed2d 8b02 	vpush	{d8}
 800b7ea:	b0a9      	sub	sp, #164	; 0xa4
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7fc:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b804:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b80c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b814:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b81c:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b824:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b830:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800b832:	68b8      	ldr	r0, [r7, #8]
 800b834:	f7fb f9c7 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d001      	beq.n	800b842 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 800b83e:	f005 fad2 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800b842:	6838      	ldr	r0, [r7, #0]
 800b844:	f7fb f9bf 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	d001      	beq.n	800b852 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 800b84e:	f005 faca 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800b852:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b856:	f7fb f9b6 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d001      	beq.n	800b864 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 800b860:	f005 fac1 	bl	8010de6 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800b864:	2300      	movs	r3, #0
 800b866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b86a:	2100      	movs	r1, #0
 800b86c:	68b8      	ldr	r0, [r7, #8]
 800b86e:	f7ff feed 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b872:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800b874:	2303      	movs	r3, #3
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	2103      	movs	r1, #3
 800b87a:	68b8      	ldr	r0, [r7, #8]
 800b87c:	f7ff fee6 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b880:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800b882:	2303      	movs	r3, #3
 800b884:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b888:	2100      	movs	r1, #0
 800b88a:	6838      	ldr	r0, [r7, #0]
 800b88c:	f7ff fede 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b890:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 800b892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d009      	beq.n	800b8ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800b89a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800b89e:	f7ff fc4f 	bl	800b140 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d001      	beq.n	800b8ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 800b8aa:	f005 fa9c 	bl	8010de6 <abort>
  }
  const int input_height = input_shape.Dims(1);
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	68b8      	ldr	r0, [r7, #8]
 800b8b2:	f7ff fc0d 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8b6:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	f7ff fc08 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8c0:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	6838      	ldr	r0, [r7, #0]
 800b8c6:	f7ff fc03 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 800b8cc:	2102      	movs	r1, #2
 800b8ce:	6838      	ldr	r0, [r7, #0]
 800b8d0:	f7ff fbfe 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8d4:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b8dc:	f7ff fbf8 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8e0:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 800b8e2:	2102      	movs	r1, #2
 800b8e4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b8e8:	f7ff fbf2 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8ec:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	f280 80f0 	bge.w	800bae0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800b900:	2300      	movs	r3, #0
 800b902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b906:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	429a      	cmp	r2, r3
 800b90e:	f280 80e1 	bge.w	800bad4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800b912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b918:	fb02 f203 	mul.w	r2, r2, r3
 800b91c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800b922:	2300      	movs	r3, #0
 800b924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b928:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	429a      	cmp	r2, r3
 800b930:	f280 80ca 	bge.w	800bac8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800b934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b938:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b93a:	fb02 f203 	mul.w	r2, r2, r3
 800b93e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800b944:	2300      	movs	r3, #0
 800b946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b94a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b950:	429a      	cmp	r2, r3
 800b952:	f280 80b3 	bge.w	800babc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 800b956:	f04f 0300 	mov.w	r3, #0
 800b95a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800b95e:	2300      	movs	r3, #0
 800b960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b964:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96a:	429a      	cmp	r2, r3
 800b96c:	da6d      	bge.n	800ba4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800b96e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b970:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b974:	fb02 f303 	mul.w	r3, r2, r3
 800b978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b97a:	4413      	add	r3, r2
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800b97e:	2300      	movs	r3, #0
 800b980:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b982:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	429a      	cmp	r2, r3
 800b988:	da59      	bge.n	800ba3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800b98a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b98c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
 800b992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b994:	4413      	add	r3, r2
 800b996:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	db0c      	blt.n	800b9b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b99e:	6a3a      	ldr	r2, [r7, #32]
 800b9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	da08      	bge.n	800b9b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	db05      	blt.n	800b9b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	da01      	bge.n	800b9b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e000      	b.n	800b9ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 800b9b8:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800b9ba:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800b9bc:	7ffb      	ldrb	r3, [r7, #31]
 800b9be:	f083 0301 	eor.w	r3, r3, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d135      	bne.n	800ba34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	da30      	bge.n	800ba36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 800b9d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	f7ff fd0b 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800b9e6:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 800b9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ba00:	6838      	ldr	r0, [r7, #0]
 800ba02:	f7ff fcfb 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ba06:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba0e:	4413      	add	r3, r2
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 800ba14:	ed97 7a06 	vldr	s14, [r7, #24]
 800ba18:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba20:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800ba24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba28:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800ba2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba2e:	3301      	adds	r3, #1
 800ba30:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba32:	e7cb      	b.n	800b9cc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 800ba34:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800ba36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba38:	3301      	adds	r3, #1
 800ba3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba3c:	e7a1      	b.n	800b982 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800ba3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba42:	3301      	adds	r3, #1
 800ba44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba48:	e78c      	b.n	800b964 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 800ba4a:	f04f 0300 	mov.w	r3, #0
 800ba4e:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 800ba50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 800ba58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba62:	4413      	add	r3, r2
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800ba68:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800ba6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ba70:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800ba74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba82:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800ba86:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ba8a:	f7ff fcb7 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba96:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 800ba98:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 800ba9c:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800baa0:	eeb0 0a48 	vmov.f32	s0, s16
 800baa4:	f7ff fd18 	bl	800b4d8 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800baa8:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800baac:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bab4:	3301      	adds	r3, #1
 800bab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800baba:	e746      	b.n	800b94a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800babc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bac0:	3301      	adds	r3, #1
 800bac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bac6:	e72f      	b.n	800b928 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bacc:	3301      	adds	r3, #1
 800bace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bad2:	e718      	b.n	800b906 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 800bad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bad8:	3301      	adds	r3, #1
 800bada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bade:	e709      	b.n	800b8f4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 800bae0:	bf00      	nop
 800bae2:	379c      	adds	r7, #156	; 0x9c
 800bae4:	46bd      	mov	sp, r7
 800bae6:	ecbd 8b02 	vpop	{d8}
 800baea:	bd90      	pop	{r4, r7, pc}

0800baec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800baec:	b590      	push	{r4, r7, lr}
 800baee:	b0a9      	sub	sp, #164	; 0xa4
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bb06:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bb0e:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bb16:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bb1e:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb26:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb2e:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb40:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	dd01      	ble.n	800bb4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 800bb4a:	f005 f94c 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bb4e:	6838      	ldr	r0, [r7, #0]
 800bb50:	f7fb f839 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d001      	beq.n	800bb5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 800bb5a:	f005 f944 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800bb5e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb62:	f7fb f830 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d001      	beq.n	800bb70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 800bb6c:	f005 f93b 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bb70:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bb74:	f7fb f827 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d001      	beq.n	800bb82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 800bb7e:	f005 f932 	bl	8010de6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800bb82:	2300      	movs	r3, #0
 800bb84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6838      	ldr	r0, [r7, #0]
 800bb8c:	f7ff fd5e 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb90:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800bb92:	2303      	movs	r3, #3
 800bb94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb98:	2103      	movs	r1, #3
 800bb9a:	6838      	ldr	r0, [r7, #0]
 800bb9c:	f7ff fd56 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bba0:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800bba2:	2303      	movs	r3, #3
 800bba4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbae:	f7ff fd4d 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bbb2:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 800bbb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d009      	beq.n	800bbd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800bbbc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bbc0:	f7ff fabe 	bl	800b140 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d001      	beq.n	800bbd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 800bbcc:	f005 f90b 	bl	8010de6 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	6838      	ldr	r0, [r7, #0]
 800bbd4:	f7ff fa7c 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbd8:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800bbda:	2102      	movs	r1, #2
 800bbdc:	6838      	ldr	r0, [r7, #0]
 800bbde:	f7ff fa77 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbe2:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbea:	f7ff fa71 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbee:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 800bbf0:	2102      	movs	r1, #2
 800bbf2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbf6:	f7ff fa6b 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbfa:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bc02:	f7ff fa65 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc06:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 800bc08:	2102      	movs	r1, #2
 800bc0a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bc0e:	f7ff fa5f 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc12:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800bc14:	2300      	movs	r3, #0
 800bc16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f280 8113 	bge.w	800be4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bc26:	2300      	movs	r3, #0
 800bc28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	f280 8104 	bge.w	800be40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800bc38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc3e:	fb02 f203 	mul.w	r2, r2, r3
 800bc42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	429a      	cmp	r2, r3
 800bc56:	f280 80ed 	bge.w	800be34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800bc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bc60:	fb02 f203 	mul.w	r2, r2, r3
 800bc64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc76:	429a      	cmp	r2, r3
 800bc78:	f280 80d6 	bge.w	800be28 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	da76      	bge.n	800bd7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800bc90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc96:	fb02 f303 	mul.w	r3, r2, r3
 800bc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc9c:	4413      	add	r3, r2
 800bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcac:	429a      	cmp	r2, r3
 800bcae:	da60      	bge.n	800bd72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800bcb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
 800bcba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbc:	4413      	add	r3, r2
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	db0c      	blt.n	800bce0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bcc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcca:	429a      	cmp	r2, r3
 800bccc:	da08      	bge.n	800bce0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	db05      	blt.n	800bce0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bcd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	da01      	bge.n	800bce0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e000      	b.n	800bce2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 800bce0:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800bce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800bce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcea:	f083 0301 	eor.w	r3, r3, #1
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d137      	bne.n	800bd64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bcf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	da32      	bge.n	800bd66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 800bd00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd08:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800bd0c:	6838      	ldr	r0, [r7, #0]
 800bd0e:	f7ff fb75 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 800bd16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd20:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800bd22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bd2e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bd32:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bd36:	f7ff fb61 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800bd3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd42:	4413      	add	r3, r2
 800bd44:	f993 3000 	ldrsb.w	r3, [r3]
 800bd48:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 800bd4a:	6a3a      	ldr	r2, [r7, #32]
 800bd4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd4e:	4413      	add	r3, r2
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	fb02 f203 	mul.w	r2, r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	4413      	add	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800bd5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd5e:	3301      	adds	r3, #1
 800bd60:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd62:	e7c9      	b.n	800bcf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 800bd64:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bd66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd70:	e799      	b.n	800bca6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bd72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd76:	3301      	adds	r3, #1
 800bd78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd7c:	e783      	b.n	800bc86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 800bd7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 800bd86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd90:	4413      	add	r3, r2
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	4413      	add	r3, r2
 800bd98:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 800bd9a:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800bd9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800bda6:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800bda8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	f7ff f9e6 	bl	800b186 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc2:	4413      	add	r3, r2
 800bdc4:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 800bdc6:	f107 0218 	add.w	r2, r7, #24
 800bdca:	f107 0310 	add.w	r3, r7, #16
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fa fd6f 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 800bddc:	f107 0214 	add.w	r2, r7, #20
 800bde0:	f107 0310 	add.w	r3, r7, #16
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fa fd50 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800bdec:	4603      	mov	r3, r0
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800bdf2:	693c      	ldr	r4, [r7, #16]
 800bdf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800be02:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800be06:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800be0a:	f7ff faf7 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800be0e:	4603      	mov	r3, r0
 800be10:	461a      	mov	r2, r3
 800be12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be16:	4413      	add	r3, r2
 800be18:	b262      	sxtb	r2, r4
 800be1a:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800be1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be20:	3301      	adds	r3, #1
 800be22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be26:	e723      	b.n	800bc70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800be28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be2c:	3301      	adds	r3, #1
 800be2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be32:	e70c      	b.n	800bc4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800be34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be38:	3301      	adds	r3, #1
 800be3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be3e:	e6f5      	b.n	800bc2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 800be40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be44:	3301      	adds	r3, #1
 800be46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be4a:	e6e6      	b.n	800bc1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800be4c:	bf00      	nop
 800be4e:	379c      	adds	r7, #156	; 0x9c
 800be50:	46bd      	mov	sp, r7
 800be52:	bd90      	pop	{r4, r7, pc}

0800be54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800be54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be58:	b0a9      	sub	sp, #164	; 0xa4
 800be5a:	af02      	add	r7, sp, #8
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int stride_width = params.stride_width;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be6a:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800be72:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be7a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800be82:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be8a:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be92:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be98:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9e:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	dd01      	ble.n	800beac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58>
 800bea8:	f004 ff9d 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800beac:	6838      	ldr	r0, [r7, #0]
 800beae:	f7fa fe8a 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d001      	beq.n	800bebc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x68>
 800beb8:	f004 ff95 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800bebc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bec0:	f7fa fe81 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	d001      	beq.n	800bece <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x7a>
 800beca:	f004 ff8c 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bece:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bed2:	f7fa fe78 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d001      	beq.n	800bee0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x8c>
 800bedc:	f004 ff83 	bl	8010de6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bee6:	2100      	movs	r1, #0
 800bee8:	6838      	ldr	r0, [r7, #0]
 800beea:	f7ff fbaf 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800beee:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800bef0:	2303      	movs	r3, #3
 800bef2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bef6:	2103      	movs	r1, #3
 800bef8:	6838      	ldr	r0, [r7, #0]
 800befa:	f7ff fba7 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800befe:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800bf00:	2303      	movs	r3, #3
 800bf02:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bf06:	2100      	movs	r1, #0
 800bf08:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bf0c:	f7ff fb9e 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bf10:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 800bf12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800bf1a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bf1e:	f7ff f90f 	bl	800b140 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800bf22:	4602      	mov	r2, r0
 800bf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d001      	beq.n	800bf2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
 800bf2a:	f004 ff5c 	bl	8010de6 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800bf2e:	2101      	movs	r1, #1
 800bf30:	6838      	ldr	r0, [r7, #0]
 800bf32:	f7ff f8cd 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf36:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800bf38:	2102      	movs	r1, #2
 800bf3a:	6838      	ldr	r0, [r7, #0]
 800bf3c:	f7ff f8c8 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf40:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 800bf42:	2101      	movs	r1, #1
 800bf44:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bf48:	f7ff f8c2 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf4c:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 800bf4e:	2102      	movs	r1, #2
 800bf50:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bf54:	f7ff f8bc 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf58:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bf60:	f7ff f8b6 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf64:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 800bf66:	2102      	movs	r1, #2
 800bf68:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bf6c:	f7ff f8b0 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf70:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800bf72:	2300      	movs	r3, #0
 800bf74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	f280 8113 	bge.w	800c1aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x356>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bf84:	2300      	movs	r3, #0
 800bf86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf90:	429a      	cmp	r2, r3
 800bf92:	f280 8104 	bge.w	800c19e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x34a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800bf96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf9c:	fb02 f203 	mul.w	r2, r2, r3
 800bfa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bfac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	f280 80ed 	bge.w	800c192 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x33e>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800bfb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bfbe:	fb02 f203 	mul.w	r2, r2, r3
 800bfc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	f280 80d6 	bge.w	800c186 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x332>
          std::int64_t acc = 0;
 800bfda:	f04f 0200 	mov.w	r2, #0
 800bfde:	f04f 0300 	mov.w	r3, #0
 800bfe2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfee:	429a      	cmp	r2, r3
 800bff0:	da71      	bge.n	800c0d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x282>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800bff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bff4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bff6:	fb02 f303 	mul.w	r3, r2, r3
 800bffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bffc:	4413      	add	r3, r2
 800bffe:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c000:	2300      	movs	r3, #0
 800c002:	67bb      	str	r3, [r7, #120]	; 0x78
 800c004:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	429a      	cmp	r2, r3
 800c00a:	da60      	bge.n	800c0ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800c00c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c00e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c016:	4413      	add	r3, r2
 800c018:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	db0c      	blt.n	800c03a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800c020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c024:	429a      	cmp	r2, r3
 800c026:	da08      	bge.n	800c03a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	db05      	blt.n	800c03a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800c02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c032:	429a      	cmp	r2, r3
 800c034:	da01      	bge.n	800c03a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e8>
 800c03a:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800c03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800c040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c044:	f083 0301 	eor.w	r3, r3, #1
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d13a      	bne.n	800c0c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x270>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800c04e:	2300      	movs	r3, #0
 800c050:	677b      	str	r3, [r7, #116]	; 0x74
 800c052:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c056:	429a      	cmp	r2, r3
 800c058:	da35      	bge.n	800c0c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x272>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 800c05a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c062:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c066:	6838      	ldr	r0, [r7, #0]
 800c068:	f7ff f9c8 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c06c:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c074:	4413      	add	r3, r2
 800c076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c07a:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800c07c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c082:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c084:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c088:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c08c:	f7ff f9b6 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800c094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c098:	4413      	add	r3, r2
 800c09a:	f993 3000 	ldrsb.w	r3, [r3]
 800c09e:	61fb      	str	r3, [r7, #28]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	6a3a      	ldr	r2, [r7, #32]
 800c0a4:	fb02 f303 	mul.w	r3, r2, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c0ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0b2:	1884      	adds	r4, r0, r2
 800c0b4:	eb41 0503 	adc.w	r5, r1, r3
 800c0b8:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800c0bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0be:	3301      	adds	r3, #1
 800c0c0:	677b      	str	r3, [r7, #116]	; 0x74
 800c0c2:	e7c6      	b.n	800c052 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fe>
                continue;
 800c0c4:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0cc:	e79a      	b.n	800c004 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800c0ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0d4:	e789      	b.n	800bfea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x196>
              }
            }
          }
          if (bias_data) {
 800c0d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00f      	beq.n	800c0fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2aa>
            acc += bias_data[out_channel];
 800c0de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c0e8:	4413      	add	r3, r2
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0f2:	eb10 0802 	adds.w	r8, r0, r2
 800c0f6:	eb41 0903 	adc.w	r9, r1, r3
 800c0fa:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c0fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800c108:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c10a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	460a      	mov	r2, r1
 800c118:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c11c:	f7ff fac6 	bl	800b6ac <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800c120:	4603      	mov	r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c122:	613b      	str	r3, [r7, #16]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 800c124:	f107 0218 	add.w	r2, r7, #24
 800c128:	f107 0310 	add.w	r3, r7, #16
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fa fbc0 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800c134:	4603      	mov	r3, r0
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	613b      	str	r3, [r7, #16]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 800c13a:	f107 0214 	add.w	r2, r7, #20
 800c13e:	f107 0310 	add.w	r3, r7, #16
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f7fa fba1 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800c14a:	4603      	mov	r3, r0
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800c150:	693e      	ldr	r6, [r7, #16]
 800c152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c15c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c160:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c164:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c168:	f7ff f948 	bl	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c16c:	4603      	mov	r3, r0
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c174:	4413      	add	r3, r2
 800c176:	b232      	sxth	r2, r6
 800c178:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800c17a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c17e:	3301      	adds	r3, #1
 800c180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c184:	e723      	b.n	800bfce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c18a:	3301      	adds	r3, #1
 800c18c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c190:	e70c      	b.n	800bfac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c196:	3301      	adds	r3, #1
 800c198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c19c:	e6f5      	b.n	800bf8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x136>
  for (int batch = 0; batch < batches; ++batch) {
 800c19e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1a8:	e6e6      	b.n	800bf78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x124>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 800c1aa:	bf00      	nop
 800c1ac:	379c      	adds	r7, #156	; 0x9c
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c1b4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800c1c8:	f004 fe0d 	bl	8010de6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d0:	2134      	movs	r1, #52	; 0x34
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	4798      	blx	r3
 800c1d6:	4603      	mov	r3, r0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e4:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800c1e8:	af08      	add	r7, sp, #32
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	6018      	str	r0, [r3, #0]
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	6019      	str	r1, [r3, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800c1f6:	4bc0      	ldr	r3, [pc, #768]	; (800c4f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	f107 0108 	add.w	r1, r7, #8
 800c1fe:	f107 030c 	add.w	r3, r7, #12
 800c202:	6809      	ldr	r1, [r1, #0]
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	f7fe fe83 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c20a:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800c20e:	4bbb      	ldr	r3, [pc, #748]	; (800c4fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31c>)
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	f107 0108 	add.w	r1, r7, #8
 800c216:	f107 030c 	add.w	r3, r7, #12
 800c21a:	6809      	ldr	r1, [r1, #0]
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	f7fe fe77 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c222:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800c226:	f107 0308 	add.w	r3, r7, #8
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f7ff f9d6 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800c230:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800c232:	2b03      	cmp	r3, #3
 800c234:	d10b      	bne.n	800c24e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
 800c236:	4bb2      	ldr	r3, [pc, #712]	; (800c500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x320>)
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	f107 0108 	add.w	r1, r7, #8
 800c23e:	f107 030c 	add.w	r3, r7, #12
 800c242:	6809      	ldr	r1, [r1, #0]
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	f7fe fe63 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c24a:	4603      	mov	r3, r0
 800c24c:	e000      	b.n	800c250 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 800c24e:	2300      	movs	r3, #0
          : nullptr;
 800c250:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800c254:	4bab      	ldr	r3, [pc, #684]	; (800c504 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x324>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	f107 0108 	add.w	r1, r7, #8
 800c25c:	f107 030c 	add.w	r3, r7, #12
 800c260:	6809      	ldr	r1, [r1, #0]
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	f7fe fe64 	bl	800af30 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800c268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

  TFLITE_DCHECK(node->builtin_data != nullptr);
 800c26c:	f107 0308 	add.w	r3, r7, #8
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 800c278:	f004 fdb5 	bl	8010de6 <abort>
  const auto& params =
 800c27c:	f107 0308 	add.w	r3, r7, #8
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 800c288:	f107 0308 	add.w	r3, r7, #8
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
 800c294:	f004 fda7 	bl	8010de6 <abort>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));
 800c298:	f107 0308 	add.w	r3, r7, #8
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800c2a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2a8:	7a1a      	ldrb	r2, [r3, #8]
 800c2aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c2ae:	7a1b      	ldrb	r3, [r3, #8]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d019      	beq.n	800c2e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
 800c2b4:	f107 030c 	add.w	r3, r7, #12
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	695c      	ldr	r4, [r3, #20]
 800c2bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2c0:	7a1b      	ldrb	r3, [r3, #8]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c2c8:	7a1b      	ldrb	r3, [r3, #8]
 800c2ca:	f107 000c 	add.w	r0, r7, #12
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	9202      	str	r2, [sp, #8]
 800c2d2:	4b8d      	ldr	r3, [pc, #564]	; (800c508 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x328>)
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	4b8d      	ldr	r3, [pc, #564]	; (800c50c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32c>)
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	2337      	movs	r3, #55	; 0x37
 800c2dc:	4a8c      	ldr	r2, [pc, #560]	; (800c510 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x330>)
 800c2de:	498d      	ldr	r1, [pc, #564]	; (800c514 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x334>)
 800c2e0:	6800      	ldr	r0, [r0, #0]
 800c2e2:	47a0      	blx	r4
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e19b      	b.n	800c620 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
  TF_LITE_ENSURE_MSG(
 800c2e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2ec:	7a1a      	ldrb	r2, [r3, #8]
 800c2ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c2f2:	7a1b      	ldrb	r3, [r3, #8]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d014      	beq.n	800c322 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 800c2f8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2fc:	7a1b      	ldrb	r3, [r3, #8]
 800c2fe:	2b07      	cmp	r3, #7
 800c300:	d104      	bne.n	800c30c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12c>
 800c302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c306:	7a1b      	ldrb	r3, [r3, #8]
 800c308:	2b09      	cmp	r3, #9
 800c30a:	d00a      	beq.n	800c322 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	f107 020c 	add.w	r2, r7, #12
 800c318:	497f      	ldr	r1, [pc, #508]	; (800c518 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>)
 800c31a:	6810      	ldr	r0, [r2, #0]
 800c31c:	4798      	blx	r3
 800c31e:	2301      	movs	r3, #1
 800c320:	e17e      	b.n	800c620 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
      context,
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 800c322:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c326:	7a1b      	ldrb	r3, [r3, #8]
 800c328:	2b09      	cmp	r3, #9
 800c32a:	f000 80f7 	beq.w	800c51c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33c>
 800c32e:	2b09      	cmp	r3, #9
 800c330:	f300 8160 	bgt.w	800c5f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
 800c334:	2b01      	cmp	r3, #1
 800c336:	d002      	beq.n	800c33e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 800c338:	2b07      	cmp	r3, #7
 800c33a:	d071      	beq.n	800c420 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
 800c33c:	e15a      	b.n	800c5f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c33e:	f107 0310 	add.w	r3, r7, #16
 800c342:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c346:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fa31 	bl	800c7b2 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c354:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c358:	4618      	mov	r0, r3
 800c35a:	f001 f950 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c35e:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c362:	f7fe fe05 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c366:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800c368:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c36c:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c370:	4618      	mov	r0, r3
 800c372:	f001 f944 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c376:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c37a:	f7fe fdf9 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c37e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800c380:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c384:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 f938 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c38e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c392:	f7fe fded 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c396:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800c398:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c39c:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f001 f92c 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c3a6:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c3aa:	f7fe fdf0 	bl	800af8e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800c3ae:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c3b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 f921 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c3bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c3c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c3c4:	f107 0010 	add.w	r0, r7, #16
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9306      	str	r3, [sp, #24]
 800c3cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c3d0:	9305      	str	r3, [sp, #20]
 800c3d2:	9604      	str	r6, [sp, #16]
 800c3d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c3d8:	9303      	str	r3, [sp, #12]
 800c3da:	9502      	str	r5, [sp, #8]
 800c3dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	9400      	str	r4, [sp, #0]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	4642      	mov	r2, r8
 800c3e8:	f7ff f9fc 	bl	800b7e4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c3ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fa fbd2 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 800c3f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fa fbcd 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c400:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c404:	4618      	mov	r0, r3
 800c406:	f7fa fbc8 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c40a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fa fbc3 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fa fbbe 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800c41e:	e0fe      	b.n	800c61e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
    }
    case kTfLiteInt16: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
 800c420:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c424:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c428:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f9fc 	bl	800c82a <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c432:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c436:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c438:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c43c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c43e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c442:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c446:	4618      	mov	r0, r3
 800c448:	f001 f8d9 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c44c:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c450:	f7ff f8a4 	bl	800b59c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800c454:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int16_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c45a:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c45e:	4618      	mov	r0, r3
 800c460:	f001 f8cd 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c464:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c468:	f7fe fda2 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c46c:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c46e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c472:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c476:	4618      	mov	r0, r3
 800c478:	f001 f8c1 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c47c:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c480:	f7ff f8d5 	bl	800b62e <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800c484:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<std::int64_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c486:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c48a:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c48e:	4618      	mov	r0, r3
 800c490:	f001 f8b5 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c494:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c498:	f7ff f88f 	bl	800b5ba <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800c4a2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800c4a6:	9306      	str	r3, [sp, #24]
 800c4a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c4ac:	9305      	str	r3, [sp, #20]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	9304      	str	r3, [sp, #16]
 800c4b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c4b6:	9303      	str	r3, [sp, #12]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	9302      	str	r3, [sp, #8]
 800c4bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	9600      	str	r6, [sp, #0]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	f7ff fcc3 	bl	800be54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
 800c4ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fa fb61 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c4d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fa fb5c 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c4e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fa fb57 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c4ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fa fb52 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int16_t>(output));
      break;
 800c4f6:	e092      	b.n	800c61e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
 800c4f8:	080172c8 	.word	0x080172c8
 800c4fc:	080172cc 	.word	0x080172cc
 800c500:	080172d0 	.word	0x080172d0
 800c504:	080172d4 	.word	0x080172d4
 800c508:	0801619c 	.word	0x0801619c
 800c50c:	080161ac 	.word	0x080161ac
 800c510:	08016144 	.word	0x08016144
 800c514:	08016180 	.word	0x08016180
 800c518:	080161b8 	.word	0x080161b8
    }
    case kTfLiteInt8: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
 800c51c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800c520:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c524:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f97e 	bl	800c82a <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c52e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c532:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c534:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c538:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c53a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800c53e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c542:	4618      	mov	r0, r3
 800c544:	f001 f85b 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c548:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c54c:	f7fe fd30 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c550:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c552:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c556:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c55a:	4618      	mov	r0, r3
 800c55c:	f001 f84f 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c560:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c564:	f7fe fd24 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c568:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c56a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c56e:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c572:	4618      	mov	r0, r3
 800c574:	f001 f843 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c578:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c57c:	f7ff f848 	bl	800b610 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800c580:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c582:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c586:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 f837 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c590:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c594:	f7fe fd1b 	bl	800afce <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800c598:	4603      	mov	r3, r0
 800c59a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800c59e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c5b2:	9303      	str	r3, [sp, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	9302      	str	r3, [sp, #8]
 800c5b8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c5bc:	9301      	str	r3, [sp, #4]
 800c5be:	9600      	str	r6, [sp, #0]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f7ff fa91 	bl	800baec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
 800c5ca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fa fae3 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c5d4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fa fade 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c5de:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fa fad9 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c5e8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fa fad4 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800c5f2:	e014      	b.n	800c61e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800c5f4:	f107 030c 	add.w	r3, r7, #12
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	695c      	ldr	r4, [r3, #20]
 800c5fc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c600:	7a1b      	ldrb	r3, [r3, #8]
 800c602:	4618      	mov	r0, r3
 800c604:	f7f7 faae 	bl	8003b64 <TfLiteTypeGetName>
 800c608:	4602      	mov	r2, r0
 800c60a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c60e:	7a1b      	ldrb	r3, [r3, #8]
 800c610:	f107 000c 	add.w	r0, r7, #12
 800c614:	4905      	ldr	r1, [pc, #20]	; (800c62c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>)
 800c616:	6800      	ldr	r0, [r0, #0]
 800c618:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e000      	b.n	800c620 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
  }
  return kTfLiteOk;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800c626:	46bd      	mov	sp, r7
 800c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62c:	08016224 	.word	0x08016224

0800c630 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 800c630:	b4b0      	push	{r4, r5, r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a07      	ldr	r2, [pc, #28]	; (800c658 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 800c63c:	461c      	mov	r4, r3
 800c63e:	4615      	mov	r5, r2
 800c640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c644:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	bcb0      	pop	{r4, r5, r7}
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	08016240 	.word	0x08016240

0800c65c <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	3301      	adds	r3, #1
 800c676:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	fb02 f203 	mul.w	r2, r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	441a      	add	r2, r3
  int total_padding =
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c692:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	bfb8      	it	lt
 800c69e:	425b      	neglt	r3, r3
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	0fda      	lsrs	r2, r3, #31
 800c6aa:	4413      	add	r3, r2
 800c6ac:	105b      	asrs	r3, r3, #1
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 800c6ba:	b480      	push	{r7}
 800c6bc:	b087      	sub	sp, #28
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	6a3a      	ldr	r2, [r7, #32]
 800c6d0:	fb02 f303 	mul.w	r3, r2, r3
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e017      	b.n	800c712 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d002      	beq.n	800c6ee <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d008      	beq.n	800c6fe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 800c6ec:	e010      	b.n	800c710 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	1e5a      	subs	r2, r3, #1
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 800c6fc:	e009      	b.n	800c712 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	441a      	add	r2, r3
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	1ad2      	subs	r2, r2, r3
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c70e:	e000      	b.n	800c712 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 800c710:	2300      	movs	r3, #0
  }
}
 800c712:	4618      	mov	r0, r3
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800c71e:	b580      	push	{r7, lr}
 800c720:	b088      	sub	sp, #32
 800c722:	af02      	add	r7, sp, #8
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800c72c:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c73a:	f7ff ffbe 	bl	800c6ba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800c73e:	4602      	mov	r2, r0
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800c744:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c752:	f7ff ffb2 	bl	800c6ba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800c756:	4602      	mov	r2, r0
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f107 0214 	add.w	r2, r7, #20
 800c768:	9201      	str	r2, [sp, #4]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	68b8      	ldr	r0, [r7, #8]
 800c774:	f7ff ff72 	bl	800c65c <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800c778:	4602      	mov	r2, r0
  padding_values.height =
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 800c784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f107 0214 	add.w	r2, r7, #20
 800c78c:	9201      	str	r2, [sp, #4]
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c794:	6a39      	ldr	r1, [r7, #32]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff ff60 	bl	800c65c <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800c79c:	4602      	mov	r2, r0
  padding_values.width =
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	609a      	str	r2, [r3, #8]
  return padding_values;
 800c7a8:	bf00      	nop
}
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b084      	sub	sp, #16
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	60f8      	str	r0, [r7, #12]
 800c7ba:	60b9      	str	r1, [r7, #8]
 800c7bc:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	7b18      	ldrb	r0, [r3, #12]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3330      	adds	r3, #48	; 0x30
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f7fe fea3 	bl	800b518 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 ff33 	bl	800d642 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	b21a      	sxth	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	b21a      	sxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	b21a      	sxth	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	b21a      	sxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	b21a      	sxth	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	b21a      	sxth	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	821a      	strh	r2, [r3, #16]
  return op_params;
 800c820:	bf00      	nop
}
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	425a      	negs	r2, r3
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	425a      	negs	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	699a      	ldr	r2, [r3, #24]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69da      	ldr	r2, [r3, #28]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a1b      	ldr	r3, [r3, #32]
 800c85e:	425a      	negs	r2, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 feea 	bl	800d642 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c86e:	4603      	mov	r3, r0
 800c870:	461a      	mov	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	b21a      	sxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	b21a      	sxth	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	b21a      	sxth	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	b21a      	sxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	b21a      	sxth	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	b21a      	sxth	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800c8c2:	bf00      	nop
}
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ce:	b09d      	sub	sp, #116	; 0x74
 800c8d0:	af0a      	add	r7, sp, #40	; 0x28
 800c8d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c8d4:	6239      	str	r1, [r7, #32]
 800c8d6:	61fa      	str	r2, [r7, #28]
 800c8d8:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2301      	moveq	r3, #1
 800c8e6:	2300      	movne	r3, #0
 800c8e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800c8ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c8f0:	f083 0301 	eor.w	r3, r3, #1
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d00a      	beq.n	800c91a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	695c      	ldr	r4, [r3, #20]
 800c908:	4b68      	ldr	r3, [pc, #416]	; (800caac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	2356      	movs	r3, #86	; 0x56
 800c90e:	4a68      	ldr	r2, [pc, #416]	; (800cab0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c910:	4968      	ldr	r1, [pc, #416]	; (800cab4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c914:	47a0      	blx	r4
 800c916:	2301      	movs	r3, #1
 800c918:	e0c4      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d012      	beq.n	800c94a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	695c      	ldr	r4, [r3, #20]
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2201      	movs	r2, #1
 800c930:	9203      	str	r2, [sp, #12]
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	4b60      	ldr	r3, [pc, #384]	; (800cab8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	4b60      	ldr	r3, [pc, #384]	; (800cabc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2357      	movs	r3, #87	; 0x57
 800c93e:	4a5c      	ldr	r2, [pc, #368]	; (800cab0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c940:	495f      	ldr	r1, [pc, #380]	; (800cac0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c944:	47a0      	blx	r4
 800c946:	2301      	movs	r3, #1
 800c948:	e0ac      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	6899      	ldr	r1, [r3, #8]
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	685c      	ldr	r4, [r3, #4]
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 800c962:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c964:	f107 0008 	add.w	r0, r7, #8
 800c968:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c96c:	9207      	str	r2, [sp, #28]
 800c96e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c972:	9206      	str	r2, [sp, #24]
 800c974:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800c978:	9205      	str	r2, [sp, #20]
 800c97a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c97c:	9204      	str	r2, [sp, #16]
 800c97e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c980:	9203      	str	r2, [sp, #12]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	9202      	str	r2, [sp, #8]
 800c986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c988:	9201      	str	r2, [sp, #4]
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	462b      	mov	r3, r5
 800c98e:	4622      	mov	r2, r4
 800c990:	f7ff fec5 	bl	800c71e <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800c994:	4634      	mov	r4, r6
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c99c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	6a39      	ldr	r1, [r7, #32]
 800c9a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9a6:	f7f9 fb4e 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c9aa:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 800c9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b4:	695c      	ldr	r4, [r3, #20]
 800c9b6:	4b43      	ldr	r3, [pc, #268]	; (800cac4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	2361      	movs	r3, #97	; 0x61
 800c9bc:	4a3c      	ldr	r2, [pc, #240]	; (800cab0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c9be:	493d      	ldr	r1, [pc, #244]	; (800cab4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9c2:	47a0      	blx	r4
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e06d      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	6a39      	ldr	r1, [r7, #32]
 800c9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ce:	f7f9 fb3a 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10a      	bne.n	800c9f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	695c      	ldr	r4, [r3, #20]
 800c9de:	4b3a      	ldr	r3, [pc, #232]	; (800cac8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	2363      	movs	r3, #99	; 0x63
 800c9e4:	4a32      	ldr	r2, [pc, #200]	; (800cab0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c9e6:	4933      	ldr	r1, [pc, #204]	; (800cab4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c9e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ea:	47a0      	blx	r4
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e059      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	6a39      	ldr	r1, [r7, #32]
 800c9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f6:	f7f9 fb56 	bl	80060a6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800c9fa:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6a39      	ldr	r1, [r7, #32]
 800ca00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca02:	f7f9 fb30 	bl	8006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800ca06:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800ca08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	695c      	ldr	r4, [r3, #20]
 800ca12:	4b2e      	ldr	r3, [pc, #184]	; (800cacc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2367      	movs	r3, #103	; 0x67
 800ca18:	4a25      	ldr	r2, [pc, #148]	; (800cab0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800ca1a:	4926      	ldr	r1, [pc, #152]	; (800cab4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800ca1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca1e:	47a0      	blx	r4
 800ca20:	2301      	movs	r3, #1
 800ca22:	e03f      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800ca24:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d02e      	beq.n	800ca8a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	330c      	adds	r3, #12
 800ca38:	607b      	str	r3, [r7, #4]
 800ca3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca3c:	321c      	adds	r2, #28
 800ca3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ca40:	3120      	adds	r1, #32
 800ca42:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ca44:	302c      	adds	r0, #44	; 0x2c
 800ca46:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800ca48:	3430      	adds	r4, #48	; 0x30
 800ca4a:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800ca4c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800ca4e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800ca50:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	9308      	str	r3, [sp, #32]
 800ca56:	9607      	str	r6, [sp, #28]
 800ca58:	9506      	str	r5, [sp, #24]
 800ca5a:	9405      	str	r4, [sp, #20]
 800ca5c:	9004      	str	r0, [sp, #16]
 800ca5e:	9103      	str	r1, [sp, #12]
 800ca60:	9202      	str	r2, [sp, #8]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca72:	f7f9 fb29 	bl	80060c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800ca76:	4603      	mov	r3, r0
 800ca78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 800ca84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca88:	e00c      	b.n	800caa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800ca8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca8c:	691a      	ldr	r2, [r3, #16]
 800ca8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca90:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca94:	691a      	ldr	r2, [r3, #16]
 800ca96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca98:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	691a      	ldr	r2, [r3, #16]
 800ca9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caa0:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	374c      	adds	r7, #76	; 0x4c
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caac:	080163b4 	.word	0x080163b4
 800cab0:	0801635c 	.word	0x0801635c
 800cab4:	0801639c 	.word	0x0801639c
 800cab8:	080163f4 	.word	0x080163f4
 800cabc:	080163f8 	.word	0x080163f8
 800cac0:	080163d8 	.word	0x080163d8
 800cac4:	0801640c 	.word	0x0801640c
 800cac8:	08016420 	.word	0x08016420
 800cacc:	08016434 	.word	0x08016434

0800cad0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800cad0:	b590      	push	{r4, r7, lr}
 800cad2:	b099      	sub	sp, #100	; 0x64
 800cad4:	af08      	add	r7, sp, #32
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800cae2:	f004 f980 	bl	8010de6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800caee:	f004 f97a 	bl	8010de6 <abort>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto& params =
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	63bb      	str	r3, [r7, #56]	; 0x38
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800cafe:	2200      	movs	r2, #0
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7f9 faaf 	bl	8006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800cb08:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10a      	bne.n	800cb26 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	695c      	ldr	r4, [r3, #20]
 800cb14:	4b75      	ldr	r3, [pc, #468]	; (800ccec <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	2386      	movs	r3, #134	; 0x86
 800cb1a:	4a75      	ldr	r2, [pc, #468]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cb1c:	4975      	ldr	r1, [pc, #468]	; (800ccf4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	47a0      	blx	r4
 800cb22:	2301      	movs	r3, #1
 800cb24:	e0de      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800cb26:	2200      	movs	r2, #0
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7f9 fa8b 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cb30:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	695c      	ldr	r4, [r3, #20]
 800cb3c:	4b6e      	ldr	r3, [pc, #440]	; (800ccf8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	2388      	movs	r3, #136	; 0x88
 800cb42:	4a6b      	ldr	r2, [pc, #428]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cb44:	496b      	ldr	r1, [pc, #428]	; (800ccf4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	47a0      	blx	r4
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e0ca      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800cb4e:	2201      	movs	r2, #1
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7f9 fa77 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cb58:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10a      	bne.n	800cb76 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	695c      	ldr	r4, [r3, #20]
 800cb64:	4b65      	ldr	r3, [pc, #404]	; (800ccfc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	238a      	movs	r3, #138	; 0x8a
 800cb6a:	4a61      	ldr	r2, [pc, #388]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cb6c:	4961      	ldr	r1, [pc, #388]	; (800ccf4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	47a0      	blx	r4
 800cb72:	2301      	movs	r3, #1
 800cb74:	e0b6      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>

  const int input_width = input->dims->data[2];
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	62bb      	str	r3, [r7, #40]	; 0x28
  const int input_height = input->dims->data[1];
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
  const int filter_width = filter->dims->data[2];
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	623b      	str	r3, [r7, #32]
  const int filter_height = filter->dims->data[1];
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	61fb      	str	r3, [r7, #28]
  const int output_width = output->dims->data[2];
 800cb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	61bb      	str	r3, [r7, #24]
  const int output_height = output->dims->data[1];
 800cb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	617b      	str	r3, [r7, #20]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	613b      	str	r3, [r7, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800cbb2:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cbb4:	0092      	lsls	r2, r2, #2
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	4798      	blx	r3
 800cbbc:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 800cbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc0:	625a      	str	r2, [r3, #36]	; 0x24
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800cbc6:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cbc8:	0092      	lsls	r2, r2, #2
 800cbca:	4611      	mov	r1, r2
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	4798      	blx	r3
 800cbd0:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd4:	629a      	str	r2, [r3, #40]	; 0x28

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b09      	cmp	r3, #9
 800cbdc:	d003      	beq.n	800cbe6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x116>
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b07      	cmp	r3, #7
 800cbe4:	d161      	bne.n	800ccaa <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1da>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d013      	beq.n	800cc18 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x148>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	695c      	ldr	r4, [r3, #20]
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	9303      	str	r3, [sp, #12]
 800cc00:	9202      	str	r2, [sp, #8]
 800cc02:	4b3f      	ldr	r3, [pc, #252]	; (800cd00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	4b3f      	ldr	r3, [pc, #252]	; (800cd04 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	239e      	movs	r3, #158	; 0x9e
 800cc0c:	4a38      	ldr	r2, [pc, #224]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cc0e:	493e      	ldr	r1, [pc, #248]	; (800cd08 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	47a0      	blx	r4
 800cc14:	2301      	movs	r3, #1
 800cc16:	e065      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1c:	60fb      	str	r3, [r7, #12]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800cc24:	f004 f8df 	bl	8010de6 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
 800cc30:	f004 f8d9 	bl	8010de6 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x170>
 800cc3c:	f004 f8d3 	bl	8010de6 <abort>

    TF_LITE_ENSURE(context,
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d012      	beq.n	800cc70 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d00a      	beq.n	800cc70 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	695c      	ldr	r4, [r3, #20]
 800cc5e:	4b2b      	ldr	r3, [pc, #172]	; (800cd0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	23a7      	movs	r3, #167	; 0xa7
 800cc64:	4a22      	ldr	r2, [pc, #136]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cc66:	4923      	ldr	r1, [pc, #140]	; (800ccf4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	47a0      	blx	r4
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e039      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d014      	beq.n	800ccaa <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1da>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	695c      	ldr	r4, [r3, #20]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	6852      	ldr	r2, [r2, #4]
 800cc8e:	6812      	ldr	r2, [r2, #0]
 800cc90:	9203      	str	r2, [sp, #12]
 800cc92:	9302      	str	r3, [sp, #8]
 800cc94:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	23ab      	movs	r3, #171	; 0xab
 800cc9e:	4a14      	ldr	r2, [pc, #80]	; (800ccf0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cca0:	4919      	ldr	r1, [pc, #100]	; (800cd08 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	47a0      	blx	r4
 800cca6:	2301      	movs	r3, #1
 800cca8:	e01c      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccb0:	9206      	str	r2, [sp, #24]
 800ccb2:	9305      	str	r3, [sp, #20]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	9304      	str	r3, [sp, #16]
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	9303      	str	r3, [sp, #12]
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	9302      	str	r3, [sp, #8]
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	9301      	str	r3, [sp, #4]
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff fdfc 	bl	800c8cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	72fb      	strb	r3, [r7, #11]
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x212>
 800ccde:	7afb      	ldrb	r3, [r7, #11]
 800cce0:	e000      	b.n	800cce4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3744      	adds	r7, #68	; 0x44
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd90      	pop	{r4, r7, pc}
 800ccec:	08016434 	.word	0x08016434
 800ccf0:	0801635c 	.word	0x0801635c
 800ccf4:	0801639c 	.word	0x0801639c
 800ccf8:	0801640c 	.word	0x0801640c
 800ccfc:	08016420 	.word	0x08016420
 800cd00:	08016448 	.word	0x08016448
 800cd04:	08016464 	.word	0x08016464
 800cd08:	080163d8 	.word	0x080163d8
 800cd0c:	08016480 	.word	0x08016480
 800cd10:	080164fc 	.word	0x080164fc
 800cd14:	08016524 	.word	0x08016524

0800cd18 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe f89d 	bl	800ae64 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
}
 800cd2e:	4610      	mov	r0, r2
 800cd30:	4619      	mov	r1, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd42:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd46:	f003 ff2f 	bl	8010ba8 <expf>
 800cd4a:	eef0 7a40 	vmov.f32	s15, s0
 800cd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7f9 ff2f 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cd68:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	db03      	blt.n	800cd78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	db01      	blt.n	800cd7c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800cd78:	f004 f835 	bl	8010de6 <abort>
  const auto* dims_data = shape.DimsData();
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7fe f9cc 	bl	800b11a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800cd82:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800cd88:	2300      	movs	r3, #0
 800cd8a:	613b      	str	r3, [r7, #16]
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	da12      	bge.n	800cdba <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d005      	beq.n	800cda8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	4413      	add	r3, r2
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	e000      	b.n	800cdaa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	fb03 f302 	mul.w	r3, r3, r2
 800cdb0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	613b      	str	r3, [r7, #16]
 800cdb8:	e7e8      	b.n	800cd8c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800cdba:	697b      	ldr	r3, [r7, #20]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800cdc4:	b590      	push	{r4, r7, lr}
 800cdc6:	b091      	sub	sp, #68	; 0x44
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6a1b      	ldr	r3, [r3, #32]
 800cddc:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800cdde:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cde0:	f7f9 fef1 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cde4:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800cde6:	6838      	ldr	r0, [r7, #0]
 800cde8:	f7f9 feed 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cdec:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cdf6:	f7ff ffaf 	bl	800cd58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800cdfa:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	1e99      	subs	r1, r3, #2
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	3b01      	subs	r3, #1
 800ce04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f7fe fc20 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ce0c:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	4619      	mov	r1, r3
 800ce14:	6838      	ldr	r0, [r7, #0]
 800ce16:	f7fe f95b 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ce1a:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	da5f      	bge.n	800cee8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ce28:	2300      	movs	r3, #0
 800ce2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	da55      	bge.n	800cee0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800ce34:	f04f 0300 	mov.w	r3, #0
 800ce38:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ce3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	da21      	bge.n	800ce8a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800ce46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	fb02 f203 	mul.w	r2, r2, r3
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	4413      	add	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	4413      	add	r3, r2
 800ce58:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	fb02 f203 	mul.w	r2, r2, r3
 800ce64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce6c:	4413      	add	r3, r2
 800ce6e:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800ce72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce76:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	3301      	adds	r3, #1
 800ce86:	633b      	str	r3, [r7, #48]	; 0x30
 800ce88:	e7d9      	b.n	800ce3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800ce8a:	f04f 0300 	mov.w	r3, #0
 800ce8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800ce90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce9c:	4413      	add	r3, r2
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800cea2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cea6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ceaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ceb2:	fb02 f203 	mul.w	r2, r2, r3
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cebe:	18d4      	adds	r4, r2, r3
 800cec0:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800cec4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800cec8:	eeb0 0a67 	vmov.f32	s0, s15
 800cecc:	f7fe fb04 	bl	800b4d8 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800ced0:	eef0 7a40 	vmov.f32	s15, s0
 800ced4:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	3301      	adds	r3, #1
 800cedc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cede:	e7a5      	b.n	800ce2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800cee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee2:	3301      	adds	r3, #1
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee6:	e79b      	b.n	800ce20 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800cee8:	bf00      	nop
 800ceea:	3744      	adds	r7, #68	; 0x44
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd90      	pop	{r4, r7, pc}

0800cef0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b096      	sub	sp, #88	; 0x58
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800cf28:	6838      	ldr	r0, [r7, #0]
 800cf2a:	f7f9 fe4c 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	dc01      	bgt.n	800cf38 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800cf34:	f003 ff57 	bl	8010de6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800cf38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf3a:	f7f9 fe44 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d001      	beq.n	800cf48 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800cf44:	f003 ff4f 	bl	8010de6 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	dd01      	ble.n	800cf54 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800cf50:	f003 ff49 	bl	8010de6 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f7f9 fe36 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf5a:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf60:	f7fe f8b6 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf64:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800cf66:	2101      	movs	r1, #1
 800cf68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf6a:	f7fe f8b1 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf6e:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800cf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf72:	3b02      	subs	r3, #2
 800cf74:	4619      	mov	r1, r3
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	f7fe f8aa 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	4293      	cmp	r3, r2
 800cf82:	dd01      	ble.n	800cf88 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800cf84:	f003 ff2f 	bl	8010de6 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6838      	ldr	r0, [r7, #0]
 800cf90:	f7fe f89e 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf94:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800cf96:	2300      	movs	r3, #0
 800cf98:	657b      	str	r3, [r7, #84]	; 0x54
 800cf9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	da75      	bge.n	800d08e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	653b      	str	r3, [r7, #80]	; 0x50
 800cfa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	da6b      	bge.n	800d086 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	da26      	bge.n	800d00c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 800cfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc2:	fb02 f203 	mul.w	r2, r2, r3
 800cfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfc8:	4413      	add	r3, r2
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f993 3000 	ldrsb.w	r3, [r3]
 800cfd4:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800cfd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfda:	fb02 f203 	mul.w	r2, r2, r3
 800cfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe0:	4413      	add	r3, r2
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfe6:	4413      	add	r3, r2
 800cfe8:	f993 3000 	ldrsb.w	r3, [r3]
 800cfec:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800cfee:	6a3a      	ldr	r2, [r7, #32]
 800cff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cff2:	4413      	add	r3, r2
 800cff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cff8:	440a      	add	r2, r1
 800cffa:	fb02 f203 	mul.w	r2, r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	4413      	add	r3, r2
 800d002:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800d004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d006:	3301      	adds	r3, #1
 800d008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d00a:	e7d4      	b.n	800cfb6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800d00c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800d012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d018:	4413      	add	r3, r2
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	4413      	add	r3, r2
 800d020:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fe f8ac 	bl	800b186 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800d02e:	4603      	mov	r3, r0
 800d030:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d036:	4413      	add	r3, r2
 800d038:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800d03a:	f107 021c 	add.w	r2, r7, #28
 800d03e:	f107 0314 	add.w	r3, r7, #20
 800d042:	4611      	mov	r1, r2
 800d044:	4618      	mov	r0, r3
 800d046:	f7f9 fc35 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800d04a:	4603      	mov	r3, r0
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800d050:	f107 0218 	add.w	r2, r7, #24
 800d054:	f107 0314 	add.w	r3, r7, #20
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7f9 fc16 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800d060:	4603      	mov	r3, r0
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800d066:	6979      	ldr	r1, [r7, #20]
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d06c:	fb02 f203 	mul.w	r2, r2, r3
 800d070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d072:	4413      	add	r3, r2
 800d074:	461a      	mov	r2, r3
 800d076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d078:	4413      	add	r3, r2
 800d07a:	b24a      	sxtb	r2, r1
 800d07c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800d07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d080:	3301      	adds	r3, #1
 800d082:	653b      	str	r3, [r7, #80]	; 0x50
 800d084:	e78f      	b.n	800cfa6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800d086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d088:	3301      	adds	r3, #1
 800d08a:	657b      	str	r3, [r7, #84]	; 0x54
 800d08c:	e785      	b.n	800cf9a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800d08e:	bf00      	nop
 800d090:	3758      	adds	r7, #88	; 0x58
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800d096:	b580      	push	{r7, lr}
 800d098:	b084      	sub	sp, #16
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800d0aa:	f003 fe9c 	bl	8010de6 <abort>
  return context->AllocatePersistentBuffer(context,
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b2:	2120      	movs	r1, #32
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800d0c4:	b5b0      	push	{r4, r5, r7, lr}
 800d0c6:	b08c      	sub	sp, #48	; 0x30
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800d0d6:	f003 fe86 	bl	8010de6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800d0e2:	f003 fe80 	bl	8010de6 <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	61fb      	str	r3, [r7, #28]
  const auto params =
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	695b      	ldr	r3, [r3, #20]
 800d0f0:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 800d0f2:	4b47      	ldr	r3, [pc, #284]	; (800d210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7f8 ffa3 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d100:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	695c      	ldr	r4, [r3, #20]
 800d10c:	4b41      	ldr	r3, [pc, #260]	; (800d214 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	232f      	movs	r3, #47	; 0x2f
 800d112:	4a41      	ldr	r2, [pc, #260]	; (800d218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d114:	4941      	ldr	r1, [pc, #260]	; (800d21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	47a0      	blx	r4
 800d11a:	2301      	movs	r3, #1
 800d11c:	e073      	b.n	800d206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 800d11e:	4b40      	ldr	r3, [pc, #256]	; (800d220 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7f8 ff8d 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d12c:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10a      	bne.n	800d14a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	695c      	ldr	r4, [r3, #20]
 800d138:	4b3a      	ldr	r3, [pc, #232]	; (800d224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	2332      	movs	r3, #50	; 0x32
 800d13e:	4a36      	ldr	r2, [pc, #216]	; (800d218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d140:	4936      	ldr	r1, [pc, #216]	; (800d21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	47a0      	blx	r4
 800d146:	2301      	movs	r3, #1
 800d148:	e05d      	b.n	800d206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 800d14a:	4b37      	ldr	r3, [pc, #220]	; (800d228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7f8 ffa7 	bl	80060a6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800d158:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 800d15a:	4b34      	ldr	r3, [pc, #208]	; (800d22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7f8 ff7f 	bl	8006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d168:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	695c      	ldr	r4, [r3, #20]
 800d174:	4b2e      	ldr	r3, [pc, #184]	; (800d230 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	2336      	movs	r3, #54	; 0x36
 800d17a:	4a27      	ldr	r2, [pc, #156]	; (800d218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d17c:	4927      	ldr	r1, [pc, #156]	; (800d21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	47a0      	blx	r4
 800d182:	2301      	movs	r3, #1
 800d184:	e03f      	b.n	800d206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	781a      	ldrb	r2, [r3, #0]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d01a      	beq.n	800d1c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	695c      	ldr	r4, [r3, #20]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f6 fce2 	bl	8003b64 <TfLiteTypeGetName>
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f6 fcdc 	bl	8003b64 <TfLiteTypeGetName>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	9303      	str	r3, [sp, #12]
 800d1b0:	9502      	str	r5, [sp, #8]
 800d1b2:	4b20      	ldr	r3, [pc, #128]	; (800d234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	4b20      	ldr	r3, [pc, #128]	; (800d238 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	2338      	movs	r3, #56	; 0x38
 800d1bc:	4a16      	ldr	r2, [pc, #88]	; (800d218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d1be:	491f      	ldr	r1, [pc, #124]	; (800d23c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	47a0      	blx	r4
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e01e      	b.n	800d206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d006      	beq.n	800d1e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	4919      	ldr	r1, [pc, #100]	; (800d240 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	4798      	blx	r3
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e011      	b.n	800d206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	7819      	ldrb	r1, [r3, #0]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	9303      	str	r3, [sp, #12]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	9302      	str	r3, [sp, #8]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	9301      	str	r3, [sp, #4]
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f9a8 	bl	800d552 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800d202:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 800d204:	bf00      	nop
}
 800d206:	4618      	mov	r0, r3
 800d208:	3720      	adds	r7, #32
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bdb0      	pop	{r4, r5, r7, pc}
 800d20e:	bf00      	nop
 800d210:	080172d8 	.word	0x080172d8
 800d214:	080165a4 	.word	0x080165a4
 800d218:	08016548 	.word	0x08016548
 800d21c:	0801658c 	.word	0x0801658c
 800d220:	080172dc 	.word	0x080172dc
 800d224:	080165b8 	.word	0x080165b8
 800d228:	080172e0 	.word	0x080172e0
 800d22c:	080172e4 	.word	0x080172e4
 800d230:	080165cc 	.word	0x080165cc
 800d234:	080165fc 	.word	0x080165fc
 800d238:	0801660c 	.word	0x0801660c
 800d23c:	080165e0 	.word	0x080165e0
 800d240:	08016618 	.word	0x08016618

0800d244 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d246:	b0d3      	sub	sp, #332	; 0x14c
 800d248:	af06      	add	r7, sp, #24
 800d24a:	1d3b      	adds	r3, r7, #4
 800d24c:	6018      	str	r0, [r3, #0]
 800d24e:	463b      	mov	r3, r7
 800d250:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d252:	463b      	mov	r3, r7
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800d25c:	f003 fdc3 	bl	8010de6 <abort>
  const auto* params =
 800d260:	463b      	mov	r3, r7
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800d26a:	4b8a      	ldr	r3, [pc, #552]	; (800d494 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	4639      	mov	r1, r7
 800d270:	1d3b      	adds	r3, r7, #4
 800d272:	6809      	ldr	r1, [r1, #0]
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f7fd fe4b 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d27a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800d27e:	4b86      	ldr	r3, [pc, #536]	; (800d498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4639      	mov	r1, r7
 800d284:	1d3b      	adds	r3, r7, #4
 800d286:	6809      	ldr	r1, [r1, #0]
 800d288:	6818      	ldr	r0, [r3, #0]
 800d28a:	f7fd fe41 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d28e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800d292:	4b82      	ldr	r3, [pc, #520]	; (800d49c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	4639      	mov	r1, r7
 800d298:	1d3b      	adds	r3, r7, #4
 800d29a:	6809      	ldr	r1, [r1, #0]
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	f7fd fe37 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d2a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800d2a6:	4b7e      	ldr	r3, [pc, #504]	; (800d4a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	1d3b      	adds	r3, r7, #4
 800d2ae:	6809      	ldr	r1, [r1, #0]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	f7fd fe3d 	bl	800af30 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800d2b6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 800d2ba:	463b      	mov	r3, r7
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d101      	bne.n	800d2c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800d2c4:	f003 fd8f 	bl	8010de6 <abort>
  const auto& data =
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800d2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2d6:	7a1b      	ldrb	r3, [r3, #8]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d002      	beq.n	800d2e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 800d2dc:	2b09      	cmp	r3, #9
 800d2de:	d061      	beq.n	800d3a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800d2e0:	e0bf      	b.n	800d462 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800d2e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2e6:	781a      	ldrb	r2, [r3, #0]
 800d2e8:	f107 0308 	add.w	r3, r7, #8
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 f91a 	bl	800d528 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800d2f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2f8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 f97e 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d302:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d306:	f7fd fe33 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d30a:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800d30c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d310:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f972 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d31a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d31e:	f7fd fe27 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d322:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800d324:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d328:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 f966 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d332:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d336:	f7fd fe1b 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d33a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800d33c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d340:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d344:	4618      	mov	r0, r3
 800d346:	f000 f95a 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d34a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d34e:	f7fd fe1e 	bl	800af8e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800d352:	4603      	mov	r3, r0
 800d354:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d358:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d35c:	f107 0008 	add.w	r0, r7, #8
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d366:	9303      	str	r3, [sp, #12]
 800d368:	9502      	str	r5, [sp, #8]
 800d36a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	9400      	str	r4, [sp, #0]
 800d372:	4613      	mov	r3, r2
 800d374:	4632      	mov	r2, r6
 800d376:	f7ff fd25 	bl	800cdc4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800d37a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f9 fc0b 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800d384:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f9 fc06 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800d38e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d392:	4618      	mov	r0, r3
 800d394:	f7f9 fc01 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800d398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f9 fbfc 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800d3a2:	e071      	b.n	800d488 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800d3a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d3a8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 f891 	bl	800d4d4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800d3b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d3b6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 f91f 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d3c0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d3c4:	f7fd fdf4 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d3c8:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800d3ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d3ce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f913 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d3d8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d3dc:	f7fd fde8 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d3e0:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800d3e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d3e6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f907 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d3f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d3f4:	f7fe f90c 	bl	800b610 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800d3f8:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800d3fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3fe:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f8fb 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d408:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d40c:	f7fd fddf 	bl	800afce <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d410:	4603      	mov	r3, r0
 800d412:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800d416:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800d41a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d424:	9303      	str	r3, [sp, #12]
 800d426:	9502      	str	r5, [sp, #8]
 800d428:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	9400      	str	r4, [sp, #0]
 800d430:	4613      	mov	r3, r2
 800d432:	4632      	mov	r2, r6
 800d434:	f7ff fd5c 	bl	800cef0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800d438:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7f9 fbac 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800d442:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d446:	4618      	mov	r0, r3
 800d448:	f7f9 fba7 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800d44c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d450:	4618      	mov	r0, r3
 800d452:	f7f9 fba2 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800d456:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7f9 fb9d 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800d460:	e012      	b.n	800d488 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800d462:	1d3b      	adds	r3, r7, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	695c      	ldr	r4, [r3, #20]
 800d468:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d46c:	7a1b      	ldrb	r3, [r3, #8]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f6 fb78 	bl	8003b64 <TfLiteTypeGetName>
 800d474:	4602      	mov	r2, r0
 800d476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d47a:	7a1b      	ldrb	r3, [r3, #8]
 800d47c:	1d38      	adds	r0, r7, #4
 800d47e:	4909      	ldr	r1, [pc, #36]	; (800d4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800d480:	6800      	ldr	r0, [r0, #0]
 800d482:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800d484:	2301      	movs	r3, #1
 800d486:	e000      	b.n	800d48a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d490:	46bd      	mov	sp, r7
 800d492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d494:	080172d8 	.word	0x080172d8
 800d498:	080172dc 	.word	0x080172dc
 800d49c:	080172e0 	.word	0x080172e0
 800d4a0:	080172e4 	.word	0x080172e4
 800d4a4:	08016690 	.word	0x08016690

0800d4a8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800d4a8:	b4b0      	push	{r4, r5, r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a07      	ldr	r2, [pc, #28]	; (800d4d0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800d4b4:	461c      	mov	r4, r3
 800d4b6:	4615      	mov	r5, r2
 800d4b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d4c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bcb0      	pop	{r4, r5, r7}
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	080166ac 	.word	0x080166ac

0800d4d4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	425a      	negs	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	425a      	negs	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	69da      	ldr	r2, [r3, #28]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	689a      	ldr	r2, [r3, #8]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	619a      	str	r2, [r3, #24]
  return op_params;
 800d51a:	bf00      	nop
}
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f103 0220 	add.w	r2, r3, #32
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f103 011c 	add.w	r1, r3, #28
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd ffe8 	bl	800b518 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800d548:	bf00      	nop
}
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800d552:	b580      	push	{r7, lr}
 800d554:	b08a      	sub	sp, #40	; 0x28
 800d556:	af02      	add	r7, sp, #8
 800d558:	60f8      	str	r0, [r7, #12]
 800d55a:	607b      	str	r3, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	72fb      	strb	r3, [r7, #11]
 800d560:	4613      	mov	r3, r2
 800d562:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800d564:	7abb      	ldrb	r3, [r7, #10]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d044      	beq.n	800d5f4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800d56a:	f04f 0200 	mov.w	r2, #0
 800d56e:	f04f 0300 	mov.w	r3, #0
 800d572:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800d576:	f107 0310 	add.w	r3, r7, #16
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7f8 ff36 	bl	80063f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800d58c:	4603      	mov	r3, r0
 800d58e:	77fb      	strb	r3, [r7, #31]
 800d590:	7ffb      	ldrb	r3, [r7, #31]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800d596:	7ffb      	ldrb	r3, [r7, #31]
 800d598:	e02d      	b.n	800d5f6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800d59a:	ed97 7b04 	vldr	d7, [r7, #16]
 800d59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	eeb0 0a47 	vmov.f32	s0, s14
 800d5ac:	eef0 0a67 	vmov.f32	s1, s15
 800d5b0:	f7f8 fac2 	bl	8005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	691a      	ldr	r2, [r3, #16]
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ba:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800d5c4:	f003 fc0f 	bl	8010de6 <abort>
    data->filter_zero_point = filter->params.zero_point;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	691a      	ldr	r2, [r3, #16]
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ce:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d2:	691a      	ldr	r2, [r3, #16]
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5da:	f103 0208 	add.w	r2, r3, #8
 800d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e0:	330c      	adds	r3, #12
 800d5e2:	7af9      	ldrb	r1, [r7, #11]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7f9 f8f6 	bl	80067dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800d5f0:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800d5f2:	e000      	b.n	800d5f6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b086      	sub	sp, #24
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d103      	bne.n	800d61e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7f9 fa9e 	bl	8006b58 <_ZN6tflite12RuntimeShapeC1Ev>
 800d61c:	e00d      	b.n	800d63a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	3304      	adds	r3, #4
 800d62e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	6939      	ldr	r1, [r7, #16]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7f9 fa9d 	bl	8006b74 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 800d642:	b480      	push	{r7}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	4603      	mov	r3, r0
 800d64a:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800d64c:	79fb      	ldrb	r3, [r7, #7]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d002      	beq.n	800d658 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 800d652:	2b02      	cmp	r3, #2
 800d654:	d002      	beq.n	800d65c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 800d656:	e003      	b.n	800d660 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 800d658:	2301      	movs	r3, #1
 800d65a:	e002      	b.n	800d662 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 800d65c:	2302      	movs	r3, #2
 800d65e:	e000      	b.n	800d662 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800d660:	2300      	movs	r3, #0
  }
}
 800d662:	4618      	mov	r0, r3
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800d66e:	b590      	push	{r4, r7, lr}
 800d670:	b087      	sub	sp, #28
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7f9 faa3 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d680:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800d682:	2300      	movs	r3, #0
 800d684:	617b      	str	r3, [r7, #20]
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	da15      	bge.n	800d6ba <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	429a      	cmp	r2, r3
 800d694:	d00d      	beq.n	800d6b2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d696:	6979      	ldr	r1, [r7, #20]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7fd fd19 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d69e:	4604      	mov	r4, r0
 800d6a0:	6979      	ldr	r1, [r7, #20]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7fd fd14 	bl	800b0d0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	429c      	cmp	r4, r3
 800d6ac:	d001      	beq.n	800d6b2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800d6ae:	f003 fb9a 	bl	8010de6 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	e7e5      	b.n	800d686 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800d6ba:	68b9      	ldr	r1, [r7, #8]
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f7ff fb4b 	bl	800cd58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd90      	pop	{r4, r7, pc}

0800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800d6e0:	e000      	b.n	800d6e4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800d6e2:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d706:	b590      	push	{r4, r7, lr}
 800d708:	b085      	sub	sp, #20
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d70e:	f107 030c 	add.w	r3, r7, #12
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff ffec 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d718:	4604      	mov	r4, r0
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7fd fdcc 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d720:	4603      	mov	r3, r0
 800d722:	6023      	str	r3, [r4, #0]
    return retval;
 800d724:	68fb      	ldr	r3, [r7, #12]
  }
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd90      	pop	{r4, r7, pc}

0800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d736:	2100      	movs	r1, #0
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7fd fd49 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d73e:	4603      	mov	r3, r0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f813 	bl	800d77c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800d756:	4603      	mov	r3, r0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  return a - b;
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	1ad3      	subs	r3, r2, r3
}
 800d770:	4618      	mov	r0, r3
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d784:	2101      	movs	r1, #1
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7fd fd22 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d78c:	4603      	mov	r3, r0
  }
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800d796:	b480      	push	{r7}
 800d798:	b089      	sub	sp, #36	; 0x24
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d7a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d7ba:	69f9      	ldr	r1, [r7, #28]
 800d7bc:	fb02 f001 	mul.w	r0, r2, r1
 800d7c0:	69b9      	ldr	r1, [r7, #24]
 800d7c2:	fb03 f101 	mul.w	r1, r3, r1
 800d7c6:	4401      	add	r1, r0
 800d7c8:	69b8      	ldr	r0, [r7, #24]
 800d7ca:	fba0 2302 	umull	r2, r3, r0, r2
 800d7ce:	4419      	add	r1, r3
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d7d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800d7da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7de:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800d7e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d7e4:	60bb      	str	r3, [r7, #8]
             ? min
 800d7e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7ea:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d7ee:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800d7f2:	db0e      	blt.n	800d812 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800d7f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d7fc:	f04f 0100 	mov.w	r1, #0
 800d800:	4290      	cmp	r0, r2
 800d802:	eb71 0303 	sbcs.w	r3, r1, r3
 800d806:	db01      	blt.n	800d80c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800d808:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800d80a:	e004      	b.n	800d816 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800d80c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800d810:	e001      	b.n	800d816 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800d812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800d816:	4618      	mov	r0, r3
 800d818:	3724      	adds	r7, #36	; 0x24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800d822:	b590      	push	{r4, r7, lr}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7fd fd4c 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d836:	4604      	mov	r4, r0
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f7fd fdac 	bl	800b396 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d83e:	4603      	mov	r3, r0
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	4618      	mov	r0, r3
 800d844:	f7fd fd43 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d848:	4603      	mov	r3, r0
 800d84a:	4619      	mov	r1, r3
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 f805 	bl	800d85c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800d852:	4603      	mov	r3, r0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd90      	pop	{r4, r7, pc}

0800d85c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	4053      	eors	r3, r2
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800d878:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d87c:	b08b      	sub	sp, #44	; 0x2c
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	4608      	mov	r0, r1
 800d888:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d88c:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	4608      	mov	r0, r1
 800d894:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d898:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 800d89c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d8a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d8a4:	eb18 0a00 	adds.w	sl, r8, r0
 800d8a8:	eb49 0b01 	adc.w	fp, r9, r1
 800d8ac:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800d8b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f171 0100 	sbcs.w	r1, r1, #0
 800d8ba:	db04      	blt.n	800d8c6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 800d8bc:	f04f 0001 	mov.w	r0, #1
 800d8c0:	f04f 0100 	mov.w	r1, #0
 800d8c4:	e003      	b.n	800d8ce <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 800d8c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d8ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800d8d2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800d8d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d8da:	eb18 0400 	adds.w	r4, r8, r0
 800d8de:	eb49 0501 	adc.w	r5, r9, r1
 800d8e2:	0fe9      	lsrs	r1, r5, #31
 800d8e4:	4608      	mov	r0, r1
 800d8e6:	f04f 0100 	mov.w	r1, #0
 800d8ea:	1902      	adds	r2, r0, r4
 800d8ec:	eb41 0305 	adc.w	r3, r1, r5
 800d8f0:	f04f 0000 	mov.w	r0, #0
 800d8f4:	f04f 0100 	mov.w	r1, #0
 800d8f8:	0850      	lsrs	r0, r2, #1
 800d8fa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d8fe:	1059      	asrs	r1, r3, #1
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4613      	mov	r3, r2
}
 800d906:	4618      	mov	r0, r3
 800d908:	372c      	adds	r7, #44	; 0x2c
 800d90a:	46bd      	mov	sp, r7
 800d90c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d910:	4770      	bx	lr

0800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d91a:	f107 030c 	add.w	r3, r7, #12
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff fee6 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d924:	4602      	mov	r2, r0
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6013      	str	r3, [r2, #0]
    return retval;
 800d92a:	68fb      	ldr	r3, [r7, #12]
  }
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800d93c:	f000 f9f7 	bl	800dd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800d940:	4603      	mov	r3, r0
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f9fd 	bl	800dd44 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d94a:	4603      	mov	r3, r0
 800d94c:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800d94e:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800d952:	f000 fa29 	bl	800dda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d956:	4603      	mov	r3, r0
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fa11 	bl	800dd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d95e:	4603      	mov	r3, r0
 800d960:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800d962:	4823      	ldr	r0, [pc, #140]	; (800d9f0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800d964:	f000 fa20 	bl	800dda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d968:	4603      	mov	r3, r0
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 fa08 	bl	800dd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d970:	4603      	mov	r3, r0
 800d972:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800d974:	69b9      	ldr	r1, [r7, #24]
 800d976:	6a38      	ldr	r0, [r7, #32]
 800d978:	f000 fa23 	bl	800ddc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d97c:	4603      	mov	r3, r0
 800d97e:	4619      	mov	r1, r3
 800d980:	69f8      	ldr	r0, [r7, #28]
 800d982:	f000 fa40 	bl	800de06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d986:	4603      	mov	r3, r0
 800d988:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d98a:	2300      	movs	r3, #0
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	2b02      	cmp	r3, #2
 800d992:	dc21      	bgt.n	800d9d8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800d994:	6979      	ldr	r1, [r7, #20]
 800d996:	6a38      	ldr	r0, [r7, #32]
 800d998:	f000 fa13 	bl	800ddc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d99c:	4603      	mov	r3, r0
 800d99e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800d9a0:	f000 fa4f 	bl	800de42 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	6939      	ldr	r1, [r7, #16]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f000 fa53 	bl	800de54 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800d9b2:	68f9      	ldr	r1, [r7, #12]
 800d9b4:	6978      	ldr	r0, [r7, #20]
 800d9b6:	f000 fa6b 	bl	800de90 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 fa89 	bl	800ded4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6978      	ldr	r0, [r7, #20]
 800d9c8:	f000 fa1d 	bl	800de06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d9d6:	e7da      	b.n	800d98e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800d9d8:	6978      	ldr	r0, [r7, #20]
 800d9da:	f000 fa95 	bl	800df08 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 faa7 	bl	800df34 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d9e6:	4603      	mov	r3, r0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3728      	adds	r7, #40	; 0x28
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	c3c3c3c4 	.word	0xc3c3c3c4

0800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d9fc:	f107 030c 	add.w	r3, r7, #12
 800da00:	4618      	mov	r0, r3
 800da02:	f000 f989 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800da06:	4602      	mov	r2, r0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6013      	str	r3, [r2, #0]
    return retval;
 800da0c:	68fb      	ldr	r3, [r7, #12]
  }
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800da18:	b590      	push	{r4, r7, lr}
 800da1a:	b091      	sub	sp, #68	; 0x44
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800da20:	f000 faa2 	bl	800df68 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800da24:	4603      	mov	r3, r0
 800da26:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800da28:	2001      	movs	r0, #1
 800da2a:	f000 faa6 	bl	800df7a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800da2e:	4603      	mov	r3, r0
 800da30:	4619      	mov	r1, r3
 800da32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da34:	f000 fab5 	bl	800dfa2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da38:	4603      	mov	r3, r0
 800da3a:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800da3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 facd 	bl	800dfde <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da44:	4603      	mov	r3, r0
 800da46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 faaa 	bl	800dfa2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da4e:	4603      	mov	r3, r0
 800da50:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800da52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da54:	f000 fae1 	bl	800e01a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800da58:	4603      	mov	r3, r0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 faf8 	bl	800e050 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800da60:	4603      	mov	r3, r0
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da68:	f000 fa9b 	bl	800dfa2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da6c:	4603      	mov	r3, r0
 800da6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da74:	4618      	mov	r0, r3
 800da76:	f000 f94f 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800da7a:	4603      	mov	r3, r0
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800da80:	4883      	ldr	r0, [pc, #524]	; (800dc90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800da82:	f7ff fe54 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800da86:	4603      	mov	r3, r0
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fe3c 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800da8e:	4603      	mov	r3, r0
 800da90:	627b      	str	r3, [r7, #36]	; 0x24
 800da92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800da96:	f7fd fc0f 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800da9a:	4603      	mov	r3, r0
 800da9c:	4619      	mov	r1, r3
 800da9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800daa0:	f7fd fc15 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800daa4:	4603      	mov	r3, r0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fd fc64 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800daac:	4604      	mov	r4, r0
 800daae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab2:	f000 fb2f 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dab6:	4603      	mov	r3, r0
 800dab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daba:	4619      	mov	r1, r3
 800dabc:	4620      	mov	r0, r4
 800dabe:	f000 fb4b 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dac2:	4603      	mov	r3, r0
 800dac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800dac6:	4873      	ldr	r0, [pc, #460]	; (800dc94 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800dac8:	f7ff fe31 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800dacc:	4603      	mov	r3, r0
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff fe19 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dad4:	4603      	mov	r3, r0
 800dad6:	623b      	str	r3, [r7, #32]
 800dad8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800dadc:	f7fd fbec 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dae0:	4603      	mov	r3, r0
 800dae2:	4619      	mov	r1, r3
 800dae4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dae6:	f7fd fbf2 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800daea:	4603      	mov	r3, r0
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fc41 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800daf2:	4604      	mov	r4, r0
 800daf4:	6a39      	ldr	r1, [r7, #32]
 800daf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daf8:	f000 fb0c 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dafc:	4603      	mov	r3, r0
 800dafe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db00:	4619      	mov	r1, r3
 800db02:	4620      	mov	r0, r4
 800db04:	f000 fb28 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db08:	4603      	mov	r3, r0
 800db0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800db0c:	4862      	ldr	r0, [pc, #392]	; (800dc98 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800db0e:	f7ff fe0e 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db12:	4603      	mov	r3, r0
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff fdf6 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800db1a:	4603      	mov	r3, r0
 800db1c:	61fb      	str	r3, [r7, #28]
 800db1e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800db22:	f7fd fbc9 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800db26:	4603      	mov	r3, r0
 800db28:	4619      	mov	r1, r3
 800db2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db2c:	f7fd fbcf 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800db30:	4603      	mov	r3, r0
 800db32:	4618      	mov	r0, r3
 800db34:	f7fd fc1e 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800db38:	4604      	mov	r4, r0
 800db3a:	69f9      	ldr	r1, [r7, #28]
 800db3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3e:	f000 fae9 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800db42:	4603      	mov	r3, r0
 800db44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db46:	4619      	mov	r1, r3
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 fb05 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db4e:	4603      	mov	r3, r0
 800db50:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800db52:	4852      	ldr	r0, [pc, #328]	; (800dc9c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800db54:	f7ff fdeb 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db58:	4603      	mov	r3, r0
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fdd3 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800db60:	4603      	mov	r3, r0
 800db62:	61bb      	str	r3, [r7, #24]
 800db64:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800db68:	f7fd fba6 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800db6c:	4603      	mov	r3, r0
 800db6e:	4619      	mov	r1, r3
 800db70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db72:	f7fd fbac 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800db76:	4603      	mov	r3, r0
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fbfb 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800db7e:	4604      	mov	r4, r0
 800db80:	69b9      	ldr	r1, [r7, #24]
 800db82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db84:	f000 fac6 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800db88:	4603      	mov	r3, r0
 800db8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db8c:	4619      	mov	r1, r3
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 fae2 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db94:	4603      	mov	r3, r0
 800db96:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800db98:	4841      	ldr	r0, [pc, #260]	; (800dca0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800db9a:	f7ff fdc8 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db9e:	4603      	mov	r3, r0
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff fdb0 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dba6:	4603      	mov	r3, r0
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800dbae:	f7fd fb83 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbb8:	f7fd fb89 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fd fbd8 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	6979      	ldr	r1, [r7, #20]
 800dbc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbca:	f000 faa3 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f000 fabf 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800dbde:	4831      	ldr	r0, [pc, #196]	; (800dca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800dbe0:	f7ff fda5 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7ff fd8d 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dbec:	4603      	mov	r3, r0
 800dbee:	613b      	str	r3, [r7, #16]
 800dbf0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800dbf4:	f7fd fb60 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbfe:	f7fd fb66 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dc02:	4603      	mov	r3, r0
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fd fbb5 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	6939      	ldr	r1, [r7, #16]
 800dc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc10:	f000 fa80 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dc14:	4603      	mov	r3, r0
 800dc16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 fa9c 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dc20:	4603      	mov	r3, r0
 800dc22:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800dc24:	20f2      	movs	r0, #242	; 0xf2
 800dc26:	f7ff fd82 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff fd6a 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dc32:	4603      	mov	r3, r0
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800dc3a:	f7fd fb3d 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	4619      	mov	r1, r3
 800dc42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc44:	f7fd fb43 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fd fb92 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dc50:	4604      	mov	r4, r0
 800dc52:	68f9      	ldr	r1, [r7, #12]
 800dc54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc56:	f000 fa5d 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc5e:	4619      	mov	r1, r3
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 fa79 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dc66:	4603      	mov	r3, r0
 800dc68:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fa95 	bl	800e19a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800dc70:	4604      	mov	r4, r0
 800dc72:	f000 f85c 	bl	800dd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800dc76:	4603      	mov	r3, r0
 800dc78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f000 fa6b 	bl	800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dc82:	4603      	mov	r3, r0
 800dc84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3744      	adds	r7, #68	; 0x44
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd90      	pop	{r4, r7, pc}
 800dc90:	63afbe7b 	.word	0x63afbe7b
 800dc94:	4da2cbf2 	.word	0x4da2cbf2
 800dc98:	2f16ac6c 	.word	0x2f16ac6c
 800dc9c:	1152aaa4 	.word	0x1152aaa4
 800dca0:	02582ab7 	.word	0x02582ab7
 800dca4:	000afe11 	.word	0x000afe11

0800dca8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800dca8:	b5b0      	push	{r4, r5, r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800dcb0:	1d3b      	adds	r3, r7, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff fd1c 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	681d      	ldr	r5, [r3, #0]
 800dcbc:	f107 030c 	add.w	r3, r7, #12
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fa7c 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f000 fa83 	bl	800e1d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	6023      	str	r3, [r4, #0]
  return result;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bdb0      	pop	{r4, r5, r7, pc}

0800dcdc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800dcdc:	b590      	push	{r4, r7, lr}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 fa68 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	681c      	ldr	r4, [r3, #0]
 800dcf2:	463b      	mov	r3, r7
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 fa62 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4620      	mov	r0, r4
 800dd02:	f7fd fb15 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800dd06:	4603      	mov	r3, r0
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 fa6f 	bl	800e1ec <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4618      	mov	r0, r3
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd90      	pop	{r4, r7, pc}

0800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4618      	mov	r0, r3
 800dd24:	370c      	adds	r7, #12
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr

0800dd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800dd32:	f000 fa82 	bl	800e23a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800dd36:	4603      	mov	r3, r0
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff fce4 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dd3e:	4603      	mov	r3, r0
  }
 800dd40:	4618      	mov	r0, r3
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	1d3b      	adds	r3, r7, #4
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fccd 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd56:	4603      	mov	r3, r0
 800dd58:	681c      	ldr	r4, [r3, #0]
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fcc7 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd62:	4603      	mov	r3, r0
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4619      	mov	r1, r3
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f7ff fd85 	bl	800d878 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff fdce 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd76:	4603      	mov	r3, r0
 800dd78:	4618      	mov	r0, r3
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd90      	pop	{r4, r7, pc}

0800dd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800dd88:	f107 030c 	add.w	r3, r7, #12
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 fa5b 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dd92:	4604      	mov	r4, r0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7fd fa8f 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	6023      	str	r3, [r4, #0]
    return retval;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
  }
 800dda0:	4618      	mov	r0, r3
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}

0800dda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7fd fa0c 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ddb8:	4603      	mov	r3, r0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800ddc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc4:	b085      	sub	sp, #20
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800ddcc:	1d3b      	adds	r3, r7, #4
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff fc8e 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	681d      	ldr	r5, [r3, #0]
 800ddd8:	463b      	mov	r3, r7
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 fa34 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dde0:	4603      	mov	r3, r0
 800dde2:	681e      	ldr	r6, [r3, #0]
 800dde4:	f107 030c 	add.w	r3, r7, #12
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 fa2d 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f7fd f8fc 	bl	800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	6023      	str	r3, [r4, #0]
  return c;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800de06:	b590      	push	{r4, r7, lr}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
 800de10:	1d3b      	adds	r3, r7, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f000 fa18 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de18:	4603      	mov	r3, r0
 800de1a:	681c      	ldr	r4, [r3, #0]
 800de1c:	463b      	mov	r3, r7
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fa12 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de24:	4603      	mov	r3, r0
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4619      	mov	r1, r3
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7fd fa80 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800de30:	4603      	mov	r3, r0
 800de32:	4618      	mov	r0, r3
 800de34:	f000 fa13 	bl	800e25e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800de38:	4603      	mov	r3, r0
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd90      	pop	{r4, r7, pc}

0800de42 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800de42:	b580      	push	{r7, lr}
 800de44:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800de46:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800de4a:	f7ff ff99 	bl	800dd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800de4e:	4603      	mov	r3, r0
  }
 800de50:	4618      	mov	r0, r3
 800de52:	bd80      	pop	{r7, pc}

0800de54 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800de54:	b590      	push	{r4, r7, lr}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
 800de5e:	1d3b      	adds	r3, r7, #4
 800de60:	4618      	mov	r0, r3
 800de62:	f000 f9f1 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de66:	4603      	mov	r3, r0
 800de68:	681c      	ldr	r4, [r3, #0]
 800de6a:	463b      	mov	r3, r7
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 f9eb 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de72:	4603      	mov	r3, r0
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4619      	mov	r1, r3
 800de78:	4620      	mov	r0, r4
 800de7a:	f7ff fc71 	bl	800d760 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800de7e:	4603      	mov	r3, r0
 800de80:	4618      	mov	r0, r3
 800de82:	f000 f9ec 	bl	800e25e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800de86:	4603      	mov	r3, r0
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd90      	pop	{r4, r7, pc}

0800de90 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800de9a:	1d3b      	adds	r3, r7, #4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 f9d3 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dea2:	4603      	mov	r3, r0
 800dea4:	681d      	ldr	r5, [r3, #0]
 800dea6:	463b      	mov	r3, r7
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 f9cd 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800deae:	4603      	mov	r3, r0
 800deb0:	681e      	ldr	r6, [r3, #0]
 800deb2:	f107 030c 	add.w	r3, r7, #12
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 f9e2 	bl	800e280 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800debc:	4604      	mov	r4, r0
 800debe:	4631      	mov	r1, r6
 800dec0:	4628      	mov	r0, r5
 800dec2:	f7fd f895 	bl	800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800dec6:	4603      	mov	r3, r0
 800dec8:	6023      	str	r3, [r4, #0]
  return c;
 800deca:	68fb      	ldr	r3, [r7, #12]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ded4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800ded4:	b5b0      	push	{r4, r5, r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800dedc:	1d3b      	adds	r3, r7, #4
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 f9ce 	bl	800e280 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800dee4:	4603      	mov	r3, r0
 800dee6:	681d      	ldr	r5, [r3, #0]
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	4618      	mov	r0, r3
 800deee:	f000 f9ab 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800def2:	4604      	mov	r4, r0
 800def4:	4628      	mov	r0, r5
 800def6:	f000 f9ce 	bl	800e296 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800defa:	4603      	mov	r3, r0
 800defc:	6023      	str	r3, [r4, #0]
  return result;
 800defe:	68fb      	ldr	r3, [r7, #12]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bdb0      	pop	{r4, r5, r7, pc}

0800df08 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800df10:	1d3b      	adds	r3, r7, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f998 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800df18:	4604      	mov	r4, r0
 800df1a:	f107 030c 	add.w	r3, r7, #12
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 f9c5 	bl	800e2ae <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800df24:	4602      	mov	r2, r0
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	6013      	str	r3, [r2, #0]
  return c;
 800df2a:	68fb      	ldr	r3, [r7, #12]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	bd90      	pop	{r4, r7, pc}

0800df34 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800df34:	b5b0      	push	{r4, r5, r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800df3c:	1d3b      	adds	r3, r7, #4
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f9b5 	bl	800e2ae <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800df44:	4603      	mov	r3, r0
 800df46:	681d      	ldr	r5, [r3, #0]
 800df48:	f107 030c 	add.w	r3, r7, #12
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7ff fbcf 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800df52:	4604      	mov	r4, r0
 800df54:	4628      	mov	r0, r5
 800df56:	f000 f9b5 	bl	800e2c4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800df5a:	4603      	mov	r3, r0
 800df5c:	6023      	str	r3, [r4, #0]
  return result;
 800df5e:	68fb      	ldr	r3, [r7, #12]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bdb0      	pop	{r4, r5, r7, pc}

0800df68 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800df6c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800df70:	f000 f803 	bl	800df7a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800df74:	4603      	mov	r3, r0
  }
 800df76:	4618      	mov	r0, r3
 800df78:	bd80      	pop	{r7, pc}

0800df7a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800df7a:	b590      	push	{r4, r7, lr}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800df82:	f107 030c 	add.w	r3, r7, #12
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff fec6 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800df8c:	4604      	mov	r4, r0
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7fd f992 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800df94:	4603      	mov	r3, r0
 800df96:	6023      	str	r3, [r4, #0]
    return retval;
 800df98:	68fb      	ldr	r3, [r7, #12]
  }
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}

0800dfa2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800dfa2:	b590      	push	{r4, r7, lr}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]
 800dfac:	1d3b      	adds	r3, r7, #4
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7ff feb2 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	681c      	ldr	r4, [r3, #0]
 800dfb8:	463b      	mov	r3, r7
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff feac 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f7ff fbca 	bl	800d760 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7ff fd10 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd90      	pop	{r4, r7, pc}

0800dfde <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800dfde:	b590      	push	{r4, r7, lr}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	6039      	str	r1, [r7, #0]
 800dfe8:	1d3b      	adds	r3, r7, #4
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff fe94 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dff0:	4603      	mov	r3, r0
 800dff2:	681c      	ldr	r4, [r3, #0]
 800dff4:	463b      	mov	r3, r7
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7ff fe8e 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dffc:	4603      	mov	r3, r0
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4619      	mov	r1, r3
 800e002:	4620      	mov	r0, r4
 800e004:	f7fd f963 	bl	800b2ce <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e008:	4603      	mov	r3, r0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fcf2 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800e010:	4603      	mov	r3, r0
 800e012:	4618      	mov	r0, r3
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	bd90      	pop	{r4, r7, pc}

0800e01a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800e01a:	b5b0      	push	{r4, r5, r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800e022:	1d3b      	adds	r3, r7, #4
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff fe77 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e02a:	4603      	mov	r3, r0
 800e02c:	681d      	ldr	r5, [r3, #0]
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff fb5c 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e038:	4604      	mov	r4, r0
 800e03a:	4628      	mov	r0, r5
 800e03c:	f000 f94e 	bl	800e2dc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800e040:	4603      	mov	r3, r0
 800e042:	6023      	str	r3, [r4, #0]
  return result;
 800e044:	68fb      	ldr	r3, [r7, #12]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e050 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800e050:	b580      	push	{r7, lr}
 800e052:	b08a      	sub	sp, #40	; 0x28
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800e058:	482c      	ldr	r0, [pc, #176]	; (800e10c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800e05a:	f7ff fb68 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e05e:	4603      	mov	r3, r0
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff fb50 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e066:	4603      	mov	r3, r0
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800e06a:	4829      	ldr	r0, [pc, #164]	; (800e110 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800e06c:	f7ff fb5f 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e070:	4603      	mov	r3, r0
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff fb47 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e078:	4603      	mov	r3, r0
 800e07a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800e07c:	f000 f93a 	bl	800e2f4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800e080:	4603      	mov	r3, r0
 800e082:	4619      	mov	r1, r3
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f93e 	bl	800e306 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e08a:	4603      	mov	r3, r0
 800e08c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800e08e:	69f9      	ldr	r1, [r7, #28]
 800e090:	69f8      	ldr	r0, [r7, #28]
 800e092:	f000 f83f 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e096:	4603      	mov	r3, r0
 800e098:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800e09a:	69f9      	ldr	r1, [r7, #28]
 800e09c:	69b8      	ldr	r0, [r7, #24]
 800e09e:	f000 f839 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800e0a6:	69b9      	ldr	r1, [r7, #24]
 800e0a8:	69b8      	ldr	r0, [r7, #24]
 800e0aa:	f000 f833 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800e0b2:	6938      	ldr	r0, [r7, #16]
 800e0b4:	f000 f945 	bl	800e342 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800e0bc:	6979      	ldr	r1, [r7, #20]
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 f921 	bl	800e306 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	6a39      	ldr	r1, [r7, #32]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f823 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	69b9      	ldr	r1, [r7, #24]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 f917 	bl	800e306 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 f947 	bl	800e36e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800e0e4:	68b9      	ldr	r1, [r7, #8]
 800e0e6:	69f8      	ldr	r0, [r7, #28]
 800e0e8:	f000 f90d 	bl	800e306 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f2:	f000 f80f 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0fc:	f000 f94d 	bl	800e39a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e100:	4603      	mov	r3, r0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3728      	adds	r7, #40	; 0x28
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	70f5a894 	.word	0x70f5a894
 800e110:	2aaaaaab 	.word	0x2aaaaaab

0800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800e114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800e11e:	1d3b      	adds	r3, r7, #4
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff fae5 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e126:	4603      	mov	r3, r0
 800e128:	681d      	ldr	r5, [r3, #0]
 800e12a:	463b      	mov	r3, r7
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7ff fadf 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e132:	4603      	mov	r3, r0
 800e134:	681e      	ldr	r6, [r3, #0]
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fad8 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e140:	4604      	mov	r4, r0
 800e142:	4631      	mov	r1, r6
 800e144:	4628      	mov	r0, r5
 800e146:	f7fc ff53 	bl	800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e14a:	4603      	mov	r3, r0
 800e14c:	6023      	str	r3, [r4, #0]
  return c;
 800e14e:	68fb      	ldr	r3, [r7, #12]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e158 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800e164:	f107 0308 	add.w	r3, r7, #8
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fac1 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e16e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e170:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800e172:	1d3b      	adds	r3, r7, #4
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fabb 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e17a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	4621      	mov	r1, r4
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7ff fb4d 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e188:	4603      	mov	r3, r0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fbc1 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e190:	4603      	mov	r3, r0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	bd90      	pop	{r4, r7, pc}

0800e19a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b082      	sub	sp, #8
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	1d3b      	adds	r3, r7, #4
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff fdb7 	bl	800dd18 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 f911 	bl	800e3d6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f90c 	bl	800e3fa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800e1e2:	4603      	mov	r3, r0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e1f4:	f107 030c 	add.w	r3, r7, #12
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff ffe0 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e1fe:	4602      	mov	r2, r0
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6013      	str	r3, [r2, #0]
    return retval;
 800e204:	68fb      	ldr	r3, [r7, #12]
  }
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e20e:	b480      	push	{r7}
 800e210:	b083      	sub	sp, #12
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f993 2000 	ldrsb.w	r2, [r3]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	f993 3000 	ldrsb.w	r3, [r3]
 800e224:	429a      	cmp	r2, r3
 800e226:	da01      	bge.n	800e22c <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	e000      	b.n	800e22e <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800e22c:	687b      	ldr	r3, [r7, #4]
    }
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800e23a:	b580      	push	{r7, lr}
 800e23c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800e23e:	f7f7 fc72 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 800e242:	4603      	mov	r3, r0
  }
 800e244:	4618      	mov	r0, r3
 800e246:	bd80      	pop	{r7, pc}

0800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e266:	f107 030c 	add.w	r3, r7, #12
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff ffec 	bl	800e248 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e270:	4602      	mov	r2, r0
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6013      	str	r3, [r2, #0]
    return retval;
 800e276:	68fb      	ldr	r3, [r7, #12]
  }
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4618      	mov	r0, r3
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e296:	b580      	push	{r7, lr}
 800e298:	b082      	sub	sp, #8
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f8b8 	bl	800e414 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800e2a4:	4603      	mov	r3, r0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800e2ae:	b480      	push	{r7}
 800e2b0:	b083      	sub	sp, #12
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f8e3 	bl	800e498 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800e2d2:	4603      	mov	r3, r0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f919 	bl	800e51c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800e2ea:	4603      	mov	r3, r0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800e2f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e2fc:	f7ff fa03 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e300:	4603      	mov	r3, r0
  }
 800e302:	4618      	mov	r0, r3
 800e304:	bd80      	pop	{r7, pc}

0800e306 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800e306:	b590      	push	{r4, r7, lr}
 800e308:	b083      	sub	sp, #12
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	6039      	str	r1, [r7, #0]
 800e310:	1d3b      	adds	r3, r7, #4
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff f9ec 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e318:	4603      	mov	r3, r0
 800e31a:	681c      	ldr	r4, [r3, #0]
 800e31c:	463b      	mov	r3, r7
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff f9e6 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e324:	4603      	mov	r3, r0
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4619      	mov	r1, r3
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7fd f800 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e330:	4603      	mov	r3, r0
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff faed 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e338:	4603      	mov	r3, r0
 800e33a:	4618      	mov	r0, r3
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd90      	pop	{r4, r7, pc}

0800e342 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800e34a:	1d3b      	adds	r3, r7, #4
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff f9cf 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e352:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f000 f922 	bl	800e5a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800e35c:	4603      	mov	r3, r0
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff fad7 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e364:	4603      	mov	r3, r0
}
 800e366:	4618      	mov	r0, r3
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800e376:	1d3b      	adds	r3, r7, #4
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff f9b9 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e37e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff f9e0 	bl	800d748 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800e388:	4603      	mov	r3, r0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff fac1 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e390:	4603      	mov	r3, r0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800e39a:	b590      	push	{r4, r7, lr}
 800e39c:	b083      	sub	sp, #12
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800e3a4:	1d3b      	adds	r3, r7, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff f9a2 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e3ac:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e3ae:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800e3b0:	463b      	mov	r3, r7
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff f99c 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e3b8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f000 f8fa 	bl	800e5b8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff faa3 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e3cc:	4603      	mov	r3, r0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd90      	pop	{r4, r7, pc}

0800e3d6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b082      	sub	sp, #8
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	bf0c      	ite	eq
 800e3e4:	2301      	moveq	r3, #1
 800e3e6:	2300      	movne	r3, #0
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fc ffc2 	bl	800b374 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e3f0:	4603      	mov	r3, r0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e402:	210c      	movs	r1, #12
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7fc fee3 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e40a:	4603      	mov	r3, r0
  }
 800e40c:	4618      	mov	r0, r3
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e414:	b580      	push	{r7, lr}
 800e416:	b08a      	sub	sp, #40	; 0x28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e41c:	f7f7 fd8d 	bl	8005f3a <_ZNSt14numeric_limitsIlE3minEv>
 800e420:	4603      	mov	r3, r0
 800e422:	4618      	mov	r0, r3
 800e424:	f7fc ff48 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e428:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e42a:	f7f7 fb7c 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 800e42e:	4603      	mov	r3, r0
 800e430:	4618      	mov	r0, r3
 800e432:	f7fc ff41 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e436:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e438:	2320      	movs	r3, #32
 800e43a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e43c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e440:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e442:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800e446:	f7fc ff37 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e44a:	4603      	mov	r3, r0
 800e44c:	4619      	mov	r1, r3
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7fc ff7c 	bl	800b34c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e454:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e456:	480f      	ldr	r0, [pc, #60]	; (800e494 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800e458:	f7fc ff2e 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e45c:	4603      	mov	r3, r0
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7fc ff51 	bl	800b308 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e466:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e468:	2102      	movs	r1, #2
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7ff f993 	bl	800d796 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e470:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	6a39      	ldr	r1, [r7, #32]
 800e476:	6978      	ldr	r0, [r7, #20]
 800e478:	f7ff f9d3 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e47c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e482:	6938      	ldr	r0, [r7, #16]
 800e484:	f7ff f9cd 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e488:	60f8      	str	r0, [r7, #12]
    return result;
 800e48a:	68fb      	ldr	r3, [r7, #12]
  }
 800e48c:	4618      	mov	r0, r3
 800e48e:	3728      	adds	r7, #40	; 0x28
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	e0000001 	.word	0xe0000001

0800e498 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	; 0x28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e4a0:	f7f7 fd4b 	bl	8005f3a <_ZNSt14numeric_limitsIlE3minEv>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fc ff06 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4ac:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e4ae:	f7f7 fb3a 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fc feff 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4ba:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e4bc:	2320      	movs	r3, #32
 800e4be:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e4c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e4c4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e4c6:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800e4ca:	f7fc fef5 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7fc ff3a 	bl	800b34c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e4d8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e4da:	480f      	ldr	r0, [pc, #60]	; (800e518 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800e4dc:	f7fc feec 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7fc ff0f 	bl	800b308 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e4ea:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff f951 	bl	800d796 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e4f4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	6a39      	ldr	r1, [r7, #32]
 800e4fa:	6978      	ldr	r0, [r7, #20]
 800e4fc:	f7ff f991 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e500:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e506:	6938      	ldr	r0, [r7, #16]
 800e508:	f7ff f98b 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e50c:	60f8      	str	r0, [r7, #12]
    return result;
 800e50e:	68fb      	ldr	r3, [r7, #12]
  }
 800e510:	4618      	mov	r0, r3
 800e512:	3728      	adds	r7, #40	; 0x28
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	c0000001 	.word	0xc0000001

0800e51c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08a      	sub	sp, #40	; 0x28
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e524:	f7f7 fd09 	bl	8005f3a <_ZNSt14numeric_limitsIlE3minEv>
 800e528:	4603      	mov	r3, r0
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fc fec4 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e530:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e532:	f7f7 faf8 	bl	8005b26 <_ZNSt14numeric_limitsIlE3maxEv>
 800e536:	4603      	mov	r3, r0
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fc febd 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e53e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e540:	2320      	movs	r3, #32
 800e542:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e544:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800e548:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e54a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800e54e:	f7fc feb3 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e552:	4603      	mov	r3, r0
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fc fef8 	bl	800b34c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e55c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e55e:	480f      	ldr	r0, [pc, #60]	; (800e59c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800e560:	f7fc feaa 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e564:	4603      	mov	r3, r0
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7fc fecd 	bl	800b308 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e56e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e570:	2105      	movs	r1, #5
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff f90f 	bl	800d796 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e578:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	6a39      	ldr	r1, [r7, #32]
 800e57e:	6978      	ldr	r0, [r7, #20]
 800e580:	f7ff f94f 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e584:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e58a:	6938      	ldr	r0, [r7, #16]
 800e58c:	f7ff f949 	bl	800d822 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e590:	60f8      	str	r0, [r7, #12]
    return result;
 800e592:	68fb      	ldr	r3, [r7, #12]
  }
 800e594:	4618      	mov	r0, r3
 800e596:	3728      	adds	r7, #40	; 0x28
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	fc000001 	.word	0xfc000001

0800e5a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f813 	bl	800e5d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800e5ae:	4603      	mov	r3, r0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800e5c2:	6839      	ldr	r1, [r7, #0]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f812 	bl	800e5ee <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800e5ca:	4603      	mov	r3, r0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e5dc:	2102      	movs	r1, #2
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7fc fdf6 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e5e4:	4603      	mov	r3, r0
  }
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b082      	sub	sp, #8
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7fc fe98 	bl	800b330 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e600:	4603      	mov	r3, r0
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800e60c:	b5b0      	push	{r4, r5, r7, lr}
 800e60e:	b08e      	sub	sp, #56	; 0x38
 800e610:	af04      	add	r7, sp, #16
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800e616:	2200      	movs	r2, #0
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7f7 fd13 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e620:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	695c      	ldr	r4, [r3, #20]
 800e62c:	4b62      	ldr	r3, [pc, #392]	; (800e7b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	2323      	movs	r3, #35	; 0x23
 800e632:	4a62      	ldr	r2, [pc, #392]	; (800e7bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e634:	4962      	ldr	r1, [pc, #392]	; (800e7c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	47a0      	blx	r4
 800e63a:	2301      	movs	r3, #1
 800e63c:	e0b8      	b.n	800e7b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800e63e:	2200      	movs	r2, #0
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7f7 fd0f 	bl	8006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e648:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	695c      	ldr	r4, [r3, #20]
 800e654:	4b5b      	ldr	r3, [pc, #364]	; (800e7c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2325      	movs	r3, #37	; 0x25
 800e65a:	4a58      	ldr	r2, [pc, #352]	; (800e7bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e65c:	4958      	ldr	r1, [pc, #352]	; (800e7c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	47a0      	blx	r4
 800e662:	2301      	movs	r3, #1
 800e664:	e0a4      	b.n	800e7b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800e666:	69b8      	ldr	r0, [r7, #24]
 800e668:	f7fe fb56 	bl	800cd18 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	4613      	mov	r3, r2
 800e672:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e67a:	6838      	ldr	r0, [r7, #0]
 800e67c:	f7fc ffae 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e680:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e682:	2b01      	cmp	r3, #1
 800e684:	d109      	bne.n	800e69a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d105      	bne.n	800e69a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800e69a:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 800e6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6ae:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	61fb      	str	r3, [r7, #28]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	da2b      	bge.n	800e716 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4413      	add	r3, r2
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6d0:	d118      	bne.n	800e704 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6d8:	d011      	beq.n	800e6fe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	695c      	ldr	r4, [r3, #20]
 800e6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6e2:	9303      	str	r3, [sp, #12]
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	9302      	str	r3, [sp, #8]
 800e6e8:	4b37      	ldr	r3, [pc, #220]	; (800e7c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	4b37      	ldr	r3, [pc, #220]	; (800e7cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	233a      	movs	r3, #58	; 0x3a
 800e6f2:	4a32      	ldr	r2, [pc, #200]	; (800e7bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e6f4:	4936      	ldr	r1, [pc, #216]	; (800e7d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	47a0      	blx	r4
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e058      	b.n	800e7b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	623b      	str	r3, [r7, #32]
 800e702:	e004      	b.n	800e70e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	68ba      	ldr	r2, [r7, #8]
 800e708:	fb02 f303 	mul.w	r3, r2, r3
 800e70c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	3301      	adds	r3, #1
 800e712:	61fb      	str	r3, [r7, #28]
 800e714:	e7ce      	b.n	800e6b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e71c:	d011      	beq.n	800e742 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	fb92 f2f3 	sdiv	r2, r2, r3
 800e726:	68f9      	ldr	r1, [r7, #12]
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	440b      	add	r3, r1
 800e72e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	fb02 f303 	mul.w	r3, r2, r3
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	781a      	ldrb	r2, [r3, #0]
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d01a      	beq.n	800e784 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	695c      	ldr	r4, [r3, #20]
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	4618      	mov	r0, r3
 800e758:	f7f5 fa04 	bl	8003b64 <TfLiteTypeGetName>
 800e75c:	4605      	mov	r5, r0
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	4618      	mov	r0, r3
 800e764:	f7f5 f9fe 	bl	8003b64 <TfLiteTypeGetName>
 800e768:	4603      	mov	r3, r0
 800e76a:	9303      	str	r3, [sp, #12]
 800e76c:	9502      	str	r5, [sp, #8]
 800e76e:	4b19      	ldr	r3, [pc, #100]	; (800e7d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	4b19      	ldr	r3, [pc, #100]	; (800e7d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	2345      	movs	r3, #69	; 0x45
 800e778:	4a10      	ldr	r2, [pc, #64]	; (800e7bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e77a:	4918      	ldr	r1, [pc, #96]	; (800e7dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	47a0      	blx	r4
 800e780:	2301      	movs	r3, #1
 800e782:	e015      	b.n	800e7b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	429a      	cmp	r2, r3
 800e78a:	d010      	beq.n	800e7ae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	695c      	ldr	r4, [r3, #20]
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	9303      	str	r3, [sp, #12]
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	9302      	str	r3, [sp, #8]
 800e798:	4b11      	ldr	r3, [pc, #68]	; (800e7e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800e79a:	9301      	str	r3, [sp, #4]
 800e79c:	4b11      	ldr	r3, [pc, #68]	; (800e7e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	2346      	movs	r3, #70	; 0x46
 800e7a2:	4a06      	ldr	r2, [pc, #24]	; (800e7bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e7a4:	490a      	ldr	r1, [pc, #40]	; (800e7d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	47a0      	blx	r4
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e000      	b.n	800e7b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3728      	adds	r7, #40	; 0x28
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bdb0      	pop	{r4, r5, r7, pc}
 800e7b8:	08016830 	.word	0x08016830
 800e7bc:	080167dc 	.word	0x080167dc
 800e7c0:	08016818 	.word	0x08016818
 800e7c4:	08016844 	.word	0x08016844
 800e7c8:	08016874 	.word	0x08016874
 800e7cc:	08016878 	.word	0x08016878
 800e7d0:	08016858 	.word	0x08016858
 800e7d4:	080168a0 	.word	0x080168a0
 800e7d8:	080168b0 	.word	0x080168b0
 800e7dc:	08016884 	.word	0x08016884
 800e7e0:	080168bc 	.word	0x080168bc
 800e7e4:	080168d0 	.word	0x080168d0

0800e7e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af04      	add	r7, sp, #16
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800e7f2:	6838      	ldr	r0, [r7, #0]
 800e7f4:	f7fc fef2 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d007      	beq.n	800e80e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e7fe:	6838      	ldr	r0, [r7, #0]
 800e800:	f7fc feec 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e804:	4603      	mov	r3, r0
 800e806:	2b02      	cmp	r3, #2
 800e808:	d001      	beq.n	800e80e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800e80e:	2300      	movs	r3, #0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00a      	beq.n	800e82a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	695c      	ldr	r4, [r3, #20]
 800e818:	4b27      	ldr	r3, [pc, #156]	; (800e8b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	234b      	movs	r3, #75	; 0x4b
 800e81e:	4a27      	ldr	r2, [pc, #156]	; (800e8bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e820:	4927      	ldr	r1, [pc, #156]	; (800e8c0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	47a0      	blx	r4
 800e826:	2301      	movs	r3, #1
 800e828:	e041      	b.n	800e8ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e82a:	6838      	ldr	r0, [r7, #0]
 800e82c:	f7fc fee3 	bl	800b5f6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e830:	4603      	mov	r3, r0
 800e832:	2b01      	cmp	r3, #1
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d013      	beq.n	800e868 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	695c      	ldr	r4, [r3, #20]
 800e844:	6838      	ldr	r0, [r7, #0]
 800e846:	f7fc fed6 	bl	800b5f6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2201      	movs	r2, #1
 800e84e:	9203      	str	r2, [sp, #12]
 800e850:	9302      	str	r3, [sp, #8]
 800e852:	4b1c      	ldr	r3, [pc, #112]	; (800e8c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800e854:	9301      	str	r3, [sp, #4]
 800e856:	4b1c      	ldr	r3, [pc, #112]	; (800e8c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	234c      	movs	r3, #76	; 0x4c
 800e85c:	4a17      	ldr	r2, [pc, #92]	; (800e8bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e85e:	491b      	ldr	r1, [pc, #108]	; (800e8cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	47a0      	blx	r4
 800e864:	2301      	movs	r3, #1
 800e866:	e022      	b.n	800e8ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff fece 	bl	800e60c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	bf14      	ite	ne
 800e876:	2301      	movne	r3, #1
 800e878:	2300      	moveq	r3, #0
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d015      	beq.n	800e8ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	695c      	ldr	r4, [r3, #20]
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff fec0 	bl	800e60c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	2300      	movs	r3, #0
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	9202      	str	r2, [sp, #8]
 800e896:	4b0e      	ldr	r3, [pc, #56]	; (800e8d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	4b0e      	ldr	r3, [pc, #56]	; (800e8d4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	234d      	movs	r3, #77	; 0x4d
 800e8a0:	4a06      	ldr	r2, [pc, #24]	; (800e8bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e8a2:	490a      	ldr	r1, [pc, #40]	; (800e8cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	47a0      	blx	r4
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e000      	b.n	800e8ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	370c      	adds	r7, #12
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd90      	pop	{r4, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	080168e4 	.word	0x080168e4
 800e8bc:	080167dc 	.word	0x080167dc
 800e8c0:	08016818 	.word	0x08016818
 800e8c4:	08016914 	.word	0x08016914
 800e8c8:	08016918 	.word	0x08016918
 800e8cc:	08016858 	.word	0x08016858
 800e8d0:	0801692c 	.word	0x0801692c
 800e8d4:	08016938 	.word	0x08016938

0800e8d8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fc fb12 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e8ec:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7fc fb1c 	bl	800af30 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e8f8:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	7a1b      	ldrb	r3, [r3, #8]
 800e8fe:	f107 020c 	add.w	r2, r7, #12
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f7f8 fa09 	bl	8006d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800e90a:	4603      	mov	r3, r0
 800e90c:	74fb      	strb	r3, [r7, #19]
 800e90e:	7cfb      	ldrb	r3, [r7, #19]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800e914:	7cfb      	ldrb	r3, [r7, #19]
 800e916:	e024      	b.n	800e962 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fc f8eb 	bl	800aaf8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800e922:	4602      	mov	r2, r0
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	fb02 f303 	mul.w	r3, r2, r3
 800e92a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	429a      	cmp	r2, r3
 800e936:	d013      	beq.n	800e960 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	69fa      	ldr	r2, [r7, #28]
 800e940:	429a      	cmp	r2, r3
 800e942:	d20d      	bcs.n	800e960 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	441a      	add	r2, r3
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	6819      	ldr	r1, [r3, #0]
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	440b      	add	r3, r1
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	3301      	adds	r3, #1
 800e95c:	61fb      	str	r3, [r7, #28]
 800e95e:	e7ed      	b.n	800e93c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3720      	adds	r7, #32
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
	...

0800e96c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800e96c:	b4b0      	push	{r4, r5, r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a07      	ldr	r2, [pc, #28]	; (800e994 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800e978:	461c      	mov	r4, r3
 800e97a:	4615      	mov	r5, r2
 800e97c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e97e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bcb0      	pop	{r4, r5, r7}
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	08016958 	.word	0x08016958

0800e998 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ac:	68b9      	ldr	r1, [r7, #8]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fc fb1e 	bl	800aff0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e9b4:	4603      	mov	r3, r0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
}

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	6039      	str	r1, [r7, #0]
 800e9ca:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800e9cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9d0:	11db      	asrs	r3, r3, #7
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e9d8:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800e9da:	8afb      	ldrh	r3, [r7, #22]
 800e9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9e0:	d306      	bcc.n	800e9f0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800e9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ea50 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800e9e4:	4a1b      	ldr	r2, [pc, #108]	; (800ea54 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800e9e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e9ea:	481b      	ldr	r0, [pc, #108]	; (800ea58 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800e9ec:	f002 fa02 	bl	8010df4 <__assert_func>
  int16_t offset = value & 0x7f;
 800e9f0:	88fb      	ldrh	r3, [r7, #6]
 800e9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9f6:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800e9f8:	8afb      	ldrh	r3, [r7, #22]
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	4413      	add	r3, r2
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800ea04:	8afb      	ldrh	r3, [r7, #22]
 800ea06:	3301      	adds	r3, #1
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	8afb      	ldrh	r3, [r7, #22]
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	440b      	add	r3, r1
 800ea1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800ea28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ea2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ea30:	fb02 f303 	mul.w	r3, r2, r3
 800ea34:	3340      	adds	r3, #64	; 0x40
 800ea36:	11db      	asrs	r3, r3, #7
 800ea38:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	8a7b      	ldrh	r3, [r7, #18]
 800ea40:	4413      	add	r3, r2
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	b21b      	sxth	r3, r3
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	08016978 	.word	0x08016978
 800ea54:	080169a4 	.word	0x080169a4
 800ea58:	080169e8 	.word	0x080169e8

0800ea5c <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b088      	sub	sp, #32
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fe2e 	bl	800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 800ea70:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	fa02 f303 	lsl.w	r3, r2, r3
 800ea84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800ea88:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800ea8a:	69b8      	ldr	r0, [r7, #24]
 800ea8c:	f7fe ff41 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ea90:	4603      	mov	r3, r0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe ff4e 	bl	800d934 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800ea9c:	f107 0314 	add.w	r3, r7, #20
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fe fe25 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	681b      	ldr	r3, [r3, #0]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800eab2:	b580      	push	{r7, lr}
 800eab4:	ed2d 8b02 	vpush	{d8}
 800eab8:	b08e      	sub	sp, #56	; 0x38
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	60f8      	str	r0, [r7, #12]
 800eabe:	60b9      	str	r1, [r7, #8]
 800eac0:	607a      	str	r2, [r7, #4]
 800eac2:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800eac4:	68b8      	ldr	r0, [r7, #8]
 800eac6:	f7f8 f87e 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eaca:	4603      	mov	r3, r0
 800eacc:	3b01      	subs	r3, #1
 800eace:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	6a39      	ldr	r1, [r7, #32]
 800ead4:	68b8      	ldr	r0, [r7, #8]
 800ead6:	f7fe fdca 	bl	800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800eada:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	6a39      	ldr	r1, [r7, #32]
 800eae2:	68b8      	ldr	r0, [r7, #8]
 800eae4:	f7fc fdb2 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800eae8:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	637b      	str	r3, [r7, #52]	; 0x34
 800eaee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	f280 8087 	bge.w	800ec06 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800eaf8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800eafc:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800eafe:	2300      	movs	r3, #0
 800eb00:	633b      	str	r3, [r7, #48]	; 0x30
 800eb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	da15      	bge.n	800eb36 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	fb02 f203 	mul.w	r2, r2, r3
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	441a      	add	r2, r3
 800eb1c:	f107 0310 	add.w	r3, r7, #16
 800eb20:	4611      	mov	r1, r2
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7f7 f998 	bl	8005e58 <_ZSt3maxIfERKT_S2_S2_>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	3301      	adds	r3, #1
 800eb32:	633b      	str	r3, [r7, #48]	; 0x30
 800eb34:	e7e5      	b.n	800eb02 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800eb36:	f04f 0300 	mov.w	r3, #0
 800eb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	da36      	bge.n	800ebb6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800eb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4a:	69ba      	ldr	r2, [r7, #24]
 800eb4c:	fb02 f203 	mul.w	r2, r2, r3
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	4413      	add	r3, r2
 800eb5a:	ed93 7a00 	vldr	s14, [r3]
 800eb5e:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb62:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4619      	mov	r1, r3
 800eb70:	f7f2 f816 	bl	8000ba0 <__aeabi_d2f>
 800eb74:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800eb78:	ee68 7a27 	vmul.f32	s15, s16, s15
 800eb7c:	eeb0 0a67 	vmov.f32	s0, s15
 800eb80:	f7fe f8da 	bl	800cd38 <_ZSt3expf>
 800eb84:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800eb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8a:	69ba      	ldr	r2, [r7, #24]
 800eb8c:	fb02 f203 	mul.w	r2, r2, r3
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	4413      	add	r3, r2
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb98:	4413      	add	r3, r2
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800eb9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800eba2:	edd7 7a05 	vldr	s15, [r7, #20]
 800eba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebaa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb4:	e7c4      	b.n	800eb40 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24
 800ebba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	da1d      	bge.n	800ebfe <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	fb02 f203 	mul.w	r2, r2, r3
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebd2:	4413      	add	r3, r2
 800ebd4:	edd3 6a00 	vldr	s13, [r3]
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebda:	69ba      	ldr	r2, [r7, #24]
 800ebdc:	fb02 f203 	mul.w	r2, r2, r3
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	4413      	add	r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebe8:	4413      	add	r3, r2
 800ebea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ebee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebf2:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ebfc:	e7dd      	b.n	800ebba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec00:	3301      	adds	r3, #1
 800ec02:	637b      	str	r3, [r7, #52]	; 0x34
 800ec04:	e773      	b.n	800eaee <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800ec06:	bf00      	nop
 800ec08:	3738      	adds	r7, #56	; 0x38
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	ecbd 8b02 	vpop	{d8}
 800ec10:	bd80      	pop	{r7, pc}
	...

0800ec14 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b08a      	sub	sp, #40	; 0x28
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	fb02 f203 	mul.w	r2, r2, r3
 800ec2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2c:	4413      	add	r3, r2
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	4413      	add	r3, r2
 800ec34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec38:	461a      	mov	r2, r3
 800ec3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6899      	ldr	r1, [r3, #8]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec4e:	f7fc fa9a 	bl	800b186 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ec52:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800ec5a:	337f      	adds	r3, #127	; 0x7f
 800ec5c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800ec5e:	4b12      	ldr	r3, [pc, #72]	; (800eca8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800ec60:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 800ec62:	f107 0214 	add.w	r2, r7, #20
 800ec66:	f107 0310 	add.w	r3, r7, #16
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7f7 fe21 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800ec72:	4602      	mov	r2, r0
 800ec74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ec78:	61bb      	str	r3, [r7, #24]
 800ec7a:	f107 0318 	add.w	r3, r7, #24
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4610      	mov	r0, r2
 800ec82:	f7f7 fe03 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800ec86:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800ec88:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800ec8a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ec94:	4611      	mov	r1, r2
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff fe92 	bl	800e9c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800ec9c:	4603      	mov	r3, r0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3728      	adds	r7, #40	; 0x28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	ffff8000 	.word	0xffff8000

0800ecac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800ecac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb0:	b0a1      	sub	sp, #132	; 0x84
 800ecb2:	af02      	add	r7, sp, #8
 800ecb4:	6178      	str	r0, [r7, #20]
 800ecb6:	6139      	str	r1, [r7, #16]
 800ecb8:	60fa      	str	r2, [r7, #12]
 800ecba:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ecbc:	6938      	ldr	r0, [r7, #16]
 800ecbe:	f7f7 ff82 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eccc:	6938      	ldr	r0, [r7, #16]
 800ecce:	f7fe fcce 	bl	800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ecd2:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ecd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecda:	6938      	ldr	r0, [r7, #16]
 800ecdc:	f7fc fcb6 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ece0:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 800ece2:	2300      	movs	r3, #0
 800ece4:	677b      	str	r3, [r7, #116]	; 0x74
 800ece6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ece8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecea:	429a      	cmp	r2, r3
 800ecec:	f280 8119 	bge.w	800ef22 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800ecf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecf4:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	673b      	str	r3, [r7, #112]	; 0x70
 800ecfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ecfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	da16      	bge.n	800ed30 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800ed02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed06:	fb02 f203 	mul.w	r2, r2, r3
 800ed0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed0c:	4413      	add	r3, r2
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	441a      	add	r2, r3
 800ed14:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fc fbc6 	bl	800b4ac <_ZSt3maxIsERKT_S2_S2_>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed26:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800ed28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	673b      	str	r3, [r7, #112]	; 0x70
 800ed2e:	e7e4      	b.n	800ecfa <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800ed30:	2300      	movs	r3, #0
 800ed32:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 800ed34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed38:	fb02 f303 	mul.w	r3, r2, r3
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ed42:	4413      	add	r3, r2
 800ed44:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 800ed46:	2300      	movs	r3, #0
 800ed48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	da1f      	bge.n	800ed92 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800ed52:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 800ed56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed5c:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800ed5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	460b      	mov	r3, r1
 800ed68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed6a:	68f9      	ldr	r1, [r7, #12]
 800ed6c:	6978      	ldr	r0, [r7, #20]
 800ed6e:	f7ff ff51 	bl	800ec14 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800ed72:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800ed74:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800ed76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed82:	461a      	mov	r2, r3
 800ed84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed86:	4413      	add	r3, r2
 800ed88:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 800ed8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed90:	e7db      	b.n	800ed4a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800ed92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fe fc99 	bl	800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800eda0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda2:	461a      	mov	r2, r3
 800eda4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800eda8:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 800edac:	3901      	subs	r1, #1
 800edae:	f1a1 0620 	sub.w	r6, r1, #32
 800edb2:	f1c1 0020 	rsb	r0, r1, #32
 800edb6:	fa03 f501 	lsl.w	r5, r3, r1
 800edba:	fa02 f606 	lsl.w	r6, r2, r6
 800edbe:	4335      	orrs	r5, r6
 800edc0:	fa22 f000 	lsr.w	r0, r2, r0
 800edc4:	4305      	orrs	r5, r0
 800edc6:	fa02 f401 	lsl.w	r4, r2, r1
 800edca:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 800edce:	603b      	str	r3, [r7, #0]
 800edd0:	f145 0300 	adc.w	r3, r5, #0
 800edd4:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 800edd6:	f04f 0200 	mov.w	r2, #0
 800edda:	f04f 0300 	mov.w	r3, #0
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	0b8a      	lsrs	r2, r1, #14
 800ede2:	6879      	ldr	r1, [r7, #4]
 800ede4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800ede8:	6879      	ldr	r1, [r7, #4]
 800edea:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800edec:	4613      	mov	r3, r2
 800edee:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800edf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edf2:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800edf6:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800edf8:	4b4c      	ldr	r3, [pc, #304]	; (800ef2c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 800edfa:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 800edfc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee00:	f107 0320 	add.w	r3, r7, #32
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7f7 fd54 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ee12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f7f7 fd36 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800ee20:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800ee22:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800ee24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 800ee2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800ee30:	4611      	mov	r1, r2
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff fdc4 	bl	800e9c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800ee3e:	2300      	movs	r3, #0
 800ee40:	667b      	str	r3, [r7, #100]	; 0x64
 800ee42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee46:	429a      	cmp	r2, r3
 800ee48:	da67      	bge.n	800ef1a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 800ee4a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ee4e:	f1c3 031f 	rsb	r3, r3, #31
 800ee52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 800ee56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee62:	461a      	mov	r2, r3
 800ee64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ee68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800ee6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee72:	4413      	add	r3, r2
 800ee74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee78:	b218      	sxth	r0, r3
 800ee7a:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800ee7e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800ee82:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800ee86:	fb02 fc01 	mul.w	ip, r2, r1
 800ee8a:	fb00 f603 	mul.w	r6, r0, r3
 800ee8e:	4466      	add	r6, ip
 800ee90:	fba0 2302 	umull	r2, r3, r0, r2
 800ee94:	18f1      	adds	r1, r6, r3
 800ee96:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800ee98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ee9c:	eb12 0a00 	adds.w	sl, r2, r0
 800eea0:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 800eea4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 800eea8:	f1c3 0120 	rsb	r1, r3, #32
 800eeac:	f1b3 0220 	subs.w	r2, r3, #32
 800eeb0:	fa2a f803 	lsr.w	r8, sl, r3
 800eeb4:	fa0b f101 	lsl.w	r1, fp, r1
 800eeb8:	ea48 0801 	orr.w	r8, r8, r1
 800eebc:	d403      	bmi.n	800eec6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 800eebe:	fa4b f202 	asr.w	r2, fp, r2
 800eec2:	ea48 0802 	orr.w	r8, r8, r2
 800eec6:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800eeca:	4643      	mov	r3, r8
 800eecc:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 800eece:	2300      	movs	r3, #0
 800eed0:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 800eed2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eed6:	f107 031c 	add.w	r3, r7, #28
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f7 fce9 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800eee2:	4602      	mov	r2, r0
 800eee4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
 800eeea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7f7 fccb 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800eef6:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800eef8:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800eefa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eefc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eefe:	fb02 f203 	mul.w	r2, r2, r3
 800ef02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef04:	4413      	add	r3, r2
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ef0c:	4413      	add	r3, r2
 800ef0e:	b20a      	sxth	r2, r1
 800ef10:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800ef12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef14:	3301      	adds	r3, #1
 800ef16:	667b      	str	r3, [r7, #100]	; 0x64
 800ef18:	e793      	b.n	800ee42 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 800ef1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	677b      	str	r3, [r7, #116]	; 0x74
 800ef20:	e6e1      	b.n	800ece6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800ef22:	bf00      	nop
 800ef24:	377c      	adds	r7, #124	; 0x7c
 800ef26:	46bd      	mov	sp, r7
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	ffff8000 	.word	0xffff8000

0800ef30 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b0ab      	sub	sp, #172	; 0xac
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	7a1b      	ldrb	r3, [r3, #8]
 800ef40:	2b09      	cmp	r3, #9
 800ef42:	d153      	bne.n	800efec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xbc>
    if (output->type == kTfLiteInt16) {
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	7a1b      	ldrb	r3, [r3, #8]
 800ef48:	2b07      	cmp	r3, #7
 800ef4a:	d127      	bne.n	800ef9c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6c>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800ef4c:	f107 0310 	add.w	r3, r7, #16
 800ef50:	68f9      	ldr	r1, [r7, #12]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe fb53 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7fc f829 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ef5e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 800ef60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef64:	68b9      	ldr	r1, [r7, #8]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fb49 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef6c:	68b8      	ldr	r0, [r7, #8]
 800ef6e:	f7fc fb24 	bl	800b5ba <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800ef72:	4602      	mov	r2, r0
 800ef74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef78:	f107 0110 	add.w	r1, r7, #16
 800ef7c:	9200      	str	r2, [sp, #0]
 800ef7e:	4622      	mov	r2, r4
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f8ed 	bl	800f160 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800ef86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7f7 fe05 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800ef90:	f107 0310 	add.w	r3, r7, #16
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f7 fe00 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800ef9a:	e04e      	b.n	800f03a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
          op_data, tflite::micro::GetTensorShape(input),
 800ef9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efa0:	68f9      	ldr	r1, [r7, #12]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe fb2b 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f7fc f801 	bl	800afb0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800efae:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800efb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efb4:	68b9      	ldr	r1, [r7, #8]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fe fb21 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800efbc:	68b8      	ldr	r0, [r7, #8]
 800efbe:	f7fc f806 	bl	800afce <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800efc2:	4602      	mov	r2, r0
 800efc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efc8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800efcc:	9200      	str	r2, [sp, #0]
 800efce:	4622      	mov	r2, r4
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f9e3 	bl	800f39c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800efd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efda:	4618      	mov	r0, r3
 800efdc:	f7f7 fddd 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800efe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f7 fdd8 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 800efea:	e026      	b.n	800f03a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
        op_data, tflite::micro::GetTensorShape(input),
 800efec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eff0:	68f9      	ldr	r1, [r7, #12]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe fb03 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f7fc facf 	bl	800b59c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800effe:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800f000:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f004:	68b9      	ldr	r1, [r7, #8]
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe faf9 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800f00c:	68b8      	ldr	r0, [r7, #8]
 800f00e:	f7fc fad4 	bl	800b5ba <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800f012:	4602      	mov	r2, r0
 800f014:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f018:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f01c:	9200      	str	r2, [sp, #0]
 800f01e:	4622      	mov	r2, r4
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7ff fe43 	bl	800ecac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800f026:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f7 fdb5 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800f030:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f034:	4618      	mov	r0, r3
 800f036:	f7f7 fdb0 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 800f03a:	bf00      	nop
 800f03c:	37a4      	adds	r7, #164	; 0xa4
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd90      	pop	{r4, r7, pc}
	...

0800f044 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800f044:	b5b0      	push	{r4, r5, r7, lr}
 800f046:	b0a0      	sub	sp, #128	; 0x80
 800f048:	af02      	add	r7, sp, #8
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800f04e:	2200      	movs	r2, #0
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7fb ff5c 	bl	800af10 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f058:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800f05a:	2200      	movs	r2, #0
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7fb ff66 	bl	800af30 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f064:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 800f06e:	f001 feba 	bl	8010de6 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	f107 0408 	add.w	r4, r7, #8
 800f07a:	461d      	mov	r5, r3
 800f07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f08c:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800f090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f092:	7a1b      	ldrb	r3, [r3, #8]
 800f094:	2b09      	cmp	r3, #9
 800f096:	d030      	beq.n	800f0fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800f098:	2b09      	cmp	r3, #9
 800f09a:	dc37      	bgt.n	800f10c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d002      	beq.n	800f0a6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 800f0a0:	2b07      	cmp	r3, #7
 800f0a2:	d02a      	beq.n	800f0fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800f0a4:	e032      	b.n	800f10c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800f0a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe faa6 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800f0b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f0b4:	f7fb ff5c 	bl	800af70 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800f0b8:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 800f0ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f0be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fa9c 	bl	800d5fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800f0c6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f0c8:	f7fb ff61 	bl	800af8e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f0d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f0d6:	f107 0008 	add.w	r0, r7, #8
 800f0da:	9200      	str	r2, [sp, #0]
 800f0dc:	4622      	mov	r2, r4
 800f0de:	f7ff fce8 	bl	800eab2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 800f0e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7f7 fd57 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800f0ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f7 fd52 	bl	8006b9a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e016      	b.n	800f128 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800f0fa:	f107 0308 	add.w	r3, r7, #8
 800f0fe:	461a      	mov	r2, r3
 800f100:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f102:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f104:	f7ff ff14 	bl	800ef30 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800f108:	2300      	movs	r3, #0
 800f10a:	e00d      	b.n	800f128 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	695c      	ldr	r4, [r3, #20]
 800f110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f112:	7a1b      	ldrb	r3, [r3, #8]
 800f114:	4618      	mov	r0, r3
 800f116:	f7f4 fd25 	bl	8003b64 <TfLiteTypeGetName>
 800f11a:	4602      	mov	r2, r0
 800f11c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f11e:	7a1b      	ldrb	r3, [r3, #8]
 800f120:	4903      	ldr	r1, [pc, #12]	; (800f130 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800f126:	2301      	movs	r3, #1
  }
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3778      	adds	r7, #120	; 0x78
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bdb0      	pop	{r4, r5, r7, pc}
 800f130:	08016a68 	.word	0x08016a68

0800f134 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800f134:	b4b0      	push	{r4, r5, r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a07      	ldr	r2, [pc, #28]	; (800f15c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800f140:	461c      	mov	r4, r3
 800f142:	4615      	mov	r5, r2
 800f144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f14c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	bcb0      	pop	{r4, r5, r7}
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	08016a84 	.word	0x08016a84

0800f160 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800f160:	b590      	push	{r4, r7, lr}
 800f162:	b09f      	sub	sp, #124	; 0x7c
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f180:	68b8      	ldr	r0, [r7, #8]
 800f182:	f7f7 fd20 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f186:	4603      	mov	r3, r0
 800f188:	3b01      	subs	r3, #1
 800f18a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f190:	68b8      	ldr	r0, [r7, #8]
 800f192:	f7fe fa6c 	bl	800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f196:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800f198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f19e:	68b8      	ldr	r0, [r7, #8]
 800f1a0:	f7fc fa54 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f1a4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	677b      	str	r3, [r7, #116]	; 0x74
 800f1aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	f280 80f0 	bge.w	800f394 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800f1b4:	2380      	movs	r3, #128	; 0x80
 800f1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	673b      	str	r3, [r7, #112]	; 0x70
 800f1be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	da17      	bge.n	800f1f6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800f1c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1ca:	fb02 f203 	mul.w	r2, r2, r3
 800f1ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1d0:	4413      	add	r3, r2
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	441a      	add	r2, r3
 800f1d8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f1dc:	4611      	mov	r1, r2
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff f815 	bl	800e20e <_ZSt3maxIaERKT_S2_S2_>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	f993 3000 	ldrsb.w	r3, [r3]
 800f1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	673b      	str	r3, [r7, #112]	; 0x70
 800f1f4:	e7e3      	b.n	800f1be <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800f1f6:	f000 f9ef 	bl	800f5d8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f1fe:	2300      	movs	r3, #0
 800f200:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f206:	429a      	cmp	r2, r3
 800f208:	da30      	bge.n	800f26c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f20a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f20c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f20e:	fb02 f203 	mul.w	r2, r2, r3
 800f212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f214:	4413      	add	r3, r2
 800f216:	461a      	mov	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4413      	add	r3, r2
 800f21c:	f993 3000 	ldrsb.w	r3, [r3]
 800f220:	461a      	mov	r2, r3
 800f222:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800f22a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f22e:	429a      	cmp	r2, r3
 800f230:	db18      	blt.n	800f264 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f234:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f236:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f238:	f7ff fbae 	bl	800e998 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f23c:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f23e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f240:	f7fe fbd8 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f244:	4603      	mov	r3, r0
 800f246:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800f248:	69f8      	ldr	r0, [r7, #28]
 800f24a:	f7fe fbe5 	bl	800da18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f24e:	4603      	mov	r3, r0
 800f250:	4618      	mov	r0, r3
 800f252:	f7fe fd29 	bl	800dca8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f256:	4603      	mov	r3, r0
 800f258:	4619      	mov	r1, r3
 800f25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f25c:	f7fe fd3e 	bl	800dcdc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f260:	4603      	mov	r3, r0
 800f262:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f266:	3301      	adds	r3, #1
 800f268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f26a:	e7ca      	b.n	800f202 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800f26c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f270:	4618      	mov	r0, r3
 800f272:	f7fe ffa4 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f276:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f27e:	210c      	movs	r1, #12
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff fbeb 	bl	800ea5c <_ZN6tflite13GetReciprocalEliPi>
 800f286:	4603      	mov	r3, r0
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe fb42 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f28e:	4603      	mov	r3, r0
 800f290:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800f292:	2300      	movs	r3, #0
 800f294:	66bb      	str	r3, [r7, #104]	; 0x68
 800f296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f29a:	429a      	cmp	r2, r3
 800f29c:	da76      	bge.n	800f38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2a2:	fb02 f203 	mul.w	r2, r2, r3
 800f2a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2a8:	4413      	add	r3, r2
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f993 3000 	ldrsb.w	r3, [r3]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800f2be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	db50      	blt.n	800f368 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f2c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f2c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f2ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f2cc:	f7ff fb64 	bl	800e998 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f2d0:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f2d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f2d4:	f7fe fb8e 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800f2dc:	69b8      	ldr	r0, [r7, #24]
 800f2de:	f7fe fb9b 	bl	800da18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800f2e6:	6979      	ldr	r1, [r7, #20]
 800f2e8:	6a38      	ldr	r0, [r7, #32]
 800f2ea:	f7fe ff13 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fe f9fa 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f2fc:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f2fe:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800f300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f302:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f304:	4611      	mov	r1, r2
 800f306:	4618      	mov	r0, r3
 800f308:	f7fb ff62 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f30c:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800f30e:	f7f6 fe01 	bl	8005f14 <_ZNSt14numeric_limitsIsE3minEv>
 800f312:	4603      	mov	r3, r0
 800f314:	461a      	mov	r2, r3
            unsat_output +
 800f316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f318:	4413      	add	r3, r2
        const int32_t shifted_output =
 800f31a:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800f31c:	f7f6 fe04 	bl	8005f28 <_ZNSt14numeric_limitsIsE3maxEv>
 800f320:	4603      	mov	r3, r0
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800f324:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f328:	f107 0310 	add.w	r3, r7, #16
 800f32c:	4611      	mov	r1, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f7 faac 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800f334:	4604      	mov	r4, r0
 800f336:	f7f6 fded 	bl	8005f14 <_ZNSt14numeric_limitsIsE3minEv>
 800f33a:	4603      	mov	r3, r0
 800f33c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f33e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f342:	4619      	mov	r1, r3
 800f344:	4620      	mov	r0, r4
 800f346:	f7f7 fab5 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800f34a:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800f34c:	6819      	ldr	r1, [r3, #0]
 800f34e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f352:	fb02 f203 	mul.w	r2, r2, r3
 800f356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f358:	4413      	add	r3, r2
 800f35a:	005b      	lsls	r3, r3, #1
 800f35c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f360:	4413      	add	r3, r2
 800f362:	b20a      	sxth	r2, r1
 800f364:	801a      	strh	r2, [r3, #0]
 800f366:	e00d      	b.n	800f384 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800f368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f36a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f36c:	fb02 f203 	mul.w	r2, r2, r3
 800f370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f372:	4413      	add	r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f37a:	18d4      	adds	r4, r2, r3
 800f37c:	f7f6 fdca 	bl	8005f14 <_ZNSt14numeric_limitsIsE3minEv>
 800f380:	4603      	mov	r3, r0
 800f382:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800f384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f386:	3301      	adds	r3, #1
 800f388:	66bb      	str	r3, [r7, #104]	; 0x68
 800f38a:	e784      	b.n	800f296 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800f38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f38e:	3301      	adds	r3, #1
 800f390:	677b      	str	r3, [r7, #116]	; 0x74
 800f392:	e70a      	b.n	800f1aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800f394:	bf00      	nop
 800f396:	377c      	adds	r7, #124	; 0x7c
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd90      	pop	{r4, r7, pc}

0800f39c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800f39c:	b590      	push	{r4, r7, lr}
 800f39e:	b09f      	sub	sp, #124	; 0x7c
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f3bc:	68b8      	ldr	r0, [r7, #8]
 800f3be:	f7f7 fc02 	bl	8006bc6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800f3c8:	683a      	ldr	r2, [r7, #0]
 800f3ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3cc:	68b8      	ldr	r0, [r7, #8]
 800f3ce:	f7fe f94e 	bl	800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f3d2:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800f3d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3da:	68b8      	ldr	r0, [r7, #8]
 800f3dc:	f7fc f936 	bl	800b64c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f3e0:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	677b      	str	r3, [r7, #116]	; 0x74
 800f3e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	f280 80f0 	bge.w	800f5d0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800f3f0:	2380      	movs	r3, #128	; 0x80
 800f3f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	673b      	str	r3, [r7, #112]	; 0x70
 800f3fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3fe:	429a      	cmp	r2, r3
 800f400:	da17      	bge.n	800f432 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800f402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f406:	fb02 f203 	mul.w	r2, r2, r3
 800f40a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f40c:	4413      	add	r3, r2
 800f40e:	461a      	mov	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	441a      	add	r2, r3
 800f414:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fe fef7 	bl	800e20e <_ZSt3maxIaERKT_S2_S2_>
 800f420:	4603      	mov	r3, r0
 800f422:	f993 3000 	ldrsb.w	r3, [r3]
 800f426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f42a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f42c:	3301      	adds	r3, #1
 800f42e:	673b      	str	r3, [r7, #112]	; 0x70
 800f430:	e7e3      	b.n	800f3fa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800f432:	f000 f8d1 	bl	800f5d8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800f436:	4603      	mov	r3, r0
 800f438:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f43a:	2300      	movs	r3, #0
 800f43c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f43e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f442:	429a      	cmp	r2, r3
 800f444:	da30      	bge.n	800f4a8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f44a:	fb02 f203 	mul.w	r2, r2, r3
 800f44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f450:	4413      	add	r3, r2
 800f452:	461a      	mov	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4413      	add	r3, r2
 800f458:	f993 3000 	ldrsb.w	r3, [r3]
 800f45c:	461a      	mov	r2, r3
 800f45e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800f466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f46a:	429a      	cmp	r2, r3
 800f46c:	db18      	blt.n	800f4a0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f46e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f470:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f472:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f474:	f7ff fa90 	bl	800e998 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f478:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f47a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f47c:	f7fe faba 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f480:	4603      	mov	r3, r0
 800f482:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800f484:	69f8      	ldr	r0, [r7, #28]
 800f486:	f7fe fac7 	bl	800da18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f48a:	4603      	mov	r3, r0
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe fc0b 	bl	800dca8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f492:	4603      	mov	r3, r0
 800f494:	4619      	mov	r1, r3
 800f496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f498:	f7fe fc20 	bl	800dcdc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f49c:	4603      	mov	r3, r0
 800f49e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4a6:	e7ca      	b.n	800f43e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800f4a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe fe86 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f4b2:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f4ba:	210c      	movs	r1, #12
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff facd 	bl	800ea5c <_ZN6tflite13GetReciprocalEliPi>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fe fa24 	bl	800d912 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	da76      	bge.n	800f5c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4de:	fb02 f203 	mul.w	r2, r2, r3
 800f4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4e4:	4413      	add	r3, r2
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f993 3000 	ldrsb.w	r3, [r3]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800f4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4fe:	429a      	cmp	r2, r3
 800f500:	db50      	blt.n	800f5a4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f504:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f506:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f508:	f7ff fa46 	bl	800e998 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f50c:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f50e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f510:	f7fe fa70 	bl	800d9f4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f514:	4603      	mov	r3, r0
 800f516:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800f518:	69b8      	ldr	r0, [r7, #24]
 800f51a:	f7fe fa7d 	bl	800da18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f51e:	4603      	mov	r3, r0
 800f520:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800f522:	6979      	ldr	r1, [r7, #20]
 800f524:	6a38      	ldr	r0, [r7, #32]
 800f526:	f7fe fdf5 	bl	800e114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f52a:	4603      	mov	r3, r0
 800f52c:	633b      	str	r3, [r7, #48]	; 0x30
 800f52e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f532:	4618      	mov	r0, r3
 800f534:	f7fe f8dc 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f538:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f53a:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800f53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f53e:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f7fb fe44 	bl	800b1d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f548:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800f54a:	f7f6 fcc2 	bl	8005ed2 <_ZNSt14numeric_limitsIaE3minEv>
 800f54e:	4603      	mov	r3, r0
 800f550:	461a      	mov	r2, r3
            unsat_output +
 800f552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f554:	4413      	add	r3, r2
        const int32_t shifted_output =
 800f556:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800f558:	f7f6 fcc4 	bl	8005ee4 <_ZNSt14numeric_limitsIaE3maxEv>
 800f55c:	4603      	mov	r3, r0
 800f55e:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800f560:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f564:	f107 0310 	add.w	r3, r7, #16
 800f568:	4611      	mov	r1, r2
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7f7 f98e 	bl	800688c <_ZSt3minIlERKT_S2_S2_>
 800f570:	4604      	mov	r4, r0
 800f572:	f7f6 fcae 	bl	8005ed2 <_ZNSt14numeric_limitsIaE3minEv>
 800f576:	4603      	mov	r3, r0
 800f578:	63bb      	str	r3, [r7, #56]	; 0x38
 800f57a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f57e:	4619      	mov	r1, r3
 800f580:	4620      	mov	r0, r4
 800f582:	f7f7 f997 	bl	80068b4 <_ZSt3maxIlERKT_S2_S2_>
 800f586:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800f588:	6819      	ldr	r1, [r3, #0]
 800f58a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f58c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f58e:	fb02 f203 	mul.w	r2, r2, r3
 800f592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f594:	4413      	add	r3, r2
 800f596:	461a      	mov	r2, r3
 800f598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f59c:	4413      	add	r3, r2
 800f59e:	b24a      	sxtb	r2, r1
 800f5a0:	701a      	strb	r2, [r3, #0]
 800f5a2:	e00d      	b.n	800f5c0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800f5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5a8:	fb02 f203 	mul.w	r2, r2, r3
 800f5ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5ae:	4413      	add	r3, r2
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5b6:	189c      	adds	r4, r3, r2
 800f5b8:	f7f6 fc8b 	bl	8005ed2 <_ZNSt14numeric_limitsIaE3minEv>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800f5c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5c6:	e784      	b.n	800f4d2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800f5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	677b      	str	r3, [r7, #116]	; 0x74
 800f5ce:	e70a      	b.n	800f3e6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800f5d0:	bf00      	nop
 800f5d2:	377c      	adds	r7, #124	; 0x7c
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd90      	pop	{r4, r7, pc}

0800f5d8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	2000      	movs	r0, #0
 800f5de:	f000 f803 	bl	800f5e8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f5f0:	f107 030c 	add.w	r3, r7, #12
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fde2 	bl	800e1be <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7fb fe5b 	bl	800b2b8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f602:	4603      	mov	r3, r0
 800f604:	6023      	str	r3, [r4, #0]
    return retval;
 800f606:	68fb      	ldr	r3, [r7, #12]
  }
 800f608:	4618      	mov	r0, r3
 800f60a:	3714      	adds	r7, #20
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd90      	pop	{r4, r7, pc}

0800f610 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 800f610:	b580      	push	{r7, lr}
 800f612:	ed2d 8b02 	vpush	{d8}
 800f616:	b094      	sub	sp, #80	; 0x50
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6178      	str	r0, [r7, #20]
 800f61c:	ed87 0a04 	vstr	s0, [r7, #16]
 800f620:	edc7 0a03 	vstr	s1, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 800f628:	ed97 7a03 	vldr	s14, [r7, #12]
 800f62c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f630:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3b01      	subs	r3, #1
 800f638:	ee07 3a90 	vmov	s15, r3
 800f63c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f644:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800f648:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f64c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f654:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800f658:	2300      	movs	r3, #0
 800f65a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3b01      	subs	r3, #1
 800f660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f662:	429a      	cmp	r2, r3
 800f664:	f280 80c0 	bge.w	800f7e8 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800f668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f66a:	ee07 3a90 	vmov	s15, r3
 800f66e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f672:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f67a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	eeb0 0a67 	vmov.f32	s0, s15
 800f688:	4798      	blx	r3
 800f68a:	eef0 7a40 	vmov.f32	s15, s0
 800f68e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800f860 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f692:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f696:	eeb0 0a67 	vmov.f32	s0, s15
 800f69a:	f7f6 fc0a 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f69e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	ee07 3a90 	vmov	s15, r3
 800f6aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f6b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c4:	4798      	blx	r3
 800f6c6:	eef0 7a40 	vmov.f32	s15, s0
 800f6ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f860 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f6ce:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800f6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6d4:	ee07 3a90 	vmov	s15, r3
 800f6d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f6e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f6f2:	4798      	blx	r3
 800f6f4:	eef0 7a40 	vmov.f32	s15, s0
 800f6f8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f860 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f6fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f700:	eeb0 0a67 	vmov.f32	s0, s15
 800f704:	f7f6 fbd5 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f708:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f70c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f710:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f714:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f718:	eeb0 0a47 	vmov.f32	s0, s14
 800f71c:	f7f6 fbc9 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f720:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800f724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f726:	ee07 3a90 	vmov	s15, r3
 800f72a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f72e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f736:	edd7 7a04 	vldr	s15, [r7, #16]
 800f73a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f73e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	eeb0 0a67 	vmov.f32	s0, s15
 800f74c:	4798      	blx	r3
 800f74e:	eef0 7a40 	vmov.f32	s15, s0
 800f752:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800f860 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f75a:	eeb0 0a67 	vmov.f32	s0, s15
 800f75e:	f7f6 fba8 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f762:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800f766:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f76a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f772:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800f776:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f77a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f77e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f782:	eeb0 0a47 	vmov.f32	s0, s14
 800f786:	f7f6 fb94 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f78a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f78e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f792:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f79a:	edc7 7a06 	vstr	s15, [r7, #24]
 800f79e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f7a2:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 800f7a4:	f107 021c 	add.w	r2, r7, #28
 800f7a8:	f107 0318 	add.w	r3, r7, #24
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f6 fb52 	bl	8005e58 <_ZSt3maxIfERKT_S2_S2_>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	4b2b      	ldr	r3, [pc, #172]	; (800f864 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f7b8:	623b      	str	r3, [r7, #32]
 800f7ba:	f107 0320 	add.w	r3, r7, #32
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	f7f6 fb30 	bl	8005e26 <_ZSt3minIfERKT_S2_S2_>
 800f7c6:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f7c8:	edd3 7a00 	vldr	s15, [r3]
 800f7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7d8:	ee17 2a90 	vmov	r2, s15
 800f7dc:	b212      	sxth	r2, r2
 800f7de:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800f7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7e6:	e739      	b.n	800f65c <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	ed97 0a03 	vldr	s0, [r7, #12]
 800f7ee:	4798      	blx	r3
 800f7f0:	eef0 7a40 	vmov.f32	s15, s0
 800f7f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f860 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f7f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7fc:	eeb0 0a67 	vmov.f32	s0, s15
 800f800:	f7f6 fb57 	bl	8005eb2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f804:	eef0 7a40 	vmov.f32	s15, s0
 800f808:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f80c:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28
 800f812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f81a:	4611      	mov	r1, r2
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7f6 fb1b 	bl	8005e58 <_ZSt3maxIfERKT_S2_S2_>
 800f822:	4602      	mov	r2, r0
 800f824:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f82c:	4619      	mov	r1, r3
 800f82e:	4610      	mov	r0, r2
 800f830:	f7f6 faf9 	bl	8005e26 <_ZSt3minIfERKT_S2_S2_>
 800f834:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 800f836:	edd3 7a00 	vldr	s15, [r3]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f840:	3b01      	subs	r3, #1
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	4413      	add	r3, r2
 800f848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f84c:	ee17 2a90 	vmov	r2, s15
 800f850:	b212      	sxth	r2, r2
 800f852:	801a      	strh	r2, [r3, #0]
}
 800f854:	bf00      	nop
 800f856:	3750      	adds	r7, #80	; 0x50
 800f858:	46bd      	mov	sp, r7
 800f85a:	ecbd 8b02 	vpop	{d8}
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	47000000 	.word	0x47000000
 800f864:	46fffe00 	.word	0x46fffe00

0800f868 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800f868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f86c:	b090      	sub	sp, #64	; 0x40
 800f86e:	af06      	add	r7, sp, #24
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	60b9      	str	r1, [r7, #8]
 800f874:	607a      	str	r2, [r7, #4]
 800f876:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2b09      	cmp	r3, #9
 800f87e:	d004      	beq.n	800f88a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b07      	cmp	r3, #7
 800f886:	f040 81b6 	bne.w	800fbf6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	2b07      	cmp	r3, #7
 800f890:	d156      	bne.n	800f940 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d011      	beq.n	800f8be <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	695c      	ldr	r4, [r3, #20]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	9203      	str	r2, [sp, #12]
 800f8a6:	9302      	str	r3, [sp, #8]
 800f8a8:	4ba1      	ldr	r3, [pc, #644]	; (800fb30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800f8aa:	9301      	str	r3, [sp, #4]
 800f8ac:	4ba1      	ldr	r3, [pc, #644]	; (800fb34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f8ae:	9300      	str	r3, [sp, #0]
 800f8b0:	2325      	movs	r3, #37	; 0x25
 800f8b2:	4aa1      	ldr	r2, [pc, #644]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f8b4:	49a1      	ldr	r1, [pc, #644]	; (800fb3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	47a0      	blx	r4
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e1e0      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8c4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800fb40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f8c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d0:	dd07      	ble.n	800f8e2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8d8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800fb40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f8dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8e0:	e006      	b.n	800f8f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8e8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800fb40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f8ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8f0:	edc7 7a08 	vstr	s15, [r7, #32]
 800f8f4:	edd7 7a08 	vldr	s15, [r7, #32]
 800f8f8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800fb44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 800f8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f904:	f340 80dd 	ble.w	800fac2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	695c      	ldr	r4, [r3, #20]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	4618      	mov	r0, r3
 800f912:	f7f0 fe2b 	bl	800056c <__aeabi_f2d>
 800f916:	4602      	mov	r2, r0
 800f918:	460b      	mov	r3, r1
 800f91a:	f04f 0000 	mov.w	r0, #0
 800f91e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f92a:	4b87      	ldr	r3, [pc, #540]	; (800fb48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800f92c:	9301      	str	r3, [sp, #4]
 800f92e:	4b87      	ldr	r3, [pc, #540]	; (800fb4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	2326      	movs	r3, #38	; 0x26
 800f934:	4a80      	ldr	r2, [pc, #512]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f936:	4986      	ldr	r1, [pc, #536]	; (800fb50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	47a0      	blx	r4
 800f93c:	2301      	movs	r3, #1
 800f93e:	e19f      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b09      	cmp	r3, #9
 800f946:	d018      	beq.n	800f97a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	695c      	ldr	r4, [r3, #20]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	4618      	mov	r0, r3
 800f952:	f7f4 f907 	bl	8003b64 <TfLiteTypeGetName>
 800f956:	4605      	mov	r5, r0
 800f958:	2009      	movs	r0, #9
 800f95a:	f7f4 f903 	bl	8003b64 <TfLiteTypeGetName>
 800f95e:	4603      	mov	r3, r0
 800f960:	9303      	str	r3, [sp, #12]
 800f962:	9502      	str	r5, [sp, #8]
 800f964:	4b7b      	ldr	r3, [pc, #492]	; (800fb54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	4b7b      	ldr	r3, [pc, #492]	; (800fb58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	2329      	movs	r3, #41	; 0x29
 800f96e:	4a72      	ldr	r2, [pc, #456]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f970:	497a      	ldr	r1, [pc, #488]	; (800fb5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	47a0      	blx	r4
 800f976:	2301      	movs	r3, #1
 800f978:	e182      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	2b07      	cmp	r3, #7
 800f980:	d155      	bne.n	800fa2e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f98a:	d011      	beq.n	800f9b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	695c      	ldr	r4, [r3, #20]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	4a72      	ldr	r2, [pc, #456]	; (800fb60 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800f996:	9203      	str	r2, [sp, #12]
 800f998:	9302      	str	r3, [sp, #8]
 800f99a:	4b72      	ldr	r3, [pc, #456]	; (800fb64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	4b65      	ldr	r3, [pc, #404]	; (800fb34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	232b      	movs	r3, #43	; 0x2b
 800f9a4:	4a64      	ldr	r2, [pc, #400]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f9a6:	4965      	ldr	r1, [pc, #404]	; (800fb3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	47a0      	blx	r4
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e167      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	edd3 7a03 	vldr	s15, [r3, #12]
 800f9b6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800fb68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f9ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c2:	dd07      	ble.n	800f9d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f9ca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f9ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9d2:	e006      	b.n	800f9e2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f9da:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800fb68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f9e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f9ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800fb6c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 800f9ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f6:	dd64      	ble.n	800fac2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	695c      	ldr	r4, [r3, #20]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7f0 fdb3 	bl	800056c <__aeabi_f2d>
 800fa06:	4602      	mov	r2, r0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	f04f 0000 	mov.w	r0, #0
 800fa0e:	4958      	ldr	r1, [pc, #352]	; (800fb70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800fa10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa18:	4b56      	ldr	r3, [pc, #344]	; (800fb74 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	4b4b      	ldr	r3, [pc, #300]	; (800fb4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	232c      	movs	r3, #44	; 0x2c
 800fa22:	4a45      	ldr	r2, [pc, #276]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa24:	494a      	ldr	r1, [pc, #296]	; (800fb50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	47a0      	blx	r4
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e128      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	2b09      	cmp	r3, #9
 800fa34:	d018      	beq.n	800fa68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	695c      	ldr	r4, [r3, #20]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7f4 f890 	bl	8003b64 <TfLiteTypeGetName>
 800fa44:	4605      	mov	r5, r0
 800fa46:	2009      	movs	r0, #9
 800fa48:	f7f4 f88c 	bl	8003b64 <TfLiteTypeGetName>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	9303      	str	r3, [sp, #12]
 800fa50:	9502      	str	r5, [sp, #8]
 800fa52:	4b40      	ldr	r3, [pc, #256]	; (800fb54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	4b48      	ldr	r3, [pc, #288]	; (800fb78 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	232f      	movs	r3, #47	; 0x2f
 800fa5c:	4a36      	ldr	r2, [pc, #216]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa5e:	493f      	ldr	r1, [pc, #252]	; (800fb5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	47a0      	blx	r4
 800fa64:	2301      	movs	r3, #1
 800fa66:	e10b      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800fa70:	d012      	beq.n	800fa98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	695c      	ldr	r4, [r3, #20]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	691b      	ldr	r3, [r3, #16]
 800fa7a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800fa7e:	9203      	str	r2, [sp, #12]
 800fa80:	9302      	str	r3, [sp, #8]
 800fa82:	4b3e      	ldr	r3, [pc, #248]	; (800fb7c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800fa84:	9301      	str	r3, [sp, #4]
 800fa86:	4b2b      	ldr	r3, [pc, #172]	; (800fb34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	2330      	movs	r3, #48	; 0x30
 800fa8c:	4a2a      	ldr	r2, [pc, #168]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa8e:	492b      	ldr	r1, [pc, #172]	; (800fb3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	47a0      	blx	r4
 800fa94:	2301      	movs	r3, #1
 800fa96:	e0f3      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	edd3 7a03 	vldr	s15, [r3, #12]
 800fa9e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fb80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 800faa2:	eef4 7a47 	vcmp.f32	s15, s14
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	d00a      	beq.n	800fac2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	695c      	ldr	r4, [r3, #20]
 800fab0:	4b34      	ldr	r3, [pc, #208]	; (800fb84 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	2331      	movs	r3, #49	; 0x31
 800fab6:	4a20      	ldr	r2, [pc, #128]	; (800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fab8:	4933      	ldr	r1, [pc, #204]	; (800fb88 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	47a0      	blx	r4
 800fabe:	2301      	movs	r3, #1
 800fac0:	e0de      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	2b07      	cmp	r3, #7
 800fac8:	d160      	bne.n	800fb8c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	4618      	mov	r0, r3
 800fad0:	f7f0 fd4c 	bl	800056c <__aeabi_f2d>
 800fad4:	4604      	mov	r4, r0
 800fad6:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f0 fd45 	bl	800056c <__aeabi_f2d>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800fae6:	4620      	mov	r0, r4
 800fae8:	4629      	mov	r1, r5
 800faea:	f7f0 fd97 	bl	800061c <__aeabi_dmul>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4610      	mov	r0, r2
 800faf4:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 800faf6:	a30c      	add	r3, pc, #48	; (adr r3, 800fb28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	f7f0 feb8 	bl	8000870 <__aeabi_ddiv>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800fb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	f107 0214 	add.w	r2, r7, #20
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	ed97 0b06 	vldr	d0, [r7, #24]
 800fb18:	f7f6 f80e 	bl	8005b38 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb20:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800fb22:	e0ac      	b.n	800fc7e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 800fb24:	f3af 8000 	nop.w
 800fb28:	00140014 	.word	0x00140014
 800fb2c:	3f240014 	.word	0x3f240014
 800fb30:	08016c00 	.word	0x08016c00
 800fb34:	08016c04 	.word	0x08016c04
 800fb38:	08016ba0 	.word	0x08016ba0
 800fb3c:	08016be4 	.word	0x08016be4
 800fb40:	38000000 	.word	0x38000000
 800fb44:	3303126f 	.word	0x3303126f
 800fb48:	08016c40 	.word	0x08016c40
 800fb4c:	08016c4c 	.word	0x08016c4c
 800fb50:	08016c20 	.word	0x08016c20
 800fb54:	08016c80 	.word	0x08016c80
 800fb58:	08016c8c 	.word	0x08016c8c
 800fb5c:	08016c64 	.word	0x08016c64
 800fb60:	ffff8000 	.word	0xffff8000
 800fb64:	08016c98 	.word	0x08016c98
 800fb68:	37800000 	.word	0x37800000
 800fb6c:	3283126f 	.word	0x3283126f
 800fb70:	3ef00000 	.word	0x3ef00000
 800fb74:	08016ca0 	.word	0x08016ca0
 800fb78:	08016cac 	.word	0x08016cac
 800fb7c:	08016cbc 	.word	0x08016cbc
 800fb80:	3b800000 	.word	0x3b800000
 800fb84:	08016cdc 	.word	0x08016cdc
 800fb88:	08016cc4 	.word	0x08016cc4
          static_cast<double>(params->beta),
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f0 fceb 	bl	800056c <__aeabi_f2d>
 800fb96:	4680      	mov	r8, r0
 800fb98:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7f0 fce4 	bl	800056c <__aeabi_f2d>
 800fba4:	4682      	mov	sl, r0
 800fba6:	468b      	mov	fp, r1
 800fba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbaa:	3308      	adds	r3, #8
 800fbac:	f107 0210 	add.w	r2, r7, #16
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	2005      	movs	r0, #5
 800fbb4:	ec4b ab11 	vmov	d1, sl, fp
 800fbb8:	ec49 8b10 	vmov	d0, r8, r9
 800fbbc:	f7f6 f884 	bl	8005cc8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbc4:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800fbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbc8:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800fbca:	221f      	movs	r2, #31
 800fbcc:	4619      	mov	r1, r3
 800fbce:	2005      	movs	r0, #5
 800fbd0:	f7f6 f8c2 	bl	8005d58 <_ZN6tflite20CalculateInputRadiusEiii>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f0 fcb6 	bl	8000548 <__aeabi_i2d>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	460b      	mov	r3, r1
 800fbe0:	4614      	mov	r4, r2
 800fbe2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	4629      	mov	r1, r5
 800fbea:	f7f0 ffb1 	bl	8000b50 <__aeabi_d2iz>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbf2:	619a      	str	r2, [r3, #24]
    }
 800fbf4:	e043      	b.n	800fc7e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d018      	beq.n	800fc30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	695c      	ldr	r4, [r3, #20]
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7f3 ffac 	bl	8003b64 <TfLiteTypeGetName>
 800fc0c:	4605      	mov	r5, r0
 800fc0e:	2001      	movs	r0, #1
 800fc10:	f7f3 ffa8 	bl	8003b64 <TfLiteTypeGetName>
 800fc14:	4603      	mov	r3, r0
 800fc16:	9303      	str	r3, [sp, #12]
 800fc18:	9502      	str	r5, [sp, #8]
 800fc1a:	4b1c      	ldr	r3, [pc, #112]	; (800fc8c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	4b1c      	ldr	r3, [pc, #112]	; (800fc90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	234e      	movs	r3, #78	; 0x4e
 800fc24:	4a1b      	ldr	r2, [pc, #108]	; (800fc94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800fc26:	491c      	ldr	r1, [pc, #112]	; (800fc98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	47a0      	blx	r4
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e027      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d018      	beq.n	800fc6a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	695c      	ldr	r4, [r3, #20]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7f3 ff8f 	bl	8003b64 <TfLiteTypeGetName>
 800fc46:	4605      	mov	r5, r0
 800fc48:	2001      	movs	r0, #1
 800fc4a:	f7f3 ff8b 	bl	8003b64 <TfLiteTypeGetName>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	9502      	str	r5, [sp, #8]
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	4b10      	ldr	r3, [pc, #64]	; (800fc9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	234f      	movs	r3, #79	; 0x4f
 800fc5e:	4a0d      	ldr	r2, [pc, #52]	; (800fc94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800fc60:	490d      	ldr	r1, [pc, #52]	; (800fc98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	47a0      	blx	r4
 800fc66:	2301      	movs	r3, #1
 800fc68:	e00a      	b.n	800fc80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7f0 fc7c 	bl	800056c <__aeabi_f2d>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc7a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3728      	adds	r7, #40	; 0x28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08016d00 	.word	0x08016d00
 800fc90:	08016c8c 	.word	0x08016c8c
 800fc94:	08016ba0 	.word	0x08016ba0
 800fc98:	08016c64 	.word	0x08016c64
 800fc9c:	08016cac 	.word	0x08016cac

0800fca0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d101      	bne.n	800fcb8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800fcb4:	f001 f897 	bl	8010de6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcbc:	2138      	movs	r1, #56	; 0x38
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	4798      	blx	r3
 800fcc2:	4603      	mov	r3, r0
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3710      	adds	r7, #16
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	ed87 0a00 	vstr	s0, [r7]
 800fcd8:	ed97 0a00 	vldr	s0, [r7]
 800fcdc:	f7fd f82c 	bl	800cd38 <_ZSt3expf>
 800fce0:	eef0 7a40 	vmov.f32	s15, s0
 800fce4:	eeb0 0a67 	vmov.f32	s0, s15
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b082      	sub	sp, #8
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	ed87 0a01 	vstr	s0, [r7, #4]
 800fcf8:	ed97 0a01 	vldr	s0, [r7, #4]
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	f7ff ffe5 	bl	800fccc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800fd02:	eef0 7a40 	vmov.f32	s15, s0
 800fd06:	eeb0 0a67 	vmov.f32	s0, s15
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	4b03      	ldr	r3, [pc, #12]	; (800fd28 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	370c      	adds	r7, #12
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	0800fcef 	.word	0x0800fcef

0800fd2c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	ed87 0a00 	vstr	s0, [r7]
 800fd38:	edd7 7a00 	vldr	s15, [r7]
 800fd3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fd4c:	eef0 7a66 	vmov.f32	s15, s13
 800fd50:	eeb0 0a67 	vmov.f32	s0, s15
 800fd54:	370c      	adds	r7, #12
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b082      	sub	sp, #8
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	ed87 0a01 	vstr	s0, [r7, #4]
 800fd68:	ed97 0a01 	vldr	s0, [r7, #4]
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	f7ff ffdd 	bl	800fd2c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800fd72:	eef0 7a40 	vmov.f32	s15, s0
 800fd76:	eeb0 0a67 	vmov.f32	s0, s15
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	4b03      	ldr	r3, [pc, #12]	; (800fd98 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	0800fd5f 	.word	0x0800fd5f

0800fd9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800fd9c:	b590      	push	{r4, r7, lr}
 800fd9e:	b08f      	sub	sp, #60	; 0x3c
 800fda0:	af04      	add	r7, sp, #16
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800fda6:	6838      	ldr	r0, [r7, #0]
 800fda8:	f7fb fc18 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	bf14      	ite	ne
 800fdb2:	2301      	movne	r3, #1
 800fdb4:	2300      	moveq	r3, #0
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d013      	beq.n	800fde4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	695c      	ldr	r4, [r3, #20]
 800fdc0:	6838      	ldr	r0, [r7, #0]
 800fdc2:	f7fb fc0b 	bl	800b5dc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2201      	movs	r2, #1
 800fdca:	9203      	str	r2, [sp, #12]
 800fdcc:	9302      	str	r3, [sp, #8]
 800fdce:	4b7c      	ldr	r3, [pc, #496]	; (800ffc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800fdd0:	9301      	str	r3, [sp, #4]
 800fdd2:	4b7c      	ldr	r3, [pc, #496]	; (800ffc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800fdd4:	9300      	str	r3, [sp, #0]
 800fdd6:	235d      	movs	r3, #93	; 0x5d
 800fdd8:	4a7b      	ldr	r2, [pc, #492]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fdda:	497c      	ldr	r1, [pc, #496]	; (800ffcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	47a0      	blx	r4
 800fde0:	2301      	movs	r3, #1
 800fde2:	e146      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800fde4:	6838      	ldr	r0, [r7, #0]
 800fde6:	f7fb fc06 	bl	800b5f6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	bf14      	ite	ne
 800fdf0:	2301      	movne	r3, #1
 800fdf2:	2300      	moveq	r3, #0
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d013      	beq.n	800fe22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	695c      	ldr	r4, [r3, #20]
 800fdfe:	6838      	ldr	r0, [r7, #0]
 800fe00:	f7fb fbf9 	bl	800b5f6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2201      	movs	r2, #1
 800fe08:	9203      	str	r2, [sp, #12]
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	4b6c      	ldr	r3, [pc, #432]	; (800ffc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	4b6f      	ldr	r3, [pc, #444]	; (800ffd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	235e      	movs	r3, #94	; 0x5e
 800fe16:	4a6c      	ldr	r2, [pc, #432]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe18:	496c      	ldr	r1, [pc, #432]	; (800ffcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	47a0      	blx	r4
 800fe1e:	2301      	movs	r3, #1
 800fe20:	e127      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800fe22:	2200      	movs	r2, #0
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7f6 f90d 	bl	8006046 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800fe2c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d10a      	bne.n	800fe4a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	695c      	ldr	r4, [r3, #20]
 800fe38:	4b66      	ldr	r3, [pc, #408]	; (800ffd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	2360      	movs	r3, #96	; 0x60
 800fe3e:	4a62      	ldr	r2, [pc, #392]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe40:	4965      	ldr	r1, [pc, #404]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	47a0      	blx	r4
 800fe46:	2301      	movs	r3, #1
 800fe48:	e113      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800fe4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe4c:	f7f6 f87e 	bl	8005f4c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	bfd4      	ite	le
 800fe56:	2301      	movle	r3, #1
 800fe58:	2300      	movgt	r3, #0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00a      	beq.n	800fe76 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	695c      	ldr	r4, [r3, #20]
 800fe64:	4b5d      	ldr	r3, [pc, #372]	; (800ffdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	2361      	movs	r3, #97	; 0x61
 800fe6a:	4a57      	ldr	r2, [pc, #348]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe6c:	495a      	ldr	r1, [pc, #360]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	47a0      	blx	r4
 800fe72:	2301      	movs	r3, #1
 800fe74:	e0fd      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800fe76:	2200      	movs	r2, #0
 800fe78:	6839      	ldr	r1, [r7, #0]
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7f6 f8f3 	bl	8006066 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800fe80:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800fe82:	6a3b      	ldr	r3, [r7, #32]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10a      	bne.n	800fe9e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	695c      	ldr	r4, [r3, #20]
 800fe8c:	4b54      	ldr	r3, [pc, #336]	; (800ffe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	2363      	movs	r3, #99	; 0x63
 800fe92:	4a4d      	ldr	r2, [pc, #308]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe94:	4950      	ldr	r1, [pc, #320]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	47a0      	blx	r4
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e0e9      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10a      	bne.n	800febc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	695c      	ldr	r4, [r3, #20]
 800feaa:	4b4e      	ldr	r3, [pc, #312]	; (800ffe4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	2365      	movs	r3, #101	; 0x65
 800feb0:	4a45      	ldr	r2, [pc, #276]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800feb2:	4949      	ldr	r1, [pc, #292]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	47a0      	blx	r4
 800feb8:	2301      	movs	r3, #1
 800feba:	e0da      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b07      	cmp	r3, #7
 800fec8:	d12f      	bne.n	800ff2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fece:	f240 4102 	movw	r1, #1026	; 0x402
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	4798      	blx	r3
 800fed6:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10a      	bne.n	800fef4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	695c      	ldr	r4, [r3, #20]
 800fee2:	4b41      	ldr	r3, [pc, #260]	; (800ffe8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	236b      	movs	r3, #107	; 0x6b
 800fee8:	4a37      	ldr	r2, [pc, #220]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800feea:	493b      	ldr	r1, [pc, #236]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	47a0      	blx	r4
 800fef0:	2301      	movs	r3, #1
 800fef2:	e0be      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	69ba      	ldr	r2, [r7, #24]
 800fef8:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefe:	f240 4102 	movw	r1, #1026	; 0x402
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	4798      	blx	r3
 800ff06:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	695c      	ldr	r4, [r3, #20]
 800ff12:	4b36      	ldr	r3, [pc, #216]	; (800ffec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	236f      	movs	r3, #111	; 0x6f
 800ff18:	4a2b      	ldr	r2, [pc, #172]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff1a:	492f      	ldr	r1, [pc, #188]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	47a0      	blx	r4
 800ff20:	2301      	movs	r3, #1
 800ff22:	e0a6      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	2b07      	cmp	r3, #7
 800ff30:	d112      	bne.n	800ff58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	2b09      	cmp	r3, #9
 800ff38:	d028      	beq.n	800ff8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	2b07      	cmp	r3, #7
 800ff40:	d024      	beq.n	800ff8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	695c      	ldr	r4, [r3, #20]
 800ff46:	4b2a      	ldr	r3, [pc, #168]	; (800fff0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	2375      	movs	r3, #117	; 0x75
 800ff4c:	4a1e      	ldr	r2, [pc, #120]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff4e:	4922      	ldr	r1, [pc, #136]	; (800ffd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	47a0      	blx	r4
 800ff54:	2301      	movs	r3, #1
 800ff56:	e08c      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	781a      	ldrb	r2, [r3, #0]
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d013      	beq.n	800ff8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	695c      	ldr	r4, [r3, #20]
 800ff68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	6a3b      	ldr	r3, [r7, #32]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	9202      	str	r2, [sp, #8]
 800ff76:	4b1f      	ldr	r3, [pc, #124]	; (800fff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	4b1f      	ldr	r3, [pc, #124]	; (800fff8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	2378      	movs	r3, #120	; 0x78
 800ff80:	4a11      	ldr	r2, [pc, #68]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff82:	4912      	ldr	r1, [pc, #72]	; (800ffcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	47a0      	blx	r4
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e072      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	2b07      	cmp	r3, #7
 800ff92:	d161      	bne.n	8010058 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d035      	beq.n	8010008 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	695c      	ldr	r4, [r3, #20]
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	691b      	ldr	r3, [r3, #16]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	9203      	str	r2, [sp, #12]
 800ffa8:	9302      	str	r3, [sp, #8]
 800ffaa:	4b14      	ldr	r3, [pc, #80]	; (800fffc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	4b14      	ldr	r3, [pc, #80]	; (8010000 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	237d      	movs	r3, #125	; 0x7d
 800ffb4:	4a04      	ldr	r2, [pc, #16]	; (800ffc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ffb6:	4905      	ldr	r1, [pc, #20]	; (800ffcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	47a0      	blx	r4
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	e058      	b.n	8010072 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 800ffc0:	08016d10 	.word	0x08016d10
 800ffc4:	08016d14 	.word	0x08016d14
 800ffc8:	08016ba0 	.word	0x08016ba0
 800ffcc:	08016be4 	.word	0x08016be4
 800ffd0:	08016d24 	.word	0x08016d24
 800ffd4:	08016d38 	.word	0x08016d38
 800ffd8:	08016cc4 	.word	0x08016cc4
 800ffdc:	08016d4c 	.word	0x08016d4c
 800ffe0:	08016d68 	.word	0x08016d68
 800ffe4:	08016d7c 	.word	0x08016d7c
 800ffe8:	08016d98 	.word	0x08016d98
 800ffec:	08016db0 	.word	0x08016db0
 800fff0:	08016dd4 	.word	0x08016dd4
 800fff4:	08016cac 	.word	0x08016cac
 800fff8:	08016c8c 	.word	0x08016c8c
 800fffc:	08016c00 	.word	0x08016c00
 8010000:	08016c04 	.word	0x08016c04
 8010004:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8010008:	f107 0308 	add.w	r3, r7, #8
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff fe7f 	bl	800fd10 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010016:	f240 2201 	movw	r2, #513	; 0x201
 801001a:	4619      	mov	r1, r3
 801001c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8010004 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8010020:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8010024:	f7ff faf4 	bl	800f610 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8010028:	f107 030c 	add.w	r3, r7, #12
 801002c:	4618      	mov	r0, r3
 801002e:	f7ff fea7 	bl	800fd80 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	f240 2201 	movw	r2, #513	; 0x201
 801003a:	4619      	mov	r1, r3
 801003c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010040:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8010004 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8010044:	f7ff fae4 	bl	800f610 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	691a      	ldr	r2, [r3, #16]
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8010050:	6a3b      	ldr	r3, [r7, #32]
 8010052:	68da      	ldr	r2, [r3, #12]
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	695b      	ldr	r3, [r3, #20]
 801005c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	6a3a      	ldr	r2, [r7, #32]
 8010066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff fbfd 	bl	800f868 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801006e:	4603      	mov	r3, r0
 8010070:	bf00      	nop
}
 8010072:	4618      	mov	r0, r3
 8010074:	372c      	adds	r7, #44	; 0x2c
 8010076:	46bd      	mov	sp, r7
 8010078:	bd90      	pop	{r4, r7, pc}
 801007a:	bf00      	nop

0801007c <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	4a04      	ldr	r2, [pc, #16]	; (8010098 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	601a      	str	r2, [r3, #0]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	08017310 	.word	0x08017310

0801009c <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	4a04      	ldr	r2, [pc, #16]	; (80100b8 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	08017310 	.word	0x08017310

080100bc <_ZN6tflite13MemoryPlannerD0Ev>:
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff ffe9 	bl	801009c <_ZN6tflite13MemoryPlannerD1Ev>
 80100ca:	2104      	movs	r1, #4
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fc04 	bl	80108da <_ZdlPvj>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 80100e2:	2328      	movs	r3, #40	; 0x28
 80100e4:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 80100e6:	2328      	movs	r3, #40	; 0x28
  }
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 80100f4:	b480      	push	{r7}
 80100f6:	b089      	sub	sp, #36	; 0x24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8010100:	2300      	movs	r3, #0
 8010102:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8010104:	2301      	movs	r3, #1
 8010106:	61bb      	str	r3, [r7, #24]
 8010108:	69ba      	ldr	r2, [r7, #24]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	429a      	cmp	r2, r3
 801010e:	da4c      	bge.n	80101aa <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010116:	3b01      	subs	r3, #1
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	4413      	add	r3, r2
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	68f9      	ldr	r1, [r7, #12]
 8010126:	440b      	add	r3, r1
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	429a      	cmp	r2, r3
 801012c:	da39      	bge.n	80101a2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010134:	3b01      	subs	r3, #1
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	68fa      	ldr	r2, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	441a      	add	r2, r3
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801014e:	3b01      	subs	r3, #1
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	68f9      	ldr	r1, [r7, #12]
 8010154:	440b      	add	r3, r1
 8010156:	6812      	ldr	r2, [r2, #0]
 8010158:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	4413      	add	r3, r2
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801016c:	3b01      	subs	r3, #1
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	4413      	add	r3, r2
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	441a      	add	r2, r3
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010186:	3b01      	subs	r3, #1
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	68b9      	ldr	r1, [r7, #8]
 801018c:	440b      	add	r3, r1
 801018e:	6812      	ldr	r2, [r2, #0]
 8010190:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	4413      	add	r3, r2
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 801019e:	2301      	movs	r3, #1
 80101a0:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	3301      	adds	r3, #1
 80101a6:	61bb      	str	r3, [r7, #24]
 80101a8:	e7ae      	b.n	8010108 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 80101aa:	7ffb      	ldrb	r3, [r7, #31]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d000      	beq.n	80101b2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 80101b0:	e7a6      	b.n	8010100 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 80101b2:	bf00      	nop
 80101b4:	3724      	adds	r7, #36	; 0x24
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 80101c0:	b590      	push	{r4, r7, lr}
 80101c2:	b087      	sub	sp, #28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff ff54 	bl	801007c <_ZN6tflite13MemoryPlannerC1Ev>
 80101d4:	4a22      	ldr	r2, [pc, #136]	; (8010260 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2200      	movs	r2, #0
 80101de:	609a      	str	r2, [r3, #8]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2201      	movs	r2, #1
 80101e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 80101e8:	687c      	ldr	r4, [r7, #4]
 80101ea:	f7ff ff77 	bl	80100dc <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 80101ee:	4603      	mov	r3, r0
 80101f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80101f4:	461a      	mov	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	011b      	lsls	r3, r3, #4
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	4413      	add	r3, r2
 801020e:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	697a      	ldr	r2, [r7, #20]
 8010214:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	4413      	add	r3, r2
 8010220:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	697a      	ldr	r2, [r7, #20]
 8010230:	4413      	add	r3, r2
 8010232:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	461a      	mov	r2, r3
 8010240:	4613      	mov	r3, r2
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	461a      	mov	r2, r3
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	4413      	add	r3, r2
 801024e:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	4618      	mov	r0, r3
 801025a:	371c      	adds	r7, #28
 801025c:	46bd      	mov	sp, r7
 801025e:	bd90      	pop	{r4, r7, pc}
 8010260:	080172f0 	.word	0x080172f0

08010264 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	4a05      	ldr	r2, [pc, #20]	; (8010284 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff ff11 	bl	801009c <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	080172f0 	.word	0x080172f0

08010288 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
}
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f7ff ffe7 	bl	8010264 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8010296:	212c      	movs	r1, #44	; 0x2c
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fb1e 	bl	80108da <_ZdlPvj>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4618      	mov	r0, r3
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	689a      	ldr	r2, [r3, #8]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	429a      	cmp	r2, r3
 80102c0:	db08      	blt.n	80102d4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	461a      	mov	r2, r3
 80102c8:	4913      	ldr	r1, [pc, #76]	; (8010318 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 80102ca:	68b8      	ldr	r0, [r7, #8]
 80102cc:	f7f3 fcc6 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e01d      	b.n	8010310 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	68da      	ldr	r2, [r3, #12]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	011b      	lsls	r3, r3, #4
 80102de:	4413      	add	r3, r2
 80102e0:	617b      	str	r3, [r7, #20]
  current->size = size;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	6a3a      	ldr	r2, [r7, #32]
 80102f2:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102fa:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	1c5a      	adds	r2, r3, #1
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2201      	movs	r2, #1
 801030a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 801030e:	2300      	movs	r3, #0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3718      	adds	r7, #24
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	08016e10 	.word	0x08016e10

0801031c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 801031c:	b590      	push	{r4, r7, lr}
 801031e:	b089      	sub	sp, #36	; 0x24
 8010320:	af02      	add	r7, sp, #8
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	68da      	ldr	r2, [r3, #12]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	011b      	lsls	r3, r3, #4
 8010334:	4413      	add	r3, r2
 8010336:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3308      	adds	r3, #8
 801033e:	681c      	ldr	r4, [r3, #0]
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	68b9      	ldr	r1, [r7, #8]
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	47a0      	blx	r4
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	bf14      	ite	ne
 8010354:	2301      	movne	r3, #1
 8010356:	2300      	moveq	r3, #0
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 801035e:	2301      	movs	r3, #1
 8010360:	e003      	b.n	801036a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010366:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	371c      	adds	r7, #28
 801036e:	46bd      	mov	sp, r7
 8010370:	bd90      	pop	{r4, r7, pc}

08010372 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8010372:	b480      	push	{r7}
 8010374:	b087      	sub	sp, #28
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	60b9      	str	r1, [r7, #8]
 801037c:	607a      	str	r2, [r7, #4]
 801037e:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	68da      	ldr	r2, [r3, #12]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 801038a:	4413      	add	r3, r2
 801038c:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	683a      	ldr	r2, [r7, #0]
 8010394:	429a      	cmp	r2, r3
 8010396:	da01      	bge.n	801039c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8010398:	2300      	movs	r3, #0
 801039a:	e007      	b.n	80103ac <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	dd01      	ble.n	80103aa <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 80103a6:	2300      	movs	r3, #0
 80103a8:	e000      	b.n	80103ac <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 80103aa:	2301      	movs	r3, #1
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	371c      	adds	r7, #28
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 80103c6:	2300      	movs	r3, #0
 80103c8:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10b      	bne.n	80103e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	699a      	ldr	r2, [r3, #24]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6a1b      	ldr	r3, [r3, #32]
 80103d8:	4619      	mov	r1, r3
 80103da:	460b      	mov	r3, r1
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	440b      	add	r3, r1
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4413      	add	r3, r2
 80103e4:	613b      	str	r3, [r7, #16]
 80103e6:	e011      	b.n	801040c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103f0:	d101      	bne.n	80103f6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 80103f2:	2300      	movs	r3, #0
 80103f4:	e029      	b.n	801044a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	699a      	ldr	r2, [r3, #24]
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	4619      	mov	r1, r3
 8010400:	460b      	mov	r3, r1
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	440b      	add	r3, r1
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4413      	add	r3, r2
 801040a:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	6939      	ldr	r1, [r7, #16]
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f7ff ffad 	bl	8010372 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d002      	beq.n	8010424 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	617b      	str	r3, [r7, #20]
      break;
 8010422:	e011      	b.n	8010448 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801042c:	d00b      	beq.n	8010446 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	699a      	ldr	r2, [r3, #24]
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	4619      	mov	r1, r3
 8010438:	460b      	mov	r3, r1
 801043a:	005b      	lsls	r3, r3, #1
 801043c:	440b      	add	r3, r1
 801043e:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8010440:	4413      	add	r3, r2
 8010442:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8010444:	e7e2      	b.n	801040c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8010446:	bf00      	nop
  } while (true);
  return result;
 8010448:	697b      	ldr	r3, [r7, #20]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3718      	adds	r7, #24
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8010452:	b580      	push	{r7, lr}
 8010454:	b098      	sub	sp, #96	; 0x60
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010460:	f083 0301 	eor.w	r3, r3, #1
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	f040 815f 	bne.w	801072a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 815a 	beq.w	801072a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	689b      	ldr	r3, [r3, #8]
 8010482:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8010484:	2300      	movs	r3, #0
 8010486:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8010488:	2300      	movs	r3, #0
 801048a:	657b      	str	r3, [r7, #84]	; 0x54
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010492:	429a      	cmp	r2, r3
 8010494:	da4d      	bge.n	8010532 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	4413      	add	r3, r2
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104a6:	d11e      	bne.n	80104e6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 80104a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104aa:	3b01      	subs	r3, #1
 80104ac:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	68da      	ldr	r2, [r3, #12]
 80104b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104b4:	011b      	lsls	r3, r3, #4
 80104b6:	441a      	add	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6919      	ldr	r1, [r3, #16]
 80104bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	440b      	add	r3, r1
 80104c2:	6812      	ldr	r2, [r2, #0]
 80104c4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	695a      	ldr	r2, [r3, #20]
 80104ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4413      	add	r3, r2
 80104d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104d2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4413      	add	r3, r2
 80104de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104e2:	601a      	str	r2, [r3, #0]
 80104e4:	e021      	b.n	801052a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ec:	011b      	lsls	r3, r3, #4
 80104ee:	441a      	add	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6919      	ldr	r1, [r3, #16]
 80104f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	440b      	add	r3, r1
 80104fa:	6812      	ldr	r2, [r2, #0]
 80104fc:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	695a      	ldr	r2, [r3, #20]
 8010502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	4413      	add	r3, r2
 8010508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801050a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	68da      	ldr	r2, [r3, #12]
 8010510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010512:	011b      	lsls	r3, r3, #4
 8010514:	441a      	add	r2, r3
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801051a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	440b      	add	r3, r1
 8010520:	6852      	ldr	r2, [r2, #4]
 8010522:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8010524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010526:	3301      	adds	r3, #1
 8010528:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 801052a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801052c:	3301      	adds	r3, #1
 801052e:	657b      	str	r3, [r7, #84]	; 0x54
 8010530:	e7ac      	b.n	801048c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	691a      	ldr	r2, [r3, #16]
 8010536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	695a      	ldr	r2, [r3, #20]
 8010540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010542:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8010544:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801054a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	461a      	mov	r2, r3
 8010550:	f7ff fdd0 	bl	80100f4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	699a      	ldr	r2, [r3, #24]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6a1b      	ldr	r3, [r3, #32]
 8010568:	4619      	mov	r1, r3
 801056a:	460b      	mov	r3, r1
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	440b      	add	r3, r1
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	4413      	add	r3, r2
 8010574:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8010576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801057c:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	695b      	ldr	r3, [r3, #20]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801058a:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	68da      	ldr	r2, [r3, #12]
 8010590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010592:	011b      	lsls	r3, r3, #4
 8010594:	4413      	add	r3, r2
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801059c:	d106      	bne.n	80105ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	2200      	movs	r2, #0
 80105aa:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ba:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 80105bc:	2301      	movs	r3, #1
 80105be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105c6:	429a      	cmp	r2, r3
 80105c8:	f280 80b0 	bge.w	801072c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	695a      	ldr	r2, [r3, #20]
 80105d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	68da      	ldr	r2, [r3, #12]
 80105de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e0:	011b      	lsls	r3, r3, #4
 80105e2:	4413      	add	r3, r2
 80105e4:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 80105f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 80105f8:	2300      	movs	r3, #0
 80105fa:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 80105fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010604:	d12d      	bne.n	8010662 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 8010606:	2300      	movs	r3, #0
 8010608:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801060e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7ff fed1 	bl	80103b8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8010616:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8010618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801061a:	2b00      	cmp	r3, #0
 801061c:	d012      	beq.n	8010644 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68da      	ldr	r2, [r3, #12]
 8010622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8010628:	4413      	add	r3, r2
 801062a:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 801062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8010634:	4413      	add	r3, r2
 8010636:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8010638:	6a3a      	ldr	r2, [r7, #32]
 801063a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801063c:	429a      	cmp	r2, r3
 801063e:	dd01      	ble.n	8010644 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00f      	beq.n	801066a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 801064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8010654:	69fa      	ldr	r2, [r7, #28]
 8010656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010658:	429a      	cmp	r2, r3
 801065a:	da08      	bge.n	801066e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 801065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065e:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8010660:	e7d3      	b.n	801060a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8010662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	64bb      	str	r3, [r7, #72]	; 0x48
 8010668:	e002      	b.n	8010670 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801066a:	bf00      	nop
 801066c:	e000      	b.n	8010670 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801066e:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	4413      	add	r3, r2
 801067a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801067c:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	699a      	ldr	r2, [r3, #24]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	69db      	ldr	r3, [r3, #28]
 8010686:	4619      	mov	r1, r3
 8010688:	460b      	mov	r3, r1
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	440b      	add	r3, r1
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010698:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801069e:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	69db      	ldr	r3, [r3, #28]
 80106a4:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	69db      	ldr	r3, [r3, #28]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 80106b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106b6:	429a      	cmp	r2, r3
 80106b8:	da09      	bge.n	80106ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a1a      	ldr	r2, [r3, #32]
 80106c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106c4:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	621a      	str	r2, [r3, #32]
 80106cc:	e029      	b.n	8010722 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 80106ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d0:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 80106d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106de:	d107      	bne.n	80106f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 80106e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106ec:	609a      	str	r2, [r3, #8]
          break;
 80106ee:	e018      	b.n	8010722 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6999      	ldr	r1, [r3, #24]
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	4613      	mov	r3, r2
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4413      	add	r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	440b      	add	r3, r1
 8010700:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010708:	429a      	cmp	r2, r3
 801070a:	da07      	bge.n	801071c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 801070c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070e:	689a      	ldr	r2, [r3, #8]
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8010714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	609a      	str	r2, [r3, #8]
          break;
 801071a:	e002      	b.n	8010722 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8010720:	e7d7      	b.n	80106d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 8010722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010724:	3301      	adds	r3, #1
 8010726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010728:	e74a      	b.n	80105c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 801072a:	bf00      	nop
    }
  }
}
 801072c:	3760      	adds	r7, #96	; 0x60
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 8010732:	b580      	push	{r7, lr}
 8010734:	b086      	sub	sp, #24
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff fe89 	bl	8010452 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d101      	bne.n	801074c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8010748:	2300      	movs	r3, #0
 801074a:	e035      	b.n	80107b8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	699a      	ldr	r2, [r3, #24]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6a1b      	ldr	r3, [r3, #32]
 8010754:	4619      	mov	r1, r3
 8010756:	460b      	mov	r3, r1
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	440b      	add	r3, r1
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	613b      	str	r3, [r7, #16]
  while (entry) {
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d024      	beq.n	80107b6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	68da      	ldr	r2, [r3, #12]
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 8010776:	4413      	add	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4413      	add	r3, r2
 8010784:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	429a      	cmp	r2, r3
 801078c:	d901      	bls.n	8010792 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801079a:	d00b      	beq.n	80107b4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	699a      	ldr	r2, [r3, #24]
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	4619      	mov	r1, r3
 80107a6:	460b      	mov	r3, r1
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	440b      	add	r3, r1
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	617b      	str	r3, [r7, #20]
  while (entry) {
 80107b2:	e7d8      	b.n	8010766 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 80107b4:	bf00      	nop
  }
  return max_size;
 80107b6:	693b      	ldr	r3, [r7, #16]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3718      	adds	r7, #24
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	4618      	mov	r0, r3
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
 80107e4:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f7ff fe33 	bl	8010452 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	db04      	blt.n	80107fc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	689b      	ldr	r3, [r3, #8]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	db08      	blt.n	801080e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	689b      	ldr	r3, [r3, #8]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	4909      	ldr	r1, [pc, #36]	; (8010828 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8010804:	68b8      	ldr	r0, [r7, #8]
 8010806:	f7f3 fa29 	bl	8003c5c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 801080a:	2301      	movs	r3, #1
 801080c:	e008      	b.n	8010820 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08016e84 	.word	0x08016e84

0801082c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	2104      	movs	r1, #4
 801083a:	4618      	mov	r0, r3
 801083c:	f7f3 ff81 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8010840:	4603      	mov	r3, r0
  }
 8010842:	4618      	mov	r0, r3
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 801084a:	b580      	push	{r7, lr}
 801084c:	b082      	sub	sp, #8
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	210a      	movs	r1, #10
 8010858:	4618      	mov	r0, r3
 801085a:	f7f3 ff44 	bl	80046e6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 801085e:	4603      	mov	r3, r0
 8010860:	b2db      	uxtb	r3, r3
  }
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8010878:	f000 fab5 	bl	8010de6 <abort>

  return std::max(
      op_code->builtin_code(),
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7ff ffe4 	bl	801084a <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8010882:	4603      	mov	r3, r0
 8010884:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7ff ffd0 	bl	801082c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 801088c:	4603      	mov	r3, r0
 801088e:	b2db      	uxtb	r3, r3
 8010890:	73fb      	strb	r3, [r7, #15]
 8010892:	f107 020f 	add.w	r2, r7, #15
 8010896:	f107 030e 	add.w	r3, r7, #14
 801089a:	4611      	mov	r1, r2
 801089c:	4618      	mov	r0, r3
 801089e:	f000 f806 	bl	80108ae <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 80108a2:	4603      	mov	r3, r0
 80108a4:	781b      	ldrb	r3, [r3, #0]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 80108ae:	b480      	push	{r7}
 80108b0:	b083      	sub	sp, #12
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	781a      	ldrb	r2, [r3, #0]
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d201      	bcs.n	80108c8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	e000      	b.n	80108ca <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 80108c8:	687b      	ldr	r3, [r7, #4]
    }
 80108ca:	4618      	mov	r0, r3
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr

080108d6 <_ZdlPv>:
 80108d6:	f000 baf5 	b.w	8010ec4 <free>

080108da <_ZdlPvj>:
 80108da:	f7ff bffc 	b.w	80108d6 <_ZdlPv>

080108de <_ZdaPv>:
 80108de:	f7ff bffa 	b.w	80108d6 <_ZdlPv>

080108e2 <__cxa_guard_acquire>:
 80108e2:	6803      	ldr	r3, [r0, #0]
 80108e4:	07db      	lsls	r3, r3, #31
 80108e6:	d406      	bmi.n	80108f6 <__cxa_guard_acquire+0x14>
 80108e8:	7843      	ldrb	r3, [r0, #1]
 80108ea:	b103      	cbz	r3, 80108ee <__cxa_guard_acquire+0xc>
 80108ec:	deff      	udf	#255	; 0xff
 80108ee:	2301      	movs	r3, #1
 80108f0:	7043      	strb	r3, [r0, #1]
 80108f2:	4618      	mov	r0, r3
 80108f4:	4770      	bx	lr
 80108f6:	2000      	movs	r0, #0
 80108f8:	4770      	bx	lr

080108fa <__cxa_guard_release>:
 80108fa:	2301      	movs	r3, #1
 80108fc:	6003      	str	r3, [r0, #0]
 80108fe:	4770      	bx	lr

08010900 <_Znwj>:
 8010900:	2801      	cmp	r0, #1
 8010902:	bf38      	it	cc
 8010904:	2001      	movcc	r0, #1
 8010906:	b510      	push	{r4, lr}
 8010908:	4604      	mov	r4, r0
 801090a:	4620      	mov	r0, r4
 801090c:	f000 fad2 	bl	8010eb4 <malloc>
 8010910:	b930      	cbnz	r0, 8010920 <_Znwj+0x20>
 8010912:	f000 f81d 	bl	8010950 <_ZSt15get_new_handlerv>
 8010916:	b908      	cbnz	r0, 801091c <_Znwj+0x1c>
 8010918:	f000 fa65 	bl	8010de6 <abort>
 801091c:	4780      	blx	r0
 801091e:	e7f4      	b.n	801090a <_Znwj+0xa>
 8010920:	bd10      	pop	{r4, pc}

08010922 <_Znaj>:
 8010922:	f7ff bfed 	b.w	8010900 <_Znwj>

08010926 <__cxa_pure_virtual>:
 8010926:	b508      	push	{r3, lr}
 8010928:	f000 f80c 	bl	8010944 <_ZSt9terminatev>

0801092c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801092c:	b508      	push	{r3, lr}
 801092e:	4780      	blx	r0
 8010930:	f000 fa59 	bl	8010de6 <abort>

08010934 <_ZSt13get_terminatev>:
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <_ZSt13get_terminatev+0xc>)
 8010936:	6818      	ldr	r0, [r3, #0]
 8010938:	f3bf 8f5b 	dmb	ish
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	200040b8 	.word	0x200040b8

08010944 <_ZSt9terminatev>:
 8010944:	b508      	push	{r3, lr}
 8010946:	f7ff fff5 	bl	8010934 <_ZSt13get_terminatev>
 801094a:	f7ff ffef 	bl	801092c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010950 <_ZSt15get_new_handlerv>:
 8010950:	4b02      	ldr	r3, [pc, #8]	; (801095c <_ZSt15get_new_handlerv+0xc>)
 8010952:	6818      	ldr	r0, [r3, #0]
 8010954:	f3bf 8f5b 	dmb	ish
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	20016f3c 	.word	0x20016f3c

08010960 <floor>:
 8010960:	ec51 0b10 	vmov	r0, r1, d0
 8010964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010968:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801096c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010970:	2e13      	cmp	r6, #19
 8010972:	ee10 5a10 	vmov	r5, s0
 8010976:	ee10 8a10 	vmov	r8, s0
 801097a:	460c      	mov	r4, r1
 801097c:	dc32      	bgt.n	80109e4 <floor+0x84>
 801097e:	2e00      	cmp	r6, #0
 8010980:	da14      	bge.n	80109ac <floor+0x4c>
 8010982:	a333      	add	r3, pc, #204	; (adr r3, 8010a50 <floor+0xf0>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	f7ef fc92 	bl	80002b0 <__adddf3>
 801098c:	2200      	movs	r2, #0
 801098e:	2300      	movs	r3, #0
 8010990:	f7f0 f8d4 	bl	8000b3c <__aeabi_dcmpgt>
 8010994:	b138      	cbz	r0, 80109a6 <floor+0x46>
 8010996:	2c00      	cmp	r4, #0
 8010998:	da57      	bge.n	8010a4a <floor+0xea>
 801099a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801099e:	431d      	orrs	r5, r3
 80109a0:	d001      	beq.n	80109a6 <floor+0x46>
 80109a2:	4c2d      	ldr	r4, [pc, #180]	; (8010a58 <floor+0xf8>)
 80109a4:	2500      	movs	r5, #0
 80109a6:	4621      	mov	r1, r4
 80109a8:	4628      	mov	r0, r5
 80109aa:	e025      	b.n	80109f8 <floor+0x98>
 80109ac:	4f2b      	ldr	r7, [pc, #172]	; (8010a5c <floor+0xfc>)
 80109ae:	4137      	asrs	r7, r6
 80109b0:	ea01 0307 	and.w	r3, r1, r7
 80109b4:	4303      	orrs	r3, r0
 80109b6:	d01f      	beq.n	80109f8 <floor+0x98>
 80109b8:	a325      	add	r3, pc, #148	; (adr r3, 8010a50 <floor+0xf0>)
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	f7ef fc77 	bl	80002b0 <__adddf3>
 80109c2:	2200      	movs	r2, #0
 80109c4:	2300      	movs	r3, #0
 80109c6:	f7f0 f8b9 	bl	8000b3c <__aeabi_dcmpgt>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d0eb      	beq.n	80109a6 <floor+0x46>
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	bfbe      	ittt	lt
 80109d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80109d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80109da:	19a4      	addlt	r4, r4, r6
 80109dc:	ea24 0407 	bic.w	r4, r4, r7
 80109e0:	2500      	movs	r5, #0
 80109e2:	e7e0      	b.n	80109a6 <floor+0x46>
 80109e4:	2e33      	cmp	r6, #51	; 0x33
 80109e6:	dd0b      	ble.n	8010a00 <floor+0xa0>
 80109e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80109ec:	d104      	bne.n	80109f8 <floor+0x98>
 80109ee:	ee10 2a10 	vmov	r2, s0
 80109f2:	460b      	mov	r3, r1
 80109f4:	f7ef fc5c 	bl	80002b0 <__adddf3>
 80109f8:	ec41 0b10 	vmov	d0, r0, r1
 80109fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a08:	fa23 f707 	lsr.w	r7, r3, r7
 8010a0c:	4207      	tst	r7, r0
 8010a0e:	d0f3      	beq.n	80109f8 <floor+0x98>
 8010a10:	a30f      	add	r3, pc, #60	; (adr r3, 8010a50 <floor+0xf0>)
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	f7ef fc4b 	bl	80002b0 <__adddf3>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f7f0 f88d 	bl	8000b3c <__aeabi_dcmpgt>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	d0bf      	beq.n	80109a6 <floor+0x46>
 8010a26:	2c00      	cmp	r4, #0
 8010a28:	da02      	bge.n	8010a30 <floor+0xd0>
 8010a2a:	2e14      	cmp	r6, #20
 8010a2c:	d103      	bne.n	8010a36 <floor+0xd6>
 8010a2e:	3401      	adds	r4, #1
 8010a30:	ea25 0507 	bic.w	r5, r5, r7
 8010a34:	e7b7      	b.n	80109a6 <floor+0x46>
 8010a36:	2301      	movs	r3, #1
 8010a38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010a3c:	fa03 f606 	lsl.w	r6, r3, r6
 8010a40:	4435      	add	r5, r6
 8010a42:	4545      	cmp	r5, r8
 8010a44:	bf38      	it	cc
 8010a46:	18e4      	addcc	r4, r4, r3
 8010a48:	e7f2      	b.n	8010a30 <floor+0xd0>
 8010a4a:	2500      	movs	r5, #0
 8010a4c:	462c      	mov	r4, r5
 8010a4e:	e7aa      	b.n	80109a6 <floor+0x46>
 8010a50:	8800759c 	.word	0x8800759c
 8010a54:	7e37e43c 	.word	0x7e37e43c
 8010a58:	bff00000 	.word	0xbff00000
 8010a5c:	000fffff 	.word	0x000fffff

08010a60 <frexp>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	2100      	movs	r1, #0
 8010a64:	ec55 4b10 	vmov	r4, r5, d0
 8010a68:	6001      	str	r1, [r0, #0]
 8010a6a:	4916      	ldr	r1, [pc, #88]	; (8010ac4 <frexp+0x64>)
 8010a6c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010a70:	428a      	cmp	r2, r1
 8010a72:	4606      	mov	r6, r0
 8010a74:	462b      	mov	r3, r5
 8010a76:	dc22      	bgt.n	8010abe <frexp+0x5e>
 8010a78:	ee10 1a10 	vmov	r1, s0
 8010a7c:	4311      	orrs	r1, r2
 8010a7e:	d01e      	beq.n	8010abe <frexp+0x5e>
 8010a80:	4911      	ldr	r1, [pc, #68]	; (8010ac8 <frexp+0x68>)
 8010a82:	4029      	ands	r1, r5
 8010a84:	b969      	cbnz	r1, 8010aa2 <frexp+0x42>
 8010a86:	4b11      	ldr	r3, [pc, #68]	; (8010acc <frexp+0x6c>)
 8010a88:	2200      	movs	r2, #0
 8010a8a:	ee10 0a10 	vmov	r0, s0
 8010a8e:	4629      	mov	r1, r5
 8010a90:	f7ef fdc4 	bl	800061c <__aeabi_dmul>
 8010a94:	460b      	mov	r3, r1
 8010a96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010a9a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	6031      	str	r1, [r6, #0]
 8010aa2:	6831      	ldr	r1, [r6, #0]
 8010aa4:	1512      	asrs	r2, r2, #20
 8010aa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010aaa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8010aae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ab2:	440a      	add	r2, r1
 8010ab4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8010ab8:	6032      	str	r2, [r6, #0]
 8010aba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8010abe:	ec45 4b10 	vmov	d0, r4, r5
 8010ac2:	bd70      	pop	{r4, r5, r6, pc}
 8010ac4:	7fefffff 	.word	0x7fefffff
 8010ac8:	7ff00000 	.word	0x7ff00000
 8010acc:	43500000 	.word	0x43500000

08010ad0 <round>:
 8010ad0:	ec51 0b10 	vmov	r0, r1, d0
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010ada:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010ade:	2c13      	cmp	r4, #19
 8010ae0:	ee10 2a10 	vmov	r2, s0
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	dc19      	bgt.n	8010b1c <round+0x4c>
 8010ae8:	2c00      	cmp	r4, #0
 8010aea:	da09      	bge.n	8010b00 <round+0x30>
 8010aec:	3401      	adds	r4, #1
 8010aee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010af2:	d103      	bne.n	8010afc <round+0x2c>
 8010af4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010af8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010afc:	2100      	movs	r1, #0
 8010afe:	e028      	b.n	8010b52 <round+0x82>
 8010b00:	4d15      	ldr	r5, [pc, #84]	; (8010b58 <round+0x88>)
 8010b02:	4125      	asrs	r5, r4
 8010b04:	ea01 0605 	and.w	r6, r1, r5
 8010b08:	4332      	orrs	r2, r6
 8010b0a:	d00e      	beq.n	8010b2a <round+0x5a>
 8010b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010b10:	fa42 f404 	asr.w	r4, r2, r4
 8010b14:	4423      	add	r3, r4
 8010b16:	ea23 0305 	bic.w	r3, r3, r5
 8010b1a:	e7ef      	b.n	8010afc <round+0x2c>
 8010b1c:	2c33      	cmp	r4, #51	; 0x33
 8010b1e:	dd07      	ble.n	8010b30 <round+0x60>
 8010b20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010b24:	d101      	bne.n	8010b2a <round+0x5a>
 8010b26:	f7ef fbc3 	bl	80002b0 <__adddf3>
 8010b2a:	ec41 0b10 	vmov	d0, r0, r1
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
 8010b30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8010b34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010b38:	40f5      	lsrs	r5, r6
 8010b3a:	4228      	tst	r0, r5
 8010b3c:	d0f5      	beq.n	8010b2a <round+0x5a>
 8010b3e:	2101      	movs	r1, #1
 8010b40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010b44:	fa01 f404 	lsl.w	r4, r1, r4
 8010b48:	1912      	adds	r2, r2, r4
 8010b4a:	bf28      	it	cs
 8010b4c:	185b      	addcs	r3, r3, r1
 8010b4e:	ea22 0105 	bic.w	r1, r2, r5
 8010b52:	4608      	mov	r0, r1
 8010b54:	4619      	mov	r1, r3
 8010b56:	e7e8      	b.n	8010b2a <round+0x5a>
 8010b58:	000fffff 	.word	0x000fffff

08010b5c <roundf>:
 8010b5c:	ee10 0a10 	vmov	r0, s0
 8010b60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010b64:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8010b68:	2a16      	cmp	r2, #22
 8010b6a:	dc15      	bgt.n	8010b98 <roundf+0x3c>
 8010b6c:	2a00      	cmp	r2, #0
 8010b6e:	da08      	bge.n	8010b82 <roundf+0x26>
 8010b70:	3201      	adds	r2, #1
 8010b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010b76:	d101      	bne.n	8010b7c <roundf+0x20>
 8010b78:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010b7c:	ee00 3a10 	vmov	s0, r3
 8010b80:	4770      	bx	lr
 8010b82:	4908      	ldr	r1, [pc, #32]	; (8010ba4 <roundf+0x48>)
 8010b84:	4111      	asrs	r1, r2
 8010b86:	4208      	tst	r0, r1
 8010b88:	d0fa      	beq.n	8010b80 <roundf+0x24>
 8010b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010b8e:	4113      	asrs	r3, r2
 8010b90:	4403      	add	r3, r0
 8010b92:	ea23 0301 	bic.w	r3, r3, r1
 8010b96:	e7f1      	b.n	8010b7c <roundf+0x20>
 8010b98:	2a80      	cmp	r2, #128	; 0x80
 8010b9a:	d1f1      	bne.n	8010b80 <roundf+0x24>
 8010b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	007fffff 	.word	0x007fffff

08010ba8 <expf>:
 8010ba8:	b508      	push	{r3, lr}
 8010baa:	ed2d 8b02 	vpush	{d8}
 8010bae:	eef0 8a40 	vmov.f32	s17, s0
 8010bb2:	f000 f837 	bl	8010c24 <__ieee754_expf>
 8010bb6:	4b16      	ldr	r3, [pc, #88]	; (8010c10 <expf+0x68>)
 8010bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	eeb0 8a40 	vmov.f32	s16, s0
 8010bc2:	d011      	beq.n	8010be8 <expf+0x40>
 8010bc4:	eeb0 0a68 	vmov.f32	s0, s17
 8010bc8:	f000 f900 	bl	8010dcc <finitef>
 8010bcc:	b160      	cbz	r0, 8010be8 <expf+0x40>
 8010bce:	eddf 7a11 	vldr	s15, [pc, #68]	; 8010c14 <expf+0x6c>
 8010bd2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	dd0a      	ble.n	8010bf2 <expf+0x4a>
 8010bdc:	f000 f92e 	bl	8010e3c <__errno>
 8010be0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8010c18 <expf+0x70>
 8010be4:	2322      	movs	r3, #34	; 0x22
 8010be6:	6003      	str	r3, [r0, #0]
 8010be8:	eeb0 0a48 	vmov.f32	s0, s16
 8010bec:	ecbd 8b02 	vpop	{d8}
 8010bf0:	bd08      	pop	{r3, pc}
 8010bf2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010c1c <expf+0x74>
 8010bf6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfe:	d5f3      	bpl.n	8010be8 <expf+0x40>
 8010c00:	f000 f91c 	bl	8010e3c <__errno>
 8010c04:	2322      	movs	r3, #34	; 0x22
 8010c06:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8010c20 <expf+0x78>
 8010c0a:	6003      	str	r3, [r0, #0]
 8010c0c:	e7ec      	b.n	8010be8 <expf+0x40>
 8010c0e:	bf00      	nop
 8010c10:	200040bc 	.word	0x200040bc
 8010c14:	42b17180 	.word	0x42b17180
 8010c18:	7f800000 	.word	0x7f800000
 8010c1c:	c2cff1b5 	.word	0xc2cff1b5
 8010c20:	00000000 	.word	0x00000000

08010c24 <__ieee754_expf>:
 8010c24:	ee10 2a10 	vmov	r2, s0
 8010c28:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010c2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010c30:	d902      	bls.n	8010c38 <__ieee754_expf+0x14>
 8010c32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010c36:	4770      	bx	lr
 8010c38:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8010c3c:	d106      	bne.n	8010c4c <__ieee754_expf+0x28>
 8010c3e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8010d84 <__ieee754_expf+0x160>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	bf18      	it	ne
 8010c46:	eeb0 0a67 	vmovne.f32	s0, s15
 8010c4a:	4770      	bx	lr
 8010c4c:	484e      	ldr	r0, [pc, #312]	; (8010d88 <__ieee754_expf+0x164>)
 8010c4e:	4282      	cmp	r2, r0
 8010c50:	dd04      	ble.n	8010c5c <__ieee754_expf+0x38>
 8010c52:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8010d8c <__ieee754_expf+0x168>
 8010c56:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010c5a:	4770      	bx	lr
 8010c5c:	2a00      	cmp	r2, #0
 8010c5e:	da03      	bge.n	8010c68 <__ieee754_expf+0x44>
 8010c60:	4a4b      	ldr	r2, [pc, #300]	; (8010d90 <__ieee754_expf+0x16c>)
 8010c62:	4291      	cmp	r1, r2
 8010c64:	f200 808a 	bhi.w	8010d7c <__ieee754_expf+0x158>
 8010c68:	4a4a      	ldr	r2, [pc, #296]	; (8010d94 <__ieee754_expf+0x170>)
 8010c6a:	4291      	cmp	r1, r2
 8010c6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010c70:	d954      	bls.n	8010d1c <__ieee754_expf+0xf8>
 8010c72:	4a49      	ldr	r2, [pc, #292]	; (8010d98 <__ieee754_expf+0x174>)
 8010c74:	4291      	cmp	r1, r2
 8010c76:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010c7a:	d836      	bhi.n	8010cea <__ieee754_expf+0xc6>
 8010c7c:	4947      	ldr	r1, [pc, #284]	; (8010d9c <__ieee754_expf+0x178>)
 8010c7e:	4411      	add	r1, r2
 8010c80:	ed91 7a00 	vldr	s14, [r1]
 8010c84:	4946      	ldr	r1, [pc, #280]	; (8010da0 <__ieee754_expf+0x17c>)
 8010c86:	440a      	add	r2, r1
 8010c88:	edd2 7a00 	vldr	s15, [r2]
 8010c8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010c90:	f1c3 0201 	rsb	r2, r3, #1
 8010c94:	1ad2      	subs	r2, r2, r3
 8010c96:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010c9a:	ee60 6a00 	vmul.f32	s13, s0, s0
 8010c9e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8010da4 <__ieee754_expf+0x180>
 8010ca2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8010da8 <__ieee754_expf+0x184>
 8010ca6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8010caa:	eddf 5a40 	vldr	s11, [pc, #256]	; 8010dac <__ieee754_expf+0x188>
 8010cae:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010cb2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8010db0 <__ieee754_expf+0x18c>
 8010cb6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8010cba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010db4 <__ieee754_expf+0x190>
 8010cbe:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010cc2:	eeb0 5a40 	vmov.f32	s10, s0
 8010cc6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8010cca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010cce:	eef0 6a45 	vmov.f32	s13, s10
 8010cd2:	ee20 5a05 	vmul.f32	s10, s0, s10
 8010cd6:	bb92      	cbnz	r2, 8010d3e <__ieee754_expf+0x11a>
 8010cd8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010cdc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010ce0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010ce4:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010ce8:	4770      	bx	lr
 8010cea:	4b33      	ldr	r3, [pc, #204]	; (8010db8 <__ieee754_expf+0x194>)
 8010cec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010dbc <__ieee754_expf+0x198>
 8010cf0:	4413      	add	r3, r2
 8010cf2:	edd3 7a00 	vldr	s15, [r3]
 8010cf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010cfa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010dc0 <__ieee754_expf+0x19c>
 8010cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d02:	ee17 2a90 	vmov	r2, s15
 8010d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d0a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010d0e:	eeb0 7a40 	vmov.f32	s14, s0
 8010d12:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8010dc4 <__ieee754_expf+0x1a0>
 8010d16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010d1a:	e7bc      	b.n	8010c96 <__ieee754_expf+0x72>
 8010d1c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010d20:	d20b      	bcs.n	8010d3a <__ieee754_expf+0x116>
 8010d22:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010d8c <__ieee754_expf+0x168>
 8010d26:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010d2a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d32:	dd02      	ble.n	8010d3a <__ieee754_expf+0x116>
 8010d34:	ee30 0a06 	vadd.f32	s0, s0, s12
 8010d38:	4770      	bx	lr
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	e7ad      	b.n	8010c9a <__ieee754_expf+0x76>
 8010d3e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010d42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010d46:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8010d4a:	bfb8      	it	lt
 8010d4c:	3264      	addlt	r2, #100	; 0x64
 8010d4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d52:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010d56:	ee76 7a40 	vsub.f32	s15, s12, s0
 8010d5a:	ee17 3a90 	vmov	r3, s15
 8010d5e:	bfab      	itete	ge
 8010d60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010d64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010d68:	ee00 3a10 	vmovge	s0, r3
 8010d6c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8010dc8 <__ieee754_expf+0x1a4>
 8010d70:	bfbc      	itt	lt
 8010d72:	ee00 3a10 	vmovlt	s0, r3
 8010d76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010d7a:	4770      	bx	lr
 8010d7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010d84 <__ieee754_expf+0x160>
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	00000000 	.word	0x00000000
 8010d88:	42b17217 	.word	0x42b17217
 8010d8c:	7149f2ca 	.word	0x7149f2ca
 8010d90:	42cff1b5 	.word	0x42cff1b5
 8010d94:	3eb17218 	.word	0x3eb17218
 8010d98:	3f851591 	.word	0x3f851591
 8010d9c:	08017330 	.word	0x08017330
 8010da0:	08017338 	.word	0x08017338
 8010da4:	3331bb4c 	.word	0x3331bb4c
 8010da8:	b5ddea0e 	.word	0xb5ddea0e
 8010dac:	388ab355 	.word	0x388ab355
 8010db0:	bb360b61 	.word	0xbb360b61
 8010db4:	3e2aaaab 	.word	0x3e2aaaab
 8010db8:	08017328 	.word	0x08017328
 8010dbc:	3fb8aa3b 	.word	0x3fb8aa3b
 8010dc0:	3f317180 	.word	0x3f317180
 8010dc4:	3717f7d1 	.word	0x3717f7d1
 8010dc8:	0d800000 	.word	0x0d800000

08010dcc <finitef>:
 8010dcc:	b082      	sub	sp, #8
 8010dce:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010dd2:	9801      	ldr	r0, [sp, #4]
 8010dd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010dd8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010ddc:	bfac      	ite	ge
 8010dde:	2000      	movge	r0, #0
 8010de0:	2001      	movlt	r0, #1
 8010de2:	b002      	add	sp, #8
 8010de4:	4770      	bx	lr

08010de6 <abort>:
 8010de6:	b508      	push	{r3, lr}
 8010de8:	2006      	movs	r0, #6
 8010dea:	f000 fc73 	bl	80116d4 <raise>
 8010dee:	2001      	movs	r0, #1
 8010df0:	f7f1 f95a 	bl	80020a8 <_exit>

08010df4 <__assert_func>:
 8010df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010df6:	4614      	mov	r4, r2
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4b09      	ldr	r3, [pc, #36]	; (8010e20 <__assert_func+0x2c>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4605      	mov	r5, r0
 8010e00:	68d8      	ldr	r0, [r3, #12]
 8010e02:	b14c      	cbz	r4, 8010e18 <__assert_func+0x24>
 8010e04:	4b07      	ldr	r3, [pc, #28]	; (8010e24 <__assert_func+0x30>)
 8010e06:	9100      	str	r1, [sp, #0]
 8010e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e0c:	4906      	ldr	r1, [pc, #24]	; (8010e28 <__assert_func+0x34>)
 8010e0e:	462b      	mov	r3, r5
 8010e10:	f000 f81a 	bl	8010e48 <fiprintf>
 8010e14:	f7ff ffe7 	bl	8010de6 <abort>
 8010e18:	4b04      	ldr	r3, [pc, #16]	; (8010e2c <__assert_func+0x38>)
 8010e1a:	461c      	mov	r4, r3
 8010e1c:	e7f3      	b.n	8010e06 <__assert_func+0x12>
 8010e1e:	bf00      	nop
 8010e20:	200040c0 	.word	0x200040c0
 8010e24:	08017340 	.word	0x08017340
 8010e28:	0801734d 	.word	0x0801734d
 8010e2c:	0801737b 	.word	0x0801737b

08010e30 <atexit>:
 8010e30:	2300      	movs	r3, #0
 8010e32:	4601      	mov	r1, r0
 8010e34:	461a      	mov	r2, r3
 8010e36:	4618      	mov	r0, r3
 8010e38:	f000 bd5a 	b.w	80118f0 <__register_exitproc>

08010e3c <__errno>:
 8010e3c:	4b01      	ldr	r3, [pc, #4]	; (8010e44 <__errno+0x8>)
 8010e3e:	6818      	ldr	r0, [r3, #0]
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	200040c0 	.word	0x200040c0

08010e48 <fiprintf>:
 8010e48:	b40e      	push	{r1, r2, r3}
 8010e4a:	b503      	push	{r0, r1, lr}
 8010e4c:	4601      	mov	r1, r0
 8010e4e:	ab03      	add	r3, sp, #12
 8010e50:	4805      	ldr	r0, [pc, #20]	; (8010e68 <fiprintf+0x20>)
 8010e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e56:	6800      	ldr	r0, [r0, #0]
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	f000 f93f 	bl	80110dc <_vfiprintf_r>
 8010e5e:	b002      	add	sp, #8
 8010e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e64:	b003      	add	sp, #12
 8010e66:	4770      	bx	lr
 8010e68:	200040c0 	.word	0x200040c0

08010e6c <__libc_init_array>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	4d0d      	ldr	r5, [pc, #52]	; (8010ea4 <__libc_init_array+0x38>)
 8010e70:	4c0d      	ldr	r4, [pc, #52]	; (8010ea8 <__libc_init_array+0x3c>)
 8010e72:	1b64      	subs	r4, r4, r5
 8010e74:	10a4      	asrs	r4, r4, #2
 8010e76:	2600      	movs	r6, #0
 8010e78:	42a6      	cmp	r6, r4
 8010e7a:	d109      	bne.n	8010e90 <__libc_init_array+0x24>
 8010e7c:	4d0b      	ldr	r5, [pc, #44]	; (8010eac <__libc_init_array+0x40>)
 8010e7e:	4c0c      	ldr	r4, [pc, #48]	; (8010eb0 <__libc_init_array+0x44>)
 8010e80:	f001 f9fa 	bl	8012278 <_init>
 8010e84:	1b64      	subs	r4, r4, r5
 8010e86:	10a4      	asrs	r4, r4, #2
 8010e88:	2600      	movs	r6, #0
 8010e8a:	42a6      	cmp	r6, r4
 8010e8c:	d105      	bne.n	8010e9a <__libc_init_array+0x2e>
 8010e8e:	bd70      	pop	{r4, r5, r6, pc}
 8010e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e94:	4798      	blx	r3
 8010e96:	3601      	adds	r6, #1
 8010e98:	e7ee      	b.n	8010e78 <__libc_init_array+0xc>
 8010e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e9e:	4798      	blx	r3
 8010ea0:	3601      	adds	r6, #1
 8010ea2:	e7f2      	b.n	8010e8a <__libc_init_array+0x1e>
 8010ea4:	0801741c 	.word	0x0801741c
 8010ea8:	0801741c 	.word	0x0801741c
 8010eac:	0801741c 	.word	0x0801741c
 8010eb0:	08017420 	.word	0x08017420

08010eb4 <malloc>:
 8010eb4:	4b02      	ldr	r3, [pc, #8]	; (8010ec0 <malloc+0xc>)
 8010eb6:	4601      	mov	r1, r0
 8010eb8:	6818      	ldr	r0, [r3, #0]
 8010eba:	f000 b88b 	b.w	8010fd4 <_malloc_r>
 8010ebe:	bf00      	nop
 8010ec0:	200040c0 	.word	0x200040c0

08010ec4 <free>:
 8010ec4:	4b02      	ldr	r3, [pc, #8]	; (8010ed0 <free+0xc>)
 8010ec6:	4601      	mov	r1, r0
 8010ec8:	6818      	ldr	r0, [r3, #0]
 8010eca:	f000 b833 	b.w	8010f34 <_free_r>
 8010ece:	bf00      	nop
 8010ed0:	200040c0 	.word	0x200040c0

08010ed4 <memcpy>:
 8010ed4:	440a      	add	r2, r1
 8010ed6:	4291      	cmp	r1, r2
 8010ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010edc:	d100      	bne.n	8010ee0 <memcpy+0xc>
 8010ede:	4770      	bx	lr
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010eea:	4291      	cmp	r1, r2
 8010eec:	d1f9      	bne.n	8010ee2 <memcpy+0xe>
 8010eee:	bd10      	pop	{r4, pc}

08010ef0 <memmove>:
 8010ef0:	4288      	cmp	r0, r1
 8010ef2:	b510      	push	{r4, lr}
 8010ef4:	eb01 0402 	add.w	r4, r1, r2
 8010ef8:	d902      	bls.n	8010f00 <memmove+0x10>
 8010efa:	4284      	cmp	r4, r0
 8010efc:	4623      	mov	r3, r4
 8010efe:	d807      	bhi.n	8010f10 <memmove+0x20>
 8010f00:	1e43      	subs	r3, r0, #1
 8010f02:	42a1      	cmp	r1, r4
 8010f04:	d008      	beq.n	8010f18 <memmove+0x28>
 8010f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f0e:	e7f8      	b.n	8010f02 <memmove+0x12>
 8010f10:	4402      	add	r2, r0
 8010f12:	4601      	mov	r1, r0
 8010f14:	428a      	cmp	r2, r1
 8010f16:	d100      	bne.n	8010f1a <memmove+0x2a>
 8010f18:	bd10      	pop	{r4, pc}
 8010f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f22:	e7f7      	b.n	8010f14 <memmove+0x24>

08010f24 <memset>:
 8010f24:	4402      	add	r2, r0
 8010f26:	4603      	mov	r3, r0
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d100      	bne.n	8010f2e <memset+0xa>
 8010f2c:	4770      	bx	lr
 8010f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8010f32:	e7f9      	b.n	8010f28 <memset+0x4>

08010f34 <_free_r>:
 8010f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f36:	2900      	cmp	r1, #0
 8010f38:	d048      	beq.n	8010fcc <_free_r+0x98>
 8010f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f3e:	9001      	str	r0, [sp, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f1a1 0404 	sub.w	r4, r1, #4
 8010f46:	bfb8      	it	lt
 8010f48:	18e4      	addlt	r4, r4, r3
 8010f4a:	f000 ff53 	bl	8011df4 <__malloc_lock>
 8010f4e:	4a20      	ldr	r2, [pc, #128]	; (8010fd0 <_free_r+0x9c>)
 8010f50:	9801      	ldr	r0, [sp, #4]
 8010f52:	6813      	ldr	r3, [r2, #0]
 8010f54:	4615      	mov	r5, r2
 8010f56:	b933      	cbnz	r3, 8010f66 <_free_r+0x32>
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	6014      	str	r4, [r2, #0]
 8010f5c:	b003      	add	sp, #12
 8010f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f62:	f000 bf4d 	b.w	8011e00 <__malloc_unlock>
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	d90b      	bls.n	8010f82 <_free_r+0x4e>
 8010f6a:	6821      	ldr	r1, [r4, #0]
 8010f6c:	1862      	adds	r2, r4, r1
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	bf04      	itt	eq
 8010f72:	681a      	ldreq	r2, [r3, #0]
 8010f74:	685b      	ldreq	r3, [r3, #4]
 8010f76:	6063      	str	r3, [r4, #4]
 8010f78:	bf04      	itt	eq
 8010f7a:	1852      	addeq	r2, r2, r1
 8010f7c:	6022      	streq	r2, [r4, #0]
 8010f7e:	602c      	str	r4, [r5, #0]
 8010f80:	e7ec      	b.n	8010f5c <_free_r+0x28>
 8010f82:	461a      	mov	r2, r3
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	b10b      	cbz	r3, 8010f8c <_free_r+0x58>
 8010f88:	42a3      	cmp	r3, r4
 8010f8a:	d9fa      	bls.n	8010f82 <_free_r+0x4e>
 8010f8c:	6811      	ldr	r1, [r2, #0]
 8010f8e:	1855      	adds	r5, r2, r1
 8010f90:	42a5      	cmp	r5, r4
 8010f92:	d10b      	bne.n	8010fac <_free_r+0x78>
 8010f94:	6824      	ldr	r4, [r4, #0]
 8010f96:	4421      	add	r1, r4
 8010f98:	1854      	adds	r4, r2, r1
 8010f9a:	42a3      	cmp	r3, r4
 8010f9c:	6011      	str	r1, [r2, #0]
 8010f9e:	d1dd      	bne.n	8010f5c <_free_r+0x28>
 8010fa0:	681c      	ldr	r4, [r3, #0]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	6053      	str	r3, [r2, #4]
 8010fa6:	4421      	add	r1, r4
 8010fa8:	6011      	str	r1, [r2, #0]
 8010faa:	e7d7      	b.n	8010f5c <_free_r+0x28>
 8010fac:	d902      	bls.n	8010fb4 <_free_r+0x80>
 8010fae:	230c      	movs	r3, #12
 8010fb0:	6003      	str	r3, [r0, #0]
 8010fb2:	e7d3      	b.n	8010f5c <_free_r+0x28>
 8010fb4:	6825      	ldr	r5, [r4, #0]
 8010fb6:	1961      	adds	r1, r4, r5
 8010fb8:	428b      	cmp	r3, r1
 8010fba:	bf04      	itt	eq
 8010fbc:	6819      	ldreq	r1, [r3, #0]
 8010fbe:	685b      	ldreq	r3, [r3, #4]
 8010fc0:	6063      	str	r3, [r4, #4]
 8010fc2:	bf04      	itt	eq
 8010fc4:	1949      	addeq	r1, r1, r5
 8010fc6:	6021      	streq	r1, [r4, #0]
 8010fc8:	6054      	str	r4, [r2, #4]
 8010fca:	e7c7      	b.n	8010f5c <_free_r+0x28>
 8010fcc:	b003      	add	sp, #12
 8010fce:	bd30      	pop	{r4, r5, pc}
 8010fd0:	20016f40 	.word	0x20016f40

08010fd4 <_malloc_r>:
 8010fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd6:	1ccd      	adds	r5, r1, #3
 8010fd8:	f025 0503 	bic.w	r5, r5, #3
 8010fdc:	3508      	adds	r5, #8
 8010fde:	2d0c      	cmp	r5, #12
 8010fe0:	bf38      	it	cc
 8010fe2:	250c      	movcc	r5, #12
 8010fe4:	2d00      	cmp	r5, #0
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	db01      	blt.n	8010fee <_malloc_r+0x1a>
 8010fea:	42a9      	cmp	r1, r5
 8010fec:	d903      	bls.n	8010ff6 <_malloc_r+0x22>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	6033      	str	r3, [r6, #0]
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff6:	f000 fefd 	bl	8011df4 <__malloc_lock>
 8010ffa:	4921      	ldr	r1, [pc, #132]	; (8011080 <_malloc_r+0xac>)
 8010ffc:	680a      	ldr	r2, [r1, #0]
 8010ffe:	4614      	mov	r4, r2
 8011000:	b99c      	cbnz	r4, 801102a <_malloc_r+0x56>
 8011002:	4f20      	ldr	r7, [pc, #128]	; (8011084 <_malloc_r+0xb0>)
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	b923      	cbnz	r3, 8011012 <_malloc_r+0x3e>
 8011008:	4621      	mov	r1, r4
 801100a:	4630      	mov	r0, r6
 801100c:	f000 fb2a 	bl	8011664 <_sbrk_r>
 8011010:	6038      	str	r0, [r7, #0]
 8011012:	4629      	mov	r1, r5
 8011014:	4630      	mov	r0, r6
 8011016:	f000 fb25 	bl	8011664 <_sbrk_r>
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	d123      	bne.n	8011066 <_malloc_r+0x92>
 801101e:	230c      	movs	r3, #12
 8011020:	6033      	str	r3, [r6, #0]
 8011022:	4630      	mov	r0, r6
 8011024:	f000 feec 	bl	8011e00 <__malloc_unlock>
 8011028:	e7e3      	b.n	8010ff2 <_malloc_r+0x1e>
 801102a:	6823      	ldr	r3, [r4, #0]
 801102c:	1b5b      	subs	r3, r3, r5
 801102e:	d417      	bmi.n	8011060 <_malloc_r+0x8c>
 8011030:	2b0b      	cmp	r3, #11
 8011032:	d903      	bls.n	801103c <_malloc_r+0x68>
 8011034:	6023      	str	r3, [r4, #0]
 8011036:	441c      	add	r4, r3
 8011038:	6025      	str	r5, [r4, #0]
 801103a:	e004      	b.n	8011046 <_malloc_r+0x72>
 801103c:	6863      	ldr	r3, [r4, #4]
 801103e:	42a2      	cmp	r2, r4
 8011040:	bf0c      	ite	eq
 8011042:	600b      	streq	r3, [r1, #0]
 8011044:	6053      	strne	r3, [r2, #4]
 8011046:	4630      	mov	r0, r6
 8011048:	f000 feda 	bl	8011e00 <__malloc_unlock>
 801104c:	f104 000b 	add.w	r0, r4, #11
 8011050:	1d23      	adds	r3, r4, #4
 8011052:	f020 0007 	bic.w	r0, r0, #7
 8011056:	1ac2      	subs	r2, r0, r3
 8011058:	d0cc      	beq.n	8010ff4 <_malloc_r+0x20>
 801105a:	1a1b      	subs	r3, r3, r0
 801105c:	50a3      	str	r3, [r4, r2]
 801105e:	e7c9      	b.n	8010ff4 <_malloc_r+0x20>
 8011060:	4622      	mov	r2, r4
 8011062:	6864      	ldr	r4, [r4, #4]
 8011064:	e7cc      	b.n	8011000 <_malloc_r+0x2c>
 8011066:	1cc4      	adds	r4, r0, #3
 8011068:	f024 0403 	bic.w	r4, r4, #3
 801106c:	42a0      	cmp	r0, r4
 801106e:	d0e3      	beq.n	8011038 <_malloc_r+0x64>
 8011070:	1a21      	subs	r1, r4, r0
 8011072:	4630      	mov	r0, r6
 8011074:	f000 faf6 	bl	8011664 <_sbrk_r>
 8011078:	3001      	adds	r0, #1
 801107a:	d1dd      	bne.n	8011038 <_malloc_r+0x64>
 801107c:	e7cf      	b.n	801101e <_malloc_r+0x4a>
 801107e:	bf00      	nop
 8011080:	20016f40 	.word	0x20016f40
 8011084:	20016f44 	.word	0x20016f44

08011088 <__sfputc_r>:
 8011088:	6893      	ldr	r3, [r2, #8]
 801108a:	3b01      	subs	r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	b410      	push	{r4}
 8011090:	6093      	str	r3, [r2, #8]
 8011092:	da08      	bge.n	80110a6 <__sfputc_r+0x1e>
 8011094:	6994      	ldr	r4, [r2, #24]
 8011096:	42a3      	cmp	r3, r4
 8011098:	db01      	blt.n	801109e <__sfputc_r+0x16>
 801109a:	290a      	cmp	r1, #10
 801109c:	d103      	bne.n	80110a6 <__sfputc_r+0x1e>
 801109e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110a2:	f000 bb65 	b.w	8011770 <__swbuf_r>
 80110a6:	6813      	ldr	r3, [r2, #0]
 80110a8:	1c58      	adds	r0, r3, #1
 80110aa:	6010      	str	r0, [r2, #0]
 80110ac:	7019      	strb	r1, [r3, #0]
 80110ae:	4608      	mov	r0, r1
 80110b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <__sfputs_r>:
 80110b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b8:	4606      	mov	r6, r0
 80110ba:	460f      	mov	r7, r1
 80110bc:	4614      	mov	r4, r2
 80110be:	18d5      	adds	r5, r2, r3
 80110c0:	42ac      	cmp	r4, r5
 80110c2:	d101      	bne.n	80110c8 <__sfputs_r+0x12>
 80110c4:	2000      	movs	r0, #0
 80110c6:	e007      	b.n	80110d8 <__sfputs_r+0x22>
 80110c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110cc:	463a      	mov	r2, r7
 80110ce:	4630      	mov	r0, r6
 80110d0:	f7ff ffda 	bl	8011088 <__sfputc_r>
 80110d4:	1c43      	adds	r3, r0, #1
 80110d6:	d1f3      	bne.n	80110c0 <__sfputs_r+0xa>
 80110d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110dc <_vfiprintf_r>:
 80110dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e0:	460d      	mov	r5, r1
 80110e2:	b09d      	sub	sp, #116	; 0x74
 80110e4:	4614      	mov	r4, r2
 80110e6:	4698      	mov	r8, r3
 80110e8:	4606      	mov	r6, r0
 80110ea:	b118      	cbz	r0, 80110f4 <_vfiprintf_r+0x18>
 80110ec:	6983      	ldr	r3, [r0, #24]
 80110ee:	b90b      	cbnz	r3, 80110f4 <_vfiprintf_r+0x18>
 80110f0:	f000 fd7a 	bl	8011be8 <__sinit>
 80110f4:	4b89      	ldr	r3, [pc, #548]	; (801131c <_vfiprintf_r+0x240>)
 80110f6:	429d      	cmp	r5, r3
 80110f8:	d11b      	bne.n	8011132 <_vfiprintf_r+0x56>
 80110fa:	6875      	ldr	r5, [r6, #4]
 80110fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110fe:	07d9      	lsls	r1, r3, #31
 8011100:	d405      	bmi.n	801110e <_vfiprintf_r+0x32>
 8011102:	89ab      	ldrh	r3, [r5, #12]
 8011104:	059a      	lsls	r2, r3, #22
 8011106:	d402      	bmi.n	801110e <_vfiprintf_r+0x32>
 8011108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801110a:	f000 fe0b 	bl	8011d24 <__retarget_lock_acquire_recursive>
 801110e:	89ab      	ldrh	r3, [r5, #12]
 8011110:	071b      	lsls	r3, r3, #28
 8011112:	d501      	bpl.n	8011118 <_vfiprintf_r+0x3c>
 8011114:	692b      	ldr	r3, [r5, #16]
 8011116:	b9eb      	cbnz	r3, 8011154 <_vfiprintf_r+0x78>
 8011118:	4629      	mov	r1, r5
 801111a:	4630      	mov	r0, r6
 801111c:	f000 fb7a 	bl	8011814 <__swsetup_r>
 8011120:	b1c0      	cbz	r0, 8011154 <_vfiprintf_r+0x78>
 8011122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011124:	07dc      	lsls	r4, r3, #31
 8011126:	d50e      	bpl.n	8011146 <_vfiprintf_r+0x6a>
 8011128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801112c:	b01d      	add	sp, #116	; 0x74
 801112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011132:	4b7b      	ldr	r3, [pc, #492]	; (8011320 <_vfiprintf_r+0x244>)
 8011134:	429d      	cmp	r5, r3
 8011136:	d101      	bne.n	801113c <_vfiprintf_r+0x60>
 8011138:	68b5      	ldr	r5, [r6, #8]
 801113a:	e7df      	b.n	80110fc <_vfiprintf_r+0x20>
 801113c:	4b79      	ldr	r3, [pc, #484]	; (8011324 <_vfiprintf_r+0x248>)
 801113e:	429d      	cmp	r5, r3
 8011140:	bf08      	it	eq
 8011142:	68f5      	ldreq	r5, [r6, #12]
 8011144:	e7da      	b.n	80110fc <_vfiprintf_r+0x20>
 8011146:	89ab      	ldrh	r3, [r5, #12]
 8011148:	0598      	lsls	r0, r3, #22
 801114a:	d4ed      	bmi.n	8011128 <_vfiprintf_r+0x4c>
 801114c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801114e:	f000 fdeb 	bl	8011d28 <__retarget_lock_release_recursive>
 8011152:	e7e9      	b.n	8011128 <_vfiprintf_r+0x4c>
 8011154:	2300      	movs	r3, #0
 8011156:	9309      	str	r3, [sp, #36]	; 0x24
 8011158:	2320      	movs	r3, #32
 801115a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801115e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011162:	2330      	movs	r3, #48	; 0x30
 8011164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011328 <_vfiprintf_r+0x24c>
 8011168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801116c:	f04f 0901 	mov.w	r9, #1
 8011170:	4623      	mov	r3, r4
 8011172:	469a      	mov	sl, r3
 8011174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011178:	b10a      	cbz	r2, 801117e <_vfiprintf_r+0xa2>
 801117a:	2a25      	cmp	r2, #37	; 0x25
 801117c:	d1f9      	bne.n	8011172 <_vfiprintf_r+0x96>
 801117e:	ebba 0b04 	subs.w	fp, sl, r4
 8011182:	d00b      	beq.n	801119c <_vfiprintf_r+0xc0>
 8011184:	465b      	mov	r3, fp
 8011186:	4622      	mov	r2, r4
 8011188:	4629      	mov	r1, r5
 801118a:	4630      	mov	r0, r6
 801118c:	f7ff ff93 	bl	80110b6 <__sfputs_r>
 8011190:	3001      	adds	r0, #1
 8011192:	f000 80aa 	beq.w	80112ea <_vfiprintf_r+0x20e>
 8011196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011198:	445a      	add	r2, fp
 801119a:	9209      	str	r2, [sp, #36]	; 0x24
 801119c:	f89a 3000 	ldrb.w	r3, [sl]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 80a2 	beq.w	80112ea <_vfiprintf_r+0x20e>
 80111a6:	2300      	movs	r3, #0
 80111a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111b0:	f10a 0a01 	add.w	sl, sl, #1
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	9307      	str	r3, [sp, #28]
 80111b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111bc:	931a      	str	r3, [sp, #104]	; 0x68
 80111be:	4654      	mov	r4, sl
 80111c0:	2205      	movs	r2, #5
 80111c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111c6:	4858      	ldr	r0, [pc, #352]	; (8011328 <_vfiprintf_r+0x24c>)
 80111c8:	f7ef f80a 	bl	80001e0 <memchr>
 80111cc:	9a04      	ldr	r2, [sp, #16]
 80111ce:	b9d8      	cbnz	r0, 8011208 <_vfiprintf_r+0x12c>
 80111d0:	06d1      	lsls	r1, r2, #27
 80111d2:	bf44      	itt	mi
 80111d4:	2320      	movmi	r3, #32
 80111d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111da:	0713      	lsls	r3, r2, #28
 80111dc:	bf44      	itt	mi
 80111de:	232b      	movmi	r3, #43	; 0x2b
 80111e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e4:	f89a 3000 	ldrb.w	r3, [sl]
 80111e8:	2b2a      	cmp	r3, #42	; 0x2a
 80111ea:	d015      	beq.n	8011218 <_vfiprintf_r+0x13c>
 80111ec:	9a07      	ldr	r2, [sp, #28]
 80111ee:	4654      	mov	r4, sl
 80111f0:	2000      	movs	r0, #0
 80111f2:	f04f 0c0a 	mov.w	ip, #10
 80111f6:	4621      	mov	r1, r4
 80111f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111fc:	3b30      	subs	r3, #48	; 0x30
 80111fe:	2b09      	cmp	r3, #9
 8011200:	d94e      	bls.n	80112a0 <_vfiprintf_r+0x1c4>
 8011202:	b1b0      	cbz	r0, 8011232 <_vfiprintf_r+0x156>
 8011204:	9207      	str	r2, [sp, #28]
 8011206:	e014      	b.n	8011232 <_vfiprintf_r+0x156>
 8011208:	eba0 0308 	sub.w	r3, r0, r8
 801120c:	fa09 f303 	lsl.w	r3, r9, r3
 8011210:	4313      	orrs	r3, r2
 8011212:	9304      	str	r3, [sp, #16]
 8011214:	46a2      	mov	sl, r4
 8011216:	e7d2      	b.n	80111be <_vfiprintf_r+0xe2>
 8011218:	9b03      	ldr	r3, [sp, #12]
 801121a:	1d19      	adds	r1, r3, #4
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	9103      	str	r1, [sp, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	bfbb      	ittet	lt
 8011224:	425b      	neglt	r3, r3
 8011226:	f042 0202 	orrlt.w	r2, r2, #2
 801122a:	9307      	strge	r3, [sp, #28]
 801122c:	9307      	strlt	r3, [sp, #28]
 801122e:	bfb8      	it	lt
 8011230:	9204      	strlt	r2, [sp, #16]
 8011232:	7823      	ldrb	r3, [r4, #0]
 8011234:	2b2e      	cmp	r3, #46	; 0x2e
 8011236:	d10c      	bne.n	8011252 <_vfiprintf_r+0x176>
 8011238:	7863      	ldrb	r3, [r4, #1]
 801123a:	2b2a      	cmp	r3, #42	; 0x2a
 801123c:	d135      	bne.n	80112aa <_vfiprintf_r+0x1ce>
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	1d1a      	adds	r2, r3, #4
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	9203      	str	r2, [sp, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	bfb8      	it	lt
 801124a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801124e:	3402      	adds	r4, #2
 8011250:	9305      	str	r3, [sp, #20]
 8011252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011338 <_vfiprintf_r+0x25c>
 8011256:	7821      	ldrb	r1, [r4, #0]
 8011258:	2203      	movs	r2, #3
 801125a:	4650      	mov	r0, sl
 801125c:	f7ee ffc0 	bl	80001e0 <memchr>
 8011260:	b140      	cbz	r0, 8011274 <_vfiprintf_r+0x198>
 8011262:	2340      	movs	r3, #64	; 0x40
 8011264:	eba0 000a 	sub.w	r0, r0, sl
 8011268:	fa03 f000 	lsl.w	r0, r3, r0
 801126c:	9b04      	ldr	r3, [sp, #16]
 801126e:	4303      	orrs	r3, r0
 8011270:	3401      	adds	r4, #1
 8011272:	9304      	str	r3, [sp, #16]
 8011274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011278:	482c      	ldr	r0, [pc, #176]	; (801132c <_vfiprintf_r+0x250>)
 801127a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801127e:	2206      	movs	r2, #6
 8011280:	f7ee ffae 	bl	80001e0 <memchr>
 8011284:	2800      	cmp	r0, #0
 8011286:	d03f      	beq.n	8011308 <_vfiprintf_r+0x22c>
 8011288:	4b29      	ldr	r3, [pc, #164]	; (8011330 <_vfiprintf_r+0x254>)
 801128a:	bb1b      	cbnz	r3, 80112d4 <_vfiprintf_r+0x1f8>
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	3307      	adds	r3, #7
 8011290:	f023 0307 	bic.w	r3, r3, #7
 8011294:	3308      	adds	r3, #8
 8011296:	9303      	str	r3, [sp, #12]
 8011298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801129a:	443b      	add	r3, r7
 801129c:	9309      	str	r3, [sp, #36]	; 0x24
 801129e:	e767      	b.n	8011170 <_vfiprintf_r+0x94>
 80112a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80112a4:	460c      	mov	r4, r1
 80112a6:	2001      	movs	r0, #1
 80112a8:	e7a5      	b.n	80111f6 <_vfiprintf_r+0x11a>
 80112aa:	2300      	movs	r3, #0
 80112ac:	3401      	adds	r4, #1
 80112ae:	9305      	str	r3, [sp, #20]
 80112b0:	4619      	mov	r1, r3
 80112b2:	f04f 0c0a 	mov.w	ip, #10
 80112b6:	4620      	mov	r0, r4
 80112b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112bc:	3a30      	subs	r2, #48	; 0x30
 80112be:	2a09      	cmp	r2, #9
 80112c0:	d903      	bls.n	80112ca <_vfiprintf_r+0x1ee>
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d0c5      	beq.n	8011252 <_vfiprintf_r+0x176>
 80112c6:	9105      	str	r1, [sp, #20]
 80112c8:	e7c3      	b.n	8011252 <_vfiprintf_r+0x176>
 80112ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80112ce:	4604      	mov	r4, r0
 80112d0:	2301      	movs	r3, #1
 80112d2:	e7f0      	b.n	80112b6 <_vfiprintf_r+0x1da>
 80112d4:	ab03      	add	r3, sp, #12
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	462a      	mov	r2, r5
 80112da:	4b16      	ldr	r3, [pc, #88]	; (8011334 <_vfiprintf_r+0x258>)
 80112dc:	a904      	add	r1, sp, #16
 80112de:	4630      	mov	r0, r6
 80112e0:	f3af 8000 	nop.w
 80112e4:	4607      	mov	r7, r0
 80112e6:	1c78      	adds	r0, r7, #1
 80112e8:	d1d6      	bne.n	8011298 <_vfiprintf_r+0x1bc>
 80112ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ec:	07d9      	lsls	r1, r3, #31
 80112ee:	d405      	bmi.n	80112fc <_vfiprintf_r+0x220>
 80112f0:	89ab      	ldrh	r3, [r5, #12]
 80112f2:	059a      	lsls	r2, r3, #22
 80112f4:	d402      	bmi.n	80112fc <_vfiprintf_r+0x220>
 80112f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112f8:	f000 fd16 	bl	8011d28 <__retarget_lock_release_recursive>
 80112fc:	89ab      	ldrh	r3, [r5, #12]
 80112fe:	065b      	lsls	r3, r3, #25
 8011300:	f53f af12 	bmi.w	8011128 <_vfiprintf_r+0x4c>
 8011304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011306:	e711      	b.n	801112c <_vfiprintf_r+0x50>
 8011308:	ab03      	add	r3, sp, #12
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	462a      	mov	r2, r5
 801130e:	4b09      	ldr	r3, [pc, #36]	; (8011334 <_vfiprintf_r+0x258>)
 8011310:	a904      	add	r1, sp, #16
 8011312:	4630      	mov	r0, r6
 8011314:	f000 f880 	bl	8011418 <_printf_i>
 8011318:	e7e4      	b.n	80112e4 <_vfiprintf_r+0x208>
 801131a:	bf00      	nop
 801131c:	080173d4 	.word	0x080173d4
 8011320:	080173f4 	.word	0x080173f4
 8011324:	080173b4 	.word	0x080173b4
 8011328:	08017380 	.word	0x08017380
 801132c:	0801738a 	.word	0x0801738a
 8011330:	00000000 	.word	0x00000000
 8011334:	080110b7 	.word	0x080110b7
 8011338:	08017386 	.word	0x08017386

0801133c <_printf_common>:
 801133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011340:	4616      	mov	r6, r2
 8011342:	4699      	mov	r9, r3
 8011344:	688a      	ldr	r2, [r1, #8]
 8011346:	690b      	ldr	r3, [r1, #16]
 8011348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801134c:	4293      	cmp	r3, r2
 801134e:	bfb8      	it	lt
 8011350:	4613      	movlt	r3, r2
 8011352:	6033      	str	r3, [r6, #0]
 8011354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011358:	4607      	mov	r7, r0
 801135a:	460c      	mov	r4, r1
 801135c:	b10a      	cbz	r2, 8011362 <_printf_common+0x26>
 801135e:	3301      	adds	r3, #1
 8011360:	6033      	str	r3, [r6, #0]
 8011362:	6823      	ldr	r3, [r4, #0]
 8011364:	0699      	lsls	r1, r3, #26
 8011366:	bf42      	ittt	mi
 8011368:	6833      	ldrmi	r3, [r6, #0]
 801136a:	3302      	addmi	r3, #2
 801136c:	6033      	strmi	r3, [r6, #0]
 801136e:	6825      	ldr	r5, [r4, #0]
 8011370:	f015 0506 	ands.w	r5, r5, #6
 8011374:	d106      	bne.n	8011384 <_printf_common+0x48>
 8011376:	f104 0a19 	add.w	sl, r4, #25
 801137a:	68e3      	ldr	r3, [r4, #12]
 801137c:	6832      	ldr	r2, [r6, #0]
 801137e:	1a9b      	subs	r3, r3, r2
 8011380:	42ab      	cmp	r3, r5
 8011382:	dc26      	bgt.n	80113d2 <_printf_common+0x96>
 8011384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011388:	1e13      	subs	r3, r2, #0
 801138a:	6822      	ldr	r2, [r4, #0]
 801138c:	bf18      	it	ne
 801138e:	2301      	movne	r3, #1
 8011390:	0692      	lsls	r2, r2, #26
 8011392:	d42b      	bmi.n	80113ec <_printf_common+0xb0>
 8011394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011398:	4649      	mov	r1, r9
 801139a:	4638      	mov	r0, r7
 801139c:	47c0      	blx	r8
 801139e:	3001      	adds	r0, #1
 80113a0:	d01e      	beq.n	80113e0 <_printf_common+0xa4>
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	68e5      	ldr	r5, [r4, #12]
 80113a6:	6832      	ldr	r2, [r6, #0]
 80113a8:	f003 0306 	and.w	r3, r3, #6
 80113ac:	2b04      	cmp	r3, #4
 80113ae:	bf08      	it	eq
 80113b0:	1aad      	subeq	r5, r5, r2
 80113b2:	68a3      	ldr	r3, [r4, #8]
 80113b4:	6922      	ldr	r2, [r4, #16]
 80113b6:	bf0c      	ite	eq
 80113b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113bc:	2500      	movne	r5, #0
 80113be:	4293      	cmp	r3, r2
 80113c0:	bfc4      	itt	gt
 80113c2:	1a9b      	subgt	r3, r3, r2
 80113c4:	18ed      	addgt	r5, r5, r3
 80113c6:	2600      	movs	r6, #0
 80113c8:	341a      	adds	r4, #26
 80113ca:	42b5      	cmp	r5, r6
 80113cc:	d11a      	bne.n	8011404 <_printf_common+0xc8>
 80113ce:	2000      	movs	r0, #0
 80113d0:	e008      	b.n	80113e4 <_printf_common+0xa8>
 80113d2:	2301      	movs	r3, #1
 80113d4:	4652      	mov	r2, sl
 80113d6:	4649      	mov	r1, r9
 80113d8:	4638      	mov	r0, r7
 80113da:	47c0      	blx	r8
 80113dc:	3001      	adds	r0, #1
 80113de:	d103      	bne.n	80113e8 <_printf_common+0xac>
 80113e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e8:	3501      	adds	r5, #1
 80113ea:	e7c6      	b.n	801137a <_printf_common+0x3e>
 80113ec:	18e1      	adds	r1, r4, r3
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	2030      	movs	r0, #48	; 0x30
 80113f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113f6:	4422      	add	r2, r4
 80113f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011400:	3302      	adds	r3, #2
 8011402:	e7c7      	b.n	8011394 <_printf_common+0x58>
 8011404:	2301      	movs	r3, #1
 8011406:	4622      	mov	r2, r4
 8011408:	4649      	mov	r1, r9
 801140a:	4638      	mov	r0, r7
 801140c:	47c0      	blx	r8
 801140e:	3001      	adds	r0, #1
 8011410:	d0e6      	beq.n	80113e0 <_printf_common+0xa4>
 8011412:	3601      	adds	r6, #1
 8011414:	e7d9      	b.n	80113ca <_printf_common+0x8e>
	...

08011418 <_printf_i>:
 8011418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801141c:	460c      	mov	r4, r1
 801141e:	4691      	mov	r9, r2
 8011420:	7e27      	ldrb	r7, [r4, #24]
 8011422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011424:	2f78      	cmp	r7, #120	; 0x78
 8011426:	4680      	mov	r8, r0
 8011428:	469a      	mov	sl, r3
 801142a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801142e:	d807      	bhi.n	8011440 <_printf_i+0x28>
 8011430:	2f62      	cmp	r7, #98	; 0x62
 8011432:	d80a      	bhi.n	801144a <_printf_i+0x32>
 8011434:	2f00      	cmp	r7, #0
 8011436:	f000 80d8 	beq.w	80115ea <_printf_i+0x1d2>
 801143a:	2f58      	cmp	r7, #88	; 0x58
 801143c:	f000 80a3 	beq.w	8011586 <_printf_i+0x16e>
 8011440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011448:	e03a      	b.n	80114c0 <_printf_i+0xa8>
 801144a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801144e:	2b15      	cmp	r3, #21
 8011450:	d8f6      	bhi.n	8011440 <_printf_i+0x28>
 8011452:	a001      	add	r0, pc, #4	; (adr r0, 8011458 <_printf_i+0x40>)
 8011454:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011458:	080114b1 	.word	0x080114b1
 801145c:	080114c5 	.word	0x080114c5
 8011460:	08011441 	.word	0x08011441
 8011464:	08011441 	.word	0x08011441
 8011468:	08011441 	.word	0x08011441
 801146c:	08011441 	.word	0x08011441
 8011470:	080114c5 	.word	0x080114c5
 8011474:	08011441 	.word	0x08011441
 8011478:	08011441 	.word	0x08011441
 801147c:	08011441 	.word	0x08011441
 8011480:	08011441 	.word	0x08011441
 8011484:	080115d1 	.word	0x080115d1
 8011488:	080114f5 	.word	0x080114f5
 801148c:	080115b3 	.word	0x080115b3
 8011490:	08011441 	.word	0x08011441
 8011494:	08011441 	.word	0x08011441
 8011498:	080115f3 	.word	0x080115f3
 801149c:	08011441 	.word	0x08011441
 80114a0:	080114f5 	.word	0x080114f5
 80114a4:	08011441 	.word	0x08011441
 80114a8:	08011441 	.word	0x08011441
 80114ac:	080115bb 	.word	0x080115bb
 80114b0:	680b      	ldr	r3, [r1, #0]
 80114b2:	1d1a      	adds	r2, r3, #4
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	600a      	str	r2, [r1, #0]
 80114b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80114bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114c0:	2301      	movs	r3, #1
 80114c2:	e0a3      	b.n	801160c <_printf_i+0x1f4>
 80114c4:	6825      	ldr	r5, [r4, #0]
 80114c6:	6808      	ldr	r0, [r1, #0]
 80114c8:	062e      	lsls	r6, r5, #24
 80114ca:	f100 0304 	add.w	r3, r0, #4
 80114ce:	d50a      	bpl.n	80114e6 <_printf_i+0xce>
 80114d0:	6805      	ldr	r5, [r0, #0]
 80114d2:	600b      	str	r3, [r1, #0]
 80114d4:	2d00      	cmp	r5, #0
 80114d6:	da03      	bge.n	80114e0 <_printf_i+0xc8>
 80114d8:	232d      	movs	r3, #45	; 0x2d
 80114da:	426d      	negs	r5, r5
 80114dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114e0:	485e      	ldr	r0, [pc, #376]	; (801165c <_printf_i+0x244>)
 80114e2:	230a      	movs	r3, #10
 80114e4:	e019      	b.n	801151a <_printf_i+0x102>
 80114e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80114ea:	6805      	ldr	r5, [r0, #0]
 80114ec:	600b      	str	r3, [r1, #0]
 80114ee:	bf18      	it	ne
 80114f0:	b22d      	sxthne	r5, r5
 80114f2:	e7ef      	b.n	80114d4 <_printf_i+0xbc>
 80114f4:	680b      	ldr	r3, [r1, #0]
 80114f6:	6825      	ldr	r5, [r4, #0]
 80114f8:	1d18      	adds	r0, r3, #4
 80114fa:	6008      	str	r0, [r1, #0]
 80114fc:	0628      	lsls	r0, r5, #24
 80114fe:	d501      	bpl.n	8011504 <_printf_i+0xec>
 8011500:	681d      	ldr	r5, [r3, #0]
 8011502:	e002      	b.n	801150a <_printf_i+0xf2>
 8011504:	0669      	lsls	r1, r5, #25
 8011506:	d5fb      	bpl.n	8011500 <_printf_i+0xe8>
 8011508:	881d      	ldrh	r5, [r3, #0]
 801150a:	4854      	ldr	r0, [pc, #336]	; (801165c <_printf_i+0x244>)
 801150c:	2f6f      	cmp	r7, #111	; 0x6f
 801150e:	bf0c      	ite	eq
 8011510:	2308      	moveq	r3, #8
 8011512:	230a      	movne	r3, #10
 8011514:	2100      	movs	r1, #0
 8011516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801151a:	6866      	ldr	r6, [r4, #4]
 801151c:	60a6      	str	r6, [r4, #8]
 801151e:	2e00      	cmp	r6, #0
 8011520:	bfa2      	ittt	ge
 8011522:	6821      	ldrge	r1, [r4, #0]
 8011524:	f021 0104 	bicge.w	r1, r1, #4
 8011528:	6021      	strge	r1, [r4, #0]
 801152a:	b90d      	cbnz	r5, 8011530 <_printf_i+0x118>
 801152c:	2e00      	cmp	r6, #0
 801152e:	d04d      	beq.n	80115cc <_printf_i+0x1b4>
 8011530:	4616      	mov	r6, r2
 8011532:	fbb5 f1f3 	udiv	r1, r5, r3
 8011536:	fb03 5711 	mls	r7, r3, r1, r5
 801153a:	5dc7      	ldrb	r7, [r0, r7]
 801153c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011540:	462f      	mov	r7, r5
 8011542:	42bb      	cmp	r3, r7
 8011544:	460d      	mov	r5, r1
 8011546:	d9f4      	bls.n	8011532 <_printf_i+0x11a>
 8011548:	2b08      	cmp	r3, #8
 801154a:	d10b      	bne.n	8011564 <_printf_i+0x14c>
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	07df      	lsls	r7, r3, #31
 8011550:	d508      	bpl.n	8011564 <_printf_i+0x14c>
 8011552:	6923      	ldr	r3, [r4, #16]
 8011554:	6861      	ldr	r1, [r4, #4]
 8011556:	4299      	cmp	r1, r3
 8011558:	bfde      	ittt	le
 801155a:	2330      	movle	r3, #48	; 0x30
 801155c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011560:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011564:	1b92      	subs	r2, r2, r6
 8011566:	6122      	str	r2, [r4, #16]
 8011568:	f8cd a000 	str.w	sl, [sp]
 801156c:	464b      	mov	r3, r9
 801156e:	aa03      	add	r2, sp, #12
 8011570:	4621      	mov	r1, r4
 8011572:	4640      	mov	r0, r8
 8011574:	f7ff fee2 	bl	801133c <_printf_common>
 8011578:	3001      	adds	r0, #1
 801157a:	d14c      	bne.n	8011616 <_printf_i+0x1fe>
 801157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011580:	b004      	add	sp, #16
 8011582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011586:	4835      	ldr	r0, [pc, #212]	; (801165c <_printf_i+0x244>)
 8011588:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	680e      	ldr	r6, [r1, #0]
 8011590:	061f      	lsls	r7, r3, #24
 8011592:	f856 5b04 	ldr.w	r5, [r6], #4
 8011596:	600e      	str	r6, [r1, #0]
 8011598:	d514      	bpl.n	80115c4 <_printf_i+0x1ac>
 801159a:	07d9      	lsls	r1, r3, #31
 801159c:	bf44      	itt	mi
 801159e:	f043 0320 	orrmi.w	r3, r3, #32
 80115a2:	6023      	strmi	r3, [r4, #0]
 80115a4:	b91d      	cbnz	r5, 80115ae <_printf_i+0x196>
 80115a6:	6823      	ldr	r3, [r4, #0]
 80115a8:	f023 0320 	bic.w	r3, r3, #32
 80115ac:	6023      	str	r3, [r4, #0]
 80115ae:	2310      	movs	r3, #16
 80115b0:	e7b0      	b.n	8011514 <_printf_i+0xfc>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	f043 0320 	orr.w	r3, r3, #32
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	2378      	movs	r3, #120	; 0x78
 80115bc:	4828      	ldr	r0, [pc, #160]	; (8011660 <_printf_i+0x248>)
 80115be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115c2:	e7e3      	b.n	801158c <_printf_i+0x174>
 80115c4:	065e      	lsls	r6, r3, #25
 80115c6:	bf48      	it	mi
 80115c8:	b2ad      	uxthmi	r5, r5
 80115ca:	e7e6      	b.n	801159a <_printf_i+0x182>
 80115cc:	4616      	mov	r6, r2
 80115ce:	e7bb      	b.n	8011548 <_printf_i+0x130>
 80115d0:	680b      	ldr	r3, [r1, #0]
 80115d2:	6826      	ldr	r6, [r4, #0]
 80115d4:	6960      	ldr	r0, [r4, #20]
 80115d6:	1d1d      	adds	r5, r3, #4
 80115d8:	600d      	str	r5, [r1, #0]
 80115da:	0635      	lsls	r5, r6, #24
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	d501      	bpl.n	80115e4 <_printf_i+0x1cc>
 80115e0:	6018      	str	r0, [r3, #0]
 80115e2:	e002      	b.n	80115ea <_printf_i+0x1d2>
 80115e4:	0671      	lsls	r1, r6, #25
 80115e6:	d5fb      	bpl.n	80115e0 <_printf_i+0x1c8>
 80115e8:	8018      	strh	r0, [r3, #0]
 80115ea:	2300      	movs	r3, #0
 80115ec:	6123      	str	r3, [r4, #16]
 80115ee:	4616      	mov	r6, r2
 80115f0:	e7ba      	b.n	8011568 <_printf_i+0x150>
 80115f2:	680b      	ldr	r3, [r1, #0]
 80115f4:	1d1a      	adds	r2, r3, #4
 80115f6:	600a      	str	r2, [r1, #0]
 80115f8:	681e      	ldr	r6, [r3, #0]
 80115fa:	6862      	ldr	r2, [r4, #4]
 80115fc:	2100      	movs	r1, #0
 80115fe:	4630      	mov	r0, r6
 8011600:	f7ee fdee 	bl	80001e0 <memchr>
 8011604:	b108      	cbz	r0, 801160a <_printf_i+0x1f2>
 8011606:	1b80      	subs	r0, r0, r6
 8011608:	6060      	str	r0, [r4, #4]
 801160a:	6863      	ldr	r3, [r4, #4]
 801160c:	6123      	str	r3, [r4, #16]
 801160e:	2300      	movs	r3, #0
 8011610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011614:	e7a8      	b.n	8011568 <_printf_i+0x150>
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	4632      	mov	r2, r6
 801161a:	4649      	mov	r1, r9
 801161c:	4640      	mov	r0, r8
 801161e:	47d0      	blx	sl
 8011620:	3001      	adds	r0, #1
 8011622:	d0ab      	beq.n	801157c <_printf_i+0x164>
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	079b      	lsls	r3, r3, #30
 8011628:	d413      	bmi.n	8011652 <_printf_i+0x23a>
 801162a:	68e0      	ldr	r0, [r4, #12]
 801162c:	9b03      	ldr	r3, [sp, #12]
 801162e:	4298      	cmp	r0, r3
 8011630:	bfb8      	it	lt
 8011632:	4618      	movlt	r0, r3
 8011634:	e7a4      	b.n	8011580 <_printf_i+0x168>
 8011636:	2301      	movs	r3, #1
 8011638:	4632      	mov	r2, r6
 801163a:	4649      	mov	r1, r9
 801163c:	4640      	mov	r0, r8
 801163e:	47d0      	blx	sl
 8011640:	3001      	adds	r0, #1
 8011642:	d09b      	beq.n	801157c <_printf_i+0x164>
 8011644:	3501      	adds	r5, #1
 8011646:	68e3      	ldr	r3, [r4, #12]
 8011648:	9903      	ldr	r1, [sp, #12]
 801164a:	1a5b      	subs	r3, r3, r1
 801164c:	42ab      	cmp	r3, r5
 801164e:	dcf2      	bgt.n	8011636 <_printf_i+0x21e>
 8011650:	e7eb      	b.n	801162a <_printf_i+0x212>
 8011652:	2500      	movs	r5, #0
 8011654:	f104 0619 	add.w	r6, r4, #25
 8011658:	e7f5      	b.n	8011646 <_printf_i+0x22e>
 801165a:	bf00      	nop
 801165c:	08017391 	.word	0x08017391
 8011660:	080173a2 	.word	0x080173a2

08011664 <_sbrk_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4d06      	ldr	r5, [pc, #24]	; (8011680 <_sbrk_r+0x1c>)
 8011668:	2300      	movs	r3, #0
 801166a:	4604      	mov	r4, r0
 801166c:	4608      	mov	r0, r1
 801166e:	602b      	str	r3, [r5, #0]
 8011670:	f7f0 fd92 	bl	8002198 <_sbrk>
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	d102      	bne.n	801167e <_sbrk_r+0x1a>
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	b103      	cbz	r3, 801167e <_sbrk_r+0x1a>
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	bd38      	pop	{r3, r4, r5, pc}
 8011680:	20016fe8 	.word	0x20016fe8

08011684 <_raise_r>:
 8011684:	291f      	cmp	r1, #31
 8011686:	b538      	push	{r3, r4, r5, lr}
 8011688:	4604      	mov	r4, r0
 801168a:	460d      	mov	r5, r1
 801168c:	d904      	bls.n	8011698 <_raise_r+0x14>
 801168e:	2316      	movs	r3, #22
 8011690:	6003      	str	r3, [r0, #0]
 8011692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011696:	bd38      	pop	{r3, r4, r5, pc}
 8011698:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801169a:	b112      	cbz	r2, 80116a2 <_raise_r+0x1e>
 801169c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80116a0:	b94b      	cbnz	r3, 80116b6 <_raise_r+0x32>
 80116a2:	4620      	mov	r0, r4
 80116a4:	f000 f830 	bl	8011708 <_getpid_r>
 80116a8:	462a      	mov	r2, r5
 80116aa:	4601      	mov	r1, r0
 80116ac:	4620      	mov	r0, r4
 80116ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116b2:	f000 b817 	b.w	80116e4 <_kill_r>
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d00a      	beq.n	80116d0 <_raise_r+0x4c>
 80116ba:	1c59      	adds	r1, r3, #1
 80116bc:	d103      	bne.n	80116c6 <_raise_r+0x42>
 80116be:	2316      	movs	r3, #22
 80116c0:	6003      	str	r3, [r0, #0]
 80116c2:	2001      	movs	r0, #1
 80116c4:	e7e7      	b.n	8011696 <_raise_r+0x12>
 80116c6:	2400      	movs	r4, #0
 80116c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80116cc:	4628      	mov	r0, r5
 80116ce:	4798      	blx	r3
 80116d0:	2000      	movs	r0, #0
 80116d2:	e7e0      	b.n	8011696 <_raise_r+0x12>

080116d4 <raise>:
 80116d4:	4b02      	ldr	r3, [pc, #8]	; (80116e0 <raise+0xc>)
 80116d6:	4601      	mov	r1, r0
 80116d8:	6818      	ldr	r0, [r3, #0]
 80116da:	f7ff bfd3 	b.w	8011684 <_raise_r>
 80116de:	bf00      	nop
 80116e0:	200040c0 	.word	0x200040c0

080116e4 <_kill_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4d07      	ldr	r5, [pc, #28]	; (8011704 <_kill_r+0x20>)
 80116e8:	2300      	movs	r3, #0
 80116ea:	4604      	mov	r4, r0
 80116ec:	4608      	mov	r0, r1
 80116ee:	4611      	mov	r1, r2
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	f7f0 fcc9 	bl	8002088 <_kill>
 80116f6:	1c43      	adds	r3, r0, #1
 80116f8:	d102      	bne.n	8011700 <_kill_r+0x1c>
 80116fa:	682b      	ldr	r3, [r5, #0]
 80116fc:	b103      	cbz	r3, 8011700 <_kill_r+0x1c>
 80116fe:	6023      	str	r3, [r4, #0]
 8011700:	bd38      	pop	{r3, r4, r5, pc}
 8011702:	bf00      	nop
 8011704:	20016fe8 	.word	0x20016fe8

08011708 <_getpid_r>:
 8011708:	f7f0 bcb6 	b.w	8002078 <_getpid>

0801170c <siprintf>:
 801170c:	b40e      	push	{r1, r2, r3}
 801170e:	b500      	push	{lr}
 8011710:	b09c      	sub	sp, #112	; 0x70
 8011712:	ab1d      	add	r3, sp, #116	; 0x74
 8011714:	9002      	str	r0, [sp, #8]
 8011716:	9006      	str	r0, [sp, #24]
 8011718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801171c:	4809      	ldr	r0, [pc, #36]	; (8011744 <siprintf+0x38>)
 801171e:	9107      	str	r1, [sp, #28]
 8011720:	9104      	str	r1, [sp, #16]
 8011722:	4909      	ldr	r1, [pc, #36]	; (8011748 <siprintf+0x3c>)
 8011724:	f853 2b04 	ldr.w	r2, [r3], #4
 8011728:	9105      	str	r1, [sp, #20]
 801172a:	6800      	ldr	r0, [r0, #0]
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	a902      	add	r1, sp, #8
 8011730:	f000 fbee 	bl	8011f10 <_svfiprintf_r>
 8011734:	9b02      	ldr	r3, [sp, #8]
 8011736:	2200      	movs	r2, #0
 8011738:	701a      	strb	r2, [r3, #0]
 801173a:	b01c      	add	sp, #112	; 0x70
 801173c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011740:	b003      	add	sp, #12
 8011742:	4770      	bx	lr
 8011744:	200040c0 	.word	0x200040c0
 8011748:	ffff0208 	.word	0xffff0208

0801174c <strncmp>:
 801174c:	b510      	push	{r4, lr}
 801174e:	b16a      	cbz	r2, 801176c <strncmp+0x20>
 8011750:	3901      	subs	r1, #1
 8011752:	1884      	adds	r4, r0, r2
 8011754:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011758:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801175c:	4293      	cmp	r3, r2
 801175e:	d103      	bne.n	8011768 <strncmp+0x1c>
 8011760:	42a0      	cmp	r0, r4
 8011762:	d001      	beq.n	8011768 <strncmp+0x1c>
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1f5      	bne.n	8011754 <strncmp+0x8>
 8011768:	1a98      	subs	r0, r3, r2
 801176a:	bd10      	pop	{r4, pc}
 801176c:	4610      	mov	r0, r2
 801176e:	e7fc      	b.n	801176a <strncmp+0x1e>

08011770 <__swbuf_r>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	460e      	mov	r6, r1
 8011774:	4614      	mov	r4, r2
 8011776:	4605      	mov	r5, r0
 8011778:	b118      	cbz	r0, 8011782 <__swbuf_r+0x12>
 801177a:	6983      	ldr	r3, [r0, #24]
 801177c:	b90b      	cbnz	r3, 8011782 <__swbuf_r+0x12>
 801177e:	f000 fa33 	bl	8011be8 <__sinit>
 8011782:	4b21      	ldr	r3, [pc, #132]	; (8011808 <__swbuf_r+0x98>)
 8011784:	429c      	cmp	r4, r3
 8011786:	d12b      	bne.n	80117e0 <__swbuf_r+0x70>
 8011788:	686c      	ldr	r4, [r5, #4]
 801178a:	69a3      	ldr	r3, [r4, #24]
 801178c:	60a3      	str	r3, [r4, #8]
 801178e:	89a3      	ldrh	r3, [r4, #12]
 8011790:	071a      	lsls	r2, r3, #28
 8011792:	d52f      	bpl.n	80117f4 <__swbuf_r+0x84>
 8011794:	6923      	ldr	r3, [r4, #16]
 8011796:	b36b      	cbz	r3, 80117f4 <__swbuf_r+0x84>
 8011798:	6923      	ldr	r3, [r4, #16]
 801179a:	6820      	ldr	r0, [r4, #0]
 801179c:	1ac0      	subs	r0, r0, r3
 801179e:	6963      	ldr	r3, [r4, #20]
 80117a0:	b2f6      	uxtb	r6, r6
 80117a2:	4283      	cmp	r3, r0
 80117a4:	4637      	mov	r7, r6
 80117a6:	dc04      	bgt.n	80117b2 <__swbuf_r+0x42>
 80117a8:	4621      	mov	r1, r4
 80117aa:	4628      	mov	r0, r5
 80117ac:	f000 f988 	bl	8011ac0 <_fflush_r>
 80117b0:	bb30      	cbnz	r0, 8011800 <__swbuf_r+0x90>
 80117b2:	68a3      	ldr	r3, [r4, #8]
 80117b4:	3b01      	subs	r3, #1
 80117b6:	60a3      	str	r3, [r4, #8]
 80117b8:	6823      	ldr	r3, [r4, #0]
 80117ba:	1c5a      	adds	r2, r3, #1
 80117bc:	6022      	str	r2, [r4, #0]
 80117be:	701e      	strb	r6, [r3, #0]
 80117c0:	6963      	ldr	r3, [r4, #20]
 80117c2:	3001      	adds	r0, #1
 80117c4:	4283      	cmp	r3, r0
 80117c6:	d004      	beq.n	80117d2 <__swbuf_r+0x62>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	07db      	lsls	r3, r3, #31
 80117cc:	d506      	bpl.n	80117dc <__swbuf_r+0x6c>
 80117ce:	2e0a      	cmp	r6, #10
 80117d0:	d104      	bne.n	80117dc <__swbuf_r+0x6c>
 80117d2:	4621      	mov	r1, r4
 80117d4:	4628      	mov	r0, r5
 80117d6:	f000 f973 	bl	8011ac0 <_fflush_r>
 80117da:	b988      	cbnz	r0, 8011800 <__swbuf_r+0x90>
 80117dc:	4638      	mov	r0, r7
 80117de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <__swbuf_r+0x9c>)
 80117e2:	429c      	cmp	r4, r3
 80117e4:	d101      	bne.n	80117ea <__swbuf_r+0x7a>
 80117e6:	68ac      	ldr	r4, [r5, #8]
 80117e8:	e7cf      	b.n	801178a <__swbuf_r+0x1a>
 80117ea:	4b09      	ldr	r3, [pc, #36]	; (8011810 <__swbuf_r+0xa0>)
 80117ec:	429c      	cmp	r4, r3
 80117ee:	bf08      	it	eq
 80117f0:	68ec      	ldreq	r4, [r5, #12]
 80117f2:	e7ca      	b.n	801178a <__swbuf_r+0x1a>
 80117f4:	4621      	mov	r1, r4
 80117f6:	4628      	mov	r0, r5
 80117f8:	f000 f80c 	bl	8011814 <__swsetup_r>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d0cb      	beq.n	8011798 <__swbuf_r+0x28>
 8011800:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011804:	e7ea      	b.n	80117dc <__swbuf_r+0x6c>
 8011806:	bf00      	nop
 8011808:	080173d4 	.word	0x080173d4
 801180c:	080173f4 	.word	0x080173f4
 8011810:	080173b4 	.word	0x080173b4

08011814 <__swsetup_r>:
 8011814:	4b32      	ldr	r3, [pc, #200]	; (80118e0 <__swsetup_r+0xcc>)
 8011816:	b570      	push	{r4, r5, r6, lr}
 8011818:	681d      	ldr	r5, [r3, #0]
 801181a:	4606      	mov	r6, r0
 801181c:	460c      	mov	r4, r1
 801181e:	b125      	cbz	r5, 801182a <__swsetup_r+0x16>
 8011820:	69ab      	ldr	r3, [r5, #24]
 8011822:	b913      	cbnz	r3, 801182a <__swsetup_r+0x16>
 8011824:	4628      	mov	r0, r5
 8011826:	f000 f9df 	bl	8011be8 <__sinit>
 801182a:	4b2e      	ldr	r3, [pc, #184]	; (80118e4 <__swsetup_r+0xd0>)
 801182c:	429c      	cmp	r4, r3
 801182e:	d10f      	bne.n	8011850 <__swsetup_r+0x3c>
 8011830:	686c      	ldr	r4, [r5, #4]
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011838:	0719      	lsls	r1, r3, #28
 801183a:	d42c      	bmi.n	8011896 <__swsetup_r+0x82>
 801183c:	06dd      	lsls	r5, r3, #27
 801183e:	d411      	bmi.n	8011864 <__swsetup_r+0x50>
 8011840:	2309      	movs	r3, #9
 8011842:	6033      	str	r3, [r6, #0]
 8011844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011848:	81a3      	strh	r3, [r4, #12]
 801184a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801184e:	e03e      	b.n	80118ce <__swsetup_r+0xba>
 8011850:	4b25      	ldr	r3, [pc, #148]	; (80118e8 <__swsetup_r+0xd4>)
 8011852:	429c      	cmp	r4, r3
 8011854:	d101      	bne.n	801185a <__swsetup_r+0x46>
 8011856:	68ac      	ldr	r4, [r5, #8]
 8011858:	e7eb      	b.n	8011832 <__swsetup_r+0x1e>
 801185a:	4b24      	ldr	r3, [pc, #144]	; (80118ec <__swsetup_r+0xd8>)
 801185c:	429c      	cmp	r4, r3
 801185e:	bf08      	it	eq
 8011860:	68ec      	ldreq	r4, [r5, #12]
 8011862:	e7e6      	b.n	8011832 <__swsetup_r+0x1e>
 8011864:	0758      	lsls	r0, r3, #29
 8011866:	d512      	bpl.n	801188e <__swsetup_r+0x7a>
 8011868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801186a:	b141      	cbz	r1, 801187e <__swsetup_r+0x6a>
 801186c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011870:	4299      	cmp	r1, r3
 8011872:	d002      	beq.n	801187a <__swsetup_r+0x66>
 8011874:	4630      	mov	r0, r6
 8011876:	f7ff fb5d 	bl	8010f34 <_free_r>
 801187a:	2300      	movs	r3, #0
 801187c:	6363      	str	r3, [r4, #52]	; 0x34
 801187e:	89a3      	ldrh	r3, [r4, #12]
 8011880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011884:	81a3      	strh	r3, [r4, #12]
 8011886:	2300      	movs	r3, #0
 8011888:	6063      	str	r3, [r4, #4]
 801188a:	6923      	ldr	r3, [r4, #16]
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	f043 0308 	orr.w	r3, r3, #8
 8011894:	81a3      	strh	r3, [r4, #12]
 8011896:	6923      	ldr	r3, [r4, #16]
 8011898:	b94b      	cbnz	r3, 80118ae <__swsetup_r+0x9a>
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118a4:	d003      	beq.n	80118ae <__swsetup_r+0x9a>
 80118a6:	4621      	mov	r1, r4
 80118a8:	4630      	mov	r0, r6
 80118aa:	f000 fa63 	bl	8011d74 <__smakebuf_r>
 80118ae:	89a0      	ldrh	r0, [r4, #12]
 80118b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118b4:	f010 0301 	ands.w	r3, r0, #1
 80118b8:	d00a      	beq.n	80118d0 <__swsetup_r+0xbc>
 80118ba:	2300      	movs	r3, #0
 80118bc:	60a3      	str	r3, [r4, #8]
 80118be:	6963      	ldr	r3, [r4, #20]
 80118c0:	425b      	negs	r3, r3
 80118c2:	61a3      	str	r3, [r4, #24]
 80118c4:	6923      	ldr	r3, [r4, #16]
 80118c6:	b943      	cbnz	r3, 80118da <__swsetup_r+0xc6>
 80118c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118cc:	d1ba      	bne.n	8011844 <__swsetup_r+0x30>
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
 80118d0:	0781      	lsls	r1, r0, #30
 80118d2:	bf58      	it	pl
 80118d4:	6963      	ldrpl	r3, [r4, #20]
 80118d6:	60a3      	str	r3, [r4, #8]
 80118d8:	e7f4      	b.n	80118c4 <__swsetup_r+0xb0>
 80118da:	2000      	movs	r0, #0
 80118dc:	e7f7      	b.n	80118ce <__swsetup_r+0xba>
 80118de:	bf00      	nop
 80118e0:	200040c0 	.word	0x200040c0
 80118e4:	080173d4 	.word	0x080173d4
 80118e8:	080173f4 	.word	0x080173f4
 80118ec:	080173b4 	.word	0x080173b4

080118f0 <__register_exitproc>:
 80118f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80119b0 <__register_exitproc+0xc0>
 80118f8:	4606      	mov	r6, r0
 80118fa:	f8d8 0000 	ldr.w	r0, [r8]
 80118fe:	461f      	mov	r7, r3
 8011900:	460d      	mov	r5, r1
 8011902:	4691      	mov	r9, r2
 8011904:	f000 fa0e 	bl	8011d24 <__retarget_lock_acquire_recursive>
 8011908:	4b25      	ldr	r3, [pc, #148]	; (80119a0 <__register_exitproc+0xb0>)
 801190a:	681c      	ldr	r4, [r3, #0]
 801190c:	b934      	cbnz	r4, 801191c <__register_exitproc+0x2c>
 801190e:	4c25      	ldr	r4, [pc, #148]	; (80119a4 <__register_exitproc+0xb4>)
 8011910:	601c      	str	r4, [r3, #0]
 8011912:	4b25      	ldr	r3, [pc, #148]	; (80119a8 <__register_exitproc+0xb8>)
 8011914:	b113      	cbz	r3, 801191c <__register_exitproc+0x2c>
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801191c:	6863      	ldr	r3, [r4, #4]
 801191e:	2b1f      	cmp	r3, #31
 8011920:	dd07      	ble.n	8011932 <__register_exitproc+0x42>
 8011922:	f8d8 0000 	ldr.w	r0, [r8]
 8011926:	f000 f9ff 	bl	8011d28 <__retarget_lock_release_recursive>
 801192a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801192e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011932:	b34e      	cbz	r6, 8011988 <__register_exitproc+0x98>
 8011934:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011938:	b988      	cbnz	r0, 801195e <__register_exitproc+0x6e>
 801193a:	4b1c      	ldr	r3, [pc, #112]	; (80119ac <__register_exitproc+0xbc>)
 801193c:	b923      	cbnz	r3, 8011948 <__register_exitproc+0x58>
 801193e:	f8d8 0000 	ldr.w	r0, [r8]
 8011942:	f000 f9f0 	bl	8011d26 <__retarget_lock_release>
 8011946:	e7f0      	b.n	801192a <__register_exitproc+0x3a>
 8011948:	f44f 7084 	mov.w	r0, #264	; 0x108
 801194c:	f7ff fab2 	bl	8010eb4 <malloc>
 8011950:	2800      	cmp	r0, #0
 8011952:	d0f4      	beq.n	801193e <__register_exitproc+0x4e>
 8011954:	2300      	movs	r3, #0
 8011956:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801195a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801195e:	6863      	ldr	r3, [r4, #4]
 8011960:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011964:	2201      	movs	r2, #1
 8011966:	409a      	lsls	r2, r3
 8011968:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801196c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011970:	4313      	orrs	r3, r2
 8011972:	2e02      	cmp	r6, #2
 8011974:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011978:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801197c:	bf02      	ittt	eq
 801197e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011982:	431a      	orreq	r2, r3
 8011984:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8011988:	6863      	ldr	r3, [r4, #4]
 801198a:	f8d8 0000 	ldr.w	r0, [r8]
 801198e:	1c5a      	adds	r2, r3, #1
 8011990:	3302      	adds	r3, #2
 8011992:	6062      	str	r2, [r4, #4]
 8011994:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011998:	f000 f9c6 	bl	8011d28 <__retarget_lock_release_recursive>
 801199c:	2000      	movs	r0, #0
 801199e:	e7c6      	b.n	801192e <__register_exitproc+0x3e>
 80119a0:	20016fd4 	.word	0x20016fd4
 80119a4:	20016f48 	.word	0x20016f48
 80119a8:	00000000 	.word	0x00000000
 80119ac:	08010eb5 	.word	0x08010eb5
 80119b0:	20004124 	.word	0x20004124

080119b4 <__sflush_r>:
 80119b4:	898a      	ldrh	r2, [r1, #12]
 80119b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ba:	4605      	mov	r5, r0
 80119bc:	0710      	lsls	r0, r2, #28
 80119be:	460c      	mov	r4, r1
 80119c0:	d458      	bmi.n	8011a74 <__sflush_r+0xc0>
 80119c2:	684b      	ldr	r3, [r1, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	dc05      	bgt.n	80119d4 <__sflush_r+0x20>
 80119c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	dc02      	bgt.n	80119d4 <__sflush_r+0x20>
 80119ce:	2000      	movs	r0, #0
 80119d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119d6:	2e00      	cmp	r6, #0
 80119d8:	d0f9      	beq.n	80119ce <__sflush_r+0x1a>
 80119da:	2300      	movs	r3, #0
 80119dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119e0:	682f      	ldr	r7, [r5, #0]
 80119e2:	602b      	str	r3, [r5, #0]
 80119e4:	d032      	beq.n	8011a4c <__sflush_r+0x98>
 80119e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	075a      	lsls	r2, r3, #29
 80119ec:	d505      	bpl.n	80119fa <__sflush_r+0x46>
 80119ee:	6863      	ldr	r3, [r4, #4]
 80119f0:	1ac0      	subs	r0, r0, r3
 80119f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119f4:	b10b      	cbz	r3, 80119fa <__sflush_r+0x46>
 80119f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119f8:	1ac0      	subs	r0, r0, r3
 80119fa:	2300      	movs	r3, #0
 80119fc:	4602      	mov	r2, r0
 80119fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a00:	6a21      	ldr	r1, [r4, #32]
 8011a02:	4628      	mov	r0, r5
 8011a04:	47b0      	blx	r6
 8011a06:	1c43      	adds	r3, r0, #1
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	d106      	bne.n	8011a1a <__sflush_r+0x66>
 8011a0c:	6829      	ldr	r1, [r5, #0]
 8011a0e:	291d      	cmp	r1, #29
 8011a10:	d82c      	bhi.n	8011a6c <__sflush_r+0xb8>
 8011a12:	4a2a      	ldr	r2, [pc, #168]	; (8011abc <__sflush_r+0x108>)
 8011a14:	40ca      	lsrs	r2, r1
 8011a16:	07d6      	lsls	r6, r2, #31
 8011a18:	d528      	bpl.n	8011a6c <__sflush_r+0xb8>
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	6062      	str	r2, [r4, #4]
 8011a1e:	04d9      	lsls	r1, r3, #19
 8011a20:	6922      	ldr	r2, [r4, #16]
 8011a22:	6022      	str	r2, [r4, #0]
 8011a24:	d504      	bpl.n	8011a30 <__sflush_r+0x7c>
 8011a26:	1c42      	adds	r2, r0, #1
 8011a28:	d101      	bne.n	8011a2e <__sflush_r+0x7a>
 8011a2a:	682b      	ldr	r3, [r5, #0]
 8011a2c:	b903      	cbnz	r3, 8011a30 <__sflush_r+0x7c>
 8011a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8011a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a32:	602f      	str	r7, [r5, #0]
 8011a34:	2900      	cmp	r1, #0
 8011a36:	d0ca      	beq.n	80119ce <__sflush_r+0x1a>
 8011a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a3c:	4299      	cmp	r1, r3
 8011a3e:	d002      	beq.n	8011a46 <__sflush_r+0x92>
 8011a40:	4628      	mov	r0, r5
 8011a42:	f7ff fa77 	bl	8010f34 <_free_r>
 8011a46:	2000      	movs	r0, #0
 8011a48:	6360      	str	r0, [r4, #52]	; 0x34
 8011a4a:	e7c1      	b.n	80119d0 <__sflush_r+0x1c>
 8011a4c:	6a21      	ldr	r1, [r4, #32]
 8011a4e:	2301      	movs	r3, #1
 8011a50:	4628      	mov	r0, r5
 8011a52:	47b0      	blx	r6
 8011a54:	1c41      	adds	r1, r0, #1
 8011a56:	d1c7      	bne.n	80119e8 <__sflush_r+0x34>
 8011a58:	682b      	ldr	r3, [r5, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d0c4      	beq.n	80119e8 <__sflush_r+0x34>
 8011a5e:	2b1d      	cmp	r3, #29
 8011a60:	d001      	beq.n	8011a66 <__sflush_r+0xb2>
 8011a62:	2b16      	cmp	r3, #22
 8011a64:	d101      	bne.n	8011a6a <__sflush_r+0xb6>
 8011a66:	602f      	str	r7, [r5, #0]
 8011a68:	e7b1      	b.n	80119ce <__sflush_r+0x1a>
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a70:	81a3      	strh	r3, [r4, #12]
 8011a72:	e7ad      	b.n	80119d0 <__sflush_r+0x1c>
 8011a74:	690f      	ldr	r7, [r1, #16]
 8011a76:	2f00      	cmp	r7, #0
 8011a78:	d0a9      	beq.n	80119ce <__sflush_r+0x1a>
 8011a7a:	0793      	lsls	r3, r2, #30
 8011a7c:	680e      	ldr	r6, [r1, #0]
 8011a7e:	bf08      	it	eq
 8011a80:	694b      	ldreq	r3, [r1, #20]
 8011a82:	600f      	str	r7, [r1, #0]
 8011a84:	bf18      	it	ne
 8011a86:	2300      	movne	r3, #0
 8011a88:	eba6 0807 	sub.w	r8, r6, r7
 8011a8c:	608b      	str	r3, [r1, #8]
 8011a8e:	f1b8 0f00 	cmp.w	r8, #0
 8011a92:	dd9c      	ble.n	80119ce <__sflush_r+0x1a>
 8011a94:	6a21      	ldr	r1, [r4, #32]
 8011a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a98:	4643      	mov	r3, r8
 8011a9a:	463a      	mov	r2, r7
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	47b0      	blx	r6
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	dc06      	bgt.n	8011ab2 <__sflush_r+0xfe>
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aaa:	81a3      	strh	r3, [r4, #12]
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ab0:	e78e      	b.n	80119d0 <__sflush_r+0x1c>
 8011ab2:	4407      	add	r7, r0
 8011ab4:	eba8 0800 	sub.w	r8, r8, r0
 8011ab8:	e7e9      	b.n	8011a8e <__sflush_r+0xda>
 8011aba:	bf00      	nop
 8011abc:	20400001 	.word	0x20400001

08011ac0 <_fflush_r>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	690b      	ldr	r3, [r1, #16]
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	b913      	cbnz	r3, 8011ad0 <_fflush_r+0x10>
 8011aca:	2500      	movs	r5, #0
 8011acc:	4628      	mov	r0, r5
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	b118      	cbz	r0, 8011ada <_fflush_r+0x1a>
 8011ad2:	6983      	ldr	r3, [r0, #24]
 8011ad4:	b90b      	cbnz	r3, 8011ada <_fflush_r+0x1a>
 8011ad6:	f000 f887 	bl	8011be8 <__sinit>
 8011ada:	4b14      	ldr	r3, [pc, #80]	; (8011b2c <_fflush_r+0x6c>)
 8011adc:	429c      	cmp	r4, r3
 8011ade:	d11b      	bne.n	8011b18 <_fflush_r+0x58>
 8011ae0:	686c      	ldr	r4, [r5, #4]
 8011ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0ef      	beq.n	8011aca <_fflush_r+0xa>
 8011aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011aec:	07d0      	lsls	r0, r2, #31
 8011aee:	d404      	bmi.n	8011afa <_fflush_r+0x3a>
 8011af0:	0599      	lsls	r1, r3, #22
 8011af2:	d402      	bmi.n	8011afa <_fflush_r+0x3a>
 8011af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011af6:	f000 f915 	bl	8011d24 <__retarget_lock_acquire_recursive>
 8011afa:	4628      	mov	r0, r5
 8011afc:	4621      	mov	r1, r4
 8011afe:	f7ff ff59 	bl	80119b4 <__sflush_r>
 8011b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b04:	07da      	lsls	r2, r3, #31
 8011b06:	4605      	mov	r5, r0
 8011b08:	d4e0      	bmi.n	8011acc <_fflush_r+0xc>
 8011b0a:	89a3      	ldrh	r3, [r4, #12]
 8011b0c:	059b      	lsls	r3, r3, #22
 8011b0e:	d4dd      	bmi.n	8011acc <_fflush_r+0xc>
 8011b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b12:	f000 f909 	bl	8011d28 <__retarget_lock_release_recursive>
 8011b16:	e7d9      	b.n	8011acc <_fflush_r+0xc>
 8011b18:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <_fflush_r+0x70>)
 8011b1a:	429c      	cmp	r4, r3
 8011b1c:	d101      	bne.n	8011b22 <_fflush_r+0x62>
 8011b1e:	68ac      	ldr	r4, [r5, #8]
 8011b20:	e7df      	b.n	8011ae2 <_fflush_r+0x22>
 8011b22:	4b04      	ldr	r3, [pc, #16]	; (8011b34 <_fflush_r+0x74>)
 8011b24:	429c      	cmp	r4, r3
 8011b26:	bf08      	it	eq
 8011b28:	68ec      	ldreq	r4, [r5, #12]
 8011b2a:	e7da      	b.n	8011ae2 <_fflush_r+0x22>
 8011b2c:	080173d4 	.word	0x080173d4
 8011b30:	080173f4 	.word	0x080173f4
 8011b34:	080173b4 	.word	0x080173b4

08011b38 <std>:
 8011b38:	2300      	movs	r3, #0
 8011b3a:	b510      	push	{r4, lr}
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8011b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b46:	6083      	str	r3, [r0, #8]
 8011b48:	8181      	strh	r1, [r0, #12]
 8011b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8011b4c:	81c2      	strh	r2, [r0, #14]
 8011b4e:	6183      	str	r3, [r0, #24]
 8011b50:	4619      	mov	r1, r3
 8011b52:	2208      	movs	r2, #8
 8011b54:	305c      	adds	r0, #92	; 0x5c
 8011b56:	f7ff f9e5 	bl	8010f24 <memset>
 8011b5a:	4b05      	ldr	r3, [pc, #20]	; (8011b70 <std+0x38>)
 8011b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8011b5e:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <std+0x3c>)
 8011b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b62:	4b05      	ldr	r3, [pc, #20]	; (8011b78 <std+0x40>)
 8011b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b66:	4b05      	ldr	r3, [pc, #20]	; (8011b7c <std+0x44>)
 8011b68:	6224      	str	r4, [r4, #32]
 8011b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8011b6c:	bd10      	pop	{r4, pc}
 8011b6e:	bf00      	nop
 8011b70:	08012111 	.word	0x08012111
 8011b74:	08012133 	.word	0x08012133
 8011b78:	0801216b 	.word	0x0801216b
 8011b7c:	0801218f 	.word	0x0801218f

08011b80 <_cleanup_r>:
 8011b80:	4901      	ldr	r1, [pc, #4]	; (8011b88 <_cleanup_r+0x8>)
 8011b82:	f000 b8af 	b.w	8011ce4 <_fwalk_reent>
 8011b86:	bf00      	nop
 8011b88:	08011ac1 	.word	0x08011ac1

08011b8c <__sfmoreglue>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	1e4a      	subs	r2, r1, #1
 8011b90:	2568      	movs	r5, #104	; 0x68
 8011b92:	4355      	muls	r5, r2
 8011b94:	460e      	mov	r6, r1
 8011b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b9a:	f7ff fa1b 	bl	8010fd4 <_malloc_r>
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	b140      	cbz	r0, 8011bb4 <__sfmoreglue+0x28>
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8011ba8:	300c      	adds	r0, #12
 8011baa:	60a0      	str	r0, [r4, #8]
 8011bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bb0:	f7ff f9b8 	bl	8010f24 <memset>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	bd70      	pop	{r4, r5, r6, pc}

08011bb8 <__sfp_lock_acquire>:
 8011bb8:	4801      	ldr	r0, [pc, #4]	; (8011bc0 <__sfp_lock_acquire+0x8>)
 8011bba:	f000 b8b3 	b.w	8011d24 <__retarget_lock_acquire_recursive>
 8011bbe:	bf00      	nop
 8011bc0:	20016fe0 	.word	0x20016fe0

08011bc4 <__sfp_lock_release>:
 8011bc4:	4801      	ldr	r0, [pc, #4]	; (8011bcc <__sfp_lock_release+0x8>)
 8011bc6:	f000 b8af 	b.w	8011d28 <__retarget_lock_release_recursive>
 8011bca:	bf00      	nop
 8011bcc:	20016fe0 	.word	0x20016fe0

08011bd0 <__sinit_lock_acquire>:
 8011bd0:	4801      	ldr	r0, [pc, #4]	; (8011bd8 <__sinit_lock_acquire+0x8>)
 8011bd2:	f000 b8a7 	b.w	8011d24 <__retarget_lock_acquire_recursive>
 8011bd6:	bf00      	nop
 8011bd8:	20016fdf 	.word	0x20016fdf

08011bdc <__sinit_lock_release>:
 8011bdc:	4801      	ldr	r0, [pc, #4]	; (8011be4 <__sinit_lock_release+0x8>)
 8011bde:	f000 b8a3 	b.w	8011d28 <__retarget_lock_release_recursive>
 8011be2:	bf00      	nop
 8011be4:	20016fdf 	.word	0x20016fdf

08011be8 <__sinit>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	4604      	mov	r4, r0
 8011bec:	f7ff fff0 	bl	8011bd0 <__sinit_lock_acquire>
 8011bf0:	69a3      	ldr	r3, [r4, #24]
 8011bf2:	b11b      	cbz	r3, 8011bfc <__sinit+0x14>
 8011bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf8:	f7ff bff0 	b.w	8011bdc <__sinit_lock_release>
 8011bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c00:	6523      	str	r3, [r4, #80]	; 0x50
 8011c02:	4b13      	ldr	r3, [pc, #76]	; (8011c50 <__sinit+0x68>)
 8011c04:	4a13      	ldr	r2, [pc, #76]	; (8011c54 <__sinit+0x6c>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c0a:	42a3      	cmp	r3, r4
 8011c0c:	bf04      	itt	eq
 8011c0e:	2301      	moveq	r3, #1
 8011c10:	61a3      	streq	r3, [r4, #24]
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 f820 	bl	8011c58 <__sfp>
 8011c18:	6060      	str	r0, [r4, #4]
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f000 f81c 	bl	8011c58 <__sfp>
 8011c20:	60a0      	str	r0, [r4, #8]
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 f818 	bl	8011c58 <__sfp>
 8011c28:	2200      	movs	r2, #0
 8011c2a:	60e0      	str	r0, [r4, #12]
 8011c2c:	2104      	movs	r1, #4
 8011c2e:	6860      	ldr	r0, [r4, #4]
 8011c30:	f7ff ff82 	bl	8011b38 <std>
 8011c34:	68a0      	ldr	r0, [r4, #8]
 8011c36:	2201      	movs	r2, #1
 8011c38:	2109      	movs	r1, #9
 8011c3a:	f7ff ff7d 	bl	8011b38 <std>
 8011c3e:	68e0      	ldr	r0, [r4, #12]
 8011c40:	2202      	movs	r2, #2
 8011c42:	2112      	movs	r1, #18
 8011c44:	f7ff ff78 	bl	8011b38 <std>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	61a3      	str	r3, [r4, #24]
 8011c4c:	e7d2      	b.n	8011bf4 <__sinit+0xc>
 8011c4e:	bf00      	nop
 8011c50:	0801737c 	.word	0x0801737c
 8011c54:	08011b81 	.word	0x08011b81

08011c58 <__sfp>:
 8011c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	f7ff ffac 	bl	8011bb8 <__sfp_lock_acquire>
 8011c60:	4b1e      	ldr	r3, [pc, #120]	; (8011cdc <__sfp+0x84>)
 8011c62:	681e      	ldr	r6, [r3, #0]
 8011c64:	69b3      	ldr	r3, [r6, #24]
 8011c66:	b913      	cbnz	r3, 8011c6e <__sfp+0x16>
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f7ff ffbd 	bl	8011be8 <__sinit>
 8011c6e:	3648      	adds	r6, #72	; 0x48
 8011c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	d503      	bpl.n	8011c80 <__sfp+0x28>
 8011c78:	6833      	ldr	r3, [r6, #0]
 8011c7a:	b30b      	cbz	r3, 8011cc0 <__sfp+0x68>
 8011c7c:	6836      	ldr	r6, [r6, #0]
 8011c7e:	e7f7      	b.n	8011c70 <__sfp+0x18>
 8011c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c84:	b9d5      	cbnz	r5, 8011cbc <__sfp+0x64>
 8011c86:	4b16      	ldr	r3, [pc, #88]	; (8011ce0 <__sfp+0x88>)
 8011c88:	60e3      	str	r3, [r4, #12]
 8011c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8011c90:	f000 f847 	bl	8011d22 <__retarget_lock_init_recursive>
 8011c94:	f7ff ff96 	bl	8011bc4 <__sfp_lock_release>
 8011c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ca0:	6025      	str	r5, [r4, #0]
 8011ca2:	61a5      	str	r5, [r4, #24]
 8011ca4:	2208      	movs	r2, #8
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cac:	f7ff f93a 	bl	8010f24 <memset>
 8011cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cb8:	4620      	mov	r0, r4
 8011cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cbc:	3468      	adds	r4, #104	; 0x68
 8011cbe:	e7d9      	b.n	8011c74 <__sfp+0x1c>
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	f7ff ff62 	bl	8011b8c <__sfmoreglue>
 8011cc8:	4604      	mov	r4, r0
 8011cca:	6030      	str	r0, [r6, #0]
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d1d5      	bne.n	8011c7c <__sfp+0x24>
 8011cd0:	f7ff ff78 	bl	8011bc4 <__sfp_lock_release>
 8011cd4:	230c      	movs	r3, #12
 8011cd6:	603b      	str	r3, [r7, #0]
 8011cd8:	e7ee      	b.n	8011cb8 <__sfp+0x60>
 8011cda:	bf00      	nop
 8011cdc:	0801737c 	.word	0x0801737c
 8011ce0:	ffff0001 	.word	0xffff0001

08011ce4 <_fwalk_reent>:
 8011ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce8:	4606      	mov	r6, r0
 8011cea:	4688      	mov	r8, r1
 8011cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011cf0:	2700      	movs	r7, #0
 8011cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8011cfa:	d505      	bpl.n	8011d08 <_fwalk_reent+0x24>
 8011cfc:	6824      	ldr	r4, [r4, #0]
 8011cfe:	2c00      	cmp	r4, #0
 8011d00:	d1f7      	bne.n	8011cf2 <_fwalk_reent+0xe>
 8011d02:	4638      	mov	r0, r7
 8011d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d08:	89ab      	ldrh	r3, [r5, #12]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d907      	bls.n	8011d1e <_fwalk_reent+0x3a>
 8011d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d12:	3301      	adds	r3, #1
 8011d14:	d003      	beq.n	8011d1e <_fwalk_reent+0x3a>
 8011d16:	4629      	mov	r1, r5
 8011d18:	4630      	mov	r0, r6
 8011d1a:	47c0      	blx	r8
 8011d1c:	4307      	orrs	r7, r0
 8011d1e:	3568      	adds	r5, #104	; 0x68
 8011d20:	e7e9      	b.n	8011cf6 <_fwalk_reent+0x12>

08011d22 <__retarget_lock_init_recursive>:
 8011d22:	4770      	bx	lr

08011d24 <__retarget_lock_acquire_recursive>:
 8011d24:	4770      	bx	lr

08011d26 <__retarget_lock_release>:
 8011d26:	4770      	bx	lr

08011d28 <__retarget_lock_release_recursive>:
 8011d28:	4770      	bx	lr

08011d2a <__swhatbuf_r>:
 8011d2a:	b570      	push	{r4, r5, r6, lr}
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d32:	2900      	cmp	r1, #0
 8011d34:	b096      	sub	sp, #88	; 0x58
 8011d36:	4614      	mov	r4, r2
 8011d38:	461d      	mov	r5, r3
 8011d3a:	da07      	bge.n	8011d4c <__swhatbuf_r+0x22>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	602b      	str	r3, [r5, #0]
 8011d40:	89b3      	ldrh	r3, [r6, #12]
 8011d42:	061a      	lsls	r2, r3, #24
 8011d44:	d410      	bmi.n	8011d68 <__swhatbuf_r+0x3e>
 8011d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d4a:	e00e      	b.n	8011d6a <__swhatbuf_r+0x40>
 8011d4c:	466a      	mov	r2, sp
 8011d4e:	f000 fa45 	bl	80121dc <_fstat_r>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	dbf2      	blt.n	8011d3c <__swhatbuf_r+0x12>
 8011d56:	9a01      	ldr	r2, [sp, #4]
 8011d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d60:	425a      	negs	r2, r3
 8011d62:	415a      	adcs	r2, r3
 8011d64:	602a      	str	r2, [r5, #0]
 8011d66:	e7ee      	b.n	8011d46 <__swhatbuf_r+0x1c>
 8011d68:	2340      	movs	r3, #64	; 0x40
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	b016      	add	sp, #88	; 0x58
 8011d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08011d74 <__smakebuf_r>:
 8011d74:	898b      	ldrh	r3, [r1, #12]
 8011d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d78:	079d      	lsls	r5, r3, #30
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	d507      	bpl.n	8011d90 <__smakebuf_r+0x1c>
 8011d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	6123      	str	r3, [r4, #16]
 8011d88:	2301      	movs	r3, #1
 8011d8a:	6163      	str	r3, [r4, #20]
 8011d8c:	b002      	add	sp, #8
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}
 8011d90:	ab01      	add	r3, sp, #4
 8011d92:	466a      	mov	r2, sp
 8011d94:	f7ff ffc9 	bl	8011d2a <__swhatbuf_r>
 8011d98:	9900      	ldr	r1, [sp, #0]
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f7ff f919 	bl	8010fd4 <_malloc_r>
 8011da2:	b948      	cbnz	r0, 8011db8 <__smakebuf_r+0x44>
 8011da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da8:	059a      	lsls	r2, r3, #22
 8011daa:	d4ef      	bmi.n	8011d8c <__smakebuf_r+0x18>
 8011dac:	f023 0303 	bic.w	r3, r3, #3
 8011db0:	f043 0302 	orr.w	r3, r3, #2
 8011db4:	81a3      	strh	r3, [r4, #12]
 8011db6:	e7e3      	b.n	8011d80 <__smakebuf_r+0xc>
 8011db8:	4b0d      	ldr	r3, [pc, #52]	; (8011df0 <__smakebuf_r+0x7c>)
 8011dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	6020      	str	r0, [r4, #0]
 8011dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc4:	81a3      	strh	r3, [r4, #12]
 8011dc6:	9b00      	ldr	r3, [sp, #0]
 8011dc8:	6163      	str	r3, [r4, #20]
 8011dca:	9b01      	ldr	r3, [sp, #4]
 8011dcc:	6120      	str	r0, [r4, #16]
 8011dce:	b15b      	cbz	r3, 8011de8 <__smakebuf_r+0x74>
 8011dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f000 fa13 	bl	8012200 <_isatty_r>
 8011dda:	b128      	cbz	r0, 8011de8 <__smakebuf_r+0x74>
 8011ddc:	89a3      	ldrh	r3, [r4, #12]
 8011dde:	f023 0303 	bic.w	r3, r3, #3
 8011de2:	f043 0301 	orr.w	r3, r3, #1
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	89a0      	ldrh	r0, [r4, #12]
 8011dea:	4305      	orrs	r5, r0
 8011dec:	81a5      	strh	r5, [r4, #12]
 8011dee:	e7cd      	b.n	8011d8c <__smakebuf_r+0x18>
 8011df0:	08011b81 	.word	0x08011b81

08011df4 <__malloc_lock>:
 8011df4:	4801      	ldr	r0, [pc, #4]	; (8011dfc <__malloc_lock+0x8>)
 8011df6:	f7ff bf95 	b.w	8011d24 <__retarget_lock_acquire_recursive>
 8011dfa:	bf00      	nop
 8011dfc:	20016fdc 	.word	0x20016fdc

08011e00 <__malloc_unlock>:
 8011e00:	4801      	ldr	r0, [pc, #4]	; (8011e08 <__malloc_unlock+0x8>)
 8011e02:	f7ff bf91 	b.w	8011d28 <__retarget_lock_release_recursive>
 8011e06:	bf00      	nop
 8011e08:	20016fdc 	.word	0x20016fdc

08011e0c <_realloc_r>:
 8011e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0e:	4607      	mov	r7, r0
 8011e10:	4614      	mov	r4, r2
 8011e12:	460e      	mov	r6, r1
 8011e14:	b921      	cbnz	r1, 8011e20 <_realloc_r+0x14>
 8011e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e1a:	4611      	mov	r1, r2
 8011e1c:	f7ff b8da 	b.w	8010fd4 <_malloc_r>
 8011e20:	b922      	cbnz	r2, 8011e2c <_realloc_r+0x20>
 8011e22:	f7ff f887 	bl	8010f34 <_free_r>
 8011e26:	4625      	mov	r5, r4
 8011e28:	4628      	mov	r0, r5
 8011e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e2c:	f000 fa0a 	bl	8012244 <_malloc_usable_size_r>
 8011e30:	42a0      	cmp	r0, r4
 8011e32:	d20f      	bcs.n	8011e54 <_realloc_r+0x48>
 8011e34:	4621      	mov	r1, r4
 8011e36:	4638      	mov	r0, r7
 8011e38:	f7ff f8cc 	bl	8010fd4 <_malloc_r>
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d0f2      	beq.n	8011e28 <_realloc_r+0x1c>
 8011e42:	4631      	mov	r1, r6
 8011e44:	4622      	mov	r2, r4
 8011e46:	f7ff f845 	bl	8010ed4 <memcpy>
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff f871 	bl	8010f34 <_free_r>
 8011e52:	e7e9      	b.n	8011e28 <_realloc_r+0x1c>
 8011e54:	4635      	mov	r5, r6
 8011e56:	e7e7      	b.n	8011e28 <_realloc_r+0x1c>

08011e58 <__ssputs_r>:
 8011e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e5c:	688e      	ldr	r6, [r1, #8]
 8011e5e:	429e      	cmp	r6, r3
 8011e60:	4682      	mov	sl, r0
 8011e62:	460c      	mov	r4, r1
 8011e64:	4690      	mov	r8, r2
 8011e66:	461f      	mov	r7, r3
 8011e68:	d838      	bhi.n	8011edc <__ssputs_r+0x84>
 8011e6a:	898a      	ldrh	r2, [r1, #12]
 8011e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e70:	d032      	beq.n	8011ed8 <__ssputs_r+0x80>
 8011e72:	6825      	ldr	r5, [r4, #0]
 8011e74:	6909      	ldr	r1, [r1, #16]
 8011e76:	eba5 0901 	sub.w	r9, r5, r1
 8011e7a:	6965      	ldr	r5, [r4, #20]
 8011e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e84:	3301      	adds	r3, #1
 8011e86:	444b      	add	r3, r9
 8011e88:	106d      	asrs	r5, r5, #1
 8011e8a:	429d      	cmp	r5, r3
 8011e8c:	bf38      	it	cc
 8011e8e:	461d      	movcc	r5, r3
 8011e90:	0553      	lsls	r3, r2, #21
 8011e92:	d531      	bpl.n	8011ef8 <__ssputs_r+0xa0>
 8011e94:	4629      	mov	r1, r5
 8011e96:	f7ff f89d 	bl	8010fd4 <_malloc_r>
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	b950      	cbnz	r0, 8011eb4 <__ssputs_r+0x5c>
 8011e9e:	230c      	movs	r3, #12
 8011ea0:	f8ca 3000 	str.w	r3, [sl]
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eaa:	81a3      	strh	r3, [r4, #12]
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb4:	6921      	ldr	r1, [r4, #16]
 8011eb6:	464a      	mov	r2, r9
 8011eb8:	f7ff f80c 	bl	8010ed4 <memcpy>
 8011ebc:	89a3      	ldrh	r3, [r4, #12]
 8011ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec6:	81a3      	strh	r3, [r4, #12]
 8011ec8:	6126      	str	r6, [r4, #16]
 8011eca:	6165      	str	r5, [r4, #20]
 8011ecc:	444e      	add	r6, r9
 8011ece:	eba5 0509 	sub.w	r5, r5, r9
 8011ed2:	6026      	str	r6, [r4, #0]
 8011ed4:	60a5      	str	r5, [r4, #8]
 8011ed6:	463e      	mov	r6, r7
 8011ed8:	42be      	cmp	r6, r7
 8011eda:	d900      	bls.n	8011ede <__ssputs_r+0x86>
 8011edc:	463e      	mov	r6, r7
 8011ede:	4632      	mov	r2, r6
 8011ee0:	6820      	ldr	r0, [r4, #0]
 8011ee2:	4641      	mov	r1, r8
 8011ee4:	f7ff f804 	bl	8010ef0 <memmove>
 8011ee8:	68a3      	ldr	r3, [r4, #8]
 8011eea:	6822      	ldr	r2, [r4, #0]
 8011eec:	1b9b      	subs	r3, r3, r6
 8011eee:	4432      	add	r2, r6
 8011ef0:	60a3      	str	r3, [r4, #8]
 8011ef2:	6022      	str	r2, [r4, #0]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e7db      	b.n	8011eb0 <__ssputs_r+0x58>
 8011ef8:	462a      	mov	r2, r5
 8011efa:	f7ff ff87 	bl	8011e0c <_realloc_r>
 8011efe:	4606      	mov	r6, r0
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d1e1      	bne.n	8011ec8 <__ssputs_r+0x70>
 8011f04:	6921      	ldr	r1, [r4, #16]
 8011f06:	4650      	mov	r0, sl
 8011f08:	f7ff f814 	bl	8010f34 <_free_r>
 8011f0c:	e7c7      	b.n	8011e9e <__ssputs_r+0x46>
	...

08011f10 <_svfiprintf_r>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	4698      	mov	r8, r3
 8011f16:	898b      	ldrh	r3, [r1, #12]
 8011f18:	061b      	lsls	r3, r3, #24
 8011f1a:	b09d      	sub	sp, #116	; 0x74
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	460d      	mov	r5, r1
 8011f20:	4614      	mov	r4, r2
 8011f22:	d50e      	bpl.n	8011f42 <_svfiprintf_r+0x32>
 8011f24:	690b      	ldr	r3, [r1, #16]
 8011f26:	b963      	cbnz	r3, 8011f42 <_svfiprintf_r+0x32>
 8011f28:	2140      	movs	r1, #64	; 0x40
 8011f2a:	f7ff f853 	bl	8010fd4 <_malloc_r>
 8011f2e:	6028      	str	r0, [r5, #0]
 8011f30:	6128      	str	r0, [r5, #16]
 8011f32:	b920      	cbnz	r0, 8011f3e <_svfiprintf_r+0x2e>
 8011f34:	230c      	movs	r3, #12
 8011f36:	603b      	str	r3, [r7, #0]
 8011f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f3c:	e0d1      	b.n	80120e2 <_svfiprintf_r+0x1d2>
 8011f3e:	2340      	movs	r3, #64	; 0x40
 8011f40:	616b      	str	r3, [r5, #20]
 8011f42:	2300      	movs	r3, #0
 8011f44:	9309      	str	r3, [sp, #36]	; 0x24
 8011f46:	2320      	movs	r3, #32
 8011f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f50:	2330      	movs	r3, #48	; 0x30
 8011f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120fc <_svfiprintf_r+0x1ec>
 8011f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f5a:	f04f 0901 	mov.w	r9, #1
 8011f5e:	4623      	mov	r3, r4
 8011f60:	469a      	mov	sl, r3
 8011f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f66:	b10a      	cbz	r2, 8011f6c <_svfiprintf_r+0x5c>
 8011f68:	2a25      	cmp	r2, #37	; 0x25
 8011f6a:	d1f9      	bne.n	8011f60 <_svfiprintf_r+0x50>
 8011f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8011f70:	d00b      	beq.n	8011f8a <_svfiprintf_r+0x7a>
 8011f72:	465b      	mov	r3, fp
 8011f74:	4622      	mov	r2, r4
 8011f76:	4629      	mov	r1, r5
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7ff ff6d 	bl	8011e58 <__ssputs_r>
 8011f7e:	3001      	adds	r0, #1
 8011f80:	f000 80aa 	beq.w	80120d8 <_svfiprintf_r+0x1c8>
 8011f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f86:	445a      	add	r2, fp
 8011f88:	9209      	str	r2, [sp, #36]	; 0x24
 8011f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f000 80a2 	beq.w	80120d8 <_svfiprintf_r+0x1c8>
 8011f94:	2300      	movs	r3, #0
 8011f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f9e:	f10a 0a01 	add.w	sl, sl, #1
 8011fa2:	9304      	str	r3, [sp, #16]
 8011fa4:	9307      	str	r3, [sp, #28]
 8011fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011faa:	931a      	str	r3, [sp, #104]	; 0x68
 8011fac:	4654      	mov	r4, sl
 8011fae:	2205      	movs	r2, #5
 8011fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb4:	4851      	ldr	r0, [pc, #324]	; (80120fc <_svfiprintf_r+0x1ec>)
 8011fb6:	f7ee f913 	bl	80001e0 <memchr>
 8011fba:	9a04      	ldr	r2, [sp, #16]
 8011fbc:	b9d8      	cbnz	r0, 8011ff6 <_svfiprintf_r+0xe6>
 8011fbe:	06d0      	lsls	r0, r2, #27
 8011fc0:	bf44      	itt	mi
 8011fc2:	2320      	movmi	r3, #32
 8011fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fc8:	0711      	lsls	r1, r2, #28
 8011fca:	bf44      	itt	mi
 8011fcc:	232b      	movmi	r3, #43	; 0x2b
 8011fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8011fd8:	d015      	beq.n	8012006 <_svfiprintf_r+0xf6>
 8011fda:	9a07      	ldr	r2, [sp, #28]
 8011fdc:	4654      	mov	r4, sl
 8011fde:	2000      	movs	r0, #0
 8011fe0:	f04f 0c0a 	mov.w	ip, #10
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fea:	3b30      	subs	r3, #48	; 0x30
 8011fec:	2b09      	cmp	r3, #9
 8011fee:	d94e      	bls.n	801208e <_svfiprintf_r+0x17e>
 8011ff0:	b1b0      	cbz	r0, 8012020 <_svfiprintf_r+0x110>
 8011ff2:	9207      	str	r2, [sp, #28]
 8011ff4:	e014      	b.n	8012020 <_svfiprintf_r+0x110>
 8011ff6:	eba0 0308 	sub.w	r3, r0, r8
 8011ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8011ffe:	4313      	orrs	r3, r2
 8012000:	9304      	str	r3, [sp, #16]
 8012002:	46a2      	mov	sl, r4
 8012004:	e7d2      	b.n	8011fac <_svfiprintf_r+0x9c>
 8012006:	9b03      	ldr	r3, [sp, #12]
 8012008:	1d19      	adds	r1, r3, #4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	9103      	str	r1, [sp, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	bfbb      	ittet	lt
 8012012:	425b      	neglt	r3, r3
 8012014:	f042 0202 	orrlt.w	r2, r2, #2
 8012018:	9307      	strge	r3, [sp, #28]
 801201a:	9307      	strlt	r3, [sp, #28]
 801201c:	bfb8      	it	lt
 801201e:	9204      	strlt	r2, [sp, #16]
 8012020:	7823      	ldrb	r3, [r4, #0]
 8012022:	2b2e      	cmp	r3, #46	; 0x2e
 8012024:	d10c      	bne.n	8012040 <_svfiprintf_r+0x130>
 8012026:	7863      	ldrb	r3, [r4, #1]
 8012028:	2b2a      	cmp	r3, #42	; 0x2a
 801202a:	d135      	bne.n	8012098 <_svfiprintf_r+0x188>
 801202c:	9b03      	ldr	r3, [sp, #12]
 801202e:	1d1a      	adds	r2, r3, #4
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	9203      	str	r2, [sp, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	bfb8      	it	lt
 8012038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801203c:	3402      	adds	r4, #2
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801210c <_svfiprintf_r+0x1fc>
 8012044:	7821      	ldrb	r1, [r4, #0]
 8012046:	2203      	movs	r2, #3
 8012048:	4650      	mov	r0, sl
 801204a:	f7ee f8c9 	bl	80001e0 <memchr>
 801204e:	b140      	cbz	r0, 8012062 <_svfiprintf_r+0x152>
 8012050:	2340      	movs	r3, #64	; 0x40
 8012052:	eba0 000a 	sub.w	r0, r0, sl
 8012056:	fa03 f000 	lsl.w	r0, r3, r0
 801205a:	9b04      	ldr	r3, [sp, #16]
 801205c:	4303      	orrs	r3, r0
 801205e:	3401      	adds	r4, #1
 8012060:	9304      	str	r3, [sp, #16]
 8012062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012066:	4826      	ldr	r0, [pc, #152]	; (8012100 <_svfiprintf_r+0x1f0>)
 8012068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801206c:	2206      	movs	r2, #6
 801206e:	f7ee f8b7 	bl	80001e0 <memchr>
 8012072:	2800      	cmp	r0, #0
 8012074:	d038      	beq.n	80120e8 <_svfiprintf_r+0x1d8>
 8012076:	4b23      	ldr	r3, [pc, #140]	; (8012104 <_svfiprintf_r+0x1f4>)
 8012078:	bb1b      	cbnz	r3, 80120c2 <_svfiprintf_r+0x1b2>
 801207a:	9b03      	ldr	r3, [sp, #12]
 801207c:	3307      	adds	r3, #7
 801207e:	f023 0307 	bic.w	r3, r3, #7
 8012082:	3308      	adds	r3, #8
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	4433      	add	r3, r6
 801208a:	9309      	str	r3, [sp, #36]	; 0x24
 801208c:	e767      	b.n	8011f5e <_svfiprintf_r+0x4e>
 801208e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012092:	460c      	mov	r4, r1
 8012094:	2001      	movs	r0, #1
 8012096:	e7a5      	b.n	8011fe4 <_svfiprintf_r+0xd4>
 8012098:	2300      	movs	r3, #0
 801209a:	3401      	adds	r4, #1
 801209c:	9305      	str	r3, [sp, #20]
 801209e:	4619      	mov	r1, r3
 80120a0:	f04f 0c0a 	mov.w	ip, #10
 80120a4:	4620      	mov	r0, r4
 80120a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120aa:	3a30      	subs	r2, #48	; 0x30
 80120ac:	2a09      	cmp	r2, #9
 80120ae:	d903      	bls.n	80120b8 <_svfiprintf_r+0x1a8>
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d0c5      	beq.n	8012040 <_svfiprintf_r+0x130>
 80120b4:	9105      	str	r1, [sp, #20]
 80120b6:	e7c3      	b.n	8012040 <_svfiprintf_r+0x130>
 80120b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80120bc:	4604      	mov	r4, r0
 80120be:	2301      	movs	r3, #1
 80120c0:	e7f0      	b.n	80120a4 <_svfiprintf_r+0x194>
 80120c2:	ab03      	add	r3, sp, #12
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	462a      	mov	r2, r5
 80120c8:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <_svfiprintf_r+0x1f8>)
 80120ca:	a904      	add	r1, sp, #16
 80120cc:	4638      	mov	r0, r7
 80120ce:	f3af 8000 	nop.w
 80120d2:	1c42      	adds	r2, r0, #1
 80120d4:	4606      	mov	r6, r0
 80120d6:	d1d6      	bne.n	8012086 <_svfiprintf_r+0x176>
 80120d8:	89ab      	ldrh	r3, [r5, #12]
 80120da:	065b      	lsls	r3, r3, #25
 80120dc:	f53f af2c 	bmi.w	8011f38 <_svfiprintf_r+0x28>
 80120e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120e2:	b01d      	add	sp, #116	; 0x74
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	ab03      	add	r3, sp, #12
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	462a      	mov	r2, r5
 80120ee:	4b06      	ldr	r3, [pc, #24]	; (8012108 <_svfiprintf_r+0x1f8>)
 80120f0:	a904      	add	r1, sp, #16
 80120f2:	4638      	mov	r0, r7
 80120f4:	f7ff f990 	bl	8011418 <_printf_i>
 80120f8:	e7eb      	b.n	80120d2 <_svfiprintf_r+0x1c2>
 80120fa:	bf00      	nop
 80120fc:	08017380 	.word	0x08017380
 8012100:	0801738a 	.word	0x0801738a
 8012104:	00000000 	.word	0x00000000
 8012108:	08011e59 	.word	0x08011e59
 801210c:	08017386 	.word	0x08017386

08012110 <__sread>:
 8012110:	b510      	push	{r4, lr}
 8012112:	460c      	mov	r4, r1
 8012114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012118:	f000 f89c 	bl	8012254 <_read_r>
 801211c:	2800      	cmp	r0, #0
 801211e:	bfab      	itete	ge
 8012120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012122:	89a3      	ldrhlt	r3, [r4, #12]
 8012124:	181b      	addge	r3, r3, r0
 8012126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801212a:	bfac      	ite	ge
 801212c:	6563      	strge	r3, [r4, #84]	; 0x54
 801212e:	81a3      	strhlt	r3, [r4, #12]
 8012130:	bd10      	pop	{r4, pc}

08012132 <__swrite>:
 8012132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012136:	461f      	mov	r7, r3
 8012138:	898b      	ldrh	r3, [r1, #12]
 801213a:	05db      	lsls	r3, r3, #23
 801213c:	4605      	mov	r5, r0
 801213e:	460c      	mov	r4, r1
 8012140:	4616      	mov	r6, r2
 8012142:	d505      	bpl.n	8012150 <__swrite+0x1e>
 8012144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012148:	2302      	movs	r3, #2
 801214a:	2200      	movs	r2, #0
 801214c:	f000 f868 	bl	8012220 <_lseek_r>
 8012150:	89a3      	ldrh	r3, [r4, #12]
 8012152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801215a:	81a3      	strh	r3, [r4, #12]
 801215c:	4632      	mov	r2, r6
 801215e:	463b      	mov	r3, r7
 8012160:	4628      	mov	r0, r5
 8012162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012166:	f000 b817 	b.w	8012198 <_write_r>

0801216a <__sseek>:
 801216a:	b510      	push	{r4, lr}
 801216c:	460c      	mov	r4, r1
 801216e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012172:	f000 f855 	bl	8012220 <_lseek_r>
 8012176:	1c43      	adds	r3, r0, #1
 8012178:	89a3      	ldrh	r3, [r4, #12]
 801217a:	bf15      	itete	ne
 801217c:	6560      	strne	r0, [r4, #84]	; 0x54
 801217e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012186:	81a3      	strheq	r3, [r4, #12]
 8012188:	bf18      	it	ne
 801218a:	81a3      	strhne	r3, [r4, #12]
 801218c:	bd10      	pop	{r4, pc}

0801218e <__sclose>:
 801218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012192:	f000 b813 	b.w	80121bc <_close_r>
	...

08012198 <_write_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	; (80121b8 <_write_r+0x20>)
 801219c:	4604      	mov	r4, r0
 801219e:	4608      	mov	r0, r1
 80121a0:	4611      	mov	r1, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	602a      	str	r2, [r5, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	f7ef ffa5 	bl	80020f6 <_write>
 80121ac:	1c43      	adds	r3, r0, #1
 80121ae:	d102      	bne.n	80121b6 <_write_r+0x1e>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	b103      	cbz	r3, 80121b6 <_write_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}
 80121b8:	20016fe8 	.word	0x20016fe8

080121bc <_close_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d06      	ldr	r5, [pc, #24]	; (80121d8 <_close_r+0x1c>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4604      	mov	r4, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	602b      	str	r3, [r5, #0]
 80121c8:	f7ef ffb1 	bl	800212e <_close>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_close_r+0x1a>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_close_r+0x1a>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	20016fe8 	.word	0x20016fe8

080121dc <_fstat_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d07      	ldr	r5, [pc, #28]	; (80121fc <_fstat_r+0x20>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	4611      	mov	r1, r2
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	f7ef ffac 	bl	8002146 <_fstat>
 80121ee:	1c43      	adds	r3, r0, #1
 80121f0:	d102      	bne.n	80121f8 <_fstat_r+0x1c>
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	b103      	cbz	r3, 80121f8 <_fstat_r+0x1c>
 80121f6:	6023      	str	r3, [r4, #0]
 80121f8:	bd38      	pop	{r3, r4, r5, pc}
 80121fa:	bf00      	nop
 80121fc:	20016fe8 	.word	0x20016fe8

08012200 <_isatty_r>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	4d06      	ldr	r5, [pc, #24]	; (801221c <_isatty_r+0x1c>)
 8012204:	2300      	movs	r3, #0
 8012206:	4604      	mov	r4, r0
 8012208:	4608      	mov	r0, r1
 801220a:	602b      	str	r3, [r5, #0]
 801220c:	f7ef ffab 	bl	8002166 <_isatty>
 8012210:	1c43      	adds	r3, r0, #1
 8012212:	d102      	bne.n	801221a <_isatty_r+0x1a>
 8012214:	682b      	ldr	r3, [r5, #0]
 8012216:	b103      	cbz	r3, 801221a <_isatty_r+0x1a>
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	bd38      	pop	{r3, r4, r5, pc}
 801221c:	20016fe8 	.word	0x20016fe8

08012220 <_lseek_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d07      	ldr	r5, [pc, #28]	; (8012240 <_lseek_r+0x20>)
 8012224:	4604      	mov	r4, r0
 8012226:	4608      	mov	r0, r1
 8012228:	4611      	mov	r1, r2
 801222a:	2200      	movs	r2, #0
 801222c:	602a      	str	r2, [r5, #0]
 801222e:	461a      	mov	r2, r3
 8012230:	f7ef ffa4 	bl	800217c <_lseek>
 8012234:	1c43      	adds	r3, r0, #1
 8012236:	d102      	bne.n	801223e <_lseek_r+0x1e>
 8012238:	682b      	ldr	r3, [r5, #0]
 801223a:	b103      	cbz	r3, 801223e <_lseek_r+0x1e>
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	bd38      	pop	{r3, r4, r5, pc}
 8012240:	20016fe8 	.word	0x20016fe8

08012244 <_malloc_usable_size_r>:
 8012244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012248:	1f18      	subs	r0, r3, #4
 801224a:	2b00      	cmp	r3, #0
 801224c:	bfbc      	itt	lt
 801224e:	580b      	ldrlt	r3, [r1, r0]
 8012250:	18c0      	addlt	r0, r0, r3
 8012252:	4770      	bx	lr

08012254 <_read_r>:
 8012254:	b538      	push	{r3, r4, r5, lr}
 8012256:	4d07      	ldr	r5, [pc, #28]	; (8012274 <_read_r+0x20>)
 8012258:	4604      	mov	r4, r0
 801225a:	4608      	mov	r0, r1
 801225c:	4611      	mov	r1, r2
 801225e:	2200      	movs	r2, #0
 8012260:	602a      	str	r2, [r5, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	f7ef ff2a 	bl	80020bc <_read>
 8012268:	1c43      	adds	r3, r0, #1
 801226a:	d102      	bne.n	8012272 <_read_r+0x1e>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	b103      	cbz	r3, 8012272 <_read_r+0x1e>
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	bd38      	pop	{r3, r4, r5, pc}
 8012274:	20016fe8 	.word	0x20016fe8

08012278 <_init>:
 8012278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227a:	bf00      	nop
 801227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801227e:	bc08      	pop	{r3}
 8012280:	469e      	mov	lr, r3
 8012282:	4770      	bx	lr

08012284 <_fini>:
 8012284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012286:	bf00      	nop
 8012288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801228a:	bc08      	pop	{r3}
 801228c:	469e      	mov	lr, r3
 801228e:	4770      	bx	lr
