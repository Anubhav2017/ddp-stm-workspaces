
STM32746G-DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026b8  080026b8  000126b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .qspi         00000028  90000000  080026e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .init_array   00000004  08002708  08002708  00022708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800270c  0800270c  0002270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000000  08002710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000130  2000000c  0800271c  0003000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000013c  0800271c  0003013c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000bebf  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000209d  00000000  00000000  0003befb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00003e46  00000000  00000000  0003df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00042498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002555d  00000000  00000000  00042e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aafa  00000000  00000000  000683bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e953e  00000000  00000000  00072eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c3f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011f4  00000000  00000000  0015c448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002694 	.word	0x08002694

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002694 	.word	0x08002694

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000500:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8000502:	4604      	mov	r4, r0
{
 8000504:	b087      	sub	sp, #28
  if (Led == LED1)
 8000506:	b9c8      	cbnz	r0, 800053c <BSP_LED_Init+0x3c>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <BSP_LED_Init+0x40>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2502      	movs	r5, #2
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800050c:	a901      	add	r1, sp, #4
 800050e:	480d      	ldr	r0, [pc, #52]	; (8000544 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8000510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000528:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800052e:	f000 fb2d 	bl	8000b8c <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8000532:	4622      	mov	r2, r4
 8000534:	4629      	mov	r1, r5
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <BSP_LED_Init+0x44>)
 8000538:	f000 fcb0 	bl	8000e9c <HAL_GPIO_WritePin>
  }
}
 800053c:	b007      	add	sp, #28
 800053e:	bd30      	pop	{r4, r5, pc}
 8000540:	40023800 	.word	0x40023800
 8000544:	40022000 	.word	0x40022000

08000548 <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8000548:	b920      	cbnz	r0, 8000554 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2102      	movs	r1, #2
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <BSP_LED_On+0x10>)
 8000550:	f000 bca4 	b.w	8000e9c <HAL_GPIO_WritePin>
  }
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <BSP_LED_Toggle>:
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 800055c:	b918      	cbnz	r0, 8000566 <BSP_LED_Toggle+0xa>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800055e:	2102      	movs	r1, #2
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <BSP_LED_Toggle+0xc>)
 8000562:	f000 bca0 	b.w	8000ea6 <HAL_GPIO_TogglePin>
  }
}
 8000566:	4770      	bx	lr
 8000568:	40022000 	.word	0x40022000

0800056c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	490f      	ldr	r1, [pc, #60]	; (80005ac <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800056e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000570:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <SystemInit+0x44>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	f042 0201 	orr.w	r2, r2, #1
 8000584:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000586:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800058e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000592:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <SystemInit+0x48>)
 8000596:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800059e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005a6:	608b      	str	r3, [r1, #8]
#endif
}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	40023800 	.word	0x40023800
 80005b4:	24003010 	.word	0x24003010

080005b8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	4770      	bx	lr
	...

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005be:	4e0e      	ldr	r6, [pc, #56]	; (80005f8 <HAL_InitTick+0x3c>)
{
 80005c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c6:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <HAL_InitTick+0x40>)
 80005c8:	7830      	ldrb	r0, [r6, #0]
 80005ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80005ce:	6810      	ldr	r0, [r2, #0]
 80005d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d4:	f000 f8b0 	bl	8000738 <HAL_SYSTICK_Config>
 80005d8:	4604      	mov	r4, r0
 80005da:	b950      	cbnz	r0, 80005f2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	2d0f      	cmp	r5, #15
 80005de:	d808      	bhi.n	80005f2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e0:	4602      	mov	r2, r0
 80005e2:	4629      	mov	r1, r5
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e8:	f000 f852 	bl	8000690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ec:	4620      	mov	r0, r4
 80005ee:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80005f2:	2001      	movs	r0, #1
 80005f4:	e7fc      	b.n	80005f0 <HAL_InitTick+0x34>
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000000 	.word	0x20000000

08000600 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000602:	2003      	movs	r0, #3
{
 8000604:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000606:	6813      	ldr	r3, [r2, #0]
 8000608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060e:	f000 f82d 	bl	800066c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	200f      	movs	r0, #15
 8000614:	f7ff ffd2 	bl	80005bc <HAL_InitTick>
  HAL_MspInit();
 8000618:	f7ff ffce 	bl	80005b8 <HAL_MspInit>
}
 800061c:	2000      	movs	r0, #0
 800061e:	bd08      	pop	{r3, pc}
 8000620:	40023c00 	.word	0x40023c00

08000624 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <HAL_IncTick+0x10>)
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_IncTick+0x14>)
 8000628:	6811      	ldr	r1, [r2, #0]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	440b      	add	r3, r1
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200000e8 	.word	0x200000e8
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_GetTick+0x8>)
 800063e:	6818      	ldr	r0, [r3, #0]
}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200000e8 	.word	0x200000e8

08000648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000648:	b538      	push	{r3, r4, r5, lr}
 800064a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff fff6 	bl	800063c <HAL_GetTick>
 8000650:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000652:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000654:	bf1e      	ittt	ne
 8000656:	4b04      	ldrne	r3, [pc, #16]	; (8000668 <HAL_Delay+0x20>)
 8000658:	781b      	ldrbne	r3, [r3, #0]
 800065a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	1b43      	subs	r3, r0, r5
 8000662:	42a3      	cmp	r3, r4
 8000664:	d3fa      	bcc.n	800065c <HAL_Delay+0x14>
  {
  }
}
 8000666:	bd38      	pop	{r3, r4, r5, pc}
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800066e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000672:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800067a:	0412      	lsls	r2, r2, #16
 800067c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000688:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	68dc      	ldr	r4, [r3, #12]
 8000696:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	2d04      	cmp	r5, #4
 80006a2:	bf28      	it	cs
 80006a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	bf8c      	ite	hi
 80006ae:	3c03      	subhi	r4, #3
 80006b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006b6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	fa01 f104 	lsl.w	r1, r1, r4
 80006c8:	ea41 0302 	orr.w	r3, r1, r2
 80006cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80006d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80006d2:	db06      	blt.n	80006e2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006dc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006e0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	and.w	r0, r0, #15
 80006e6:	4a02      	ldr	r2, [pc, #8]	; (80006f0 <HAL_NVIC_SetPriority+0x60>)
 80006e8:	5413      	strb	r3, [r2, r0]
 80006ea:	e7f9      	b.n	80006e0 <HAL_NVIC_SetPriority+0x50>
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 001f 	and.w	r0, r0, #31
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x18>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000710:	2800      	cmp	r0, #0
 8000712:	db0d      	blt.n	8000730 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000714:	0943      	lsrs	r3, r0, #5
 8000716:	2201      	movs	r2, #1
 8000718:	f000 001f 	and.w	r0, r0, #31
 800071c:	3320      	adds	r3, #32
 800071e:	fa02 f000 	lsl.w	r0, r2, r0
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_NVIC_DisableIRQ+0x24>)
 8000724:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800072c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	3801      	subs	r0, #1
 800073a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800073e:	d20a      	bcs.n	8000756 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	21f0      	movs	r1, #240	; 0xf0
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000764:	6803      	ldr	r3, [r0, #0]
{
 8000766:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	2018      	movs	r0, #24
 800076a:	b2d9      	uxtb	r1, r3
 800076c:	3910      	subs	r1, #16
 800076e:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000772:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000774:	4c05      	ldr	r4, [pc, #20]	; (800078c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000776:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	5c20      	ldrb	r0, [r4, r0]
 800077a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800077c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000780:	f020 0003 	bic.w	r0, r0, #3
 8000784:	bf88      	it	hi
 8000786:	3004      	addhi	r0, #4
 8000788:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078a:	bd10      	pop	{r4, pc}
 800078c:	080026d0 	.word	0x080026d0

08000790 <HAL_DMA_Init>:
{
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000794:	f7ff ff52 	bl	800063c <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079a:	2c00      	cmp	r4, #0
 800079c:	d073      	beq.n	8000886 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 800079e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007ac:	6813      	ldr	r3, [r2, #0]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b4:	6821      	ldr	r1, [r4, #0]
 80007b6:	680b      	ldr	r3, [r1, #0]
 80007b8:	07d8      	lsls	r0, r3, #31
 80007ba:	d42f      	bmi.n	800081c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007bc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007be:	4d33      	ldr	r5, [pc, #204]	; (800088c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	68e2      	ldr	r2, [r4, #12]
 80007cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007ce:	6922      	ldr	r2, [r4, #16]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	6962      	ldr	r2, [r4, #20]
 80007d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007d6:	69e2      	ldr	r2, [r4, #28]
 80007d8:	4303      	orrs	r3, r0
 80007da:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007dc:	6a22      	ldr	r2, [r4, #32]
 80007de:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007e8:	bf02      	ittt	eq
 80007ea:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007ee:	4335      	orreq	r5, r6
 80007f0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007f6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007f8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007fc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000800:	d133      	bne.n	800086a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000802:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000804:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	b37d      	cbz	r5, 800086a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080a:	b990      	cbnz	r0, 8000832 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 800080c:	2a01      	cmp	r2, #1
 800080e:	d021      	beq.n	8000854 <HAL_DMA_Init+0xc4>
 8000810:	f032 0202 	bics.w	r2, r2, #2
 8000814:	d129      	bne.n	800086a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000816:	01ea      	lsls	r2, r5, #7
 8000818:	d527      	bpl.n	800086a <HAL_DMA_Init+0xda>
 800081a:	e01e      	b.n	800085a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800081c:	f7ff ff0e 	bl	800063c <HAL_GetTick>
 8000820:	1b40      	subs	r0, r0, r5
 8000822:	2805      	cmp	r0, #5
 8000824:	d9c6      	bls.n	80007b4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000826:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000828:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800082c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000830:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000832:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000836:	d114      	bne.n	8000862 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8000838:	2a03      	cmp	r2, #3
 800083a:	d816      	bhi.n	800086a <HAL_DMA_Init+0xda>
 800083c:	a001      	add	r0, pc, #4	; (adr r0, 8000844 <HAL_DMA_Init+0xb4>)
 800083e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000842:	bf00      	nop
 8000844:	0800085b 	.word	0x0800085b
 8000848:	08000817 	.word	0x08000817
 800084c:	0800085b 	.word	0x0800085b
 8000850:	08000855 	.word	0x08000855
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000854:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000858:	d107      	bne.n	800086a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800085c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	e7e4      	b.n	800082c <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000862:	2a02      	cmp	r2, #2
 8000864:	d9f9      	bls.n	800085a <HAL_DMA_Init+0xca>
 8000866:	2a03      	cmp	r2, #3
 8000868:	d0d5      	beq.n	8000816 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800086c:	4620      	mov	r0, r4
 800086e:	f7ff ff79 	bl	8000764 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000872:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000874:	233f      	movs	r3, #63	; 0x3f
 8000876:	4093      	lsls	r3, r2
 8000878:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800087c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000884:	e7d4      	b.n	8000830 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e7d2      	b.n	8000830 <HAL_DMA_Init+0xa0>
 800088a:	bf00      	nop
 800088c:	f010803f 	.word	0xf010803f

08000890 <HAL_DMA_DeInit>:
{
 8000890:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8000892:	4605      	mov	r5, r0
 8000894:	b320      	cbz	r0, 80008e0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000896:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800089a:	2b02      	cmp	r3, #2
 800089c:	b2dc      	uxtb	r4, r3
 800089e:	d01d      	beq.n	80008dc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80008a0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80008a2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	f022 0201 	bic.w	r2, r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80008ac:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80008ae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80008b0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80008b2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80008b4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80008b6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80008b8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008ba:	f7ff ff53 	bl	8000764 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80008c0:	233f      	movs	r3, #63	; 0x3f
 80008c2:	4093      	lsls	r3, r2
 80008c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008c6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80008c8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80008cc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80008d0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80008d4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80008d8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80008dc:	4620      	mov	r0, r4
 80008de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80008e0:	2401      	movs	r4, #1
 80008e2:	e7fb      	b.n	80008dc <HAL_DMA_DeInit+0x4c>

080008e4 <HAL_DMA_Start_IT>:
{
 80008e4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80008e6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80008ec:	2c01      	cmp	r4, #1
 80008ee:	d034      	beq.n	800095a <HAL_DMA_Start_IT+0x76>
 80008f0:	2401      	movs	r4, #1
 80008f2:	2500      	movs	r5, #0
 80008f4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008f8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80008fc:	2c01      	cmp	r4, #1
 80008fe:	f04f 0402 	mov.w	r4, #2
 8000902:	d128      	bne.n	8000956 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000904:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000908:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800090a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800090c:	6825      	ldr	r5, [r4, #0]
 800090e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000912:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000914:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000916:	6883      	ldr	r3, [r0, #8]
 8000918:	2b40      	cmp	r3, #64	; 0x40
 800091a:	d119      	bne.n	8000950 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800091c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800091e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000920:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000922:	233f      	movs	r3, #63	; 0x3f
 8000924:	4093      	lsls	r3, r2
 8000926:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	f043 0316 	orr.w	r3, r3, #22
 800092e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000930:	6963      	ldr	r3, [r4, #20]
 8000932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000936:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000938:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800093a:	b11b      	cbz	r3, 8000944 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000944:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000946:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6023      	str	r3, [r4, #0]
}
 800094e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000950:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000952:	60e2      	str	r2, [r4, #12]
 8000954:	e7e4      	b.n	8000920 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000956:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800095a:	2002      	movs	r0, #2
 800095c:	e7f7      	b.n	800094e <HAL_DMA_Start_IT+0x6a>

0800095e <HAL_DMA_Abort>:
{
 800095e:	b570      	push	{r4, r5, r6, lr}
 8000960:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000962:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fe6a 	bl	800063c <HAL_GetTick>
 8000968:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800096a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800096e:	2b02      	cmp	r3, #2
 8000970:	d006      	beq.n	8000980 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000972:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8000974:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000976:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000978:	2300      	movs	r3, #0
 800097a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800097e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f022 0216 	bic.w	r2, r2, #22
 8000988:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000990:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000992:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000994:	b90a      	cbnz	r2, 800099a <HAL_DMA_Abort+0x3c>
 8000996:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000998:	b11a      	cbz	r2, 80009a2 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f022 0208 	bic.w	r2, r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f013 0301 	ands.w	r3, r3, #1
 80009b2:	d10a      	bne.n	80009ca <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009b6:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80009b8:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ba:	408a      	lsls	r2, r1
 80009bc:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80009be:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80009c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80009c4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80009c8:	e7d9      	b.n	800097e <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009ca:	f7ff fe37 	bl	800063c <HAL_GetTick>
 80009ce:	1b40      	subs	r0, r0, r5
 80009d0:	2805      	cmp	r0, #5
 80009d2:	d9ea      	bls.n	80009aa <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009d4:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009d6:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009d8:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80009da:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009dc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80009e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80009e4:	e7cb      	b.n	800097e <HAL_DMA_Abort+0x20>

080009e6 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009e6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d003      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009f2:	2001      	movs	r0, #1
 80009f4:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80009f6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80009f8:	2305      	movs	r3, #5
 80009fa:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80009fe:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a00:	6813      	ldr	r3, [r2, #0]
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a0c:	2300      	movs	r3, #0
{
 8000a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000a10:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a12:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000a14:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <HAL_DMA_IRQHandler+0x178>)
{
 8000a16:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a18:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000a1a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000a1e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a20:	409a      	lsls	r2, r3
 8000a22:	4232      	tst	r2, r6
 8000a24:	d00c      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a26:	6801      	ldr	r1, [r0, #0]
 8000a28:	6808      	ldr	r0, [r1, #0]
 8000a2a:	0740      	lsls	r0, r0, #29
 8000a2c:	d508      	bpl.n	8000a40 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2e:	6808      	ldr	r0, [r1, #0]
 8000a30:	f020 0004 	bic.w	r0, r0, #4
 8000a34:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a36:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a38:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a3a:	f042 0201 	orr.w	r2, r2, #1
 8000a3e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a40:	2201      	movs	r2, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	4232      	tst	r2, r6
 8000a46:	d008      	beq.n	8000a5a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a48:	6821      	ldr	r1, [r4, #0]
 8000a4a:	6949      	ldr	r1, [r1, #20]
 8000a4c:	0609      	lsls	r1, r1, #24
 8000a4e:	d504      	bpl.n	8000a5a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a50:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a54:	f042 0202 	orr.w	r2, r2, #2
 8000a58:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	4232      	tst	r2, r6
 8000a60:	d008      	beq.n	8000a74 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a62:	6821      	ldr	r1, [r4, #0]
 8000a64:	6809      	ldr	r1, [r1, #0]
 8000a66:	0788      	lsls	r0, r1, #30
 8000a68:	d504      	bpl.n	8000a74 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a6a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a6e:	f042 0204 	orr.w	r2, r2, #4
 8000a72:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a74:	2210      	movs	r2, #16
 8000a76:	409a      	lsls	r2, r3
 8000a78:	4232      	tst	r2, r6
 8000a7a:	d010      	beq.n	8000a9e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	0709      	lsls	r1, r1, #28
 8000a82:	d50c      	bpl.n	8000a9e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a84:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	0350      	lsls	r0, r2, #13
 8000a8a:	d537      	bpl.n	8000afc <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	0319      	lsls	r1, r3, #12
 8000a90:	d401      	bmi.n	8000a96 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a94:	e000      	b.n	8000a98 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000a98:	b10b      	cbz	r3, 8000a9e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	408a      	lsls	r2, r1
 8000aa4:	4232      	tst	r2, r6
 8000aa6:	d03a      	beq.n	8000b1e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	06c6      	lsls	r6, r0, #27
 8000aae:	d536      	bpl.n	8000b1e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ab0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ab2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000ab6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000aba:	d127      	bne.n	8000b0c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000abc:	f022 0216 	bic.w	r2, r2, #22
 8000ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000acc:	b90a      	cbnz	r2, 8000ad2 <HAL_DMA_IRQHandler+0xc6>
 8000ace:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ad0:	b11a      	cbz	r2, 8000ada <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	f022 0208 	bic.w	r2, r2, #8
 8000ad8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ada:	233f      	movs	r3, #63	; 0x3f
 8000adc:	408b      	lsls	r3, r1
 8000ade:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000aec:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d045      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000af2:	4620      	mov	r0, r4
}
 8000af4:	b003      	add	sp, #12
 8000af6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000afa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	05d2      	lsls	r2, r2, #23
 8000b00:	d4c7      	bmi.n	8000a92 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	f022 0208 	bic.w	r2, r2, #8
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e7c2      	b.n	8000a92 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b0c:	0350      	lsls	r0, r2, #13
 8000b0e:	d527      	bpl.n	8000b60 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	0319      	lsls	r1, r3, #12
 8000b14:	d431      	bmi.n	8000b7a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000b16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000b18:	b10b      	cbz	r3, 8000b1e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b20:	b36b      	cbz	r3, 8000b7e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b24:	07da      	lsls	r2, r3, #31
 8000b26:	d519      	bpl.n	8000b5c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000b28:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000b2c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000b2e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b32:	2305      	movs	r3, #5
 8000b34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000b40:	9b01      	ldr	r3, [sp, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	42bb      	cmp	r3, r7
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	d802      	bhi.n	8000b50 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b4a:	6813      	ldr	r3, [r2, #0]
 8000b4c:	07db      	lsls	r3, r3, #31
 8000b4e:	d4f7      	bmi.n	8000b40 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b5e:	e7c6      	b.n	8000aee <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b66:	d108      	bne.n	8000b7a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b68:	6819      	ldr	r1, [r3, #0]
 8000b6a:	f021 0110 	bic.w	r1, r1, #16
 8000b6e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000b70:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000b72:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b7c:	e7cc      	b.n	8000b18 <HAL_DMA_IRQHandler+0x10c>
}
 8000b7e:	b003      	add	sp, #12
 8000b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8000b88:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b90:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000d50 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b96:	4a6c      	ldr	r2, [pc, #432]	; (8000d48 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b98:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000d54 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8000b9c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000ba0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000ba6:	43ac      	bics	r4, r5
 8000ba8:	f040 80b4 	bne.w	8000d14 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bac:	684c      	ldr	r4, [r1, #4]
 8000bae:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000bb2:	2503      	movs	r5, #3
 8000bb4:	f024 0c10 	bic.w	ip, r4, #16
 8000bb8:	fa05 f50e 	lsl.w	r5, r5, lr
 8000bbc:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8000bc0:	43ed      	mvns	r5, r5
 8000bc2:	2f01      	cmp	r7, #1
 8000bc4:	d811      	bhi.n	8000bea <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 8000bc6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bc8:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bcc:	68cf      	ldr	r7, [r1, #12]
 8000bce:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bd2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000bd6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bd8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bda:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bde:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000be2:	409f      	lsls	r7, r3
 8000be4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000be8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bea:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bf0:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf4:	688f      	ldr	r7, [r1, #8]
 8000bf6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bfa:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000bfe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c00:	d116      	bne.n	8000c30 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8000c02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c06:	f003 0b07 	and.w	fp, r3, #7
 8000c0a:	f04f 0c0f 	mov.w	ip, #15
 8000c0e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c12:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c16:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c1a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c1e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c22:	690f      	ldr	r7, [r1, #16]
 8000c24:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c28:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c2c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000c30:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c32:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c34:	f004 0703 	and.w	r7, r4, #3
 8000c38:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000c3c:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8000c40:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c42:	00e5      	lsls	r5, r4, #3
 8000c44:	d566      	bpl.n	8000d14 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c4a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c4e:	f003 0c03 	and.w	ip, r3, #3
 8000c52:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000c5a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c5e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000c66:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c6a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c6e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000c72:	9501      	str	r5, [sp, #4]
 8000c74:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c76:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000c7a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c7e:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c82:	4d32      	ldr	r5, [pc, #200]	; (8000d4c <HAL_GPIO_Init+0x1c0>)
 8000c84:	42a8      	cmp	r0, r5
 8000c86:	d04c      	beq.n	8000d22 <HAL_GPIO_Init+0x196>
 8000c88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	d04a      	beq.n	8000d26 <HAL_GPIO_Init+0x19a>
 8000c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d048      	beq.n	8000d2a <HAL_GPIO_Init+0x19e>
 8000c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c9c:	42a8      	cmp	r0, r5
 8000c9e:	d046      	beq.n	8000d2e <HAL_GPIO_Init+0x1a2>
 8000ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ca4:	42a8      	cmp	r0, r5
 8000ca6:	d044      	beq.n	8000d32 <HAL_GPIO_Init+0x1a6>
 8000ca8:	4548      	cmp	r0, r9
 8000caa:	d044      	beq.n	8000d36 <HAL_GPIO_Init+0x1aa>
 8000cac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000cb0:	42a8      	cmp	r0, r5
 8000cb2:	d042      	beq.n	8000d3a <HAL_GPIO_Init+0x1ae>
 8000cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	d040      	beq.n	8000d3e <HAL_GPIO_Init+0x1b2>
 8000cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc0:	42a8      	cmp	r0, r5
 8000cc2:	d03e      	beq.n	8000d42 <HAL_GPIO_Init+0x1b6>
 8000cc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	bf0c      	ite	eq
 8000ccc:	2509      	moveq	r5, #9
 8000cce:	250a      	movne	r5, #10
 8000cd0:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cd8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cdc:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000ce2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ce4:	bf0c      	ite	eq
 8000ce6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ce8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000cee:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000cf0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	bf0c      	ite	eq
 8000cf4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cf6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cfc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000cfe:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	bf0c      	ite	eq
 8000d02:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d04:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d06:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d08:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d0a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	bf54      	ite	pl
 8000d0e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d10:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d12:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d14:	3301      	adds	r3, #1
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	f47f af40 	bne.w	8000b9c <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8000d1c:	b003      	add	sp, #12
 8000d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d22:	2500      	movs	r5, #0
 8000d24:	e7d4      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d26:	2501      	movs	r5, #1
 8000d28:	e7d2      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d2a:	2502      	movs	r5, #2
 8000d2c:	e7d0      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d2e:	2503      	movs	r5, #3
 8000d30:	e7ce      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d32:	2504      	movs	r5, #4
 8000d34:	e7cc      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d36:	2505      	movs	r5, #5
 8000d38:	e7ca      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d3a:	2506      	movs	r5, #6
 8000d3c:	e7c8      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d3e:	2507      	movs	r5, #7
 8000d40:	e7c6      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d42:	2508      	movs	r5, #8
 8000d44:	e7c4      	b.n	8000cd0 <HAL_GPIO_Init+0x144>
 8000d46:	bf00      	nop
 8000d48:	40013c00 	.word	0x40013c00
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021400 	.word	0x40021400

08000d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d5c:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d5e:	4c4a      	ldr	r4, [pc, #296]	; (8000e88 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000d60:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8000e90 <HAL_GPIO_DeInit+0x138>
 8000d64:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8000e94 <HAL_GPIO_DeInit+0x13c>
 8000d68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000e98 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8000d72:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8000d76:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8000d7a:	d16e      	bne.n	8000e5a <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8000d7c:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d80:	f002 0c03 	and.w	ip, r2, #3
 8000d84:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_GPIO_DeInit+0x134>)
 8000d88:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d96:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8000d9a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d9e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000da2:	d05f      	beq.n	8000e64 <HAL_GPIO_DeInit+0x10c>
 8000da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da8:	4298      	cmp	r0, r3
 8000daa:	d05d      	beq.n	8000e68 <HAL_GPIO_DeInit+0x110>
 8000dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db0:	4298      	cmp	r0, r3
 8000db2:	d05b      	beq.n	8000e6c <HAL_GPIO_DeInit+0x114>
 8000db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db8:	4298      	cmp	r0, r3
 8000dba:	d059      	beq.n	8000e70 <HAL_GPIO_DeInit+0x118>
 8000dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d057      	beq.n	8000e74 <HAL_GPIO_DeInit+0x11c>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d057      	beq.n	8000e78 <HAL_GPIO_DeInit+0x120>
 8000dc8:	4550      	cmp	r0, sl
 8000dca:	d057      	beq.n	8000e7c <HAL_GPIO_DeInit+0x124>
 8000dcc:	4558      	cmp	r0, fp
 8000dce:	d057      	beq.n	8000e80 <HAL_GPIO_DeInit+0x128>
 8000dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d055      	beq.n	8000e84 <HAL_GPIO_DeInit+0x12c>
 8000dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	bf0c      	ite	eq
 8000de0:	2309      	moveq	r3, #9
 8000de2:	230a      	movne	r3, #10
 8000de4:	fa03 f30c 	lsl.w	r3, r3, ip
 8000de8:	4543      	cmp	r3, r8
 8000dea:	d113      	bne.n	8000e14 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	ea23 0307 	bic.w	r3, r3, r7
 8000df2:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	ea23 0307 	bic.w	r3, r3, r7
 8000dfa:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000dfc:	68a3      	ldr	r3, [r4, #8]
 8000dfe:	ea23 0307 	bic.w	r3, r3, r7
 8000e02:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000e04:	68e3      	ldr	r3, [r4, #12]
 8000e06:	ea23 0707 	bic.w	r7, r3, r7
 8000e0a:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000e0c:	68ab      	ldr	r3, [r5, #8]
 8000e0e:	ea23 0606 	bic.w	r6, r3, r6
 8000e12:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e14:	2603      	movs	r6, #3
 8000e16:	0053      	lsls	r3, r2, #1
 8000e18:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e1a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e1e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e22:	270f      	movs	r7, #15
 8000e24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e28:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2c:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e30:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e32:	fa22 f506 	lsr.w	r5, r2, r6
 8000e36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8000e3a:	6a2e      	ldr	r6, [r5, #32]
 8000e3c:	ea26 0707 	bic.w	r7, r6, r7
 8000e40:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e42:	68c5      	ldr	r5, [r0, #12]
 8000e44:	ea25 0503 	bic.w	r5, r5, r3
 8000e48:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	6845      	ldr	r5, [r0, #4]
 8000e4c:	ea25 050e 	bic.w	r5, r5, lr
 8000e50:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e52:	6885      	ldr	r5, [r0, #8]
 8000e54:	ea25 0303 	bic.w	r3, r5, r3
 8000e58:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e5a:	3201      	adds	r2, #1
 8000e5c:	2a10      	cmp	r2, #16
 8000e5e:	d185      	bne.n	8000d6c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8000e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e64:	2300      	movs	r3, #0
 8000e66:	e7bd      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e7bb      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e7b9      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e70:	2303      	movs	r3, #3
 8000e72:	e7b7      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e74:	2304      	movs	r3, #4
 8000e76:	e7b5      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e78:	2305      	movs	r3, #5
 8000e7a:	e7b3      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	e7b1      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e80:	2307      	movs	r3, #7
 8000e82:	e7af      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e84:	2308      	movs	r3, #8
 8000e86:	e7ad      	b.n	8000de4 <HAL_GPIO_DeInit+0x8c>
 8000e88:	40013c00 	.word	0x40013c00
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00

08000e9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e9c:	b10a      	cbz	r2, 8000ea2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e9e:	6181      	str	r1, [r0, #24]
  }
}
 8000ea0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ea2:	0409      	lsls	r1, r1, #16
 8000ea4:	e7fb      	b.n	8000e9e <HAL_GPIO_WritePin+0x2>

08000ea6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea8:	ea01 0203 	and.w	r2, r1, r3
 8000eac:	ea21 0103 	bic.w	r1, r1, r3
 8000eb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eb4:	6181      	str	r1, [r0, #24]
}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000eba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ebe:	4c19      	ldr	r4, [pc, #100]	; (8000f24 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff fbb0 	bl	800063c <HAL_GetTick>
 8000edc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	03da      	lsls	r2, r3, #15
 8000ee2:	d50c      	bpl.n	8000efe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ee4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ee6:	4d0f      	ldr	r5, [pc, #60]	; (8000f24 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000eee:	f7ff fba5 	bl	800063c <HAL_GetTick>
 8000ef2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ef4:	686b      	ldr	r3, [r5, #4]
 8000ef6:	039b      	lsls	r3, r3, #14
 8000ef8:	d50a      	bpl.n	8000f10 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000efa:	2000      	movs	r0, #0
 8000efc:	e006      	b.n	8000f0c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000efe:	f7ff fb9d 	bl	800063c <HAL_GetTick>
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f08:	d9e9      	bls.n	8000ede <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
}
 8000f0c:	b003      	add	sp, #12
 8000f0e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f10:	f7ff fb94 	bl	800063c <HAL_GetTick>
 8000f14:	1b00      	subs	r0, r0, r4
 8000f16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f1a:	d9eb      	bls.n	8000ef4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000f1c:	e7f5      	b.n	8000f0a <HAL_PWREx_EnableOverDrive+0x52>
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <QSPI_DMATxCplt>:
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 8000f28:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	4770      	bx	lr

08000f3a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8000f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8000f3e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8000f40:	b136      	cbz	r6, 8000f50 <QSPI_Config+0x16>
 8000f42:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8000f46:	d003      	beq.n	8000f50 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8000f48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000f4a:	6804      	ldr	r4, [r0, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8000f50:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8000f54:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8000f58:	f1ba 0f00 	cmp.w	sl, #0
 8000f5c:	d04e      	beq.n	8000ffc <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8000f5e:	694b      	ldr	r3, [r1, #20]
 8000f60:	ea46 0a0a 	orr.w	sl, r6, sl
 8000f64:	6805      	ldr	r5, [r0, #0]
 8000f66:	f8d1 8000 	ldr.w	r8, [r1]
 8000f6a:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 8000f6e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000f70:	ea4a 0a02 	orr.w	sl, sl, r2
 8000f74:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 8000f78:	f1bc 0f00 	cmp.w	ip, #0
 8000f7c:	d026      	beq.n	8000fcc <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8000f7e:	688b      	ldr	r3, [r1, #8]
 8000f80:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000f84:	690e      	ldr	r6, [r1, #16]
 8000f86:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000f88:	b1a7      	cbz	r7, 8000fb4 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000f8a:	ea48 0307 	orr.w	r3, r8, r7
 8000f8e:	4323      	orrs	r3, r4
 8000f90:	ea43 0309 	orr.w	r3, r3, r9
 8000f94:	4303      	orrs	r3, r0
 8000f96:	68c8      	ldr	r0, [r1, #12]
 8000f98:	4333      	orrs	r3, r6
 8000f9a:	4303      	orrs	r3, r0
 8000f9c:	ea43 030e 	orr.w	r3, r3, lr
 8000fa0:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8000fa4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000fa8:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8000faa:	d001      	beq.n	8000fb0 <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8000fac:	684b      	ldr	r3, [r1, #4]
 8000fae:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8000fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000fb4:	ea48 0304 	orr.w	r3, r8, r4
 8000fb8:	ea43 0309 	orr.w	r3, r3, r9
 8000fbc:	4303      	orrs	r3, r0
 8000fbe:	4333      	orrs	r3, r6
 8000fc0:	ea43 030e 	orr.w	r3, r3, lr
 8000fc4:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000fc8:	616b      	str	r3, [r5, #20]
 8000fca:	e7f1      	b.n	8000fb0 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000fcc:	b167      	cbz	r7, 8000fe8 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000fce:	ea48 0307 	orr.w	r3, r8, r7
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	ea43 0309 	orr.w	r3, r3, r9
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	68c8      	ldr	r0, [r1, #12]
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	ea43 030e 	orr.w	r3, r3, lr
 8000fe2:	ea43 030a 	orr.w	r3, r3, sl
 8000fe6:	e7dd      	b.n	8000fa4 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000fe8:	ea48 0304 	orr.w	r3, r8, r4
 8000fec:	ea43 0309 	orr.w	r3, r3, r9
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	ea43 030e 	orr.w	r3, r3, lr
 8000ff6:	ea43 030a 	orr.w	r3, r3, sl
 8000ffa:	e7e5      	b.n	8000fc8 <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8000ffc:	f1bc 0f00 	cmp.w	ip, #0
 8001000:	d02c      	beq.n	800105c <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001002:	6804      	ldr	r4, [r0, #0]
 8001004:	688b      	ldr	r3, [r1, #8]
 8001006:	6908      	ldr	r0, [r1, #16]
 8001008:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800100a:	ea46 030c 	orr.w	r3, r6, ip
 800100e:	694e      	ldr	r6, [r1, #20]
 8001010:	ea43 0502 	orr.w	r5, r3, r2
 8001014:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8001018:	04b6      	lsls	r6, r6, #18
 800101a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 800101e:	b1a7      	cbz	r7, 800104a <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001020:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001022:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001026:	ea40 0008 	orr.w	r0, r0, r8
 800102a:	ea43 0300 	orr.w	r3, r3, r0
 800102e:	68c8      	ldr	r0, [r1, #12]
 8001030:	ea43 030c 	orr.w	r3, r3, ip
 8001034:	ea43 0300 	orr.w	r3, r3, r0
 8001038:	ea43 0306 	orr.w	r3, r3, r6
 800103c:	ea43 0305 	orr.w	r3, r3, r5
 8001040:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001042:	d0b5      	beq.n	8000fb0 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001044:	684b      	ldr	r3, [r1, #4]
 8001046:	61a3      	str	r3, [r4, #24]
 8001048:	e7b2      	b.n	8000fb0 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800104a:	ea40 0008 	orr.w	r0, r0, r8
 800104e:	4303      	orrs	r3, r0
 8001050:	ea43 030c 	orr.w	r3, r3, ip
 8001054:	4333      	orrs	r3, r6
 8001056:	432b      	orrs	r3, r5
 8001058:	6163      	str	r3, [r4, #20]
 800105a:	e7a9      	b.n	8000fb0 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800105c:	b1d7      	cbz	r7, 8001094 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800105e:	ea46 0307 	orr.w	r3, r6, r7
 8001062:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001064:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001066:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800106a:	ea43 0302 	orr.w	r3, r3, r2
 800106e:	ea43 0304 	orr.w	r3, r3, r4
 8001072:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8001074:	ea43 0304 	orr.w	r3, r3, r4
 8001078:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800107a:	ea43 0304 	orr.w	r3, r3, r4
 800107e:	68cc      	ldr	r4, [r1, #12]
 8001080:	ea43 0304 	orr.w	r3, r3, r4
 8001084:	694c      	ldr	r4, [r1, #20]
 8001086:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800108a:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800108c:	d090      	beq.n	8000fb0 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800108e:	684b      	ldr	r3, [r1, #4]
 8001090:	6183      	str	r3, [r0, #24]
 8001092:	e78d      	b.n	8000fb0 <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001094:	2e00      	cmp	r6, #0
 8001096:	d08b      	beq.n	8000fb0 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001098:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800109a:	6800      	ldr	r0, [r0, #0]
 800109c:	4333      	orrs	r3, r6
 800109e:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80010a0:	431a      	orrs	r2, r3
 80010a2:	694b      	ldr	r3, [r1, #20]
 80010a4:	4332      	orrs	r2, r6
 80010a6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80010a8:	4332      	orrs	r2, r6
 80010aa:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80010ae:	6142      	str	r2, [r0, #20]
}
 80010b0:	e77e      	b.n	8000fb0 <QSPI_Config+0x76>

080010b2 <QSPI_WaitFlagStateUntilTimeout>:
{
 80010b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80010ba:	4604      	mov	r4, r0
 80010bc:	460e      	mov	r6, r1
 80010be:	4615      	mov	r5, r2
 80010c0:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	6893      	ldr	r3, [r2, #8]
 80010c6:	4233      	tst	r3, r6
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	42ab      	cmp	r3, r5
 80010d0:	d101      	bne.n	80010d6 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80010d2:	2000      	movs	r0, #0
 80010d4:	e012      	b.n	80010fc <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80010d6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80010da:	d0f3      	beq.n	80010c4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010dc:	f7ff faae 	bl	800063c <HAL_GetTick>
 80010e0:	1bc0      	subs	r0, r0, r7
 80010e2:	4540      	cmp	r0, r8
 80010e4:	d802      	bhi.n	80010ec <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80010e6:	f1b8 0f00 	cmp.w	r8, #0
 80010ea:	d1ea      	bne.n	80010c2 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80010ec:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80010ee:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80010f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80010f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80010fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001100 <HAL_QSPI_Init>:
{
 8001100:	b530      	push	{r4, r5, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8001106:	f7ff fa99 	bl	800063c <HAL_GetTick>
 800110a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800110c:	2c00      	cmp	r4, #0
 800110e:	d047      	beq.n	80011a0 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001110:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001114:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001118:	b94a      	cbnz	r2, 800112e <HAL_QSPI_Init+0x2e>
 800111a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800111c:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800111e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8001122:	f001 f973 	bl	800240c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001126:	f241 3288 	movw	r2, #5000	; 0x1388
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	68a1      	ldr	r1, [r4, #8]
 8001132:	6802      	ldr	r2, [r0, #0]
 8001134:	3901      	subs	r1, #1
 8001136:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800113a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800113e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001140:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001142:	4620      	mov	r0, r4
 8001144:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001146:	9200      	str	r2, [sp, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	f7ff ffb2 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800114e:	bb10      	cbnz	r0, 8001196 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	69e5      	ldr	r5, [r4, #28]
 8001154:	68e3      	ldr	r3, [r4, #12]
 8001156:	6811      	ldr	r1, [r2, #0]
 8001158:	432b      	orrs	r3, r5
 800115a:	6a25      	ldr	r5, [r4, #32]
 800115c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001160:	432b      	orrs	r3, r5
 8001162:	6865      	ldr	r5, [r4, #4]
 8001164:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8001168:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800116c:	430b      	orrs	r3, r1
 800116e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001170:	6855      	ldr	r5, [r2, #4]
 8001172:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001176:	430b      	orrs	r3, r1
 8001178:	6921      	ldr	r1, [r4, #16]
 800117a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800117e:	4909      	ldr	r1, [pc, #36]	; (80011a4 <HAL_QSPI_Init+0xa4>)
 8001180:	4029      	ands	r1, r5
 8001182:	430b      	orrs	r3, r1
 8001184:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800118e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001190:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001192:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001196:	2300      	movs	r3, #0
 8001198:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800119c:	b005      	add	sp, #20
 800119e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
 80011a2:	e7fb      	b.n	800119c <HAL_QSPI_Init+0x9c>
 80011a4:	ffe0f8fe 	.word	0xffe0f8fe

080011a8 <HAL_QSPI_DeInit>:
{
 80011a8:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80011aa:	4604      	mov	r4, r0
 80011ac:	b168      	cbz	r0, 80011ca <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 80011ae:	6802      	ldr	r2, [r0, #0]
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80011b8:	f001 f9ee 	bl	8002598 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80011bc:	2000      	movs	r0, #0
 80011be:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80011c0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80011c4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80011c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e7fc      	b.n	80011c8 <HAL_QSPI_DeInit+0x20>

080011ce <HAL_QSPI_Command>:
{
 80011ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d2:	4604      	mov	r4, r0
 80011d4:	b085      	sub	sp, #20
 80011d6:	4617      	mov	r7, r2
 80011d8:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80011da:	f7ff fa2f 	bl	800063c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80011de:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80011e2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80011e4:	2a01      	cmp	r2, #1
 80011e6:	d033      	beq.n	8001250 <HAL_QSPI_Command+0x82>
 80011e8:	2201      	movs	r2, #1
 80011ea:	2602      	movs	r6, #2
 80011ec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80011f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80011f4:	2a01      	cmp	r2, #1
 80011f6:	fa5f f882 	uxtb.w	r8, r2
 80011fa:	d127      	bne.n	800124c <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80011fc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80011fe:	9003      	str	r0, [sp, #12]
 8001200:	2120      	movs	r1, #32
 8001202:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001204:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001206:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001208:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800120c:	f7ff ff51 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001210:	4605      	mov	r5, r0
 8001212:	b9a0      	cbnz	r0, 800123e <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001214:	4602      	mov	r2, r0
 8001216:	4649      	mov	r1, r9
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe8e 	bl	8000f3a <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800121e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8001222:	9b03      	ldr	r3, [sp, #12]
 8001224:	b94a      	cbnz	r2, 800123a <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001226:	4642      	mov	r2, r8
 8001228:	4631      	mov	r1, r6
 800122a:	4620      	mov	r0, r4
 800122c:	9700      	str	r7, [sp, #0]
 800122e:	f7ff ff40 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8001232:	4605      	mov	r5, r0
 8001234:	b918      	cbnz	r0, 800123e <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800123a:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800123e:	2300      	movs	r3, #0
 8001240:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001244:	4628      	mov	r0, r5
 8001246:	b005      	add	sp, #20
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800124c:	4635      	mov	r5, r6
 800124e:	e7f6      	b.n	800123e <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8001250:	2502      	movs	r5, #2
 8001252:	e7f7      	b.n	8001244 <HAL_QSPI_Command+0x76>

08001254 <HAL_QSPI_Command_IT>:
{
 8001254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001256:	4604      	mov	r4, r0
 8001258:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800125a:	f7ff f9ef 	bl	800063c <HAL_GetTick>
 800125e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8001260:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001264:	2a01      	cmp	r2, #1
 8001266:	d034      	beq.n	80012d2 <HAL_QSPI_Command_IT+0x7e>
 8001268:	2201      	movs	r2, #1
 800126a:	2700      	movs	r7, #0
 800126c:	2502      	movs	r5, #2
 800126e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001272:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001276:	2a01      	cmp	r2, #1
 8001278:	d128      	bne.n	80012cc <HAL_QSPI_Command_IT+0x78>
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800127a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800127c:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800127e:	6467      	str	r7, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001280:	4620      	mov	r0, r4
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001282:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001286:	9200      	str	r2, [sp, #0]
 8001288:	463a      	mov	r2, r7
 800128a:	f7ff ff12 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800128e:	4605      	mov	r5, r0
 8001290:	b9e0      	cbnz	r0, 80012cc <HAL_QSPI_Command_IT+0x78>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8001292:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001294:	b913      	cbnz	r3, 800129c <HAL_QSPI_Command_IT+0x48>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	2203      	movs	r2, #3
 800129a:	60da      	str	r2, [r3, #12]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800129c:	2200      	movs	r2, #0
 800129e:	4631      	mov	r1, r6
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fe4a 	bl	8000f3a <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80012a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80012a8:	b94b      	cbnz	r3, 80012be <HAL_QSPI_Command_IT+0x6a>
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 80012aa:	6822      	ldr	r2, [r4, #0]
        __HAL_UNLOCK(hqspi);
 80012ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	4628      	mov	r0, r5
 80012ba:	b003      	add	sp, #12
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hqspi->State = HAL_QSPI_STATE_READY;
 80012be:	2301      	movs	r3, #1
 80012c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hqspi);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012ca:	e7f5      	b.n	80012b8 <HAL_QSPI_Command_IT+0x64>
    __HAL_UNLOCK(hqspi);
 80012cc:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
 80012d0:	e7f2      	b.n	80012b8 <HAL_QSPI_Command_IT+0x64>
  __HAL_LOCK(hqspi);
 80012d2:	2502      	movs	r5, #2
 80012d4:	e7f0      	b.n	80012b8 <HAL_QSPI_Command_IT+0x64>
	...

080012d8 <HAL_QSPI_Transmit_DMA>:
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 80012d8:	6802      	ldr	r2, [r0, #0]
{
 80012da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012dc:	4604      	mov	r4, r0
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 80012de:	6913      	ldr	r3, [r2, #16]
  __HAL_LOCK(hqspi);
 80012e0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80012e4:	2801      	cmp	r0, #1
 80012e6:	d074      	beq.n	80013d2 <HAL_QSPI_Transmit_DMA+0xfa>
 80012e8:	2001      	movs	r0, #1
 80012ea:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80012ee:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80012f2:	2801      	cmp	r0, #1
 80012f4:	b2c5      	uxtb	r5, r0
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	d168      	bne.n	80013ce <HAL_QSPI_Transmit_DMA+0xf6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80012fc:	6460      	str	r0, [r4, #68]	; 0x44
    if(pData != NULL )
 80012fe:	2900      	cmp	r1, #0
 8001300:	d05e      	beq.n	80013c0 <HAL_QSPI_Transmit_DMA+0xe8>
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
 8001302:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 8001304:	3301      	adds	r3, #1
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
 8001306:	6946      	ldr	r6, [r0, #20]
 8001308:	2e00      	cmp	r6, #0
 800130a:	d132      	bne.n	8001372 <HAL_QSPI_Transmit_DMA+0x9a>
          hqspi->TxXferCount = (data_size >> 2U);
 800130c:	62e3      	str	r3, [r4, #44]	; 0x2c
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800130e:	2312      	movs	r3, #18
        hqspi->hdma->XferAbortCallback = NULL;
 8001310:	2600      	movs	r6, #0
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
 8001312:	3220      	adds	r2, #32
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001314:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 8001318:	2303      	movs	r3, #3
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 800131a:	6807      	ldr	r7, [r0, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 800131c:	f842 3c14 	str.w	r3, [r2, #-20]
        hqspi->TxXferSize = hqspi->TxXferCount;
 8001320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr = pData;
 8001322:	6261      	str	r1, [r4, #36]	; 0x24
        hqspi->TxXferSize = hqspi->TxXferCount;
 8001324:	62a3      	str	r3, [r4, #40]	; 0x28
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001326:	f852 3c0c 	ldr.w	r3, [r2, #-12]
 800132a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800132e:	f842 3c0c 	str.w	r3, [r2, #-12]
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_QSPI_Transmit_DMA+0x100>)
        hqspi->hdma->XferAbortCallback = NULL;
 8001334:	6506      	str	r6, [r0, #80]	; 0x50
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
 8001336:	63c3      	str	r3, [r0, #60]	; 0x3c
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_QSPI_Transmit_DMA+0x104>)
 800133a:	6403      	str	r3, [r0, #64]	; 0x40
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_QSPI_Transmit_DMA+0x108>)
 800133e:	64c3      	str	r3, [r0, #76]	; 0x4c
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	6083      	str	r3, [r0, #8]
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800134a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134e:	603b      	str	r3, [r7, #0]
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001352:	f7ff fac7 	bl	80008e4 <HAL_DMA_Start_IT>
 8001356:	bb48      	cbnz	r0, 80013ac <HAL_QSPI_Transmit_DMA+0xd4>
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	4605      	mov	r5, r0
          __HAL_UNLOCK(hqspi);
 800135c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001366:	601a      	str	r2, [r3, #0]
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f042 0204 	orr.w	r2, r2, #4
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e00e      	b.n	8001390 <HAL_QSPI_Transmit_DMA+0xb8>
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
 8001372:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8001376:	d10f      	bne.n	8001398 <HAL_QSPI_Transmit_DMA+0xc0>
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
 8001378:	07df      	lsls	r7, r3, #31
 800137a:	d402      	bmi.n	8001382 <HAL_QSPI_Transmit_DMA+0xaa>
 800137c:	68a6      	ldr	r6, [r4, #8]
 800137e:	07f6      	lsls	r6, r6, #31
 8001380:	d508      	bpl.n	8001394 <HAL_QSPI_Transmit_DMA+0xbc>
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001382:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hqspi);
 800138a:	2300      	movs	r3, #0
 800138c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001390:	4628      	mov	r0, r5
 8001392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hqspi->TxXferCount = (data_size >> 1U);
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	e7b9      	b.n	800130c <HAL_QSPI_Transmit_DMA+0x34>
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
 8001398:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800139c:	d1b7      	bne.n	800130e <HAL_QSPI_Transmit_DMA+0x36>
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
 800139e:	079f      	lsls	r7, r3, #30
 80013a0:	d1ef      	bne.n	8001382 <HAL_QSPI_Transmit_DMA+0xaa>
 80013a2:	68a6      	ldr	r6, [r4, #8]
 80013a4:	07b6      	lsls	r6, r6, #30
 80013a6:	d1ec      	bne.n	8001382 <HAL_QSPI_Transmit_DMA+0xaa>
          hqspi->TxXferCount = (data_size >> 2U);
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	e7af      	b.n	800130c <HAL_QSPI_Transmit_DMA+0x34>
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80013ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6463      	str	r3, [r4, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          __HAL_UNLOCK(hqspi);
 80013ba:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
 80013be:	e7e7      	b.n	8001390 <HAL_QSPI_Transmit_DMA+0xb8>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80013c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
 80013c8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 80013cc:	e7e0      	b.n	8001390 <HAL_QSPI_Transmit_DMA+0xb8>
    __HAL_UNLOCK(hqspi);
 80013ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_LOCK(hqspi);
 80013d2:	2502      	movs	r5, #2
 80013d4:	e7dc      	b.n	8001390 <HAL_QSPI_Transmit_DMA+0xb8>
 80013d6:	bf00      	nop
 80013d8:	08000f29 	.word	0x08000f29
 80013dc:	080015df 	.word	0x080015df
 80013e0:	08001a45 	.word	0x08001a45

080013e4 <HAL_QSPI_AutoPolling>:
{
 80013e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013e8:	4604      	mov	r4, r0
 80013ea:	4615      	mov	r5, r2
 80013ec:	461e      	mov	r6, r3
 80013ee:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff f924 	bl	800063c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80013f4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80013f8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80013fa:	2a01      	cmp	r2, #1
 80013fc:	d040      	beq.n	8001480 <HAL_QSPI_AutoPolling+0x9c>
 80013fe:	2201      	movs	r2, #1
 8001400:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001404:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001408:	2a01      	cmp	r2, #1
 800140a:	b2d7      	uxtb	r7, r2
 800140c:	d136      	bne.n	800147c <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800140e:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001410:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001412:	9003      	str	r0, [sp, #12]
 8001414:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001416:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001418:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800141a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800141e:	2120      	movs	r1, #32
 8001420:	f7ff fe47 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001424:	bb20      	cbnz	r0, 8001470 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001426:	6821      	ldr	r1, [r4, #0]
 8001428:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800142a:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800142c:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800142e:	686a      	ldr	r2, [r5, #4]
 8001430:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001432:	68aa      	ldr	r2, [r5, #8]
 8001434:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001436:	680a      	ldr	r2, [r1, #0]
 8001438:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800143c:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800143e:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001440:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001444:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001446:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8001448:	68ea      	ldr	r2, [r5, #12]
 800144a:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800144e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001452:	f7ff fd72 	bl	8000f3a <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001456:	9b03      	ldr	r3, [sp, #12]
 8001458:	463a      	mov	r2, r7
 800145a:	2108      	movs	r1, #8
 800145c:	4620      	mov	r0, r4
 800145e:	9600      	str	r6, [sp, #0]
 8001460:	f7ff fe27 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8001464:	b920      	cbnz	r0, 8001470 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	2208      	movs	r2, #8
 800146a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800146c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001470:	2300      	movs	r3, #0
 8001472:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001476:	b004      	add	sp, #16
 8001478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800147c:	2002      	movs	r0, #2
 800147e:	e7f7      	b.n	8001470 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8001480:	2002      	movs	r0, #2
 8001482:	e7f8      	b.n	8001476 <HAL_QSPI_AutoPolling+0x92>

08001484 <HAL_QSPI_AutoPolling_IT>:
{
 8001484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	4615      	mov	r5, r2
 800148c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800148e:	f7ff f8d5 	bl	800063c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001492:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001496:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8001498:	2a01      	cmp	r2, #1
 800149a:	d03f      	beq.n	800151c <HAL_QSPI_AutoPolling_IT+0x98>
 800149c:	2201      	movs	r2, #1
 800149e:	f04f 0800 	mov.w	r8, #0
 80014a2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80014a6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80014aa:	2a01      	cmp	r2, #1
 80014ac:	d134      	bne.n	8001518 <HAL_QSPI_AutoPolling_IT+0x94>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80014ae:	2242      	movs	r2, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80014b0:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014b4:	2120      	movs	r1, #32
 80014b6:	4620      	mov	r0, r4
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80014b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	4642      	mov	r2, r8
 80014c2:	f7ff fdf6 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80014c6:	4606      	mov	r6, r0
 80014c8:	bb18      	cbnz	r0, 8001512 <HAL_QSPI_AutoPolling_IT+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	682a      	ldr	r2, [r5, #0]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80014d0:	686a      	ldr	r2, [r5, #4]
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80014d4:	68aa      	ldr	r2, [r5, #8]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
 80014de:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80014e2:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80014e4:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80014e6:	430a      	orrs	r2, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80014e8:	4639      	mov	r1, r7
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80014ea:	601a      	str	r2, [r3, #0]
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 80014ec:	2209      	movs	r2, #9
 80014ee:	60da      	str	r2, [r3, #12]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80014f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 80014f4:	68eb      	ldr	r3, [r5, #12]
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80014f8:	f7ff fd1f 	bl	8000f3a <QSPI_Config>
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80014fc:	6822      	ldr	r2, [r4, #0]
      __HAL_UNLOCK(hqspi);
 80014fe:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	4630      	mov	r0, r6
 800150c:	b002      	add	sp, #8
 800150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hqspi);
 8001512:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8001516:	e7f8      	b.n	800150a <HAL_QSPI_AutoPolling_IT+0x86>
    __HAL_UNLOCK(hqspi);
 8001518:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
  __HAL_LOCK(hqspi);
 800151c:	2602      	movs	r6, #2
 800151e:	e7f4      	b.n	800150a <HAL_QSPI_AutoPolling_IT+0x86>

08001520 <HAL_QSPI_MemoryMapped>:
{
 8001520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	4616      	mov	r6, r2
 8001526:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff f888 	bl	800063c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800152c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001530:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8001532:	2a01      	cmp	r2, #1
 8001534:	d033      	beq.n	800159e <HAL_QSPI_MemoryMapped+0x7e>
 8001536:	2201      	movs	r2, #1
 8001538:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800153c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001540:	2a01      	cmp	r2, #1
 8001542:	d12a      	bne.n	800159a <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001544:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001546:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001548:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800154a:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800154c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001552:	9100      	str	r1, [sp, #0]
 8001554:	2120      	movs	r1, #32
 8001556:	f7ff fdac 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800155a:	4605      	mov	r5, r0
 800155c:	b9b8      	cbnz	r0, 800158e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	6872      	ldr	r2, [r6, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001564:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001566:	f020 0008 	bic.w	r0, r0, #8
 800156a:	ea40 0002 	orr.w	r0, r0, r2
 800156e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001570:	d107      	bne.n	8001582 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001572:	6832      	ldr	r2, [r6, #0]
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001576:	2210      	movs	r2, #16
 8001578:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001580:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001582:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001586:	4639      	mov	r1, r7
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fcd6 	bl	8000f3a <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800158e:	2300      	movs	r3, #0
 8001590:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001594:	4628      	mov	r0, r5
 8001596:	b003      	add	sp, #12
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800159a:	2502      	movs	r5, #2
 800159c:	e7f7      	b.n	800158e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800159e:	2502      	movs	r5, #2
 80015a0:	e7f8      	b.n	8001594 <HAL_QSPI_MemoryMapped+0x74>

080015a2 <HAL_QSPI_ErrorCallback>:
 80015a2:	4770      	bx	lr

080015a4 <QSPI_DMAAbortCplt>:
{
 80015a4:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80015a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hqspi->RxXferCount = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80015ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80015ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d10b      	bne.n	80015ce <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	2202      	movs	r2, #2
 80015ba:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015c2:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f042 0202 	orr.w	r2, r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80015d4:	f7ff ffe5 	bl	80015a2 <HAL_QSPI_ErrorCallback>
}
 80015d8:	e7f8      	b.n	80015cc <QSPI_DMAAbortCplt+0x28>

080015da <HAL_QSPI_AbortCpltCallback>:
 80015da:	4770      	bx	lr

080015dc <HAL_QSPI_TxHalfCpltCallback>:
 80015dc:	4770      	bx	lr

080015de <QSPI_DMATxHalfCplt>:
  HAL_QSPI_TxHalfCpltCallback(hqspi);
 80015de:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80015e0:	b508      	push	{r3, lr}
  HAL_QSPI_TxHalfCpltCallback(hqspi);
 80015e2:	f7ff fffb 	bl	80015dc <HAL_QSPI_TxHalfCpltCallback>
}
 80015e6:	bd08      	pop	{r3, pc}

080015e8 <HAL_QSPI_FifoThresholdCallback>:
 80015e8:	4770      	bx	lr

080015ea <HAL_QSPI_TimeOutCallback>:
 80015ea:	4770      	bx	lr

080015ec <HAL_QSPI_Abort>:
{
 80015ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80015ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff f824 	bl	800063c <HAL_GetTick>
 80015f4:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80015f6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80015fa:	f012 0002 	ands.w	r0, r2, #2
 80015fe:	d036      	beq.n	800166e <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8001600:	2200      	movs	r2, #0
 8001602:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	0749      	lsls	r1, r1, #29
 800160c:	d50d      	bpl.n	800162a <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800160e:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8001610:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001612:	f021 0104 	bic.w	r1, r1, #4
 8001616:	9303      	str	r3, [sp, #12]
 8001618:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800161a:	f7ff f9a0 	bl	800095e <HAL_DMA_Abort>
      if(status != HAL_OK)
 800161e:	9b03      	ldr	r3, [sp, #12]
 8001620:	b118      	cbz	r0, 800162a <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001622:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001624:	f042 0204 	orr.w	r2, r2, #4
 8001628:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800162a:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800162c:	4620      	mov	r0, r4
 800162e:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8001630:	680a      	ldr	r2, [r1, #0]
 8001632:	f042 0202 	orr.w	r2, r2, #2
 8001636:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8001638:	2102      	movs	r1, #2
 800163a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800163c:	9200      	str	r2, [sp, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	f7ff fd37 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001644:	9b03      	ldr	r3, [sp, #12]
 8001646:	b990      	cbnz	r0, 800166e <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	2102      	movs	r1, #2
 800164c:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800164e:	2120      	movs	r1, #32
 8001650:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	4602      	mov	r2, r0
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fd2b 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800165c:	b938      	cbnz	r0, 800166e <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	6953      	ldr	r3, [r2, #20]
 8001662:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001666:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8001668:	2301      	movs	r3, #1
 800166a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800166e:	b004      	add	sp, #16
 8001670:	bd10      	pop	{r4, pc}

08001672 <HAL_QSPI_Transmit>:
{
 8001672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001674:	4604      	mov	r4, r0
 8001676:	b085      	sub	sp, #20
 8001678:	4616      	mov	r6, r2
 800167a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7fe ffde 	bl	800063c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001680:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001684:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001686:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8001688:	2a01      	cmp	r2, #1
 800168a:	d04c      	beq.n	8001726 <HAL_QSPI_Transmit+0xb4>
 800168c:	2201      	movs	r2, #1
 800168e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001692:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001696:	2a01      	cmp	r2, #1
 8001698:	b2d0      	uxtb	r0, r2
 800169a:	d142      	bne.n	8001722 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800169c:	2200      	movs	r2, #0
 800169e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80016a0:	2f00      	cmp	r7, #0
 80016a2:	d039      	beq.n	8001718 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80016a4:	2212      	movs	r2, #18
 80016a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80016aa:	692a      	ldr	r2, [r5, #16]
 80016ac:	3201      	adds	r2, #1
 80016ae:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80016b0:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80016b2:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80016b4:	3201      	adds	r2, #1
 80016b6:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80016b8:	696a      	ldr	r2, [r5, #20]
 80016ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80016be:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80016c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016c2:	b9a2      	cbnz	r2, 80016ee <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2102      	movs	r1, #2
 80016c8:	4620      	mov	r0, r4
 80016ca:	9600      	str	r6, [sp, #0]
 80016cc:	f7ff fcf1 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80016d0:	b928      	cbnz	r0, 80016de <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80016d6:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80016d8:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80016da:	f7ff ff87 	bl	80015ec <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80016de:	2301      	movs	r3, #1
 80016e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80016e4:	2300      	movs	r3, #0
 80016e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80016ea:	b005      	add	sp, #20
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2104      	movs	r1, #4
 80016f2:	4620      	mov	r0, r4
 80016f4:	9600      	str	r6, [sp, #0]
 80016f6:	9303      	str	r3, [sp, #12]
 80016f8:	f7ff fcdb 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001700:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8001702:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800170a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800170c:	3201      	adds	r2, #1
 800170e:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8001710:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001712:	3a01      	subs	r2, #1
 8001714:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001716:	e7d3      	b.n	80016c0 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001718:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8001720:	e7e0      	b.n	80016e4 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8001722:	2002      	movs	r0, #2
 8001724:	e7de      	b.n	80016e4 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8001726:	2002      	movs	r0, #2
 8001728:	e7df      	b.n	80016ea <HAL_QSPI_Transmit+0x78>

0800172a <HAL_QSPI_Receive>:
{
 800172a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172c:	4604      	mov	r4, r0
 800172e:	b085      	sub	sp, #20
 8001730:	4616      	mov	r6, r2
 8001732:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7fe ff82 	bl	800063c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001738:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800173a:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800173c:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8001740:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001744:	2a01      	cmp	r2, #1
 8001746:	d050      	beq.n	80017ea <HAL_QSPI_Receive+0xc0>
 8001748:	2201      	movs	r2, #1
 800174a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800174e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001752:	2a01      	cmp	r2, #1
 8001754:	b2d0      	uxtb	r0, r2
 8001756:	d146      	bne.n	80017e6 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001758:	2200      	movs	r2, #0
 800175a:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800175c:	2f00      	cmp	r7, #0
 800175e:	d03d      	beq.n	80017dc <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001760:	2222      	movs	r2, #34	; 0x22
 8001762:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001766:	692a      	ldr	r2, [r5, #16]
 8001768:	3201      	adds	r2, #1
 800176a:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800176c:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800176e:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001770:	3201      	adds	r2, #1
 8001772:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001774:	6969      	ldr	r1, [r5, #20]
 8001776:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800177a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800177e:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001780:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8001784:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001786:	b9a2      	cbnz	r2, 80017b2 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001788:	2201      	movs	r2, #1
 800178a:	2102      	movs	r1, #2
 800178c:	4620      	mov	r0, r4
 800178e:	9600      	str	r6, [sp, #0]
 8001790:	f7ff fc8f 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8001794:	b928      	cbnz	r0, 80017a2 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800179a:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800179c:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800179e:	f7ff ff25 	bl	80015ec <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80017a8:	2300      	movs	r3, #0
 80017aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80017ae:	b005      	add	sp, #20
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2106      	movs	r1, #6
 80017b6:	4620      	mov	r0, r4
 80017b8:	9600      	str	r6, [sp, #0]
 80017ba:	9303      	str	r3, [sp, #12]
 80017bc:	f7ff fc79 	bl	80010b2 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1ee      	bne.n	80017a2 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80017c4:	f895 1020 	ldrb.w	r1, [r5, #32]
 80017c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80017ca:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80017cc:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80017ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017d0:	3201      	adds	r2, #1
 80017d2:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80017d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80017d6:	3a01      	subs	r2, #1
 80017d8:	63a2      	str	r2, [r4, #56]	; 0x38
 80017da:	e7d3      	b.n	8001784 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80017dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80017e4:	e7e0      	b.n	80017a8 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80017e6:	2002      	movs	r0, #2
 80017e8:	e7de      	b.n	80017a8 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80017ea:	2002      	movs	r0, #2
 80017ec:	e7df      	b.n	80017ae <HAL_QSPI_Receive+0x84>
	...

080017f0 <HAL_QSPI_Abort_IT>:
{
 80017f0:	b510      	push	{r4, lr}
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80017f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80017f6:	4604      	mov	r4, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80017f8:	0799      	lsls	r1, r3, #30
 80017fa:	d51d      	bpl.n	8001838 <HAL_QSPI_Abort_IT+0x48>
    __HAL_UNLOCK(hqspi);
 80017fc:	2300      	movs	r3, #0
 80017fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8001802:	2308      	movs	r3, #8
 8001804:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8001808:	6803      	ldr	r3, [r0, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001810:	601a      	str	r2, [r3, #0]
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	0752      	lsls	r2, r2, #29
 8001816:	d511      	bpl.n	800183c <HAL_QSPI_Abort_IT+0x4c>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001818:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800181a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800181c:	f022 0204 	bic.w	r2, r2, #4
 8001820:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_QSPI_Abort_IT+0x64>)
 8001824:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8001826:	f7ff f8de 	bl	80009e6 <HAL_DMA_Abort_IT>
 800182a:	b128      	cbz	r0, 8001838 <HAL_QSPI_Abort_IT+0x48>
        hqspi->State = HAL_QSPI_STATE_READY;
 800182c:	2301      	movs	r3, #1
        HAL_QSPI_AbortCpltCallback(hqspi);
 800182e:	4620      	mov	r0, r4
        hqspi->State = HAL_QSPI_STATE_READY;
 8001830:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_QSPI_AbortCpltCallback(hqspi);
 8001834:	f7ff fed1 	bl	80015da <HAL_QSPI_AbortCpltCallback>
}
 8001838:	2000      	movs	r0, #0
 800183a:	bd10      	pop	{r4, pc}
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800183c:	2202      	movs	r2, #2
 800183e:	60da      	str	r2, [r3, #12]
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001846:	601a      	str	r2, [r3, #0]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f042 0202 	orr.w	r2, r2, #2
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e7f2      	b.n	8001838 <HAL_QSPI_Abort_IT+0x48>
 8001852:	bf00      	nop
 8001854:	080015a5 	.word	0x080015a5

08001858 <HAL_QSPI_IRQHandler>:
{
 8001858:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800185a:	6803      	ldr	r3, [r0, #0]
{
 800185c:	4604      	mov	r4, r0
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800185e:	6899      	ldr	r1, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001860:	681a      	ldr	r2, [r3, #0]
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8001862:	0748      	lsls	r0, r1, #29
 8001864:	d534      	bpl.n	80018d0 <HAL_QSPI_IRQHandler+0x78>
 8001866:	0355      	lsls	r5, r2, #13
 8001868:	d532      	bpl.n	80018d0 <HAL_QSPI_IRQHandler+0x78>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800186a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800186e:	2a12      	cmp	r2, #18
 8001870:	d114      	bne.n	800189c <HAL_QSPI_IRQHandler+0x44>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6891      	ldr	r1, [r2, #8]
 8001876:	0748      	lsls	r0, r1, #29
 8001878:	d403      	bmi.n	8001882 <HAL_QSPI_IRQHandler+0x2a>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff feb4 	bl	80015e8 <HAL_QSPI_FifoThresholdCallback>
}
 8001880:	bd38      	pop	{r3, r4, r5, pc}
        if (hqspi->TxXferCount > 0U)
 8001882:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001884:	b1f9      	cbz	r1, 80018c6 <HAL_QSPI_IRQHandler+0x6e>
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001886:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->pTxBuffPtr++;
 800188e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001890:	3201      	adds	r2, #1
 8001892:	6262      	str	r2, [r4, #36]	; 0x24
          hqspi->TxXferCount--;
 8001894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001896:	3a01      	subs	r2, #1
 8001898:	62e2      	str	r2, [r4, #44]	; 0x2c
 800189a:	e7ea      	b.n	8001872 <HAL_QSPI_IRQHandler+0x1a>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800189c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80018a0:	2a22      	cmp	r2, #34	; 0x22
 80018a2:	d1ea      	bne.n	800187a <HAL_QSPI_IRQHandler+0x22>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	6891      	ldr	r1, [r2, #8]
 80018a8:	0749      	lsls	r1, r1, #29
 80018aa:	d5e6      	bpl.n	800187a <HAL_QSPI_IRQHandler+0x22>
        if (hqspi->RxXferCount > 0U)
 80018ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80018ae:	b151      	cbz	r1, 80018c6 <HAL_QSPI_IRQHandler+0x6e>
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80018b0:	f893 1020 	ldrb.w	r1, [r3, #32]
 80018b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018b6:	7011      	strb	r1, [r2, #0]
          hqspi->pRxBuffPtr++;
 80018b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018ba:	3201      	adds	r2, #1
 80018bc:	6322      	str	r2, [r4, #48]	; 0x30
          hqspi->RxXferCount--;
 80018be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018c0:	3a01      	subs	r2, #1
 80018c2:	63a2      	str	r2, [r4, #56]	; 0x38
 80018c4:	e7ee      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x4c>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
          break;
 80018ce:	e7d4      	b.n	800187a <HAL_QSPI_IRQHandler+0x22>
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80018d0:	078d      	lsls	r5, r1, #30
 80018d2:	d56e      	bpl.n	80019b2 <HAL_QSPI_IRQHandler+0x15a>
 80018d4:	0390      	lsls	r0, r2, #14
 80018d6:	d56c      	bpl.n	80019b2 <HAL_QSPI_IRQHandler+0x15a>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80018d8:	2202      	movs	r2, #2
 80018da:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80018e2:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80018e4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80018e8:	2a12      	cmp	r2, #18
 80018ea:	d116      	bne.n	800191a <HAL_QSPI_IRQHandler+0xc2>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	0751      	lsls	r1, r2, #29
 80018f0:	d509      	bpl.n	8001906 <HAL_QSPI_IRQHandler+0xae>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f022 0204 	bic.w	r2, r2, #4
 80018f8:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 80018fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6013      	str	r3, [r2, #0]
      HAL_QSPI_Abort_IT(hqspi);
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff ff72 	bl	80017f0 <HAL_QSPI_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 800190c:	2301      	movs	r3, #1
      HAL_QSPI_TxCpltCallback(hqspi);
 800190e:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 8001910:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 8001914:	f000 fbd6 	bl	80020c4 <HAL_QSPI_TxCpltCallback>
 8001918:	e7b2      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800191a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800191e:	2a22      	cmp	r2, #34	; 0x22
 8001920:	d129      	bne.n	8001976 <HAL_QSPI_IRQHandler+0x11e>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	0752      	lsls	r2, r2, #29
 8001926:	d520      	bpl.n	800196a <HAL_QSPI_IRQHandler+0x112>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f022 0204 	bic.w	r2, r2, #4
 800192e:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 8001930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	6813      	ldr	r3, [r2, #0]
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]
      HAL_QSPI_Abort_IT(hqspi);
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff ff57 	bl	80017f0 <HAL_QSPI_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001942:	2301      	movs	r3, #1
      HAL_QSPI_RxCpltCallback(hqspi);
 8001944:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 8001946:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 800194a:	f000 fbb3 	bl	80020b4 <HAL_QSPI_RxCpltCallback>
 800194e:	e797      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
          if (hqspi->RxXferCount > 0U)
 8001950:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001952:	2a00      	cmp	r2, #0
 8001954:	d0f2      	beq.n	800193c <HAL_QSPI_IRQHandler+0xe4>
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001956:	f893 1020 	ldrb.w	r1, [r3, #32]
 800195a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800195c:	7011      	strb	r1, [r2, #0]
            hqspi->pRxBuffPtr++;
 800195e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001960:	3201      	adds	r2, #1
 8001962:	6322      	str	r2, [r4, #48]	; 0x30
            hqspi->RxXferCount--;
 8001964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001966:	3a01      	subs	r2, #1
 8001968:	63a2      	str	r2, [r4, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800196a:	6822      	ldr	r2, [r4, #0]
 800196c:	6892      	ldr	r2, [r2, #8]
 800196e:	f412 5f7c 	tst.w	r2, #16128	; 0x3f00
 8001972:	d1ed      	bne.n	8001950 <HAL_QSPI_IRQHandler+0xf8>
 8001974:	e7e2      	b.n	800193c <HAL_QSPI_IRQHandler+0xe4>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001976:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800197a:	2a02      	cmp	r2, #2
 800197c:	d106      	bne.n	800198c <HAL_QSPI_IRQHandler+0x134>
      hqspi->State = HAL_QSPI_STATE_READY;
 800197e:	2301      	movs	r3, #1
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001980:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
 8001982:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001986:	f000 fb8d 	bl	80020a4 <HAL_QSPI_CmdCpltCallback>
 800198a:	e779      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800198c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001990:	2a08      	cmp	r2, #8
 8001992:	f47f af75 	bne.w	8001880 <HAL_QSPI_IRQHandler+0x28>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001996:	695a      	ldr	r2, [r3, #20]
        HAL_QSPI_AbortCpltCallback(hqspi);
 8001998:	4620      	mov	r0, r4
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800199a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800199e:	615a      	str	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80019a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13a      	bne.n	8001a22 <HAL_QSPI_IRQHandler+0x1ca>
        HAL_QSPI_AbortCpltCallback(hqspi);
 80019ac:	f7ff fe15 	bl	80015da <HAL_QSPI_AbortCpltCallback>
 80019b0:	e766      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80019b2:	070d      	lsls	r5, r1, #28
 80019b4:	d511      	bpl.n	80019da <HAL_QSPI_IRQHandler+0x182>
 80019b6:	0310      	lsls	r0, r2, #12
 80019b8:	d50f      	bpl.n	80019da <HAL_QSPI_IRQHandler+0x182>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80019ba:	2208      	movs	r2, #8
 80019bc:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	0255      	lsls	r5, r2, #9
 80019c2:	d506      	bpl.n	80019d2 <HAL_QSPI_IRQHandler+0x17a>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80019ca:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 80019d2:	4620      	mov	r0, r4
 80019d4:	f000 fb7e 	bl	80020d4 <HAL_QSPI_StatusMatchCallback>
 80019d8:	e752      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80019da:	07c8      	lsls	r0, r1, #31
 80019dc:	d524      	bpl.n	8001a28 <HAL_QSPI_IRQHandler+0x1d0>
 80019de:	03d5      	lsls	r5, r2, #15
 80019e0:	d522      	bpl.n	8001a28 <HAL_QSPI_IRQHandler+0x1d0>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80019e2:	2501      	movs	r5, #1
 80019e4:	60dd      	str	r5, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80019ec:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80019ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019f0:	f042 0202 	orr.w	r2, r2, #2
 80019f4:	6462      	str	r2, [r4, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	0750      	lsls	r0, r2, #29
 80019fa:	d50f      	bpl.n	8001a1c <HAL_QSPI_IRQHandler+0x1c4>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80019fc:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80019fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001a00:	f022 0204 	bic.w	r2, r2, #4
 8001a04:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_QSPI_IRQHandler+0x1e8>)
 8001a08:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8001a0a:	f7fe ffec 	bl	80009e6 <HAL_DMA_Abort_IT>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	f43f af36 	beq.w	8001880 <HAL_QSPI_IRQHandler+0x28>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_QSPI_ErrorCallback(hqspi);
 8001a1c:	4620      	mov	r0, r4
        hqspi->State = HAL_QSPI_STATE_READY;
 8001a1e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        HAL_QSPI_ErrorCallback(hqspi);
 8001a22:	f7ff fdbe 	bl	80015a2 <HAL_QSPI_ErrorCallback>
 8001a26:	e72b      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8001a28:	06c9      	lsls	r1, r1, #27
 8001a2a:	f57f af29 	bpl.w	8001880 <HAL_QSPI_IRQHandler+0x28>
 8001a2e:	02d2      	lsls	r2, r2, #11
 8001a30:	f57f af26 	bpl.w	8001880 <HAL_QSPI_IRQHandler+0x28>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001a34:	2210      	movs	r2, #16
    HAL_QSPI_TimeOutCallback(hqspi);
 8001a36:	4620      	mov	r0, r4
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001a38:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 8001a3a:	f7ff fdd6 	bl	80015ea <HAL_QSPI_TimeOutCallback>
}
 8001a3e:	e71f      	b.n	8001880 <HAL_QSPI_IRQHandler+0x28>
 8001a40:	080015a5 	.word	0x080015a5

08001a44 <QSPI_DMAError>:
{
 8001a44:	b510      	push	{r4, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8001a46:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8001a48:	f7ff f89e 	bl	8000b88 <HAL_DMA_GetError>
 8001a4c:	2802      	cmp	r0, #2
 8001a4e:	d010      	beq.n	8001a72 <QSPI_DMAError+0x2e>
  hqspi->RxXferCount = 0U;
 8001a50:	2300      	movs	r3, #0
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001a52:	6822      	ldr	r2, [r4, #0]
  (void)HAL_QSPI_Abort_IT(hqspi);
 8001a54:	4620      	mov	r0, r4
  hqspi->RxXferCount = 0U;
 8001a56:	63a3      	str	r3, [r4, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8001a58:	62e3      	str	r3, [r4, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 8001a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6463      	str	r3, [r4, #68]	; 0x44
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	f023 0304 	bic.w	r3, r3, #4
}
 8001a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001a6c:	6013      	str	r3, [r2, #0]
  (void)HAL_QSPI_Abort_IT(hqspi);
 8001a6e:	f7ff bebf 	b.w	80017f0 <HAL_QSPI_Abort_IT>
}
 8001a72:	bd10      	pop	{r4, pc}

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	4604      	mov	r4, r0
 8001a7a:	b340      	cbz	r0, 8001ace <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7c:	6803      	ldr	r3, [r0, #0]
 8001a7e:	07d8      	lsls	r0, r3, #31
 8001a80:	d410      	bmi.n	8001aa4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	0799      	lsls	r1, r3, #30
 8001a86:	d464      	bmi.n	8001b52 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	0719      	lsls	r1, r3, #28
 8001a8c:	f100 80aa 	bmi.w	8001be4 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	075a      	lsls	r2, r3, #29
 8001a94:	f100 80cb 	bmi.w	8001c2e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	69a2      	ldr	r2, [r4, #24]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	f040 8134 	bne.w	8001d08 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e02b      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa4:	4b96      	ldr	r3, [pc, #600]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	f002 020c 	and.w	r2, r2, #12
 8001aac:	2a04      	cmp	r2, #4
 8001aae:	d007      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	f002 020c 	and.w	r2, r2, #12
 8001ab6:	2a08      	cmp	r2, #8
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5e>
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	0252      	lsls	r2, r2, #9
 8001abe:	d508      	bpl.n	8001ad2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	039b      	lsls	r3, r3, #14
 8001ac6:	d5dc      	bpl.n	8001a82 <HAL_RCC_OscConfig+0xe>
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1d9      	bne.n	8001a82 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad2:	6862      	ldr	r2, [r4, #4]
 8001ad4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ad8:	d113      	bne.n	8001b02 <HAL_RCC_OscConfig+0x8e>
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ae0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fdab 	bl	800063c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4e86      	ldr	r6, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001ae8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	6833      	ldr	r3, [r6, #0]
 8001aec:	039f      	lsls	r7, r3, #14
 8001aee:	d4c8      	bmi.n	8001a82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7fe fda4 	bl	800063c <HAL_GetTick>
 8001af4:	1b40      	subs	r0, r0, r5
 8001af6:	2864      	cmp	r0, #100	; 0x64
 8001af8:	d9f7      	bls.n	8001aea <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
}
 8001afc:	b002      	add	sp, #8
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	4d7f      	ldr	r5, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	b992      	cbnz	r2, 8001b2e <HAL_RCC_OscConfig+0xba>
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b16:	f7fe fd91 	bl	800063c <HAL_GetTick>
 8001b1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	0398      	lsls	r0, r3, #14
 8001b20:	d5af      	bpl.n	8001a82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b22:	f7fe fd8b 	bl	800063c <HAL_GetTick>
 8001b26:	1b80      	subs	r0, r0, r6
 8001b28:	2864      	cmp	r0, #100	; 0x64
 8001b2a:	d9f7      	bls.n	8001b1c <HAL_RCC_OscConfig+0xa8>
 8001b2c:	e7e5      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0xd0>
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	e7ce      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6e>
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	602b      	str	r3, [r5, #0]
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	e7f6      	b.n	8001b40 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	f012 0f0c 	tst.w	r2, #12
 8001b5a:	d007      	beq.n	8001b6c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	f002 020c 	and.w	r2, r2, #12
 8001b62:	2a08      	cmp	r2, #8
 8001b64:	d111      	bne.n	8001b8a <HAL_RCC_OscConfig+0x116>
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	0251      	lsls	r1, r2, #9
 8001b6a:	d40e      	bmi.n	8001b8a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	0792      	lsls	r2, r2, #30
 8001b72:	d502      	bpl.n	8001b7a <HAL_RCC_OscConfig+0x106>
 8001b74:	68e2      	ldr	r2, [r4, #12]
 8001b76:	2a01      	cmp	r2, #1
 8001b78:	d1a9      	bne.n	8001ace <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	6921      	ldr	r1, [r4, #16]
 8001b7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b82:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b86:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	e77e      	b.n	8001a88 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b8a:	68e2      	ldr	r2, [r4, #12]
 8001b8c:	b1c2      	cbz	r2, 8001bc0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8001b8e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4d5b      	ldr	r5, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b98:	f7fe fd50 	bl	800063c <HAL_GetTick>
 8001b9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	079f      	lsls	r7, r3, #30
 8001ba2:	d507      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	6922      	ldr	r2, [r4, #16]
 8001ba8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	e769      	b.n	8001a88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fd42 	bl	800063c <HAL_GetTick>
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	2802      	cmp	r0, #2
 8001bbc:	d9ef      	bls.n	8001b9e <HAL_RCC_OscConfig+0x12a>
 8001bbe:	e79c      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001bc0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4e4f      	ldr	r6, [pc, #316]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bca:	f7fe fd37 	bl	800063c <HAL_GetTick>
 8001bce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	6833      	ldr	r3, [r6, #0]
 8001bd2:	0798      	lsls	r0, r3, #30
 8001bd4:	f57f af58 	bpl.w	8001a88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fd30 	bl	800063c <HAL_GetTick>
 8001bdc:	1b40      	subs	r0, r0, r5
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9f6      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x15c>
 8001be2:	e78a      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be4:	6963      	ldr	r3, [r4, #20]
 8001be6:	4d46      	ldr	r5, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001be8:	b183      	cbz	r3, 8001c0c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8001bea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001bf2:	f7fe fd23 	bl	800063c <HAL_GetTick>
 8001bf6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bfa:	079b      	lsls	r3, r3, #30
 8001bfc:	f53f af48 	bmi.w	8001a90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7fe fd1c 	bl	800063c <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f6      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x184>
 8001c0a:	e776      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001c14:	f7fe fd12 	bl	800063c <HAL_GetTick>
 8001c18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c1c:	079f      	lsls	r7, r3, #30
 8001c1e:	f57f af37 	bpl.w	8001a90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c22:	f7fe fd0b 	bl	800063c <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	d9f6      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1a6>
 8001c2c:	e765      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c32:	00d0      	lsls	r0, r2, #3
 8001c34:	d427      	bmi.n	8001c86 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001c38:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4d2e      	ldr	r5, [pc, #184]	; (8001d04 <HAL_RCC_OscConfig+0x290>)
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	05d9      	lsls	r1, r3, #23
 8001c50:	d51b      	bpl.n	8001c8a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c52:	68a3      	ldr	r3, [r4, #8]
 8001c54:	4d2a      	ldr	r5, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d127      	bne.n	8001caa <HAL_RCC_OscConfig+0x236>
 8001c5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c66:	f7fe fce9 	bl	800063c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	4e25      	ldr	r6, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001c6c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001c70:	079b      	lsls	r3, r3, #30
 8001c72:	d53f      	bpl.n	8001cf4 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	f43f af0f 	beq.w	8001a98 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_RCC_OscConfig+0x28c>)
 8001c7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6413      	str	r3, [r2, #64]	; 0x40
 8001c84:	e708      	b.n	8001a98 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8001c86:	2700      	movs	r7, #0
 8001c88:	e7df      	b.n	8001c4a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c92:	f7fe fcd3 	bl	800063c <HAL_GetTick>
 8001c96:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	05da      	lsls	r2, r3, #23
 8001c9c:	d4d9      	bmi.n	8001c52 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe fccd 	bl	800063c <HAL_GetTick>
 8001ca2:	1b80      	subs	r0, r0, r6
 8001ca4:	2864      	cmp	r0, #100	; 0x64
 8001ca6:	d9f7      	bls.n	8001c98 <HAL_RCC_OscConfig+0x224>
 8001ca8:	e727      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001caa:	b9ab      	cbnz	r3, 8001cd8 <HAL_RCC_OscConfig+0x264>
 8001cac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	672b      	str	r3, [r5, #112]	; 0x70
 8001cb8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fcbc 	bl	800063c <HAL_GetTick>
 8001cc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cc8:	0798      	lsls	r0, r3, #30
 8001cca:	d5d3      	bpl.n	8001c74 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7fe fcb6 	bl	800063c <HAL_GetTick>
 8001cd0:	1b80      	subs	r0, r0, r6
 8001cd2:	4540      	cmp	r0, r8
 8001cd4:	d9f7      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x252>
 8001cd6:	e710      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cdc:	d103      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x272>
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	672b      	str	r3, [r5, #112]	; 0x70
 8001ce4:	e7b9      	b.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	672b      	str	r3, [r5, #112]	; 0x70
 8001cec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	e7b5      	b.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fca2 	bl	800063c <HAL_GetTick>
 8001cf8:	1b40      	subs	r0, r0, r5
 8001cfa:	4540      	cmp	r0, r8
 8001cfc:	d9b7      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1fa>
 8001cfe:	e6fc      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	4d38      	ldr	r5, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0x378>)
 8001d0a:	68ab      	ldr	r3, [r5, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d041      	beq.n	8001d98 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8001d14:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d16:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1e:	d12e      	bne.n	8001d7e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001d20:	f7fe fc8c 	bl	800063c <HAL_GetTick>
 8001d24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	0199      	lsls	r1, r3, #6
 8001d2a:	d422      	bmi.n	8001d72 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d4e:	682b      	ldr	r3, [r5, #0]
 8001d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d56:	f7fe fc71 	bl	800063c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4d24      	ldr	r5, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8001d5c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	019a      	lsls	r2, r3, #6
 8001d62:	f53f ae9d 	bmi.w	8001aa0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fc69 	bl	800063c <HAL_GetTick>
 8001d6a:	1b00      	subs	r0, r0, r4
 8001d6c:	2802      	cmp	r0, #2
 8001d6e:	d9f6      	bls.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
 8001d70:	e6c3      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe fc63 	bl	800063c <HAL_GetTick>
 8001d76:	1b80      	subs	r0, r0, r6
 8001d78:	2802      	cmp	r0, #2
 8001d7a:	d9d4      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2b2>
 8001d7c:	e6bd      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fc5d 	bl	800063c <HAL_GetTick>
 8001d82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	f57f ae8a 	bpl.w	8001aa0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe fc56 	bl	800063c <HAL_GetTick>
 8001d90:	1b00      	subs	r0, r0, r4
 8001d92:	2802      	cmp	r0, #2
 8001d94:	d9f6      	bls.n	8001d84 <HAL_RCC_OscConfig+0x310>
 8001d96:	e6b0      	b.n	8001afa <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001d9a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9c:	f43f ae97 	beq.w	8001ace <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da4:	69e1      	ldr	r1, [r4, #28]
 8001da6:	428a      	cmp	r2, r1
 8001da8:	f47f ae91 	bne.w	8001ace <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	6a21      	ldr	r1, [r4, #32]
 8001db2:	428a      	cmp	r2, r1
 8001db4:	f47f ae8b 	bne.w	8001ace <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001dc4:	f47f ae83 	bne.w	8001ace <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dca:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001dd6:	f47f ae7a 	bne.w	8001ace <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dda:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001dde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001de0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001de4:	f43f ae5c 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x2c>
 8001de8:	e671      	b.n	8001ace <HAL_RCC_OscConfig+0x5a>
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4913      	ldr	r1, [pc, #76]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001df2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df4:	688b      	ldr	r3, [r1, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d01b      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x46>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11b      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e02:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e04:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e14:	bf1a      	itte	ne
 8001e16:	480b      	ldrne	r0, [pc, #44]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e18:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	480b      	ldreq	r0, [pc, #44]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x58>)
 8001e1c:	fba1 0100 	umull	r0, r1, r1, r0
 8001e20:	f7fe f9f2 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001e30:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e34:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e38:	e7fc      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001e3c:	e7fa      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	017d7840 	.word	0x017d7840
 8001e48:	00f42400 	.word	0x00f42400

08001e4c <HAL_RCC_ClockConfig>:
{
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e50:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001e52:	4604      	mov	r4, r0
 8001e54:	b910      	cbnz	r0, 8001e5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
}
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_RCC_ClockConfig+0x12c>)
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d328      	bcc.n	8001eba <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	0797      	lsls	r7, r2, #30
 8001e6c:	d430      	bmi.n	8001ed0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	07d0      	lsls	r0, r2, #31
 8001e70:	d444      	bmi.n	8001efc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4a41      	ldr	r2, [pc, #260]	; (8001f78 <HAL_RCC_ClockConfig+0x12c>)
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	42ab      	cmp	r3, r5
 8001e7c:	d867      	bhi.n	8001f4e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	0751      	lsls	r1, r2, #29
 8001e82:	d470      	bmi.n	8001f66 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	0713      	lsls	r3, r2, #28
 8001e86:	d507      	bpl.n	8001e98 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e88:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001e8a:	6921      	ldr	r1, [r4, #16]
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e96:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e98:	f7ff ffaa 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001e9c:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001e9e:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <HAL_RCC_ClockConfig+0x134>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	40d8      	lsrs	r0, r3
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_ClockConfig+0x138>)
 8001eac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_ClockConfig+0x13c>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	f7fe fb83 	bl	80005bc <HAL_InitTick>
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e7ce      	b.n	8001e58 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f023 030f 	bic.w	r3, r3, #15
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec4:	6813      	ldr	r3, [r2, #0]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d1c3      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xa>
 8001ece:	e7cb      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	f012 0f04 	tst.w	r2, #4
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001ed6:	d003      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001ede:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	0716      	lsls	r6, r2, #28
 8001ee2:	d503      	bpl.n	8001eec <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001eea:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4923      	ldr	r1, [pc, #140]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001eee:	68a0      	ldr	r0, [r4, #8]
 8001ef0:	688b      	ldr	r3, [r1, #8]
 8001ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef6:	4303      	orrs	r3, r0
 8001ef8:	608b      	str	r3, [r1, #8]
 8001efa:	e7b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	6861      	ldr	r1, [r4, #4]
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001f00:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	d11b      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	d0a4      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4f1a      	ldr	r7, [pc, #104]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f14:	f022 0203 	bic.w	r2, r2, #3
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f1c:	f7fe fb8e 	bl	800063c <HAL_GetTick>
 8001f20:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6862      	ldr	r2, [r4, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f2e:	d0a0      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7fe fb84 	bl	800063c <HAL_GetTick>
 8001f34:	1b80      	subs	r0, r0, r6
 8001f36:	4540      	cmp	r0, r8
 8001f38:	d9f3      	bls.n	8001f22 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	e78c      	b.n	8001e58 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	2902      	cmp	r1, #2
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f46:	e7e0      	b.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	f012 0f02 	tst.w	r2, #2
 8001f4c:	e7dd      	b.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	f023 030f 	bic.w	r3, r3, #15
 8001f54:	432b      	orrs	r3, r5
 8001f56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	6813      	ldr	r3, [r2, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	42ab      	cmp	r3, r5
 8001f60:	f47f af79 	bne.w	8001e56 <HAL_RCC_ClockConfig+0xa>
 8001f64:	e78b      	b.n	8001e7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4905      	ldr	r1, [pc, #20]	; (8001f7c <HAL_RCC_ClockConfig+0x130>)
 8001f68:	68e0      	ldr	r0, [r4, #12]
 8001f6a:	688b      	ldr	r3, [r1, #8]
 8001f6c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f70:	4303      	orrs	r3, r0
 8001f72:	608b      	str	r3, [r1, #8]
 8001f74:	e786      	b.n	8001e84 <HAL_RCC_ClockConfig+0x38>
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	080026b8 	.word	0x080026b8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f92:	e003      	b.n	8001f9c <LoopCopyDataInit>

08001f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f9a:	3104      	adds	r1, #4

08001f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa4:	d3f6      	bcc.n	8001f94 <CopyDataInit>
  ldr  r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fa8:	e002      	b.n	8001fb0 <LoopFillZerobss>

08001faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fac:	f842 3b04 	str.w	r3, [r2], #4

08001fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb4:	d3f9      	bcc.n	8001faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb6:	f7fe fad9 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f000 fb47 	bl	800264c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f000 f8c1 	bl	8002144 <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001fc8:	08002710 	.word	0x08002710
  ldr  r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fd4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fd8:	2000013c 	.word	0x2000013c

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>

08001fde <Error_Handler>:
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  BSP_LED_On(LED1);
 8001fde:	2000      	movs	r0, #0
{
 8001fe0:	b508      	push	{r3, lr}
  BSP_LED_On(LED1);
 8001fe2:	f7fe fab1 	bl	8000548 <BSP_LED_On>

  /* User may add here some code to deal with this error */
  while(1)
 8001fe6:	e7fe      	b.n	8001fe6 <Error_Handler+0x8>

08001fe8 <QSPI_WriteEnable.isra.0>:
static void QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001fe8:	b500      	push	{lr}
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
static void QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001fee:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4816      	ldr	r0, [pc, #88]	; (8002050 <QSPI_WriteEnable.isra.0+0x68>)
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ff6:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001ff8:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ffa:	a906      	add	r1, sp, #24
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001ffc:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001ffe:	2300      	movs	r3, #0
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002000:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002004:	930f      	str	r3, [sp, #60]	; 0x3c
  sCommand.DummyCycles       = 0;
 8002006:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002008:	9313      	str	r3, [sp, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800200a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200e:	f7ff f8de 	bl	80011ce <HAL_QSPI_Command>
 8002012:	b108      	cbz	r0, 8002018 <QSPI_WriteEnable.isra.0+0x30>
    Error_Handler();
 8002014:	f7ff ffe3 	bl	8001fde <Error_Handler>
  sConfig.Match           = 0x02;
 8002018:	2302      	movs	r3, #2
  sConfig.Interval        = 0x10;
 800201a:	2201      	movs	r2, #1
  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800201c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002020:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002022:	480b      	ldr	r0, [pc, #44]	; (8002050 <QSPI_WriteEnable.isra.0+0x68>)
  sConfig.Mask            = 0x02;
 8002024:	e9cd 3300 	strd	r3, r3, [sp]
  sConfig.Interval        = 0x10;
 8002028:	2310      	movs	r3, #16
 800202a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800202e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002030:	466a      	mov	r2, sp
  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8002032:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8002036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800203a:	a906      	add	r1, sp, #24
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800203c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800203e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002042:	f7ff f9cf 	bl	80013e4 <HAL_QSPI_AutoPolling>
 8002046:	2800      	cmp	r0, #0
 8002048:	d1e4      	bne.n	8002014 <QSPI_WriteEnable.isra.0+0x2c>
}
 800204a:	b015      	add	sp, #84	; 0x54
 800204c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002050:	200000f0 	.word	0x200000f0

08002054 <QSPI_AutoPollingMemReady.isra.0>:
static void QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi)
 8002054:	b500      	push	{lr}
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002056:	f44f 7380 	mov.w	r3, #256	; 0x100
static void QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi)
 800205a:	b095      	sub	sp, #84	; 0x54
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800205c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling_IT(&QSPIHandle, &sCommand, &sConfig) != HAL_OK)
 8002060:	480f      	ldr	r0, [pc, #60]	; (80020a0 <QSPI_AutoPollingMemReady.isra.0+0x4c>)
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002062:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002064:	2305      	movs	r3, #5
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002066:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.Mask            = 0x01;
 8002068:	2201      	movs	r2, #1
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800206a:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800206c:	2300      	movs	r3, #0
  sConfig.Mask            = 0x01;
 800206e:	9201      	str	r2, [sp, #4]
  if (HAL_QSPI_AutoPolling_IT(&QSPIHandle, &sCommand, &sConfig) != HAL_OK)
 8002070:	a906      	add	r1, sp, #24
  sCommand.DummyCycles       = 0;
 8002072:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.SIOOMode         = QSPI_SIOO_INST_EVERY_CMD;
 8002074:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Match           = 0x00;
 8002076:	9300      	str	r3, [sp, #0]
  sConfig.StatusBytesSize = 1;
 8002078:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002080:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sConfig.Interval        = 0x10;
 8002084:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling_IT(&QSPIHandle, &sCommand, &sConfig) != HAL_OK)
 8002086:	466a      	mov	r2, sp
  sConfig.Interval        = 0x10;
 8002088:	9302      	str	r3, [sp, #8]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800208a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800208e:	9305      	str	r3, [sp, #20]
  if (HAL_QSPI_AutoPolling_IT(&QSPIHandle, &sCommand, &sConfig) != HAL_OK)
 8002090:	f7ff f9f8 	bl	8001484 <HAL_QSPI_AutoPolling_IT>
 8002094:	b108      	cbz	r0, 800209a <QSPI_AutoPollingMemReady.isra.0+0x46>
    Error_Handler();
 8002096:	f7ff ffa2 	bl	8001fde <Error_Handler>
}
 800209a:	b015      	add	sp, #84	; 0x54
 800209c:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a0:	200000f0 	.word	0x200000f0

080020a4 <HAL_QSPI_CmdCpltCallback>:
  CmdCplt++;
 80020a4:	4a02      	ldr	r2, [pc, #8]	; (80020b0 <HAL_QSPI_CmdCpltCallback+0xc>)
 80020a6:	7813      	ldrb	r3, [r2, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	7013      	strb	r3, [r2, #0]
}
 80020ae:	4770      	bx	lr
 80020b0:	200000ee 	.word	0x200000ee

080020b4 <HAL_QSPI_RxCpltCallback>:
  RxCplt++;
 80020b4:	4a02      	ldr	r2, [pc, #8]	; (80020c0 <HAL_QSPI_RxCpltCallback+0xc>)
 80020b6:	7813      	ldrb	r3, [r2, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	7013      	strb	r3, [r2, #0]
}
 80020be:	4770      	bx	lr
 80020c0:	200000ed 	.word	0x200000ed

080020c4 <HAL_QSPI_TxCpltCallback>:
  TxCplt++; 
 80020c4:	4a02      	ldr	r2, [pc, #8]	; (80020d0 <HAL_QSPI_TxCpltCallback+0xc>)
 80020c6:	7813      	ldrb	r3, [r2, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	7013      	strb	r3, [r2, #0]
}
 80020ce:	4770      	bx	lr
 80020d0:	200000ec 	.word	0x200000ec

080020d4 <HAL_QSPI_StatusMatchCallback>:
  StatusMatch++;
 80020d4:	4a02      	ldr	r2, [pc, #8]	; (80020e0 <HAL_QSPI_StatusMatchCallback+0xc>)
 80020d6:	7813      	ldrb	r3, [r2, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	7013      	strb	r3, [r2, #0]
}
 80020de:	4770      	bx	lr
 80020e0:	200000ef 	.word	0x200000ef

080020e4 <SystemClock_Config>:
{
 80020e4:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80020ea:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ec:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80020f0:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f4:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020fc:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8002100:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002104:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002108:	2309      	movs	r3, #9
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800210a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800210c:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800210e:	f7ff fcb1 	bl	8001a74 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8002112:	b100      	cbz	r0, 8002116 <SystemClock_Config+0x32>
    while(1) { ; }
 8002114:	e7fe      	b.n	8002114 <SystemClock_Config+0x30>
  ret = HAL_PWREx_EnableOverDrive();
 8002116:	f7fe fecf 	bl	8000eb8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800211a:	b100      	cbz	r0, 800211e <SystemClock_Config+0x3a>
    while(1) { ; }
 800211c:	e7fe      	b.n	800211c <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800211e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 8002120:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002124:	9003      	str	r0, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8002126:	2107      	movs	r1, #7
 8002128:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8002136:	f7ff fe89 	bl	8001e4c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800213a:	b100      	cbz	r0, 800213e <SystemClock_Config+0x5a>
    while(1) { ; }
 800213c:	e7fe      	b.n	800213c <SystemClock_Config+0x58>
}
 800213e:	b012      	add	sp, #72	; 0x48
 8002140:	bd10      	pop	{r4, pc}
	...

08002144 <main>:
{
 8002144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t qspi_addr = 0;
 8002148:	2200      	movs	r2, #0
{
 800214a:	b0a0      	sub	sp, #128	; 0x80
  __IO uint32_t qspi_addr = 0;
 800214c:	9201      	str	r2, [sp, #4]
  __IO uint8_t step = 0;
 800214e:	f88d 2002 	strb.w	r2, [sp, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002152:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002156:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800215a:	4ba3      	ldr	r3, [pc, #652]	; (80023e8 <main+0x2a4>)
 800215c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002164:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002168:	6959      	ldr	r1, [r3, #20]
 800216a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800216e:	6159      	str	r1, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002174:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800217c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002180:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002184:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002188:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800218c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8002190:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002192:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002196:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002198:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800219c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800219e:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80021a2:	d2f9      	bcs.n	8002198 <main+0x54>
    } while(sets-- != 0U);
 80021a4:	3a20      	subs	r2, #32
 80021a6:	f112 0f20 	cmn.w	r2, #32
 80021aa:	d1f2      	bne.n	8002192 <main+0x4e>
 80021ac:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021bc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80021c0:	f7fe fa1e 	bl	8000600 <HAL_Init>
  QSPIHandle.Instance = QUADSPI;
 80021c4:	4c89      	ldr	r4, [pc, #548]	; (80023ec <main+0x2a8>)
  SystemClock_Config();
 80021c6:	f7ff ff8d 	bl	80020e4 <SystemClock_Config>
  BSP_LED_Init(LED1);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe f998 	bl	8000500 <BSP_LED_Init>
  QSPIHandle.Instance = QUADSPI;
 80021d0:	4b87      	ldr	r3, [pc, #540]	; (80023f0 <main+0x2ac>)
  HAL_QSPI_DeInit(&QSPIHandle);
 80021d2:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 80021d4:	6023      	str	r3, [r4, #0]
  HAL_QSPI_DeInit(&QSPIHandle);
 80021d6:	f7fe ffe7 	bl	80011a8 <HAL_QSPI_DeInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 80021da:	f04f 0e02 	mov.w	lr, #2
 80021de:	2304      	movs	r3, #4
 80021e0:	e9c4 e301 	strd	lr, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80021e4:	2310      	movs	r3, #16
 80021e6:	60e3      	str	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ec:	fa93 f3a3 	rbit	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(0x1000000) - 1;
 80021f0:	fab3 f383 	clz	r3, r3
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80021f4:	f44f 7580 	mov.w	r5, #256	; 0x100
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80021f8:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(0x1000000) - 1;
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80021fe:	2300      	movs	r3, #0
 8002200:	e9c4 5305 	strd	r5, r3, [r4, #20]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002204:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002208:	f7fe ff7a 	bl	8001100 <HAL_QSPI_Init>
 800220c:	b108      	cbz	r0, 8002212 <main+0xce>
        Error_Handler();
 800220e:	f7ff fee6 	bl	8001fde <Error_Handler>
  max_size = (uint32_t)((uint8_t *)(&_qspi_init_length));
 8002212:	4f78      	ldr	r7, [pc, #480]	; (80023f4 <main+0x2b0>)
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002218:	950a      	str	r5, [sp, #40]	; 0x28
  size = 0 ;
 800221a:	4604      	mov	r4, r0
 800221c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8002220:	46b9      	mov	r9, r7
  flash_addr = 0;
 8002222:	4606      	mov	r6, r0
        if(StatusMatch != 0)
 8002224:	4d74      	ldr	r5, [pc, #464]	; (80023f8 <main+0x2b4>)
            RxCplt = 0;
 8002226:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8002408 <main+0x2c4>
 800222a:	bf28      	it	cs
 800222c:	f44f 7980 	movcs.w	r9, #256	; 0x100
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002230:	9307      	str	r3, [sp, #28]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002232:	900c      	str	r0, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002234:	9011      	str	r0, [sp, #68]	; 0x44
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002236:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
    switch(step)
 800223a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d8e5      	bhi.n	800220e <main+0xca>
 8002242:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002246:	0006      	.short	0x0006
 8002248:	0031001f 	.word	0x0031001f
 800224c:	00600052 	.word	0x00600052
 8002250:	00cd      	.short	0x00cd
        CmdCplt = 0;
 8002252:	f04f 0a00 	mov.w	sl, #0
 8002256:	4b69      	ldr	r3, [pc, #420]	; (80023fc <main+0x2b8>)
 8002258:	f883 a000 	strb.w	sl, [r3]
        QSPI_WriteEnable(&QSPIHandle);
 800225c:	f7ff fec4 	bl	8001fe8 <QSPI_WriteEnable.isra.0>
        sCommand.Instruction = SECTOR_ERASE_CMD;
 8002260:	23d8      	movs	r3, #216	; 0xd8
        if (HAL_QSPI_Command_IT(&QSPIHandle, &sCommand) != HAL_OK)
 8002262:	a904      	add	r1, sp, #16
 8002264:	4861      	ldr	r0, [pc, #388]	; (80023ec <main+0x2a8>)
        sCommand.Instruction = SECTOR_ERASE_CMD;
 8002266:	9304      	str	r3, [sp, #16]
        sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
        sCommand.DataMode    = QSPI_DATA_NONE;
 800226c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
        sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8002270:	930b      	str	r3, [sp, #44]	; 0x2c
        sCommand.Address     = qspi_addr;
 8002272:	9b01      	ldr	r3, [sp, #4]
        sCommand.DummyCycles = 0;
 8002274:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
        sCommand.Address     = qspi_addr;
 8002278:	9305      	str	r3, [sp, #20]
        if (HAL_QSPI_Command_IT(&QSPIHandle, &sCommand) != HAL_OK)
 800227a:	f7fe ffeb 	bl	8001254 <HAL_QSPI_Command_IT>
            if (HAL_QSPI_MemoryMapped(&QSPIHandle, &sCommand, &sMemMappedCfg) != HAL_OK)
 800227e:	2800      	cmp	r0, #0
 8002280:	d03c      	beq.n	80022fc <main+0x1b8>
 8002282:	e7c4      	b.n	800220e <main+0xca>
        if(CmdCplt != 0)
 8002284:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <main+0x2b8>)
 8002286:	7813      	ldrb	r3, [r2, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0d6      	beq.n	800223a <main+0xf6>
          CmdCplt = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	464c      	mov	r4, r9
          flash_addr =(uint8_t *)(&_qspi_init_base);
 8002290:	4e5b      	ldr	r6, [pc, #364]	; (8002400 <main+0x2bc>)
          CmdCplt = 0;
 8002292:	7013      	strb	r3, [r2, #0]
          StatusMatch = 0;
 8002294:	702b      	strb	r3, [r5, #0]
          QSPI_AutoPollingMemReady(&QSPIHandle);
 8002296:	f7ff fedd 	bl	8002054 <QSPI_AutoPollingMemReady.isra.0>
          step++;
 800229a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f88d 3002 	strb.w	r3, [sp, #2]
 80022a6:	e7c8      	b.n	800223a <main+0xf6>
        if(StatusMatch != 0)
 80022a8:	782b      	ldrb	r3, [r5, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0c5      	beq.n	800223a <main+0xf6>
          StatusMatch = 0;
 80022ae:	2300      	movs	r3, #0
          TxCplt = 0;
 80022b0:	4a54      	ldr	r2, [pc, #336]	; (8002404 <main+0x2c0>)
          StatusMatch = 0;
 80022b2:	702b      	strb	r3, [r5, #0]
          TxCplt = 0;
 80022b4:	7013      	strb	r3, [r2, #0]
          QSPI_WriteEnable(&QSPIHandle);
 80022b6:	f7ff fe97 	bl	8001fe8 <QSPI_WriteEnable.isra.0>
          sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 80022ba:	2332      	movs	r3, #50	; 0x32
          if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	a904      	add	r1, sp, #16
 80022c2:	484a      	ldr	r0, [pc, #296]	; (80023ec <main+0x2a8>)
          sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 80022c4:	9304      	str	r3, [sp, #16]
          sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80022c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ca:	930b      	str	r3, [sp, #44]	; 0x2c
          sCommand.Address     = qspi_addr;
 80022cc:	9b01      	ldr	r3, [sp, #4]
 80022ce:	9305      	str	r3, [sp, #20]
          sCommand.DataMode    = QSPI_DATA_4_LINES;
 80022d0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
          sCommand.NbData      = size;
 80022d4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
          if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022d8:	f7fe ff79 	bl	80011ce <HAL_QSPI_Command>
 80022dc:	2800      	cmp	r0, #0
 80022de:	d196      	bne.n	800220e <main+0xca>
          if (HAL_QSPI_Transmit_DMA(&QSPIHandle, flash_addr) != HAL_OK)
 80022e0:	4631      	mov	r1, r6
 80022e2:	4842      	ldr	r0, [pc, #264]	; (80023ec <main+0x2a8>)
 80022e4:	f7fe fff8 	bl	80012d8 <HAL_QSPI_Transmit_DMA>
 80022e8:	e7c9      	b.n	800227e <main+0x13a>
        if(TxCplt != 0)
 80022ea:	4a46      	ldr	r2, [pc, #280]	; (8002404 <main+0x2c0>)
 80022ec:	7813      	ldrb	r3, [r2, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0a3      	beq.n	800223a <main+0xf6>
          TxCplt = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	7013      	strb	r3, [r2, #0]
          StatusMatch = 0;
 80022f6:	702b      	strb	r3, [r5, #0]
          QSPI_AutoPollingMemReady(&QSPIHandle);
 80022f8:	f7ff feac 	bl	8002054 <QSPI_AutoPollingMemReady.isra.0>
            step++;
 80022fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002300:	3301      	adds	r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e010      	b.n	8002328 <main+0x1e4>
        if(StatusMatch != 0)
 8002306:	782b      	ldrb	r3, [r5, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d096      	beq.n	800223a <main+0xf6>
          qspi_addr += size;
 800230c:	9b01      	ldr	r3, [sp, #4]
          flash_addr += size;
 800230e:	4426      	add	r6, r4
          qspi_addr += size;
 8002310:	4423      	add	r3, r4
 8002312:	9301      	str	r3, [sp, #4]
          if (qspi_addr < max_size)
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	42bb      	cmp	r3, r7
 8002318:	d209      	bcs.n	800232e <main+0x1ea>
            if ((qspi_addr + size) > max_size)
 800231a:	9b01      	ldr	r3, [sp, #4]
 800231c:	4423      	add	r3, r4
 800231e:	42bb      	cmp	r3, r7
 8002320:	d901      	bls.n	8002326 <main+0x1e2>
              size = (max_size - qspi_addr) ;
 8002322:	9c01      	ldr	r4, [sp, #4]
 8002324:	1b3c      	subs	r4, r7, r4
            step = 2;
 8002326:	2302      	movs	r3, #2
            step++;
 8002328:	f88d 3002 	strb.w	r3, [sp, #2]
 800232c:	e785      	b.n	800223a <main+0xf6>
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800232e:	f44f 7280 	mov.w	r2, #256	; 0x100
            StatusMatch = 0;
 8002332:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002334:	a912      	add	r1, sp, #72	; 0x48
 8002336:	482d      	ldr	r0, [pc, #180]	; (80023ec <main+0x2a8>)
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002338:	9218      	str	r2, [sp, #96]	; 0x60
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800233a:	2285      	movs	r2, #133	; 0x85
            StatusMatch = 0;
 800233c:	702b      	strb	r3, [r5, #0]
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800233e:	9212      	str	r2, [sp, #72]	; 0x48
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
            RxCplt = 0;
 8002344:	f888 3000 	strb.w	r3, [r8]
  sCommand.DummyCycles       = 0;
 8002348:	9317      	str	r3, [sp, #92]	; 0x5c
  sCommand.SIOOMode         = QSPI_SIOO_INST_EVERY_CMD;
 800234a:	931f      	str	r3, [sp, #124]	; 0x7c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800234c:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002352:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002356:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sCommand.NbData            = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800235e:	f7fe ff36 	bl	80011ce <HAL_QSPI_Command>
 8002362:	2800      	cmp	r0, #0
 8002364:	f47f af53 	bne.w	800220e <main+0xca>
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	f10d 0103 	add.w	r1, sp, #3
 8002370:	481e      	ldr	r0, [pc, #120]	; (80023ec <main+0x2a8>)
 8002372:	f7ff f9da 	bl	800172a <HAL_QSPI_Receive>
 8002376:	2800      	cmp	r0, #0
 8002378:	f47f af49 	bne.w	800220e <main+0xca>
  QSPI_WriteEnable(&QSPIHandle);
 800237c:	f7ff fe34 	bl	8001fe8 <QSPI_WriteEnable.isra.0>
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002380:	2381      	movs	r3, #129	; 0x81
 8002382:	9312      	str	r3, [sp, #72]	; 0x48
 8002384:	23f0      	movs	r3, #240	; 0xf0
 8002386:	fa93 f3a3 	rbit	r3, r3
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 800238a:	f04f 0a0a 	mov.w	sl, #10
 800238e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002392:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002396:	a912      	add	r1, sp, #72	; 0x48
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8002398:	f002 020f 	and.w	r2, r2, #15
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800239c:	4813      	ldr	r0, [pc, #76]	; (80023ec <main+0x2a8>)
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 800239e:	fa0a f303 	lsl.w	r3, sl, r3
 80023a2:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 80023a8:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023ac:	f7fe ff0f 	bl	80011ce <HAL_QSPI_Command>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	f47f af2c 	bne.w	800220e <main+0xca>
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	f10d 0103 	add.w	r1, sp, #3
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <main+0x2a8>)
 80023c0:	f7ff f957 	bl	8001672 <HAL_QSPI_Transmit>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	f47f af22 	bne.w	800220e <main+0xca>
            sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 80023ca:	236b      	movs	r3, #107	; 0x6b
            sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80023cc:	9003      	str	r0, [sp, #12]
            if (HAL_QSPI_MemoryMapped(&QSPIHandle, &sCommand, &sMemMappedCfg) != HAL_OK)
 80023ce:	aa02      	add	r2, sp, #8
 80023d0:	a904      	add	r1, sp, #16
 80023d2:	4806      	ldr	r0, [pc, #24]	; (80023ec <main+0x2a8>)
            sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 80023d4:	9304      	str	r3, [sp, #16]
            sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 80023d6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
            if (HAL_QSPI_MemoryMapped(&QSPIHandle, &sCommand, &sMemMappedCfg) != HAL_OK)
 80023da:	f7ff f8a1 	bl	8001520 <HAL_QSPI_MemoryMapped>
 80023de:	e74e      	b.n	800227e <main+0x13a>
          GpioToggle();
 80023e0:	f000 f966 	bl	80026b0 <__GpioToggle_veneer>
        break;
 80023e4:	e729      	b.n	800223a <main+0xf6>
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	200000f0 	.word	0x200000f0
 80023f0:	a0001000 	.word	0xa0001000
 80023f4:	00000028 	.word	0x00000028
 80023f8:	200000ef 	.word	0x200000ef
 80023fc:	200000ee 	.word	0x200000ee
 8002400:	080026e0 	.word	0x080026e0
 8002404:	200000ec 	.word	0x200000ec
 8002408:	200000ed 	.word	0x200000ed

0800240c <HAL_QSPI_MspInit>:
  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef hdma;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800240c:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <HAL_QSPI_MspInit+0x174>)
 800240e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002410:	f042 0202 	orr.w	r2, r2, #2
{
 8002414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  QSPI_CLK_ENABLE();
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
{
 800241a:	b08f      	sub	sp, #60	; 0x3c
  QSPI_CLK_ENABLE();
 800241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_CS_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800241e:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF_CS;
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &GPIO_InitStruct);

  /* QSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_CLK_PIN;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002422:	2400      	movs	r4, #0
  GPIO_InitStruct.Alternate = GPIO_AF_CLK;
 8002424:	2509      	movs	r5, #9
  QSPI_CLK_ENABLE();
 8002426:	f002 0202 	and.w	r2, r2, #2
{
 800242a:	4606      	mov	r6, r0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800242c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin       = QSPI_CLK_PIN;
 800242e:	f04f 0904 	mov.w	r9, #4
  QSPI_CLK_ENABLE();
 8002432:	9201      	str	r2, [sp, #4]
 8002434:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8002436:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8002438:	4852      	ldr	r0, [pc, #328]	; (8002584 <HAL_QSPI_MspInit+0x178>)
  QSPI_FORCE_RESET();
 800243a:	f042 0202 	orr.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &GPIO_InitStruct);

  /* QSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D0_PIN;
  GPIO_InitStruct.Alternate = GPIO_AF_D0;
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800243e:	4f52      	ldr	r7, [pc, #328]	; (8002588 <HAL_QSPI_MspInit+0x17c>)
  QSPI_FORCE_RESET();
 8002440:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	f022 0202 	bic.w	r2, r2, #2
 8002448:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 800244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244c:	f042 0202 	orr.w	r2, r2, #2
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f002 0202 	and.w	r2, r2, #2
 8002458:	9202      	str	r2, [sp, #8]
 800245a:	9a02      	ldr	r2, [sp, #8]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
 8002464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002466:	f002 0202 	and.w	r2, r2, #2
 800246a:	9203      	str	r2, [sp, #12]
 800246c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D0_GPIO_CLK_ENABLE();
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	f042 0208 	orr.w	r2, r2, #8
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	f002 0208 	and.w	r2, r2, #8
 800247c:	9204      	str	r2, [sp, #16]
 800247e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
 8002488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248a:	f002 0208 	and.w	r2, r2, #8
 800248e:	9205      	str	r2, [sp, #20]
 8002490:	9a05      	ldr	r2, [sp, #20]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	f042 0210 	orr.w	r2, r2, #16
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	f002 0210 	and.w	r2, r2, #16
 80024a0:	9206      	str	r2, [sp, #24]
 80024a2:	9a06      	ldr	r2, [sp, #24]
  QSPI_D3_GPIO_CLK_ENABLE();
 80024a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	f002 0208 	and.w	r2, r2, #8
 80024b2:	9207      	str	r2, [sp, #28]
 80024b4:	9a07      	ldr	r2, [sp, #28]
  QSPI_DMA_CLK_ENABLE();   
 80024b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80024be:	2240      	movs	r2, #64	; 0x40
  QSPI_DMA_CLK_ENABLE();   
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	9308      	str	r3, [sp, #32]
 80024c8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF_CS;
 80024d6:	230a      	movs	r3, #10
 80024d8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80024da:	f7fe fb57 	bl	8000b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80024de:	a909      	add	r1, sp, #36	; 0x24
 80024e0:	4828      	ldr	r0, [pc, #160]	; (8002584 <HAL_QSPI_MspInit+0x178>)
  GPIO_InitStruct.Pin       = QSPI_CLK_PIN;
 80024e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80024e6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF_CLK;
 80024e8:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80024ea:	f7fe fb4f 	bl	8000b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = QSPI_D0_PIN;
 80024ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80024f2:	a909      	add	r1, sp, #36	; 0x24
 80024f4:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF_D0;
 80024f6:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin       = QSPI_D0_PIN;
 80024f8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80024fa:	f7fe fb47 	bl	8000b8c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D1_PIN;
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF_D1;
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8002502:	a909      	add	r1, sp, #36	; 0x24
 8002504:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF_D1;
 8002506:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin       = QSPI_D1_PIN;
 8002508:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800250a:	f7fe fb3f 	bl	8000b8c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D2_PIN;
  GPIO_InitStruct.Alternate = GPIO_AF_D2;
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800250e:	a909      	add	r1, sp, #36	; 0x24
 8002510:	481e      	ldr	r0, [pc, #120]	; (800258c <HAL_QSPI_MspInit+0x180>)
  GPIO_InitStruct.Pin       = QSPI_D2_PIN;
 8002512:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF_D2;
 8002516:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8002518:	f7fe fb38 	bl	8000b8c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D3_PIN;
 800251c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Alternate = GPIO_AF_D3;
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8002520:	a909      	add	r1, sp, #36	; 0x24
 8002522:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF_D3;
 8002524:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin       = QSPI_D3_PIN;
 8002526:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8002528:	f7fe fb30 	bl	8000b8c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800252c:	4622      	mov	r2, r4
 800252e:	210f      	movs	r1, #15
 8002530:	205c      	movs	r0, #92	; 0x5c
 8002532:	f7fe f8ad 	bl	8000690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002536:	205c      	movs	r0, #92	; 0x5c
 8002538:	f7fe f8dc 	bl	80006f4 <HAL_NVIC_EnableIRQ>

  /*##-4- Configure the DMA channel ###########################################*/
  /* QSPI DMA channel configuration */
  hdma.Init.Channel             = QSPI_DMA_CHANNEL;                     
 800253c:	4814      	ldr	r0, [pc, #80]	; (8002590 <HAL_QSPI_MspInit+0x184>)
 800253e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  hdma.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma.Init.MemBurst            = DMA_MBURST_SINGLE;           /* Memory burst           */
  hdma.Init.PeriphBurst         = DMA_PBURST_SINGLE;           /* Peripheral burst       */
  hdma.Instance                 = QSPI_DMA_INSTANCE;

  __HAL_LINKDMA(hqspi, hdma, hdma);
 8002542:	63f0      	str	r0, [r6, #60]	; 0x3c
  hdma.Init.Channel             = QSPI_DMA_CHANNEL;                     
 8002544:	6043      	str	r3, [r0, #4]
  hdma.Init.MemInc              = DMA_MINC_ENABLE;
 8002546:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hdma.Init.PeriphInc           = DMA_PINC_DISABLE;
 800254a:	60c4      	str	r4, [r0, #12]
  hdma.Init.PeriphBurst         = DMA_PBURST_SINGLE;           /* Peripheral burst       */
 800254c:	6304      	str	r4, [r0, #48]	; 0x30
  __HAL_LINKDMA(hqspi, hdma, hdma);
 800254e:	6386      	str	r6, [r0, #56]	; 0x38
  hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002550:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hdma.Instance                 = QSPI_DMA_INSTANCE;
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_QSPI_MspInit+0x188>)
  hdma.Init.Mode                = DMA_NORMAL;
 8002556:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hdma.Instance                 = QSPI_DMA_INSTANCE;
 800255a:	6003      	str	r3, [r0, #0]
  hdma.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;        /* FIFO mode disabled     */
 800255c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hdma.Init.MemBurst            = DMA_MBURST_SINGLE;           /* Memory burst           */
 8002560:	e9c0 840a 	strd	r8, r4, [r0, #40]	; 0x28
  HAL_DMA_Init(&hdma);
 8002564:	f7fe f914 	bl	8000790 <HAL_DMA_Init>

  /* NVIC configuration for DMA interrupt */
  HAL_NVIC_SetPriority(QSPI_DMA_IRQ, 0x00, 0);
 8002568:	4622      	mov	r2, r4
 800256a:	4621      	mov	r1, r4
 800256c:	2046      	movs	r0, #70	; 0x46
 800256e:	f7fe f88f 	bl	8000690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QSPI_DMA_IRQ);
 8002572:	2046      	movs	r0, #70	; 0x46
 8002574:	f7fe f8be 	bl	80006f4 <HAL_NVIC_EnableIRQ>
}
 8002578:	b00f      	add	sp, #60	; 0x3c
 800257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40020400 	.word	0x40020400
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	20000028 	.word	0x20000028
 8002594:	400264b8 	.word	0x400264b8

08002598 <HAL_QSPI_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8002598:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma;

  /*##-1- Disable the NVIC for QSPI and DMA ##################################*/
  HAL_NVIC_DisableIRQ(QSPI_DMA_IRQ);
 800259a:	2046      	movs	r0, #70	; 0x46
  hdma.Instance = QSPI_DMA_INSTANCE;
  HAL_DMA_DeInit(&hdma);
  /* De-Configure QSPI pins */
  HAL_GPIO_DeInit(QSPI_CS_GPIO_PORT, QSPI_CS_PIN);
  HAL_GPIO_DeInit(QSPI_CLK_GPIO_PORT, QSPI_CLK_PIN);
  HAL_GPIO_DeInit(QSPI_D0_GPIO_PORT, QSPI_D0_PIN);
 800259c:	4c1a      	ldr	r4, [pc, #104]	; (8002608 <HAL_QSPI_MspDeInit+0x70>)
  HAL_NVIC_DisableIRQ(QSPI_DMA_IRQ);
 800259e:	f7fe f8b7 	bl	8000710 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80025a2:	205c      	movs	r0, #92	; 0x5c
 80025a4:	f7fe f8b4 	bl	8000710 <HAL_NVIC_DisableIRQ>
  hdma.Instance = QSPI_DMA_INSTANCE;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <HAL_QSPI_MspDeInit+0x74>)
 80025aa:	4819      	ldr	r0, [pc, #100]	; (8002610 <HAL_QSPI_MspDeInit+0x78>)
 80025ac:	f840 3f60 	str.w	r3, [r0, #96]!
  HAL_DMA_DeInit(&hdma);
 80025b0:	f7fe f96e 	bl	8000890 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(QSPI_CS_GPIO_PORT, QSPI_CS_PIN);
 80025b4:	4817      	ldr	r0, [pc, #92]	; (8002614 <HAL_QSPI_MspDeInit+0x7c>)
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	f7fe fbce 	bl	8000d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_CLK_GPIO_PORT, QSPI_CLK_PIN);
 80025bc:	2104      	movs	r1, #4
 80025be:	4815      	ldr	r0, [pc, #84]	; (8002614 <HAL_QSPI_MspDeInit+0x7c>)
 80025c0:	f7fe fbca 	bl	8000d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D0_GPIO_PORT, QSPI_D0_PIN);
 80025c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7fe fbc5 	bl	8000d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D1_GPIO_PORT, QSPI_D1_PIN);
 80025ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7fe fbc0 	bl	8000d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D2_GPIO_PORT, QSPI_D2_PIN);
 80025d8:	2104      	movs	r1, #4
 80025da:	480f      	ldr	r0, [pc, #60]	; (8002618 <HAL_QSPI_MspDeInit+0x80>)
 80025dc:	f7fe fbbc 	bl	8000d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D3_GPIO_PORT, QSPI_D3_PIN);
 80025e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7fe fbb7 	bl	8000d58 <HAL_GPIO_DeInit>

  /*##-3- Reset peripherals ##################################################*/
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_QSPI_MspDeInit+0x84>)
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	f042 0202 	orr.w	r2, r2, #2
 80025f2:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	f022 0202 	bic.w	r2, r2, #2
 80025fa:	619a      	str	r2, [r3, #24]

  /* Disable the QuadSPI memory interface clock */
  QSPI_CLK_DISABLE();
 80025fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fe:	f022 0202 	bic.w	r2, r2, #2
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002604:	bd10      	pop	{r4, pc}
 8002606:	bf00      	nop
 8002608:	40020c00 	.word	0x40020c00
 800260c:	400264b8 	.word	0x400264b8
 8002610:	20000028 	.word	0x20000028
 8002614:	40020400 	.word	0x40020400
 8002618:	40021000 	.word	0x40021000
 800261c:	40023800 	.word	0x40023800

08002620 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002620:	4770      	bx	lr

08002622 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler>

08002624 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler>

08002626 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler>

08002628 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler>

0800262a <SVC_Handler>:
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:
 800262c:	4770      	bx	lr

0800262e <PendSV_Handler>:
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002630:	f7fd bff8 	b.w	8000624 <HAL_IncTick>

08002634 <QUADSPI_IRQHandler>:
  * @param  None
  * @retval None
  */
void QUADSPI_IRQHandler(void)
{
  HAL_QSPI_IRQHandler(&QSPIHandle);
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <QUADSPI_IRQHandler+0x8>)
 8002636:	f7ff b90f 	b.w	8001858 <HAL_QSPI_IRQHandler>
 800263a:	bf00      	nop
 800263c:	200000f0 	.word	0x200000f0

08002640 <DMA2_Stream7_IRQHandler>:
  * @param  None
  * @retval None
  */
void QSPI_DMA_IRQ_HANDLER(void)
{
  HAL_DMA_IRQHandler(QSPIHandle.hdma);
 8002640:	4b01      	ldr	r3, [pc, #4]	; (8002648 <DMA2_Stream7_IRQHandler+0x8>)
 8002642:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002644:	f7fe b9e2 	b.w	8000a0c <HAL_DMA_IRQHandler>
 8002648:	200000f0 	.word	0x200000f0

0800264c <__libc_init_array>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4d0d      	ldr	r5, [pc, #52]	; (8002684 <__libc_init_array+0x38>)
 8002650:	4c0d      	ldr	r4, [pc, #52]	; (8002688 <__libc_init_array+0x3c>)
 8002652:	1b64      	subs	r4, r4, r5
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	2600      	movs	r6, #0
 8002658:	42a6      	cmp	r6, r4
 800265a:	d109      	bne.n	8002670 <__libc_init_array+0x24>
 800265c:	4d0b      	ldr	r5, [pc, #44]	; (800268c <__libc_init_array+0x40>)
 800265e:	4c0c      	ldr	r4, [pc, #48]	; (8002690 <__libc_init_array+0x44>)
 8002660:	f000 f818 	bl	8002694 <_init>
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	2600      	movs	r6, #0
 800266a:	42a6      	cmp	r6, r4
 800266c:	d105      	bne.n	800267a <__libc_init_array+0x2e>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	f855 3b04 	ldr.w	r3, [r5], #4
 8002674:	4798      	blx	r3
 8002676:	3601      	adds	r6, #1
 8002678:	e7ee      	b.n	8002658 <__libc_init_array+0xc>
 800267a:	f855 3b04 	ldr.w	r3, [r5], #4
 800267e:	4798      	blx	r3
 8002680:	3601      	adds	r6, #1
 8002682:	e7f2      	b.n	800266a <__libc_init_array+0x1e>
 8002684:	08002708 	.word	0x08002708
 8002688:	08002708 	.word	0x08002708
 800268c:	08002708 	.word	0x08002708
 8002690:	0800270c 	.word	0x0800270c

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
 80026ac:	0000      	movs	r0, r0
	...

080026b0 <__GpioToggle_veneer>:
 80026b0:	f85f f000 	ldr.w	pc, [pc]	; 80026b4 <__GpioToggle_veneer+0x4>
 80026b4:	90000001 	.word	0x90000001

Disassembly of section .qspi:

90000000 <GpioToggle>:
#elif defined(__GNUC__)
static void __attribute__((section(".qspi"), noinline)) GpioToggle(void)
#endif

{
  BSP_LED_Toggle(LED1);
90000000:	2000      	movs	r0, #0
{
90000002:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED1);
90000004:	f000 f808 	bl	90000018 <__BSP_LED_Toggle_veneer>
  /* Insert delay 200 ms */
  HAL_Delay(200);
90000008:	20c8      	movs	r0, #200	; 0xc8
}
9000000a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
9000000e:	f000 b807 	b.w	90000020 <__HAL_Delay_veneer>
90000012:	0000      	movs	r0, r0
90000014:	0000      	movs	r0, r0
	...

90000018 <__BSP_LED_Toggle_veneer>:
90000018:	f85f f000 	ldr.w	pc, [pc]	; 9000001c <__BSP_LED_Toggle_veneer+0x4>
9000001c:	0800055d 	.word	0x0800055d

90000020 <__HAL_Delay_veneer>:
90000020:	f85f f000 	ldr.w	pc, [pc]	; 90000024 <__HAL_Delay_veneer+0x4>
90000024:	08000649 	.word	0x08000649
