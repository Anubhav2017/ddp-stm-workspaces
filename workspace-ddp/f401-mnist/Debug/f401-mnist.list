
f401-mnist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005184  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173cc  080173cc  00036b88  2**0
                  CONTENTS
  4 .ARM          00000008  080173cc  080173cc  000273cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173d4  080173d4  00036b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173d4  080173d4  000273d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173d8  080173d8  000273d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00006b88  20000000  080173dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca98  20006b90  0801df64  00036b90  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20013628  0801df64  00043628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00036b88  2**0
                  CONTENTS, READONLY
 12 .debug_info   003170f4  00000000  00000000  00036bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001a32d  00000000  00000000  0034dcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00008d00  00000000  00000000  00367fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00008a88  00000000  00000000  00370ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c39e  00000000  00000000  00379768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000664fb  00000000  00000000  003a5b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a70b  00000000  00000000  0040c001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0058670c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000297b0  00000000  00000000  00586760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20006b90 	.word	0x20006b90
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012230 	.word	0x08012230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20006b94 	.word	0x20006b94
 80001dc:	08012230 	.word	0x08012230

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2iz>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d215      	bcs.n	8000b76 <__aeabi_d2iz+0x36>
 8000b4a:	d511      	bpl.n	8000b70 <__aeabi_d2iz+0x30>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d912      	bls.n	8000b7c <__aeabi_d2iz+0x3c>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_d2iz+0x48>
 8000b7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c44:	f000 b9a4 	b.w	8000f90 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f83c 	bl	8000ccc <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_d2lz>:
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	2200      	movs	r2, #0
 8000c64:	2300      	movs	r3, #0
 8000c66:	4604      	mov	r4, r0
 8000c68:	460d      	mov	r5, r1
 8000c6a:	f7ff ff41 	bl	8000af0 <__aeabi_dcmplt>
 8000c6e:	b928      	cbnz	r0, 8000c7c <__aeabi_d2lz+0x1c>
 8000c70:	4620      	mov	r0, r4
 8000c72:	4629      	mov	r1, r5
 8000c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c78:	f000 b80a 	b.w	8000c90 <__aeabi_d2ulz>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c82:	f000 f805 	bl	8000c90 <__aeabi_d2ulz>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	bd38      	pop	{r3, r4, r5, pc}
 8000c8e:	bf00      	nop

08000c90 <__aeabi_d2ulz>:
 8000c90:	b5d0      	push	{r4, r6, r7, lr}
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__aeabi_d2ulz+0x34>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	4606      	mov	r6, r0
 8000c98:	460f      	mov	r7, r1
 8000c9a:	f7ff fcb7 	bl	800060c <__aeabi_dmul>
 8000c9e:	f000 f979 	bl	8000f94 <__aeabi_d2uiz>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	f7ff fc38 	bl	8000518 <__aeabi_ui2d>
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <__aeabi_d2ulz+0x38>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f7ff fcae 	bl	800060c <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	4639      	mov	r1, r7
 8000cb8:	f7ff faf0 	bl	800029c <__aeabi_dsub>
 8000cbc:	f000 f96a 	bl	8000f94 <__aeabi_d2uiz>
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc4:	3df00000 	.word	0x3df00000
 8000cc8:	41f00000 	.word	0x41f00000

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9d08      	ldr	r5, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8083 	bne.w	8000de2 <__udivmoddi4+0x116>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	d947      	bls.n	8000d72 <__udivmoddi4+0xa6>
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	b142      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	f1c2 0020 	rsb	r0, r2, #32
 8000cec:	fa24 f000 	lsr.w	r0, r4, r0
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	4097      	lsls	r7, r2
 8000cf4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbbc f6f8 	udiv	r6, ip, r8
 8000d04:	fa1f fe87 	uxth.w	lr, r7
 8000d08:	fb08 c116 	mls	r1, r8, r6, ip
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f10e 	mul.w	r1, r6, lr
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 8119 	bcs.w	8000f54 <__udivmoddi4+0x288>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8116 	bls.w	8000f54 <__udivmoddi4+0x288>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	443b      	add	r3, r7
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8105 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f240 8102 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b902      	cbnz	r2, 8000d76 <__udivmoddi4+0xaa>
 8000d74:	deff      	udf	#255	; 0xff
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d150      	bne.n	8000e20 <__udivmoddi4+0x154>
 8000d7e:	1bcb      	subs	r3, r1, r7
 8000d80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d84:	fa1f f887 	uxth.w	r8, r7
 8000d88:	2601      	movs	r6, #1
 8000d8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8e:	0c21      	lsrs	r1, r4, #16
 8000d90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb08 f30c 	mul.w	r3, r8, ip
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0xe2>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	f200 80e9 	bhi.w	8000f80 <__udivmoddi4+0x2b4>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x10c>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x10a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80d9 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e7bf      	b.n	8000d62 <__udivmoddi4+0x96>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x12e>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80b1 	beq.w	8000f4e <__udivmoddi4+0x282>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x1cc>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0x140>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80b8 	bhi.w	8000f7c <__udivmoddi4+0x2b0>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	468c      	mov	ip, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0a8      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000e1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1e:	e7a5      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f603 	lsr.w	r6, r0, r3
 8000e28:	4097      	lsls	r7, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e32:	40d9      	lsrs	r1, r3
 8000e34:	4330      	orrs	r0, r6
 8000e36:	0c03      	lsrs	r3, r0, #16
 8000e38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f108 	mul.w	r1, r6, r8
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x19c>
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e5a:	f080 808d 	bcs.w	8000f78 <__udivmoddi4+0x2ac>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 808a 	bls.w	8000f78 <__udivmoddi4+0x2ac>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	443b      	add	r3, r7
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b281      	uxth	r1, r0
 8000e6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb00 f308 	mul.w	r3, r0, r8
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x1c4>
 8000e80:	1879      	adds	r1, r7, r1
 8000e82:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e86:	d273      	bcs.n	8000f70 <__udivmoddi4+0x2a4>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d971      	bls.n	8000f70 <__udivmoddi4+0x2a4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4439      	add	r1, r7
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e96:	e778      	b.n	8000d8a <__udivmoddi4+0xbe>
 8000e98:	f1c6 0c20 	rsb	ip, r6, #32
 8000e9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ea0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea4:	431c      	orrs	r4, r3
 8000ea6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	0c3b      	lsrs	r3, r7, #16
 8000eba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebe:	fa1f f884 	uxth.w	r8, r4
 8000ec2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x220>
 8000eda:	1861      	adds	r1, r4, r1
 8000edc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ee0:	d248      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000ee2:	458a      	cmp	sl, r1
 8000ee4:	d946      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000ee6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eea:	4421      	add	r1, r4
 8000eec:	eba1 010a 	sub.w	r1, r1, sl
 8000ef0:	b2bf      	uxth	r7, r7
 8000ef2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000efa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efe:	fb00 f808 	mul.w	r8, r0, r8
 8000f02:	45b8      	cmp	r8, r7
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x24a>
 8000f06:	19e7      	adds	r7, r4, r7
 8000f08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f0c:	d22e      	bcs.n	8000f6c <__udivmoddi4+0x2a0>
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d92c      	bls.n	8000f6c <__udivmoddi4+0x2a0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4427      	add	r7, r4
 8000f16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f1a:	eba7 0708 	sub.w	r7, r7, r8
 8000f1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f22:	454f      	cmp	r7, r9
 8000f24:	46c6      	mov	lr, r8
 8000f26:	4649      	mov	r1, r9
 8000f28:	d31a      	bcc.n	8000f60 <__udivmoddi4+0x294>
 8000f2a:	d017      	beq.n	8000f5c <__udivmoddi4+0x290>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x27a>
 8000f2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f32:	eb67 0701 	sbc.w	r7, r7, r1
 8000f36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f3a:	40f2      	lsrs	r2, r6
 8000f3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f40:	40f7      	lsrs	r7, r6
 8000f42:	e9c5 2700 	strd	r2, r7, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	462e      	mov	r6, r5
 8000f50:	4628      	mov	r0, r5
 8000f52:	e70b      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f54:	4606      	mov	r6, r0
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fd      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f5c:	4543      	cmp	r3, r8
 8000f5e:	d2e5      	bcs.n	8000f2c <__udivmoddi4+0x260>
 8000f60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f64:	eb69 0104 	sbc.w	r1, r9, r4
 8000f68:	3801      	subs	r0, #1
 8000f6a:	e7df      	b.n	8000f2c <__udivmoddi4+0x260>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e7d2      	b.n	8000f16 <__udivmoddi4+0x24a>
 8000f70:	4660      	mov	r0, ip
 8000f72:	e78d      	b.n	8000e90 <__udivmoddi4+0x1c4>
 8000f74:	4681      	mov	r9, r0
 8000f76:	e7b9      	b.n	8000eec <__udivmoddi4+0x220>
 8000f78:	4666      	mov	r6, ip
 8000f7a:	e775      	b.n	8000e68 <__udivmoddi4+0x19c>
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	e74a      	b.n	8000e16 <__udivmoddi4+0x14a>
 8000f80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f84:	4439      	add	r1, r7
 8000f86:	e713      	b.n	8000db0 <__udivmoddi4+0xe4>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	443c      	add	r4, r7
 8000f8c:	e724      	b.n	8000dd8 <__udivmoddi4+0x10c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__aeabi_d2uiz>:
 8000f94:	004a      	lsls	r2, r1, #1
 8000f96:	d211      	bcs.n	8000fbc <__aeabi_d2uiz+0x28>
 8000f98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f9c:	d211      	bcs.n	8000fc2 <__aeabi_d2uiz+0x2e>
 8000f9e:	d50d      	bpl.n	8000fbc <__aeabi_d2uiz+0x28>
 8000fa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa8:	d40e      	bmi.n	8000fc8 <__aeabi_d2uiz+0x34>
 8000faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fc6:	d102      	bne.n	8000fce <__aeabi_d2uiz+0x3a>
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08016f1c 	.word	0x08016f1c

08000ff4 <_ZN6tflite13ErrorReporterD0Ev>:
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe9 	bl	8000fd4 <_ZN6tflite13ErrorReporterD1Ev>
 8001002:	2104      	movs	r1, #4
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f00f fc44 	bl	8010892 <_ZdlPvj>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  int endiantest = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 800102a:	214e      	movs	r1, #78	; 0x4e
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800102e:	f00f febd 	bl	8010dac <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	08012248 	.word	0x08012248
 8001040:	0801228c 	.word	0x0801228c
 8001044:	080122ac 	.word	0x080122ac

08001048 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8001050:	687c      	ldr	r4, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fcd7 	bl	8001a08 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800105a:	4603      	mov	r3, r0
 800105c:	425b      	negs	r3, r3
 800105e:	4423      	add	r3, r4
  }
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffe7 	bl	8001048 <_ZNK11flatbuffers5Table9GetVTableEv>
 800107a:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 fca7 	bl	80019d0 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001082:	4603      	mov	r3, r0
 8001084:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	429a      	cmp	r2, r3
 800108c:	d207      	bcs.n	800109e <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fc9b 	bl	80019d0 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800109a:	4603      	mov	r3, r0
 800109c:	e000      	b.n	80010a0 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800109e:	2300      	movs	r3, #0
  }
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	2104      	movs	r1, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fcb4 	bl	8001a24 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80010bc:	4603      	mov	r3, r0
  }
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fcc6 	bl	8001a60 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fcc5 	bl	8001a78 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffeb 	bl	80010de <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff ffe1 	bl	80010f8 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	08016efc 	.word	0x08016efc

08001160 <_ZN6tflite10OpResolverD0Ev>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe9 	bl	8001140 <_ZN6tflite10OpResolverD1Ev>
 800116e:	2104      	movs	r1, #4
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f00f fb8e 	bl	8010892 <_ZdlPvj>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	2301      	movs	r3, #1
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	460b      	mov	r3, r1
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3318      	adds	r3, #24
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	7afa      	ldrb	r2, [r7, #11]
 80011ae:	4611      	mov	r1, r2
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
  }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	331c      	adds	r3, #28
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	4798      	blx	r3
 80011d8:	4603      	mov	r3, r0
  }
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffa3 	bl	8001140 <_ZN6tflite10OpResolverD1Ev>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08016ed0 	.word	0x08016ed0

08001208 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffe7 	bl	80011e4 <_ZN6tflite15MicroOpResolverD1Ev>
 8001216:	2104      	movs	r1, #4
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f00f fb3a 	bl	8010892 <_ZdlPvj>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fecb 	bl	8000fd4 <_ZN6tflite13ErrorReporterD1Ev>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0801721c 	.word	0x0801721c

0800124c <_ZN6tflite18MicroErrorReporterD0Ev>:
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffe7 	bl	8001228 <_ZN6tflite18MicroErrorReporterD1Ev>
 800125a:	2104      	movs	r1, #4
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f00f fb18 	bl	8010892 <_ZdlPvj>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <__tcf_0>:
  MX_GPIO_Init();
  MX_TIM10_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  static tflite::MicroErrorReporter micro_error_reporter;
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
 8001270:	4801      	ldr	r0, [pc, #4]	; (8001278 <__tcf_0+0xc>)
 8001272:	f7ff ffd9 	bl	8001228 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20006b08 	.word	0x20006b08

0800127c <__tcf_1>:
    {
  	 error_reporter->Report("Model version does not match Schema");
  	 while(1);
    }

    static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
 8001280:	4801      	ldr	r0, [pc, #4]	; (8001288 <__tcf_1+0xc>)
 8001282:	f000 fd95 	bl	8001db0 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20013454 	.word	0x20013454

0800128c <__tcf_2>:
  	while(1);
    }

    // Build an interpreter to run the model with.
    static tflite::MicroInterpreter static_interpreter(
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <__tcf_2+0xc>)
 8001292:	f008 fb88 	bl	80099a6 <_ZN6tflite16MicroInterpreterD1Ev>
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200134d8 	.word	0x200134d8

0800129c <main>:
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b4      	sub	sp, #208	; 0xd0
 80012a0:	af04      	add	r7, sp, #16
	int buf_len = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int imagesize = 28*28*1;
 80012a8:	f44f 7344 	mov.w	r3, #784	; 0x310
 80012ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_Init();
 80012b0:	f000 ffb4 	bl	800221c <HAL_Init>
  SystemClock_Config();
 80012b4:	f000 fa44 	bl	8001740 <_Z18SystemClock_Configv>
  HAL_TIM_Base_Start(&htim10);
 80012b8:	4886      	ldr	r0, [pc, #536]	; (80014d4 <main+0x238>)
 80012ba:	f001 ff83 	bl	80031c4 <HAL_TIM_Base_Start>
  MX_GPIO_Init();
 80012be:	f000 fb09 	bl	80018d4 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80012c2:	f000 fab1 	bl	8001828 <_ZL13MX_TIM10_Initv>
  MX_USART2_UART_Init();
 80012c6:	f000 fad7 	bl	8001878 <_ZL19MX_USART2_UART_Initv>
  static tflite::MicroErrorReporter micro_error_reporter;
 80012ca:	4b83      	ldr	r3, [pc, #524]	; (80014d8 <main+0x23c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	f3bf 8f5b 	dmb	ish
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d010      	beq.n	8001308 <main+0x6c>
 80012e6:	487c      	ldr	r0, [pc, #496]	; (80014d8 <main+0x23c>)
 80012e8:	f00f fad7 	bl	801089a <__cxa_guard_acquire>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <main+0x6c>
 80012fc:	4876      	ldr	r0, [pc, #472]	; (80014d8 <main+0x23c>)
 80012fe:	f00f fad8 	bl	80108b2 <__cxa_guard_release>
 8001302:	4876      	ldr	r0, [pc, #472]	; (80014dc <main+0x240>)
 8001304:	f00f fd70 	bl	8010de8 <atexit>
    error_reporter = &micro_error_reporter;
 8001308:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <main+0x244>)
 800130a:	4a76      	ldr	r2, [pc, #472]	; (80014e4 <main+0x248>)
 800130c:	601a      	str	r2, [r3, #0]
    error_reporter->Report("STM32 TensorFlow Lite test");
 800130e:	4b74      	ldr	r3, [pc, #464]	; (80014e0 <main+0x244>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4975      	ldr	r1, [pc, #468]	; (80014e8 <main+0x24c>)
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fc71 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
    model = tflite::GetModel(model_mnist);
 800131a:	4874      	ldr	r0, [pc, #464]	; (80014ec <main+0x250>)
 800131c:	f7ff fed3 	bl	80010c6 <_ZN6tflite8GetModelEPKv>
 8001320:	4603      	mov	r3, r0
 8001322:	4a73      	ldr	r2, [pc, #460]	; (80014f0 <main+0x254>)
 8001324:	6013      	str	r3, [r2, #0]
    if (model->version() != TFLITE_SCHEMA_VERSION)
 8001326:	4b72      	ldr	r3, [pc, #456]	; (80014f0 <main+0x254>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff febc 	bl	80010a8 <_ZNK6tflite5Model7versionEv>
 8001330:	4603      	mov	r3, r0
 8001332:	2b03      	cmp	r3, #3
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <main+0xb2>
  	 error_reporter->Report("Model version does not match Schema");
 8001340:	4b67      	ldr	r3, [pc, #412]	; (80014e0 <main+0x244>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	496b      	ldr	r1, [pc, #428]	; (80014f4 <main+0x258>)
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fc58 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	 while(1);
 800134c:	e7fe      	b.n	800134c <main+0xb0>
    static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <main+0x25c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f3bf 8f5b 	dmb	ish
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d014      	beq.n	8001394 <main+0xf8>
 800136a:	4863      	ldr	r0, [pc, #396]	; (80014f8 <main+0x25c>)
 800136c:	f00f fa95 	bl	801089a <__cxa_guard_acquire>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d009      	beq.n	8001394 <main+0xf8>
 8001380:	2100      	movs	r1, #0
 8001382:	485e      	ldr	r0, [pc, #376]	; (80014fc <main+0x260>)
 8001384:	f000 fbaa 	bl	8001adc <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>
 8001388:	485b      	ldr	r0, [pc, #364]	; (80014f8 <main+0x25c>)
 800138a:	f00f fa92 	bl	80108b2 <__cxa_guard_release>
 800138e:	485c      	ldr	r0, [pc, #368]	; (8001500 <main+0x264>)
 8001390:	f00f fd2a 	bl	8010de8 <atexit>
    tflite_status = micro_op_resolver.AddConv2D();
 8001394:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001398:	4618      	mov	r0, r3
 800139a:	f00b f923 	bl	800c5e4 <_ZN6tflite16Register_CONV_2DEv>
 800139e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a2:	4619      	mov	r1, r3
 80013a4:	4855      	ldr	r0, [pc, #340]	; (80014fc <main+0x260>)
 80013a6:	f000 fbb5 	bl	8001b14 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DERK18TfLiteRegistration>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80013b0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <main+0x12a>
    	error_reporter->Report("Could not add Conv2D op");
 80013b8:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <main+0x244>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4951      	ldr	r1, [pc, #324]	; (8001504 <main+0x268>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fc1c 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
    	while(1);
 80013c4:	e7fe      	b.n	80013c4 <main+0x128>
    tflite_status = micro_op_resolver.AddReshape();
 80013c6:	484d      	ldr	r0, [pc, #308]	; (80014fc <main+0x260>)
 80013c8:	f000 fbb6 	bl	8001b38 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80013d2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <main+0x14c>
      error_reporter->Report("Could not add RESHAPE op");
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <main+0x244>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	494a      	ldr	r1, [pc, #296]	; (8001508 <main+0x26c>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fc0b 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
    	while(1);
 80013e6:	e7fe      	b.n	80013e6 <main+0x14a>
    tflite_status = micro_op_resolver.AddFullyConnected();
 80013e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00c f835 	bl	800d45c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80013f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f6:	4619      	mov	r1, r3
 80013f8:	4840      	ldr	r0, [pc, #256]	; (80014fc <main+0x260>)
 80013fa:	f000 fbb5 	bl	8001b68 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
        if (tflite_status != kTfLiteOk)
 8001404:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <main+0x17e>
          error_reporter->Report("Could not add FULLY CONNECTED op");
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <main+0x244>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	493e      	ldr	r1, [pc, #248]	; (800150c <main+0x270>)
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fbf2 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        	while(1);
 8001418:	e7fe      	b.n	8001418 <main+0x17c>
    tflite_status = micro_op_resolver.AddSoftmax();
 800141a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800141e:	4618      	mov	r0, r3
 8001420:	f00d fe62 	bl	800f0e8 <_ZN6tflite16Register_SOFTMAXEv>
 8001424:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001428:	4619      	mov	r1, r3
 800142a:	4834      	ldr	r0, [pc, #208]	; (80014fc <main+0x260>)
 800142c:	f000 fbae 	bl	8001b8c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 8001436:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <main+0x1b0>
  	error_reporter->Report("Could not add SOFTMAX op");
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <main+0x244>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4933      	ldr	r1, [pc, #204]	; (8001510 <main+0x274>)
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fbd9 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 800144a:	e7fe      	b.n	800144a <main+0x1ae>
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <main+0x278>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f3bf 8f5b 	dmb	ish
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf0c      	ite	eq
 800145e:	2301      	moveq	r3, #1
 8001460:	2300      	movne	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01f      	beq.n	80014a8 <main+0x20c>
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <main+0x278>)
 800146a:	f00f fa16 	bl	801089a <__cxa_guard_acquire>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d014      	beq.n	80014a8 <main+0x20c>
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <main+0x254>)
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <main+0x244>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	9202      	str	r2, [sp, #8]
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <main+0x27c>)
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <main+0x260>)
 8001496:	4821      	ldr	r0, [pc, #132]	; (800151c <main+0x280>)
 8001498:	f008 fa3e 	bl	8009918 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 800149c:	481d      	ldr	r0, [pc, #116]	; (8001514 <main+0x278>)
 800149e:	f00f fa08 	bl	80108b2 <__cxa_guard_release>
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <main+0x284>)
 80014a4:	f00f fca0 	bl	8010de8 <atexit>
    interpreter = &static_interpreter;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <main+0x288>)
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <main+0x280>)
 80014ac:	601a      	str	r2, [r3, #0]

    tflite_status = interpreter->AllocateTensors();
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <main+0x288>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 fc3c 	bl	8009d30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    if (tflite_status != kTfLiteOk)
 80014be:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d032      	beq.n	800152c <main+0x290>
    {
      error_reporter->Report("AllocateTensors() failed");
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <main+0x244>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4917      	ldr	r1, [pc, #92]	; (8001528 <main+0x28c>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fb95 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 80014d2:	e7fe      	b.n	80014d2 <main+0x236>
 80014d4:	20006bac 	.word	0x20006bac
 80014d8:	20013450 	.word	0x20013450
 80014dc:	0800126d 	.word	0x0800126d
 80014e0:	20006c38 	.word	0x20006c38
 80014e4:	20006b08 	.word	0x20006b08
 80014e8:	08012350 	.word	0x08012350
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20006c3c 	.word	0x20006c3c
 80014f4:	0801236c 	.word	0x0801236c
 80014f8:	200134d4 	.word	0x200134d4
 80014fc:	20013454 	.word	0x20013454
 8001500:	0800127d 	.word	0x0800127d
 8001504:	08012390 	.word	0x08012390
 8001508:	080123a8 	.word	0x080123a8
 800150c:	080123c4 	.word	0x080123c4
 8001510:	080123e8 	.word	0x080123e8
 8001514:	20013570 	.word	0x20013570
 8001518:	20006c50 	.word	0x20006c50
 800151c:	200134d8 	.word	0x200134d8
 8001520:	0800128d 	.word	0x0800128d
 8001524:	20006c40 	.word	0x20006c40
 8001528:	08012404 	.word	0x08012404
    }

    model_input = interpreter->input(0);
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <main+0x400>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f008 fd9c 	bl	800a070 <_ZN6tflite16MicroInterpreter5inputEj>
 8001538:	4603      	mov	r3, r0
 800153a:	4a59      	ldr	r2, [pc, #356]	; (80016a0 <main+0x404>)
 800153c:	6013      	str	r3, [r2, #0]
      model_output = interpreter->output(0);
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <main+0x400>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f008 fdb7 	bl	800a0b8 <_ZN6tflite16MicroInterpreter6outputEj>
 800154a:	4603      	mov	r3, r0
 800154c:	4a55      	ldr	r2, [pc, #340]	; (80016a4 <main+0x408>)
 800154e:	6013      	str	r3, [r2, #0]

      // Get number of elements in input tensor
      num_elements = model_input->bytes / sizeof(float);
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <main+0x404>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001562:	4951      	ldr	r1, [pc, #324]	; (80016a8 <main+0x40c>)
 8001564:	4618      	mov	r0, r3
 8001566:	f010 f8ad 	bl	80116c4 <siprintf>
 800156a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800156e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001572:	b29a      	uxth	r2, r3
 8001574:	1d39      	adds	r1, r7, #4
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	484c      	ldr	r0, [pc, #304]	; (80016ac <main+0x410>)
 800157a:	f001 ff4a 	bl	8003412 <HAL_UART_Transmit>
      /* USER CODE END 2 */

      /* Infinite loop */
      /* USER CODE BEGIN WHILE */

      buf_len = sprintf(buf, "start!\n");
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	494b      	ldr	r1, [pc, #300]	; (80016b0 <main+0x414>)
 8001582:	4618      	mov	r0, r3
 8001584:	f010 f89e 	bl	80116c4 <siprintf>
 8001588:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800158c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001590:	b29a      	uxth	r2, r3
 8001592:	1d39      	adds	r1, r7, #4
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	4844      	ldr	r0, [pc, #272]	; (80016ac <main+0x410>)
 800159a:	f001 ff3a 	bl	8003412 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  readUartBytes(model_input->data.f, imagesize);
 800159e:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <main+0x404>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f88d 	bl	80016c8 <_ZL13readUartBytesPfi>

	      // Get current timestamp
	      timestamp = htim10.Instance->CNT;
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <main+0x418>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	      /* USER CODE BEGIN 3 */

	      // Run inference
	  	tflite_status = interpreter->Invoke();
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <main+0x400>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 fd25 	bl	800a00c <_ZN6tflite16MicroInterpreter6InvokeEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	  	if (tflite_status != kTfLiteOk)
 80015c8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <main+0x340>
	  	{
	  	  error_reporter->Report("Invoke failed");
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <main+0x41c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4939      	ldr	r1, [pc, #228]	; (80016bc <main+0x420>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fb10 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  	}

	  	float max = 0.0f;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  		int maxIndex = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  		for(int i=0; i<10; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	dc20      	bgt.n	800163a <main+0x39e>
	  		{
	  			float val = model_output->data.f[i];
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <main+0x408>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  			if(max<val)
 800160c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001610:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d507      	bpl.n	800162e <main+0x392>
	  			{
	  				max = val;
 800161e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  				maxIndex = i;
 8001626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800162a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  		for(int i=0; i<10; i++)
 800162e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001632:	3301      	adds	r3, #1
 8001634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001638:	e7da      	b.n	80015f0 <main+0x354>
	  			}
	  		}

	  		uint32_t timestamp_next = htim10.Instance->CNT;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <main+0x418>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  		timestamp = (timestamp_next<timestamp)?(65536 - timestamp + timestamp_next):
 8001644:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <main+0x3c4>
 8001650:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800165e:	e004      	b.n	800166a <main+0x3ce>
 8001660:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  											   (timestamp_next-timestamp);

	  		buf_len = sprintf(buf,
 800166e:	1d38      	adds	r0, r7, #4
 8001670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001674:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001678:	4911      	ldr	r1, [pc, #68]	; (80016c0 <main+0x424>)
 800167a:	f010 f823 	bl	80116c4 <siprintf>
 800167e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	  						  "Predicted: %u | Duration: %lu\r\n",
	  						  maxIndex,
	  						  timestamp);
	  		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001686:	b29a      	uxth	r2, r3
 8001688:	1d39      	adds	r1, r7, #4
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <main+0x410>)
 800168e:	f001 fec0 	bl	8003412 <HAL_UART_Transmit>

	  		//HAL_Delay(500);
	  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001692:	2102      	movs	r1, #2
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <main+0x428>)
 8001696:	f001 f8b6 	bl	8002806 <HAL_GPIO_TogglePin>
	  	  }
 800169a:	e780      	b.n	800159e <main+0x302>
 800169c:	20006c40 	.word	0x20006c40
 80016a0:	20006c44 	.word	0x20006c44
 80016a4:	20006c48 	.word	0x20006c48
 80016a8:	08012420 	.word	0x08012420
 80016ac:	20006bf4 	.word	0x20006bf4
 80016b0:	08012440 	.word	0x08012440
 80016b4:	20006bac 	.word	0x20006bac
 80016b8:	20006c38 	.word	0x20006c38
 80016bc:	08012448 	.word	0x08012448
 80016c0:	08012458 	.word	0x08012458
 80016c4:	40020800 	.word	0x40020800

080016c8 <_ZL13readUartBytesPfi>:
 }
  /* USER CODE END 3 */

void readUartBytes(float *data, int imageSize)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    uint8_t *rxBuffer = (uint8_t *)malloc(imageSize);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00f fbc9 	bl	8010e6c <malloc>
 80016da:	4603      	mov	r3, r0
 80016dc:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<imageSize;i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	da1e      	bge.n	8001728 <_ZL13readUartBytesPfi+0x60>
    {
    	HAL_UART_Receive(&huart2, (rxBuffer+i), 1, HAL_MAX_DELAY);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	18d1      	adds	r1, r2, r3
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f4:	2201      	movs	r2, #1
 80016f6:	4810      	ldr	r0, [pc, #64]	; (8001738 <_ZL13readUartBytesPfi+0x70>)
 80016f8:	f001 ff1d 	bl	8003536 <HAL_UART_Receive>
    	data[i] = static_cast<float>(rxBuffer[i]) / 255.0f;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	eddf 6a09 	vldr	s13, [pc, #36]	; 800173c <_ZL13readUartBytesPfi+0x74>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<imageSize;i++)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e7dc      	b.n	80016e2 <_ZL13readUartBytesPfi+0x1a>
    }
    free(rxBuffer);
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f00f fba7 	bl	8010e7c <free>
    //rxBytes = HAL_UART_Receive(&huart1, rxBuffer, imageSize, HAL_MAX_DELAY);
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20006bf4 	.word	0x20006bf4
 800173c:	437f0000 	.word	0x437f0000

08001740 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00f fbc4 	bl	8010edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800178c:	4a25      	ldr	r2, [pc, #148]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a8:	2310      	movs	r3, #16
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b4:	2308      	movs	r3, #8
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80017b8:	2350      	movs	r3, #80	; 0x50
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017c0:	2307      	movs	r3, #7
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 f837 	bl	800283c <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80017de:	f000 f8e7 	bl	80019b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fa94 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001814:	f000 f8cc 	bl	80019b0 <Error_Handler>
  }
}
 8001818:	bf00      	nop
 800181a:	3750      	adds	r7, #80	; 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <_ZL13MX_TIM10_Initv+0x4c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 8001834:	224f      	movs	r2, #79	; 0x4f
 8001836:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 8001840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001844:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <_ZL13MX_TIM10_Initv+0x48>)
 8001854:	f001 fc66 	bl	8003124 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8001868:	f000 f8a2 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20006bac 	.word	0x20006bac
 8001874:	40014400 	.word	0x40014400

08001878 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80018b0:	f001 fd62 	bl	8003378 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80018c4:	f000 f874 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20006bf4 	.word	0x20006bf4
 80018d0:	40004400 	.word	0x40004400

080018d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2120      	movs	r1, #32
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001960:	f000 ff38 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <_ZL12MX_GPIO_Initv+0xd8>)
 800197c:	f000 fda6 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001980:	2320      	movs	r3, #32
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001998:	f000 fd98 	bl	80024cc <HAL_GPIO_Init>

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020800 	.word	0x40020800

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>

080019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80019c2:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f8f2 	bl	8001bc6 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffde 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80019fe:	4603      	mov	r3, r0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f8cb 	bl	8001bb0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	4619      	mov	r1, r3
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fb16 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	8afb      	ldrh	r3, [r7, #22]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ffcd 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	e000      	b.n	8001a58 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001a56:	687b      	ldr	r3, [r7, #4]
  }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8b8 	bl	8001bde <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001a6e:	4603      	mov	r3, r0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8be 	bl	8001c02 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f8c6 	bl	8001c1a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	08016efc 	.word	0x08016efc

08001ab8 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ffe8 	bl	8001a98 <_ZN6tflite10OpResolverC1Ev>
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	08016ed0 	.word	0x08016ed0

08001adc <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffe5 	bl	8001ab8 <_ZN6tflite15MicroOpResolverC1Ev>
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE+0x34>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	665a      	str	r2, [r3, #100]	; 0x64
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	679a      	str	r2, [r3, #120]	; 0x78
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08016ea4 	.word	0x08016ea4

08001b14 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DERK18TfLiteRegistration>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D(
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_CONV_2D()) {
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DERK18TfLiteRegistration+0x20>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	2103      	movs	r1, #3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f88d 	bl	8001c44 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b2a:	4603      	mov	r3, r0
  }
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	080041b9 	.word	0x080041b9

08001b38 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6, tflite::Register_RELU6(),
                      ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00c feeb 	bl	800e920 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8001b4a:	f107 0208 	add.w	r2, r7, #8
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv+0x2c>)
 8001b50:	2116      	movs	r1, #22
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f876 	bl	8001c44 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b58:	4603      	mov	r3, r0
  }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	08004435 	.word	0x08004435

08001b68 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
                      ParseFullyConnected);
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	2109      	movs	r1, #9
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f863 	bl	8001c44 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b7e:	4603      	mov	r3, r0
  }
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	080042f9 	.word	0x080042f9

08001b8c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	2119      	movs	r1, #25
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f851 	bl	8001c44 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001ba2:	4603      	mov	r3, r0
  }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	08004531 	.word	0x08004531

08001bb0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    return t;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80fb      	strh	r3, [r7, #6]
    return t;
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001be6:	f7ff fa15 	bl	8001014 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fee3 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f89a 	bl	8001d44 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
	{ }
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d10b      	bne.n	8001c72 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c66:	4934      	ldr	r1, [pc, #208]	; (8001d38 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 ffc7 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e05d      	b.n	8001d2e <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3318      	adds	r3, #24
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	7afa      	ldrb	r2, [r7, #11]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	4798      	blx	r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c9e:	7afa      	ldrb	r2, [r7, #11]
 8001ca0:	4926      	ldr	r1, [pc, #152]	; (8001d3c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 ffaa 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d90c      	bls.n	8001cce <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001cc0:	7afa      	ldrb	r2, [r7, #11]
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	491e      	ldr	r1, [pc, #120]	; (8001d40 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 8001cc6:	f001 ff99 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e02f      	b.n	8001d2e <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	015b      	lsls	r3, r3, #5
 8001cd6:	4413      	add	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	1d1c      	adds	r4, r3, #4
 8001cdc:	4615      	mov	r5, r2
 8001cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cee:	7afa      	ldrb	r2, [r7, #11]
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	665a      	str	r2, [r3, #100]	; 0x64

    builtin_codes_[num_buitin_ops_] = op;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7afa      	ldrb	r2, [r7, #11]
 8001d0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	331a      	adds	r3, #26
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	679a      	str	r2, [r3, #120]	; 0x78

    return kTfLiteOk;
 8001d2c:	2300      	movs	r3, #0
  }
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08012478 	.word	0x08012478
 8001d3c:	080124c0 	.word	0x080124c0
 8001d40:	08012510 	.word	0x08012510

08001d44 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d101      	bne.n	8001d70 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e018      	b.n	8001da2 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d210      	bcs.n	8001da0 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d101      	bne.n	8001d98 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	e004      	b.n	8001da2 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e7e9      	b.n	8001d74 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001da0:	2300      	movs	r3, #0
  }
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev+0x20>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fa0f 	bl	80011e4 <_ZN6tflite15MicroOpResolverD1Ev>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	08016ea4 	.word	0x08016ea4

08001dd4 <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffe7 	bl	8001db0 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f00e fd54 	bl	8010892 <_ZdlPvj>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d218      	bcs.n	8001e3e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d10a      	bne.n	8001e36 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fa2a 	bl	8000280 <strcmp>
 8001e2c:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x42>
        return &registration;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	e004      	b.n	8001e40 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e7e1      	b.n	8001e02 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xe>
    return nullptr;
 8001e3e:	2300      	movs	r3, #0
  }
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d901      	bls.n	8001e60 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001e5c:	f00e ff9f 	bl	8010d9e <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d212      	bcs.n	8001e94 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	3368      	adds	r3, #104	; 0x68
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d106      	bne.n	8001e8c <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	331a      	adds	r3, #26
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	e004      	b.n	8001e96 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e7e7      	b.n	8001e64 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001e94:	2300      	movs	r3, #0
  }
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f000 fac0 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_TIM_Base_MspInit+0x3c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10d      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_UART_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12b      	bne.n	8001fae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_UART_MspInit+0x8c>)
 8001faa:	f000 fa8f 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 f956 	bl	80022c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	return 1;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_kill>:

int _kill(int pid, int sig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002032:	f00e fedf 	bl	8010df4 <__errno>
 8002036:	4603      	mov	r3, r0
 8002038:	2216      	movs	r2, #22
 800203a:	601a      	str	r2, [r3, #0]
	return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_exit>:

void _exit (int status)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffe7 	bl	8002028 <_kill>
	while (1) {}		/* Make sure we hang here */
 800205a:	e7fe      	b.n	800205a <_exit+0x12>

0800205c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e00a      	b.n	8002084 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800206e:	f3af 8000 	nop.w
 8002072:	4601      	mov	r1, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbf0      	blt.n	800206e <_read+0x12>
	}

return len;
 800208c:	687b      	ldr	r3, [r7, #4]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e009      	b.n	80020bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf1      	blt.n	80020a8 <_write+0x12>
	}
	return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_close>:

int _close(int file)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	return -1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f6:	605a      	str	r2, [r3, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_isatty>:

int _isatty(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_sbrk+0x5c>)
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_sbrk+0x60>)
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <_sbrk+0x64>)
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <_sbrk+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002168:	f00e fe44 	bl	8010df4 <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002176:	e009      	b.n	800218c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <_sbrk+0x64>)
 8002188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20018000 	.word	0x20018000
 8002198:	00000400 	.word	0x00000400
 800219c:	20013574 	.word	0x20013574
 80021a0:	20013628 	.word	0x20013628

080021a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <SystemInit+0x20>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <SystemInit+0x20>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e4:	4c0b      	ldr	r4, [pc, #44]	; (8002214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021f2:	f7ff ffd7 	bl	80021a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f00e fe15 	bl	8010e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7ff f84f 	bl	800129c <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002200:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20006b88 	.word	0x20006b88
  ldr r2, =_sidata
 800220c:	080173dc 	.word	0x080173dc
  ldr r2, =_sbss
 8002210:	20006b90 	.word	0x20006b90
  ldr r4, =_ebss
 8002214:	20013628 	.word	0x20013628

08002218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f90d 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	2000      	movs	r0, #0
 800224c:	f000 f808 	bl	8002260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff fe26 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x54>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x58>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fbb3 f3f1 	udiv	r3, r3, r1
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f917 	bl	80024b2 <HAL_SYSTICK_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00e      	b.n	80022ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d80a      	bhi.n	80022aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800229c:	f000 f8ed 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_InitTick+0x5c>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20006b0c 	.word	0x20006b0c
 80022b8:	20006b14 	.word	0x20006b14
 80022bc:	20006b10 	.word	0x20006b10

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20006b14 	.word	0x20006b14
 80022e4:	20013614 	.word	0x20013614

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20013614 	.word	0x20013614

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	; (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	; (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff47 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff5c 	bl	8002348 <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffb0 	bl	8002420 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e159      	b.n	800279c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8148 	bne.w	8002796 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d005      	beq.n	800251e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	2b02      	cmp	r3, #2
 800251c:	d130      	bne.n	8002580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0201 	and.w	r2, r3, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b03      	cmp	r3, #3
 800258a:	d017      	beq.n	80025bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a2 	beq.w	8002796 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266e:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x2ec>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a49      	ldr	r2, [pc, #292]	; (80027bc <HAL_GPIO_Init+0x2f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_GPIO_Init+0x202>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a48      	ldr	r2, [pc, #288]	; (80027c0 <HAL_GPIO_Init+0x2f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x1fe>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_GPIO_Init+0x2f8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x1fa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x1f6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a45      	ldr	r2, [pc, #276]	; (80027cc <HAL_GPIO_Init+0x300>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x1f2>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026be:	2307      	movs	r3, #7
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	; (80027b8 <HAL_GPIO_Init+0x2ec>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002712:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273c:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f aea2 	bls.w	80024e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	041a      	lsls	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43d9      	mvns	r1, r3
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	400b      	ands	r3, r1
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e264      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4ba0      	ldr	r3, [pc, #640]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b99      	ldr	r3, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e23f      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a90      	ldr	r2, [pc, #576]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a8a      	ldr	r2, [pc, #552]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a87      	ldr	r2, [pc, #540]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a83      	ldr	r2, [pc, #524]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a80      	ldr	r2, [pc, #512]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fcf8 	bl	80022e8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fcf4 	bl	80022e8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e204      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fce4 	bl	80022e8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fce0 	bl	80022e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f0      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c4      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4952      	ldr	r1, [pc, #328]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <HAL_RCC_OscConfig+0x2b0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7ff fc99 	bl	80022e8 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7ff fc95 	bl	80022e8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a5      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4940      	ldr	r1, [pc, #256]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_OscConfig+0x2b0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7ff fc78 	bl	80022e8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff fc74 	bl	80022e8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e184      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d030      	beq.n	8002a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x2b4>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff fc58 	bl	80022e8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fc54 	bl	80022e8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e164      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e015      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x2b4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fc41 	bl	80022e8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fc3d 	bl	80022e8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e14d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a0 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d121      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fc03 	bl	80022e8 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e011      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
 8002af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7ff fbf6 	bl	80022e8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e106      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x4e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
 8002b1e:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a80      	ldr	r2, [pc, #512]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x32a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b34:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a77      	ldr	r2, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x32a>
 8002b4e:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a74      	ldr	r2, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fbbb 	bl	80022e8 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7ff fbb7 	bl	80022e8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0c5      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x33a>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff fba5 	bl	80022e8 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7ff fba1 	bl	80022e8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0af      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 809b 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d05c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d141      	bne.n	8002c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fb75 	bl	80022e8 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7ff fb71 	bl	80022e8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e081      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4937      	ldr	r1, [pc, #220]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fb4a 	bl	80022e8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff fb46 	bl	80022e8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e056      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x41c>
 8002c76:	e04e      	b.n	8002d16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff fb33 	bl	80022e8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7ff fb2f 	bl	80022e8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e03f      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x44a>
 8002ca4:	e037      	b.n	8002d16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e032      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d028      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d11a      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40007000 	.word	0x40007000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470060 	.word	0x42470060

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7ff fa64 	bl	80022e8 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7ff fa60 	bl	80022e8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f9c4 	bl	8002260 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08016f28 	.word	0x08016f28
 8002ef0:	20006b0c 	.word	0x20006b0c
 8002ef4:	20006b10 	.word	0x20006b10

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80bd 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e0b7      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f2e:	60bb      	str	r3, [r7, #8]
       break;
 8002f30:	e0b7      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f34:	60bb      	str	r3, [r7, #8]
      break;
 8002f36:	e0b4      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04d      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	ea02 0800 	and.w	r8, r2, r0
 8002f66:	ea03 0901 	and.w	r9, r3, r1
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	014b      	lsls	r3, r1, #5
 8002f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f7c:	0142      	lsls	r2, r0, #5
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	ebb0 0008 	subs.w	r0, r0, r8
 8002f86:	eb61 0109 	sbc.w	r1, r1, r9
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	018b      	lsls	r3, r1, #6
 8002f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f98:	0182      	lsls	r2, r0, #6
 8002f9a:	1a12      	subs	r2, r2, r0
 8002f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	00d9      	lsls	r1, r3, #3
 8002faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fae:	00d0      	lsls	r0, r2, #3
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	eb12 0208 	adds.w	r2, r2, r8
 8002fb8:	eb43 0309 	adc.w	r3, r3, r9
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	0259      	lsls	r1, r3, #9
 8002fc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fca:	0250      	lsls	r0, r2, #9
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	f7fd fe28 	bl	8000c30 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e04a      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	ea02 0400 	and.w	r4, r2, r0
 8003002:	ea03 0501 	and.w	r5, r3, r1
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	014b      	lsls	r3, r1, #5
 8003014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003018:	0142      	lsls	r2, r0, #5
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	1b00      	subs	r0, r0, r4
 8003020:	eb61 0105 	sbc.w	r1, r1, r5
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	018b      	lsls	r3, r1, #6
 800302e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003032:	0182      	lsls	r2, r0, #6
 8003034:	1a12      	subs	r2, r2, r0
 8003036:	eb63 0301 	sbc.w	r3, r3, r1
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	00d9      	lsls	r1, r3, #3
 8003044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003048:	00d0      	lsls	r0, r2, #3
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	1912      	adds	r2, r2, r4
 8003050:	eb45 0303 	adc.w	r3, r5, r3
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	0299      	lsls	r1, r3, #10
 800305e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003062:	0290      	lsls	r0, r2, #10
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	f7fd fddc 	bl	8000c30 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	60bb      	str	r3, [r7, #8]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800309e:	60bb      	str	r3, [r7, #8]
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	68bb      	ldr	r3, [r7, #8]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20006b0c 	.word	0x20006b0c

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08016f38 	.word	0x08016f38

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	08016f38 	.word	0x08016f38

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e041      	b.n	80031ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fed0 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 f888 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e03c      	b.n	8003256 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_TIM_Base_Start+0xa0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d018      	beq.n	8003220 <HAL_TIM_Base_Start+0x5c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d013      	beq.n	8003220 <HAL_TIM_Base_Start+0x5c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_TIM_Base_Start+0xa4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_TIM_Base_Start+0x5c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_TIM_Base_Start+0xa8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_TIM_Base_Start+0x5c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_TIM_Base_Start+0xac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_TIM_Base_Start+0x5c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIM_Base_Start+0xb0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b06      	cmp	r3, #6
 8003230:	d010      	beq.n	8003254 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	e007      	b.n	8003254 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40014000 	.word	0x40014000

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <TIM_Base_SetConfig+0xe4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a31      	ldr	r2, [pc, #196]	; (8003360 <TIM_Base_SetConfig+0xe8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <TIM_Base_SetConfig+0xec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <TIM_Base_SetConfig+0xf0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <TIM_Base_SetConfig+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01b      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d017      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <TIM_Base_SetConfig+0xe8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a21      	ldr	r2, [pc, #132]	; (8003364 <TIM_Base_SetConfig+0xec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a20      	ldr	r2, [pc, #128]	; (8003368 <TIM_Base_SetConfig+0xf0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <TIM_Base_SetConfig+0xf4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <TIM_Base_SetConfig+0xf8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_Base_SetConfig+0xfc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <TIM_Base_SetConfig+0xe4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e03f      	b.n	800340a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fdc8 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f9cb 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08a      	sub	sp, #40	; 0x28
 8003416:	af02      	add	r7, sp, #8
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d17c      	bne.n	800352c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_UART_Transmit+0x2c>
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e075      	b.n	800352e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_UART_Transmit+0x3e>
 800344c:	2302      	movs	r3, #2
 800344e:	e06e      	b.n	800352e <HAL_UART_Transmit+0x11c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2221      	movs	r2, #33	; 0x21
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003466:	f7fe ff3f 	bl	80022e8 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d108      	bne.n	8003494 <HAL_UART_Transmit+0x82>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a4:	e02a      	b.n	80034fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8e2 	bl	800367a <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e036      	b.n	800352e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	3302      	adds	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e007      	b.n	80034ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1cf      	bne.n	80034a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f8b2 	bl	800367a <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e006      	b.n	800352e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08a      	sub	sp, #40	; 0x28
 800353a:	af02      	add	r7, sp, #8
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b20      	cmp	r3, #32
 8003554:	f040 808c 	bne.w	8003670 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_UART_Receive+0x2e>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e084      	b.n	8003672 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_UART_Receive+0x40>
 8003572:	2302      	movs	r3, #2
 8003574:	e07d      	b.n	8003672 <HAL_UART_Receive+0x13c>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2222      	movs	r2, #34	; 0x22
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003592:	f7fe fea9 	bl	80022e8 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Receive+0x8a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035d0:	e043      	b.n	800365a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2120      	movs	r1, #32
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f84c 	bl	800367a <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e042      	b.n	8003672 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	b29a      	uxth	r2, r3
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3302      	adds	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e01f      	b.n	800364c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d007      	beq.n	8003626 <HAL_UART_Receive+0xf0>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_UART_Receive+0xfe>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e008      	b.n	8003646 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	b2da      	uxtb	r2, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1b6      	bne.n	80035d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b090      	sub	sp, #64	; 0x40
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368a:	e050      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003692:	d04c      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <UART_WaitOnFlagUntilTimeout+0x30>
 800369a:	f7fe fe25 	bl	80022e8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d241      	bcs.n	800372e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ca:	637a      	str	r2, [r7, #52]	; 0x34
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	613b      	str	r3, [r7, #16]
   return(result);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036fe:	623a      	str	r2, [r7, #32]
 8003700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	61bb      	str	r3, [r7, #24]
   return(result);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e5      	bne.n	80036de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d09f      	beq.n	800368c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3740      	adds	r7, #64	; 0x40
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	b09f      	sub	sp, #124	; 0x7c
 800375e:	af00      	add	r7, sp, #0
 8003760:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	ea40 0301 	orr.w	r3, r0, r1
 8003778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	431a      	orrs	r2, r3
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	431a      	orrs	r2, r3
 800378a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800379c:	f021 010c 	bic.w	r1, r1, #12
 80037a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a6:	430b      	orrs	r3, r1
 80037a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	6999      	ldr	r1, [r3, #24]
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	ea40 0301 	orr.w	r3, r0, r1
 80037c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4bc5      	ldr	r3, [pc, #788]	; (8003adc <UART_SetConfig+0x384>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d004      	beq.n	80037d6 <UART_SetConfig+0x7e>
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4bc3      	ldr	r3, [pc, #780]	; (8003ae0 <UART_SetConfig+0x388>)
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d103      	bne.n	80037de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037d6:	f7ff fc91 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80037da:	6778      	str	r0, [r7, #116]	; 0x74
 80037dc:	e002      	b.n	80037e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7ff fc79 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80037e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	f040 80b6 	bne.w	800395c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f2:	461c      	mov	r4, r3
 80037f4:	f04f 0500 	mov.w	r5, #0
 80037f8:	4622      	mov	r2, r4
 80037fa:	462b      	mov	r3, r5
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003800:	415b      	adcs	r3, r3
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
 8003804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003808:	1912      	adds	r2, r2, r4
 800380a:	eb45 0303 	adc.w	r3, r5, r3
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	00d9      	lsls	r1, r3, #3
 8003818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800381c:	00d0      	lsls	r0, r2, #3
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	1911      	adds	r1, r2, r4
 8003824:	6639      	str	r1, [r7, #96]	; 0x60
 8003826:	416b      	adcs	r3, r5
 8003828:	667b      	str	r3, [r7, #100]	; 0x64
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	461a      	mov	r2, r3
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	1891      	adds	r1, r2, r2
 8003836:	63b9      	str	r1, [r7, #56]	; 0x38
 8003838:	415b      	adcs	r3, r3
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003840:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003844:	f7fd f9f4 	bl	8000c30 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4ba5      	ldr	r3, [pc, #660]	; (8003ae4 <UART_SetConfig+0x38c>)
 800384e:	fba3 2302 	umull	r2, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	011e      	lsls	r6, r3, #4
 8003856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003858:	461c      	mov	r4, r3
 800385a:	f04f 0500 	mov.w	r5, #0
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	1891      	adds	r1, r2, r2
 8003864:	6339      	str	r1, [r7, #48]	; 0x30
 8003866:	415b      	adcs	r3, r3
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800386e:	1912      	adds	r2, r2, r4
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	00d9      	lsls	r1, r3, #3
 800387e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003882:	00d0      	lsls	r0, r2, #3
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	1911      	adds	r1, r2, r4
 800388a:	65b9      	str	r1, [r7, #88]	; 0x58
 800388c:	416b      	adcs	r3, r5
 800388e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	1891      	adds	r1, r2, r2
 800389c:	62b9      	str	r1, [r7, #40]	; 0x28
 800389e:	415b      	adcs	r3, r3
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038aa:	f7fd f9c1 	bl	8000c30 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <UART_SetConfig+0x38c>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a87      	ldr	r2, [pc, #540]	; (8003ae4 <UART_SetConfig+0x38c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d4:	441e      	add	r6, r3
 80038d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d8:	4618      	mov	r0, r3
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	1894      	adds	r4, r2, r2
 80038e4:	623c      	str	r4, [r7, #32]
 80038e6:	415b      	adcs	r3, r3
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ee:	1812      	adds	r2, r2, r0
 80038f0:	eb41 0303 	adc.w	r3, r1, r3
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	f04f 0500 	mov.w	r5, #0
 80038fc:	00dd      	lsls	r5, r3, #3
 80038fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003902:	00d4      	lsls	r4, r2, #3
 8003904:	4622      	mov	r2, r4
 8003906:	462b      	mov	r3, r5
 8003908:	1814      	adds	r4, r2, r0
 800390a:	653c      	str	r4, [r7, #80]	; 0x50
 800390c:	414b      	adcs	r3, r1
 800390e:	657b      	str	r3, [r7, #84]	; 0x54
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	461a      	mov	r2, r3
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	1891      	adds	r1, r2, r2
 800391c:	61b9      	str	r1, [r7, #24]
 800391e:	415b      	adcs	r3, r3
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800392a:	f7fd f981 	bl	8000c30 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a67      	ldr	r2, [pc, #412]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 0207 	and.w	r2, r3, #7
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4432      	add	r2, r6
 8003958:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800395a:	e0b9      	b.n	8003ad0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395e:	461c      	mov	r4, r3
 8003960:	f04f 0500 	mov.w	r5, #0
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	1891      	adds	r1, r2, r2
 800396a:	6139      	str	r1, [r7, #16]
 800396c:	415b      	adcs	r3, r3
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003974:	1912      	adds	r2, r2, r4
 8003976:	eb45 0303 	adc.w	r3, r5, r3
 800397a:	f04f 0000 	mov.w	r0, #0
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	00d9      	lsls	r1, r3, #3
 8003984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003988:	00d0      	lsls	r0, r2, #3
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	eb12 0804 	adds.w	r8, r2, r4
 8003992:	eb43 0905 	adc.w	r9, r3, r5
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039ae:	0082      	lsls	r2, r0, #2
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	f7fd f93c 	bl	8000c30 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <UART_SetConfig+0x38c>)
 80039be:	fba3 2302 	umull	r2, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	011e      	lsls	r6, r3, #4
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	4618      	mov	r0, r3
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	1894      	adds	r4, r2, r2
 80039d4:	60bc      	str	r4, [r7, #8]
 80039d6:	415b      	adcs	r3, r3
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039de:	1812      	adds	r2, r2, r0
 80039e0:	eb41 0303 	adc.w	r3, r1, r3
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	f04f 0500 	mov.w	r5, #0
 80039ec:	00dd      	lsls	r5, r3, #3
 80039ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f2:	00d4      	lsls	r4, r2, #3
 80039f4:	4622      	mov	r2, r4
 80039f6:	462b      	mov	r3, r5
 80039f8:	1814      	adds	r4, r2, r0
 80039fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80039fc:	414b      	adcs	r3, r1
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	008b      	lsls	r3, r1, #2
 8003a14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a18:	0082      	lsls	r2, r0, #2
 8003a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a1e:	f7fd f907 	bl	8000c30 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	441e      	add	r6, r3
 8003a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	1894      	adds	r4, r2, r2
 8003a56:	603c      	str	r4, [r7, #0]
 8003a58:	415b      	adcs	r3, r3
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a60:	1812      	adds	r2, r2, r0
 8003a62:	eb41 0303 	adc.w	r3, r1, r3
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	f04f 0500 	mov.w	r5, #0
 8003a6e:	00dd      	lsls	r5, r3, #3
 8003a70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a74:	00d4      	lsls	r4, r2, #3
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a7e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	008b      	lsls	r3, r1, #2
 8003a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a9a:	0082      	lsls	r2, r0, #2
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	f7fd f8c6 	bl	8000c30 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2164      	movs	r1, #100	; 0x64
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4432      	add	r2, r6
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	377c      	adds	r7, #124	; 0x7c
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40011000 	.word	0x40011000
 8003ae0:	40011400 	.word	0x40011400
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3301      	adds	r3, #1
 8003af4:	009b      	lsls	r3, r3, #2
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d847      	bhi.n	8003ba4 <TfLiteTypeGetName+0xa0>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <TfLiteTypeGetName+0x18>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b61 	.word	0x08003b61
 8003b20:	08003b65 	.word	0x08003b65
 8003b24:	08003b6d 	.word	0x08003b6d
 8003b28:	08003b75 	.word	0x08003b75
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003b91 	.word	0x08003b91
 8003b34:	08003b85 	.word	0x08003b85
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b95 	.word	0x08003b95
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003b8d 	.word	0x08003b8d
 8003b50:	08003b81 	.word	0x08003b81
 8003b54:	08003b9d 	.word	0x08003b9d
 8003b58:	08003ba1 	.word	0x08003ba1
 8003b5c:	08003b71 	.word	0x08003b71
    case kTfLiteNoType:
      return "NOTYPE";
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <TfLiteTypeGetName+0xb0>)
 8003b62:	e020      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <TfLiteTypeGetName+0xb4>)
 8003b66:	e01e      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <TfLiteTypeGetName+0xb8>)
 8003b6a:	e01c      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <TfLiteTypeGetName+0xbc>)
 8003b6e:	e01a      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <TfLiteTypeGetName+0xc0>)
 8003b72:	e018      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <TfLiteTypeGetName+0xc4>)
 8003b76:	e016      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <TfLiteTypeGetName+0xc8>)
 8003b7a:	e014      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <TfLiteTypeGetName+0xcc>)
 8003b7e:	e012      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <TfLiteTypeGetName+0xd0>)
 8003b82:	e010      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <TfLiteTypeGetName+0xd4>)
 8003b86:	e00e      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <TfLiteTypeGetName+0xd8>)
 8003b8a:	e00c      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <TfLiteTypeGetName+0xdc>)
 8003b8e:	e00a      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <TfLiteTypeGetName+0xe0>)
 8003b92:	e008      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <TfLiteTypeGetName+0xe4>)
 8003b96:	e006      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <TfLiteTypeGetName+0xe8>)
 8003b9a:	e004      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <TfLiteTypeGetName+0xec>)
 8003b9e:	e002      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <TfLiteTypeGetName+0xf0>)
 8003ba2:	e000      	b.n	8003ba6 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <TfLiteTypeGetName+0xf4>)
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	08012554 	.word	0x08012554
 8003bb8:	0801255c 	.word	0x0801255c
 8003bbc:	08012564 	.word	0x08012564
 8003bc0:	0801256c 	.word	0x0801256c
 8003bc4:	08012574 	.word	0x08012574
 8003bc8:	0801257c 	.word	0x0801257c
 8003bcc:	08012584 	.word	0x08012584
 8003bd0:	0801258c 	.word	0x0801258c
 8003bd4:	08012594 	.word	0x08012594
 8003bd8:	0801259c 	.word	0x0801259c
 8003bdc:	080125a4 	.word	0x080125a4
 8003be0:	080125b0 	.word	0x080125b0
 8003be4:	080125bc 	.word	0x080125bc
 8003be8:	080125c4 	.word	0x080125c4
 8003bec:	080125cc 	.word	0x080125cc
 8003bf0:	080125d4 	.word	0x080125d4
 8003bf4:	080125e0 	.word	0x080125e0
 8003bf8:	080125e8 	.word	0x080125e8

08003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003c06:	f107 0320 	add.w	r3, r7, #32
 8003c0a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3308      	adds	r3, #8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	69f9      	ldr	r1, [r7, #28]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c2a:	b003      	add	sp, #12
 8003c2c:	4770      	bx	lr

08003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003c2e:	b40c      	push	{r2, r3}
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3308      	adds	r3, #8
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c5e:	b002      	add	sp, #8
 8003c60:	4770      	bx	lr

08003c62 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fcb5 	bl	80045f4 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_ZNK6tflite13Conv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd1d 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b2db      	uxtb	r3, r3
  }
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2106      	movs	r1, #6
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fcdf 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003cc8:	4603      	mov	r3, r0
  }
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2108      	movs	r1, #8
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fcd0 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003ce6:	4603      	mov	r3, r0
  }
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	210a      	movs	r1, #10
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fcef 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d04:	4603      	mov	r3, r0
 8003d06:	b2db      	uxtb	r3, r3
  }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	210c      	movs	r1, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fcb1 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d24:	4603      	mov	r3, r0
  }
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	210e      	movs	r1, #14
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fca2 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d42:	4603      	mov	r3, r0
  }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2104      	movs	r1, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fcc1 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d60:	4603      	mov	r3, r0
 8003d62:	b2db      	uxtb	r3, r3
  }
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2106      	movs	r1, #6
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fcb1 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b2db      	uxtb	r3, r3
  }
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	2108      	movs	r1, #8
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc44 	bl	8004628 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
  }
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210a      	movs	r1, #10
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc30 	bl	8004628 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
  }
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003e00 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8003dea:	2104      	movs	r1, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fca8 	bl	8004742 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8003df2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8003df6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00000000 	.word	0x00000000

08003e04 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2104      	movs	r1, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fc56 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003e16:	4603      	mov	r3, r0
  }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	210a      	movs	r1, #10
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fbfa 	bl	8004628 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e34:	4603      	mov	r3, r0
  }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	210c      	movs	r1, #12
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc0b 	bl	8004666 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8003e50:	4603      	mov	r3, r0
  }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffdc 	bl	8003e20 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d104      	bne.n	8003e78 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ffe5 	bl	8003e3e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	e000      	b.n	8003e7a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8003e78:	2300      	movs	r3, #0
  }
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ffc8 	bl	8003e20 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d104      	bne.n	8003ea0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffd1 	bl	8003e3e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	e000      	b.n	8003ea2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003ea0:	2300      	movs	r3, #0
  }
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffb4 	bl	8003e20 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d104      	bne.n	8003ec8 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffbd 	bl	8003e3e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e000      	b.n	8003eca <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8003ec8:	2300      	movs	r3, #0
  }
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa0 	bl	8003e20 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b11      	cmp	r3, #17
 8003ee4:	d104      	bne.n	8003ef0 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa9 	bl	8003e3e <_ZNK6tflite8Operator15builtin_optionsEv>
 8003eec:	4603      	mov	r3, r0
 8003eee:	e000      	b.n	8003ef2 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8003ef0:	2300      	movs	r3, #0
  }
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	4610      	mov	r0, r2
 8003f34:	4798      	blx	r3
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003f70:	f00c ff15 	bl	8010d9e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003f7a:	f00c ff10 	bl	8010d9e <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003f84:	f00c ff0b 	bl	8010d9e <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003f8e:	f00c ff06 	bl	8010d9e <abort>
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8003fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb2:	4917      	ldr	r1, [pc, #92]	; (8004010 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	f7ff fe21 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e024      	b.n	8004008 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f000 fbe1 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003fc4:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d906      	bls.n	8003fde <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8003fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd2:	4910      	ldr	r1, [pc, #64]	; (8004014 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8003fd4:	6838      	ldr	r0, [r7, #0]
 8003fd6:	f7ff fe11 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e014      	b.n	8004008 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20d      	bcs.n	8004006 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	18d4      	adds	r4, r2, r3
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	68b8      	ldr	r0, [r7, #8]
 8003ff6:	f000 fbd5 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e7ed      	b.n	8003fe2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	0801260c 	.word	0x0801260c
 8004014:	0801263c 	.word	0x0801263c

08004018 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b05      	cmp	r3, #5
 8004026:	d81b      	bhi.n	8004060 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004049 	.word	0x08004049
 8004034:	0800404d 	.word	0x0800404d
 8004038:	08004051 	.word	0x08004051
 800403c:	08004055 	.word	0x08004055
 8004040:	08004059 	.word	0x08004059
 8004044:	0800405d 	.word	0x0800405d
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004048:	2300      	movs	r3, #0
 800404a:	e00a      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 800404c:	2301      	movs	r3, #1
 800404e:	e008      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8004050:	2302      	movs	r3, #2
 8004052:	e006      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8004054:	2303      	movs	r3, #3
 8004056:	e004      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004058:	2304      	movs	r3, #4
 800405a:	e002      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 800405c:	2305      	movs	r3, #5
 800405e:	e000      	b.n	8004062 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d002      	beq.n	800408a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8004084:	e003      	b.n	800408e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8004086:	2301      	movs	r3, #1
 8004088:	e002      	b.n	8004090 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 800408a:	2302      	movs	r3, #2
 800408c:	e000      	b.n	8004090 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d873      	bhi.n	8004198 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	08004103 	.word	0x08004103
 80040bc:	080040f9 	.word	0x080040f9
 80040c0:	08004121 	.word	0x08004121
 80040c4:	08004135 	.word	0x08004135
 80040c8:	08004149 	.word	0x08004149
 80040cc:	0800415d 	.word	0x0800415d
 80040d0:	08004167 	.word	0x08004167
 80040d4:	08004117 	.word	0x08004117
 80040d8:	08004171 	.word	0x08004171
 80040dc:	0800413f 	.word	0x0800413f
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	08004153 	.word	0x08004153
 80040ec:	08004185 	.word	0x08004185
 80040f0:	0800418f 	.word	0x0800418f
 80040f4:	0800412b 	.word	0x0800412b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	220a      	movs	r2, #10
 80040fc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80040fe:	2300      	movs	r3, #0
 8004100:	e054      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004108:	2300      	movs	r3, #0
 800410a:	e04f      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	220b      	movs	r2, #11
 8004110:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004112:	2300      	movs	r3, #0
 8004114:	e04a      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2207      	movs	r2, #7
 800411a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800411c:	2300      	movs	r3, #0
 800411e:	e045      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004126:	2300      	movs	r3, #0
 8004128:	e040      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2210      	movs	r2, #16
 800412e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004130:	2300      	movs	r3, #0
 8004132:	e03b      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2203      	movs	r2, #3
 8004138:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800413a:	2300      	movs	r3, #0
 800413c:	e036      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2209      	movs	r2, #9
 8004142:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004144:	2300      	movs	r3, #0
 8004146:	e031      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2204      	movs	r2, #4
 800414c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800414e:	2300      	movs	r3, #0
 8004150:	e02c      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	220d      	movs	r2, #13
 8004156:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004158:	2300      	movs	r3, #0
 800415a:	e027      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2205      	movs	r2, #5
 8004160:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004162:	2300      	movs	r3, #0
 8004164:	e022      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2206      	movs	r2, #6
 800416a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800416c:	2300      	movs	r3, #0
 800416e:	e01d      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2208      	movs	r2, #8
 8004174:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004176:	2300      	movs	r3, #0
 8004178:	e018      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	220c      	movs	r2, #12
 800417e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004180:	2300      	movs	r3, #0
 8004182:	e013      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	220e      	movs	r2, #14
 8004188:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800418a:	2300      	movs	r3, #0
 800418c:	e00e      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	220f      	movs	r2, #15
 8004192:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004194:	2300      	movs	r3, #0
 8004196:	e009      	b.n	80041ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fd29 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80041aa:	2301      	movs	r3, #1
  }
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	08012760 	.word	0x08012760

080041b8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff fec5 	bl	8003f5c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80041d2:	f107 0318 	add.w	r3, r7, #24
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff feb0 	bl	8003f3e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 80041de:	f107 0310 	add.w	r3, r7, #16
 80041e2:	f107 0218 	add.w	r2, r7, #24
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fb01 	bl	80047f0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fb3b 	bl	8004870 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f083 0301 	eor.w	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	f240 434d 	movw	r3, #1101	; 0x44d
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f7ff fd09 	bl	8003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800421c:	2401      	movs	r4, #1
 800421e:	e05b      	b.n	80042d8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe1a 	bl	8003e5a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8004226:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04b      	beq.n	80042c6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800422e:	69f8      	ldr	r0, [r7, #28]
 8004230:	f7ff fd30 	bl	8003c94 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8004234:	4603      	mov	r3, r0
 8004236:	461d      	mov	r5, r3
 8004238:	f107 0310 	add.w	r3, r7, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fb24 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004242:	4604      	mov	r4, r0
 8004244:	4628      	mov	r0, r5
 8004246:	f7ff ff13 	bl	8004070 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800424a:	4603      	mov	r3, r0
 800424c:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fb19 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004258:	4604      	mov	r4, r0
 800425a:	69f8      	ldr	r0, [r7, #28]
 800425c:	f7ff fd2a 	bl	8003cb4 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 8004260:	4603      	mov	r3, r0
 8004262:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fb0e 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800426e:	4604      	mov	r4, r0
 8004270:	69f8      	ldr	r0, [r7, #28]
 8004272:	f7ff fd2e 	bl	8003cd2 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 8004276:	4603      	mov	r3, r0
 8004278:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800427a:	69f8      	ldr	r0, [r7, #28]
 800427c:	f7ff fd38 	bl	8003cf0 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8004280:	4603      	mov	r3, r0
 8004282:	461d      	mov	r5, r3
    params->activation =
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fafe 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800428e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004290:	4628      	mov	r0, r5
 8004292:	f7ff fec1 	bl	8004018 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8004296:	4603      	mov	r3, r0
    params->activation =
 8004298:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 faf3 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042a4:	4604      	mov	r4, r0
 80042a6:	69f8      	ldr	r0, [r7, #28]
 80042a8:	f7ff fd32 	bl	8003d10 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 80042ac:	4603      	mov	r3, r0
 80042ae:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 80042b0:	f107 0310 	add.w	r3, r7, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fae8 	bl	800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042ba:	4604      	mov	r4, r0
 80042bc:	69f8      	ldr	r0, [r7, #28]
 80042be:	f7ff fd36 	bl	8003d2e <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 80042c2:	4603      	mov	r3, r0
 80042c4:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fae9 	bl	80048a2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80042d6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 faa5 	bl	800482c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80042e2:	4623      	mov	r3, r4
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bdb0      	pop	{r4, r5, r7, pc}
 80042ec:	080126e0 	.word	0x080126e0
 80042f0:	08012680 	.word	0x08012680
 80042f4:	080126c8 	.word	0x080126c8

080042f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fe25 	bl	8003f5c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004312:	f107 0318 	add.w	r3, r7, #24
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fe10 	bl	8003f3e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	f107 0218 	add.w	r2, r7, #24
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f000 face 	bl	80048ca <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800432e:	f107 0310 	add.w	r3, r7, #16
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb08 	bl	800494a <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800433a:	4603      	mov	r3, r0
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	f240 531d 	movw	r3, #1309	; 0x51d
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004352:	4a36      	ldr	r2, [pc, #216]	; (800442c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f7ff fc69 	bl	8003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800435c:	2401      	movs	r4, #1
 800435e:	e056      	b.n	800440e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fd8e 	bl	8003e82 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004366:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d046      	beq.n	80043fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800436e:	69f8      	ldr	r0, [r7, #28]
 8004370:	f7ff fcec 	bl	8003d4c <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8004374:	4603      	mov	r3, r0
 8004376:	461d      	mov	r5, r3
    params->activation =
 8004378:	f107 0310 	add.w	r3, r7, #16
 800437c:	4618      	mov	r0, r3
 800437e:	f000 faf1 	bl	8004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004382:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004384:	4628      	mov	r0, r5
 8004386:	f7ff fe47 	bl	8004018 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800438a:	4603      	mov	r3, r0
    params->activation =
 800438c:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 800438e:	f107 0310 	add.w	r3, r7, #16
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fae6 	bl	8004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004398:	4604      	mov	r4, r0
 800439a:	69f8      	ldr	r0, [r7, #28]
 800439c:	f7ff fcf6 	bl	8003d8c <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80043a4:	f107 0310 	add.w	r3, r7, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fadb 	bl	8004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043ae:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80043b0:	69f8      	ldr	r0, [r7, #28]
 80043b2:	f7ff fcff 	bl	8003db4 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80043b6:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80043b8:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80043ba:	69f8      	ldr	r0, [r7, #28]
 80043bc:	f7ff fcd6 	bl	8003d6c <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d009      	beq.n	80043de <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 80043ca:	e011      	b.n	80043f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fac7 	bl	8004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2200      	movs	r2, #0
 80043da:	705a      	strb	r2, [r3, #1]
        break;
 80043dc:	e00e      	b.n	80043fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 80043de:	f107 0310 	add.w	r3, r7, #16
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fabe 	bl	8004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2201      	movs	r2, #1
 80043ec:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 80043ee:	e005      	b.n	80043fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 80043f0:	490f      	ldr	r1, [pc, #60]	; (8004430 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80043f2:	68b8      	ldr	r0, [r7, #8]
 80043f4:	f7ff fc02 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 80043f8:	2401      	movs	r4, #1
 80043fa:	e008      	b.n	800440e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fabb 	bl	800497c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004406:	4602      	mov	r2, r0
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800440c:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa77 	bl	8004906 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004418:	4623      	mov	r3, r4
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	080126e0 	.word	0x080126e0
 8004428:	08012680 	.word	0x08012680
 800442c:	080126c8 	.word	0x080126c8
 8004430:	08012784 	.word	0x08012784

08004434 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b08d      	sub	sp, #52	; 0x34
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff fd87 	bl	8003f5c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800444e:	f107 0318 	add.w	r3, r7, #24
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fd72 	bl	8003f3e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	f107 0218 	add.w	r2, r7, #24
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fa9d 	bl	80049a4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800446a:	f107 0310 	add.w	r3, r7, #16
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fad7 	bl	8004a24 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004476:	4603      	mov	r3, r0
 8004478:	f083 0301 	eor.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004482:	4b27      	ldr	r3, [pc, #156]	; (8004520 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f240 63c3 	movw	r3, #1731	; 0x6c3
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68b8      	ldr	r0, [r7, #8]
 8004494:	f7ff fbcb 	bl	8003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004498:	2401      	movs	r4, #1
 800449a:	e037      	b.n	800450c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fd18 	bl	8003ed2 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d027      	beq.n	80044fa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 80044aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ac:	f7ff fcaa 	bl	8003e04 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 80044b0:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fabe 	bl	8004a3e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	2020      	movs	r0, #32
 80044d0:	f7ff fd64 	bl	8003f9c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 80044d4:	4603      	mov	r3, r0
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	7ffb      	ldrb	r3, [r7, #31]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 80044de:	7ffc      	ldrb	r4, [r7, #31]
 80044e0:	e014      	b.n	800450c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 80044e2:	6a38      	ldr	r0, [r7, #32]
 80044e4:	f000 f94f 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80044e8:	4604      	mov	r4, r0
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 faa5 	bl	8004a3e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4622      	mov	r2, r4
 80044f8:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 faa9 	bl	8004a56 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800450a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fa65 	bl	80049e0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004516:	4623      	mov	r3, r4
}
 8004518:	4618      	mov	r0, r3
 800451a:	372c      	adds	r7, #44	; 0x2c
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	080126e0 	.word	0x080126e0
 8004524:	08012680 	.word	0x08012680
 8004528:	080126c8 	.word	0x080126c8
 800452c:	080127b0 	.word	0x080127b0

08004530 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b08b      	sub	sp, #44	; 0x2c
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fd09 	bl	8003f5c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800454a:	f107 0318 	add.w	r3, r7, #24
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fcf4 	bl	8003f3e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	f107 0218 	add.w	r2, r7, #24
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fa8c 	bl	8004a7e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004566:	f107 0310 	add.w	r3, r7, #16
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fac6 	bl	8004afe <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004572:	4603      	mov	r3, r0
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	f240 734c 	movw	r3, #1868	; 0x74c
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68b8      	ldr	r0, [r7, #8]
 8004590:	f7ff fb4d 	bl	8003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004594:	2401      	movs	r4, #1
 8004596:	e01c      	b.n	80045d2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fc86 	bl	8003eaa <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 800459e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fab4 	bl	8004b18 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80045b0:	4604      	mov	r4, r0
 80045b2:	69f8      	ldr	r0, [r7, #28]
 80045b4:	f7ff fc12 	bl	8003ddc <_ZNK6tflite14SoftmaxOptions4betaEv>
 80045b8:	eef0 7a40 	vmov.f32	s15, s0
 80045bc:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fab3 	bl	8004b30 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80045ca:	4602      	mov	r2, r0
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80045d0:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80045d2:	f107 0310 	add.w	r3, r7, #16
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fa6f 	bl	8004aba <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80045dc:	4623      	mov	r3, r4
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3724      	adds	r7, #36	; 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	080126e0 	.word	0x080126e0
 80045ec:	08012680 	.word	0x08012680
 80045f0:	080126c8 	.word	0x080126c8

080045f4 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
  }
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa9d 	bl	8004b58 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800461e:	4603      	mov	r3, r0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fc fd13 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004642:	4603      	mov	r3, r0
 8004644:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004646:	89fb      	ldrh	r3, [r7, #14]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	89fb      	ldrh	r3, [r7, #14]
 8004650:	4413      	add	r3, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ffda 	bl	800460c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8004658:	4603      	mov	r3, r0
 800465a:	e000      	b.n	800465e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800465c:	787b      	ldrb	r3, [r7, #1]
  }
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa7a 	bl	8004b70 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800467c:	4603      	mov	r3, r0
  }
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	460b      	mov	r3, r1
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8004694:	897b      	ldrh	r3, [r7, #10]
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fc fce5 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800469e:	4603      	mov	r3, r0
 80046a0:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80046a2:	8afb      	ldrh	r3, [r7, #22]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	8afb      	ldrh	r3, [r7, #22]
 80046ac:	4413      	add	r3, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd f9aa 	bl	8001a08 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80046b4:	4603      	mov	r3, r0
 80046b6:	e000      	b.n	80046ba <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 80046b8:	687b      	ldr	r3, [r7, #4]
  }
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa6c 	bl	8004bb0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80046d8:	4603      	mov	r3, r0
  }
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	807b      	strh	r3, [r7, #2]
 80046ee:	4613      	mov	r3, r2
 80046f0:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fcb6 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80046fc:	4603      	mov	r3, r0
 80046fe:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	4413      	add	r3, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fa6f 	bl	8004bf0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004712:	4603      	mov	r3, r0
 8004714:	e001      	b.n	800471a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8004716:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa6b 	bl	8004c0e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8004738:	4603      	mov	r3, r0
  }
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	460b      	mov	r3, r1
 800474c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004750:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7fc fc86 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800475c:	4603      	mov	r3, r0
 800475e:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004760:	8afb      	ldrh	r3, [r7, #22]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	8afb      	ldrh	r3, [r7, #22]
 800476a:	4413      	add	r3, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa6e 	bl	8004c4e <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	e001      	b.n	800477c <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8004778:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 800477c:	eeb0 0a67 	vmov.f32	s0, s15
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd f911 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004798:	4603      	mov	r3, r0
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffe9 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d306      	bcc.n	80047ca <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 80047c0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80047c4:	4809      	ldr	r0, [pc, #36]	; (80047ec <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 80047c6:	f00c faf1 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa63 	bl	8004c96 <_ZNK11flatbuffers6VectorIlE4DataEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa4c 	bl	8004c72 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 80047da:	4603      	mov	r3, r0
  }
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	080127c0 	.word	0x080127c0
 80047e8:	080127cc 	.word	0x080127cc
 80047ec:	0801289c 	.word	0x0801289c

080047f0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fa60 	bl	8004cc4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8004804:	4604      	mov	r4, r0
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fb72 	bl	8003efa <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	461a      	mov	r2, r3
 800481c:	4621      	mov	r1, r4
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa6f 	bl	8004d02 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bd90      	pop	{r4, r7, pc}

0800482c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa78 	bl	8004d2c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800483c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa7d 	bl	8004d46 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800484c:	4604      	mov	r4, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa86 	bl	8004d60 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004854:	4603      	mov	r3, r0
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff fb5c 	bl	8003f18 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
      }
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}

08004870 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa91 	bl	8004da2 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004880:	4603      	mov	r3, r0
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
	return get();
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa96 	bl	8004dc4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004898:	4603      	mov	r3, r0
      }
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa8a 	bl	8004dc4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80048b0:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fa39 	bl	8004d2c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
	return __p;
 80048c0:	68fb      	ldr	r3, [r7, #12]
      }
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fa80 	bl	8004dde <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 80048de:	4604      	mov	r4, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fb05 	bl	8003efa <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	461a      	mov	r2, r3
 80048f6:	4621      	mov	r1, r4
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa8a 	bl	8004e12 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}

08004906 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004906:	b590      	push	{r4, r7, lr}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa93 	bl	8004e3c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004916:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa98 	bl	8004e56 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004926:	4604      	mov	r4, r0
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 faa1 	bl	8004e70 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800492e:	4603      	mov	r3, r0
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	4620      	mov	r0, r4
 8004936:	f7ff faef 	bl	8003f18 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
      }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}

0800494a <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 faac 	bl	8004eb2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800495a:	4603      	mov	r3, r0
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	return get();
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fab1 	bl	8004ed4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004972:	4603      	mov	r3, r0
      }
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 faa5 	bl	8004ed4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800498a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa54 	bl	8004e3c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004994:	4603      	mov	r3, r0
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
	return __p;
 800499a:	68fb      	ldr	r3, [r7, #12]
      }
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa9b 	bl	8004eee <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 80049b8:	4604      	mov	r4, r0
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fa98 	bl	8003efa <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80049ca:	f107 030c 	add.w	r3, r7, #12
 80049ce:	461a      	mov	r2, r3
 80049d0:	4621      	mov	r1, r4
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 faa8 	bl	8004f28 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fab1 	bl	8004f52 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80049f0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fab6 	bl	8004f6c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004a00:	4604      	mov	r4, r0
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fabf 	bl	8004f86 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7ff fa82 	bl	8003f18 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
      }
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd90      	pop	{r4, r7, pc}

08004a24 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 faca 	bl	8004fc8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	return get();
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 facf 	bl	8004fea <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004a4c:	4603      	mov	r3, r0
      }
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fac3 	bl	8004fea <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004a64:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fa72 	bl	8004f52 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
	return __p;
 8004a74:	68fb      	ldr	r3, [r7, #12]
      }
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004a7e:	b590      	push	{r4, r7, lr}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fab9 	bl	8005004 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8004a92:	4604      	mov	r4, r0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fa2b 	bl	8003efa <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4621      	mov	r1, r4
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fac2 	bl	8005036 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd90      	pop	{r4, r7, pc}

08004aba <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004aba:	b590      	push	{r4, r7, lr}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 facb 	bl	8005060 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004aca:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fad0 	bl	800507a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004ada:	4604      	mov	r4, r0
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fad9 	bl	8005094 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff fa15 	bl	8003f18 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
      }
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}

08004afe <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fae4 	bl	80050d6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	return get();
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fae9 	bl	80050f8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b26:	4603      	mov	r3, r0
      }
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fadd 	bl	80050f8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b3e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa8c 	bl	8005060 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
	return __p;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
      }
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
    return t;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fc fa71 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004b86:	4603      	mov	r3, r0
 8004b88:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	4413      	add	r3, r2
 8004b90:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b92:	89fb      	ldrh	r3, [r7, #14]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f7fc ff27 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4413      	add	r3, r2
                        : nullptr;
 8004ba4:	e000      	b.n	8004ba8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ba6:	2300      	movs	r3, #0
  }
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fc fa51 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8004bd8:	68b8      	ldr	r0, [r7, #8]
 8004bda:	f7fc ff07 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4413      	add	r3, r2
                        : nullptr;
 8004be4:	e000      	b.n	8004be8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004be6:	2300      	movs	r3, #0
  }
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa87 	bl	8005112 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004c04:	4603      	mov	r3, r0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fa22 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004c24:	4603      	mov	r3, r0
 8004c26:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8004c36:	68b8      	ldr	r0, [r7, #8]
 8004c38:	f7fc fed8 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4413      	add	r3, r2
                        : nullptr;
 8004c42:	e000      	b.n	8004c46 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c44:	2300      	movs	r3, #0
  }
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c60:	f000 fa64 	bl	800512c <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8004c64:	eef0 7a40 	vmov.f32	s15, s0
}
 8004c68:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc ff92 	bl	8001bb0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004c8c:	4603      	mov	r3, r0
  }
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
  }
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	2118      	movs	r1, #24
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	2018      	movs	r0, #24
 8004ce2:	f7fe ffbe 	bl	8003c62 <_ZnwjPv>
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	460a      	mov	r2, r1
 8004cea:	2300      	movs	r3, #0
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	6053      	str	r3, [r2, #4]
 8004cf0:	6093      	str	r3, [r2, #8]
 8004cf2:	60d3      	str	r3, [r2, #12]
 8004cf4:	6113      	str	r3, [r2, #16]
 8004cf6:	6153      	str	r3, [r2, #20]
 8004cf8:	460b      	mov	r3, r1
  }
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004d02:	b590      	push	{r4, r7, lr}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004d0e:	68fc      	ldr	r4, [r7, #12]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fa1a 	bl	800514a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f82a 	bl	8004d76 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa12 	bl	8005160 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa12 	bl	800517a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004d76:	b590      	push	{r4, r7, lr}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004d82:	68fc      	ldr	r4, [r7, #12]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff92 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4619      	mov	r1, r3
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 f9fe 	bl	8005194 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd90      	pop	{r4, r7, pc}

08004da2 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f80a 	bl	8004dc4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f9f9 	bl	80051c6 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	2104      	movs	r1, #4
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	2004      	movs	r0, #4
 8004dfc:	f7fe ff31 	bl	8003c62 <_ZnwjPv>
 8004e00:	4601      	mov	r1, r0
 8004e02:	460a      	mov	r2, r1
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	460b      	mov	r3, r1
  }
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004e12:	b590      	push	{r4, r7, lr}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004e1e:	68fc      	ldr	r4, [r7, #12]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f992 	bl	800514a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 f82a 	bl	8004e86 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd90      	pop	{r4, r7, pc}

08004e3c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f9cb 	bl	80051e2 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f9cb 	bl	80051fc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004e86:	b590      	push	{r4, r7, lr}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004e92:	68fc      	ldr	r4, [r7, #12]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff0a 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f9b7 	bl	8005216 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f80a 	bl	8004ed4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f9b2 	bl	8005248 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8004eee:	b590      	push	{r4, r7, lr}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2204      	movs	r2, #4
 8004efe:	2124      	movs	r1, #36	; 0x24
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
 8004f04:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	2024      	movs	r0, #36	; 0x24
 8004f0c:	f7fe fea9 	bl	8003c62 <_ZnwjPv>
 8004f10:	4604      	mov	r4, r0
 8004f12:	4620      	mov	r0, r4
 8004f14:	2324      	movs	r3, #36	; 0x24
 8004f16:	461a      	mov	r2, r3
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f00b ffdf 	bl	8010edc <memset>
 8004f1e:	4623      	mov	r3, r4
  }
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}

08004f28 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004f34:	68fc      	ldr	r4, [r7, #12]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f907 	bl	800514a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f82a 	bl	8004f9c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}

08004f52 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f981 	bl	8005264 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f981 	bl	800527e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004fa8:	68fc      	ldr	r4, [r7, #12]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fe7f 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 f96d 	bl	8005298 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}

08004fc8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f80a 	bl	8004fea <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f968 	bl	80052ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2204      	movs	r2, #4
 8005014:	2104      	movs	r1, #4
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
 800501a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4619      	mov	r1, r3
 8005020:	2004      	movs	r0, #4
 8005022:	f7fe fe1e 	bl	8003c62 <_ZnwjPv>
 8005026:	4603      	mov	r3, r0
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
  }
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8005036:	b590      	push	{r4, r7, lr}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8005042:	68fc      	ldr	r4, [r7, #12]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f880 	bl	800514a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f82a 	bl	80050aa <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bd90      	pop	{r4, r7, pc}

08005060 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f93b 	bl	80052e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005070:	4603      	mov	r3, r0
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f93b 	bl	8005300 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800508a:	4603      	mov	r3, r0
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80050aa:	b590      	push	{r4, r7, lr}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80050b6:	68fc      	ldr	r4, [r7, #12]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fdf8 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80050be:	4602      	mov	r2, r0
 80050c0:	f107 0308 	add.w	r3, r7, #8
 80050c4:	4619      	mov	r1, r3
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f927 	bl	800531a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}

080050d6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f80a 	bl	80050f8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f922 	bl	800534c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005108:	4603      	mov	r3, r0
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	71fb      	strb	r3, [r7, #7]
    return t;
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	ee07 3a90 	vmov	s15, r3
}
 800513c:	eeb0 0a67 	vmov.f32	s0, s15
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f8fc 	bl	8005368 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005170:	4603      	mov	r3, r0
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f8fb 	bl	8005380 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005194:	b5b0      	push	{r4, r5, r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80051a0:	68fc      	ldr	r4, [r7, #12]
 80051a2:	68b8      	ldr	r0, [r7, #8]
 80051a4:	f000 f8f9 	bl	800539a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80051a8:	4605      	mov	r5, r0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fd7f 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	4629      	mov	r1, r5
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 f8fa 	bl	80053b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bdb0      	pop	{r4, r5, r7, pc}

080051c6 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f90b 	bl	80053ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80051d6:	4603      	mov	r3, r0
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f90a 	bl	8005406 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f909 	bl	800541e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800520c:	4603      	mov	r3, r0
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005216:	b5b0      	push	{r4, r5, r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005222:	68fc      	ldr	r4, [r7, #12]
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f000 f907 	bl	8005438 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800522a:	4605      	mov	r5, r0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff fd3e 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	4629      	mov	r1, r5
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f908 	bl	800544e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}

08005248 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f919 	bl	800548a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005258:	4603      	mov	r3, r0
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f918 	bl	80054a4 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005274:	4603      	mov	r3, r0
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f917 	bl	80054bc <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800528e:	4603      	mov	r3, r0
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005298:	b5b0      	push	{r4, r5, r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80052a4:	68fc      	ldr	r4, [r7, #12]
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f000 f915 	bl	80054d6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80052ac:	4605      	mov	r5, r0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fcfd 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	4629      	mov	r1, r5
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f916 	bl	80054ec <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bdb0      	pop	{r4, r5, r7, pc}

080052ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f927 	bl	8005528 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80052da:	4603      	mov	r3, r0
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f926 	bl	8005542 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f925 	bl	800555a <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005310:	4603      	mov	r3, r0
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800531a:	b5b0      	push	{r4, r5, r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005326:	68fc      	ldr	r4, [r7, #12]
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f000 f923 	bl	8005574 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800532e:	4605      	mov	r5, r0
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fcbc 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	4629      	mov	r1, r5
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f924 	bl	800558a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bdb0      	pop	{r4, r5, r7, pc}

0800534c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f935 	bl	80055c6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800535c:	4603      	mov	r3, r0
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f954 	bl	800561e <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005376:	4603      	mov	r3, r0
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f928 	bl	80055e0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005390:	4603      	mov	r3, r0
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80053bc:	68fc      	ldr	r4, [r7, #12]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff fc75 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4619      	mov	r1, r3
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f915 	bl	80055f8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1d1c      	adds	r4, r3, #4
 80053d2:	68b8      	ldr	r0, [r7, #8]
 80053d4:	f7ff ffe1 	bl	800539a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80053d8:	4603      	mov	r3, r0
 80053da:	4619      	mov	r1, r3
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 f92c 	bl	800563a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f930 	bl	800565c <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f930 	bl	8005674 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005414:	4603      	mov	r3, r0
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f8d9 	bl	80055e0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800542e:	4603      	mov	r3, r0
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800544e:	b590      	push	{r4, r7, lr}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800545a:	68fc      	ldr	r4, [r7, #12]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fc26 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005462:	4603      	mov	r3, r0
 8005464:	4619      	mov	r1, r3
 8005466:	4620      	mov	r0, r4
 8005468:	f000 f8c6 	bl	80055f8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1d1c      	adds	r4, r3, #4
 8005470:	68b8      	ldr	r0, [r7, #8]
 8005472:	f7ff ffe1 	bl	8005438 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005476:	4603      	mov	r3, r0
 8005478:	4619      	mov	r1, r3
 800547a:	4620      	mov	r0, r4
 800547c:	f000 f908 	bl	8005690 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}

0800548a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f90c 	bl	80056b2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800549a:	4603      	mov	r3, r0
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f90c 	bl	80056ca <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f88a 	bl	80055e0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80054f8:	68fc      	ldr	r4, [r7, #12]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fbd7 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005500:	4603      	mov	r3, r0
 8005502:	4619      	mov	r1, r3
 8005504:	4620      	mov	r0, r4
 8005506:	f000 f877 	bl	80055f8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1d1c      	adds	r4, r3, #4
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff ffe1 	bl	80054d6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005514:	4603      	mov	r3, r0
 8005516:	4619      	mov	r1, r3
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f8e4 	bl	80056e6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}

08005528 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f8e8 	bl	8005708 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005538:	4603      	mov	r3, r0
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8e8 	bl	8005720 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005550:	4603      	mov	r3, r0
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 f83b 	bl	80055e0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800556a:	4603      	mov	r3, r0
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800558a:	b590      	push	{r4, r7, lr}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005596:	68fc      	ldr	r4, [r7, #12]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fb88 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800559e:	4603      	mov	r3, r0
 80055a0:	4619      	mov	r1, r3
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f828 	bl	80055f8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1d1c      	adds	r4, r3, #4
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f7ff ffe1 	bl	8005574 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4619      	mov	r1, r3
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f8c0 	bl	800573c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}

080055c6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f8c4 	bl	800575e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f8c4 	bl	8005776 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005602:	687c      	ldr	r4, [r7, #4]
 8005604:	6838      	ldr	r0, [r7, #0]
 8005606:	f7ff fb52 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800560a:	4603      	mov	r3, r0
 800560c:	4619      	mov	r1, r3
 800560e:	4620      	mov	r0, r4
 8005610:	f000 f8be 	bl	8005790 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	bd90      	pop	{r4, r7, pc}

0800561e <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f8c1 	bl	80057b2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 8005630:	4603      	mov	r3, r0
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005644:	6838      	ldr	r0, [r7, #0]
 8005646:	f7ff fea8 	bl	800539a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800564a:	4603      	mov	r3, r0
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8af 	bl	80057c8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800566a:	4603      	mov	r3, r0
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f8af 	bl	80057e4 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8005686:	4603      	mov	r3, r0
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f7ff fecc 	bl	8005438 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056a0:	4603      	mov	r3, r0
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f89d 	bl	80057fa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f89d 	bl	8005816 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	f7ff fef0 	bl	80054d6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056f6:	4603      	mov	r3, r0
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f88b 	bl	800582c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005716:	4603      	mov	r3, r0
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f88b 	bl	8005848 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8005732:	4603      	mov	r3, r0
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005746:	6838      	ldr	r0, [r7, #0]
 8005748:	f7ff ff14 	bl	8005574 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800574c:	4603      	mov	r3, r0
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f879 	bl	800585e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800576c:	4603      	mov	r3, r0
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f87a 	bl	800587a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005786:	4603      	mov	r3, r0
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800579a:	6838      	ldr	r0, [r7, #0]
 800579c:	f7ff fa87 	bl	8004cae <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f85b 	bl	8005890 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 80057da:	4603      	mov	r3, r0
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f84d 	bl	80058a6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 800580c:	4603      	mov	r3, r0
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f83f 	bl	80058bc <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800583e:	4603      	mov	r3, r0
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f831 	bl	80058d2 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8005870:	4603      	mov	r3, r0
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return names;
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	08016f40 	.word	0x08016f40

080058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 8005906:	2300      	movs	r3, #0
 8005908:	72bb      	strb	r3, [r7, #10]
 800590a:	2391      	movs	r3, #145	; 0x91
 800590c:	72fb      	strb	r3, [r7, #11]
 800590e:	f107 020b 	add.w	r2, r7, #11
 8005912:	f107 010a 	add.w	r1, r7, #10
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f8a9 	bl	8005a70 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8005926:	e008      	b.n	800593a <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800592c:	f7ff ffdc 	bl	80058e8 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	681b      	ldr	r3, [r3, #0]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	08013010 	.word	0x08013010

08005948 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2106      	movs	r1, #6
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fee4 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800595a:	4603      	mov	r3, r0
  }
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	2108      	movs	r1, #8
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fe87 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005978:	4603      	mov	r3, r0
  }
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8005992:	2300      	movs	r3, #0
 8005994:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f00a ff40 	bl	8010822 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80059a2:	4603      	mov	r3, r0
 80059a4:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff ffdc 	bl	8005964 <_ZNK6tflite12OperatorCode7versionEv>
 80059ac:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 80059ae:	7fbb      	ldrb	r3, [r7, #30]
 80059b0:	2b91      	cmp	r3, #145	; 0x91
 80059b2:	d908      	bls.n	80059c6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 80059b4:	7fbb      	ldrb	r3, [r7, #30]
 80059b6:	461a      	mov	r2, r3
 80059b8:	492a      	ldr	r1, [pc, #168]	; (8005a64 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe f91e 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 80059c0:	2301      	movs	r3, #1
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e048      	b.n	8005a58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 80059c6:	7fbb      	ldrb	r3, [r7, #30]
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d01a      	beq.n	8005a02 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	7fb9      	ldrb	r1, [r7, #30]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	68b8      	ldr	r0, [r7, #8]
 80059d8:	4798      	blx	r3
 80059da:	4602      	mov	r2, r0
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d137      	bne.n	8005a58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 80059e8:	7fbb      	ldrb	r3, [r7, #30]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff ff86 	bl	80058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80059f0:	4602      	mov	r2, r0
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	491c      	ldr	r1, [pc, #112]	; (8005a68 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe f900 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 80059fc:	2301      	movs	r3, #1
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e02a      	b.n	8005a58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7ff ffa0 	bl	8005948 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8005a18:	4914      	ldr	r1, [pc, #80]	; (8005a6c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe f8ee 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8005a20:	2301      	movs	r3, #1
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e018      	b.n	8005a58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff ff8e 	bl	8005948 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe f923 	bl	8003c7a <_ZNK11flatbuffers6String5c_strEv>
 8005a34:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	68b8      	ldr	r0, [r7, #8]
 8005a44:	4798      	blx	r3
 8005a46:	4602      	mov	r2, r0
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	08013014 	.word	0x08013014
 8005a68:	08013068 	.word	0x08013068
 8005a6c:	0801310c 	.word	0x0801310c

08005a70 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d305      	bcc.n	8005a94 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d201      	bcs.n	8005a98 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ab0:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ab4:	f00b f82e 	bl	8010b14 <roundf>
 8005ab8:	eef0 7a40 	vmov.f32	s15, s0
 8005abc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005ace:	4618      	mov	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005ad8:	b5b0      	push	{r4, r5, r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	ed87 0b02 	vstr	d0, [r7, #8]
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005af2:	f7fa fff3 	bl	8000adc <__aeabi_dcmpeq>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
    return;
 8005b08:	e06b      	b.n	8005be2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005b0a:	6838      	ldr	r0, [r7, #0]
 8005b0c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b10:	f00a ff82 	bl	8010a18 <frexp>
 8005b14:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005b1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b22:	f7fa fd73 	bl	800060c <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	ec43 2b17 	vmov	d7, r2, r3
 8005b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b32:	eef0 0a67 	vmov.f32	s1, s15
 8005b36:	f000 f978 	bl	8005e2a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005b3a:	ec53 2b10 	vmov	r2, r3, d0
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	f7fb f88d 	bl	8000c60 <__aeabi_d2lz>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	4290      	cmp	r0, r2
 8005b5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8005b60:	da01      	bge.n	8005b66 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8005b62:	f00b f91c 	bl	8010d9e <abort>
  if (q_fixed == (1ll << 31)) {
 8005b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf08      	it	eq
 8005b6e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8005b72:	d117      	bne.n	8005ba4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8005b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b78:	0fd9      	lsrs	r1, r3, #31
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	1884      	adds	r4, r0, r2
 8005b82:	eb41 0503 	adc.w	r5, r1, r3
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	0862      	lsrs	r2, r4, #1
 8005b90:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005b94:	106b      	asrs	r3, r5, #1
 8005b96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005ba4:	f7ff ff8f 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4618      	mov	r0, r3
 8005bac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb4:	4290      	cmp	r0, r2
 8005bb6:	eb71 0303 	sbcs.w	r3, r1, r3
 8005bba:	da01      	bge.n	8005bc0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8005bbc:	f00b f8ef 	bl	8010d9e <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f113 0f1f 	cmn.w	r3, #31
 8005bc8:	da08      	bge.n	8005bdc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bdb0      	pop	{r4, r5, r7, pc}
 8005be8:	41e00000 	.word	0x41e00000

08005bec <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	ed87 0b02 	vstr	d0, [r7, #8]
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8005c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c04:	f7fa ff92 	bl	8000b2c <__aeabi_dcmpgt>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8005c0e:	f00b f8c6 	bl	8010d9e <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c1a:	f7ff ff5d 	bl	8005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da01      	bge.n	8005c2a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8005c26:	f00b f8ba 	bl	8010d9e <abort>
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	3ff00000 	.word	0x3ff00000

08005c38 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa ff4f 	bl	8000af0 <__aeabi_dcmplt>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	e000      	b.n	8005c5e <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8005c5c:	687b      	ldr	r3, [r7, #4]
    }
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	ed87 0b06 	vstr	d0, [r7, #24]
 8005c72:	ed87 1b04 	vstr	d1, [r7, #16]
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8005c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c84:	f7fa fcc2 	bl	800060c <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	461d      	mov	r5, r3
 8005c90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fa fc4c 	bl	8000538 <__aeabi_i2d>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7fa fcb0 	bl	800060c <__aeabi_dmul>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cb4:	a30e      	add	r3, pc, #56	; (adr r3, 8005cf0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cc2:	f107 0320 	add.w	r3, r7, #32
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ffb5 	bl	8005c38 <_ZSt3minIdERKT_S2_S2_>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005ce0:	f7ff ff84 	bl	8005bec <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8005ce4:	bf00      	nop
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bdb0      	pop	{r4, r5, r7, pc}
 8005cec:	f3af 8000 	nop.w
 8005cf0:	ffc00000 	.word	0xffc00000
 8005cf4:	41dfffff 	.word	0x41dfffff

08005cf8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8005d06:	2201      	movs	r2, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fc11 	bl	8000538 <__aeabi_i2d>
 8005d16:	4682      	mov	sl, r0
 8005d18:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1ad1      	subs	r1, r2, r3
 8005d20:	f04f 0201 	mov.w	r2, #1
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	f1a1 0620 	sub.w	r6, r1, #32
 8005d2c:	f1c1 0020 	rsb	r0, r1, #32
 8005d30:	fa03 f901 	lsl.w	r9, r3, r1
 8005d34:	fa02 f606 	lsl.w	r6, r2, r6
 8005d38:	ea49 0906 	orr.w	r9, r9, r6
 8005d3c:	fa22 f000 	lsr.w	r0, r2, r0
 8005d40:	ea49 0900 	orr.w	r9, r9, r0
 8005d44:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	f7fa fc30 	bl	80005b0 <__aeabi_l2d>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4650      	mov	r0, sl
 8005d56:	4659      	mov	r1, fp
 8005d58:	f7fa fc58 	bl	800060c <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4690      	mov	r8, r2
 8005d62:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8005d64:	f04f 0201 	mov.w	r2, #1
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	f1a1 0620 	sub.w	r6, r1, #32
 8005d72:	f1c1 0020 	rsb	r0, r1, #32
 8005d76:	fa03 f501 	lsl.w	r5, r3, r1
 8005d7a:	fa02 f606 	lsl.w	r6, r2, r6
 8005d7e:	4335      	orrs	r5, r6
 8005d80:	fa22 f000 	lsr.w	r0, r2, r0
 8005d84:	4305      	orrs	r5, r0
 8005d86:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa fc0f 	bl	80005b0 <__aeabi_l2d>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fd61 	bl	8000860 <__aeabi_ddiv>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8005da6:	ed97 0b04 	vldr	d0, [r7, #16]
 8005daa:	f00a fdb5 	bl	8010918 <floor>
 8005dae:	ec53 2b10 	vmov	r2, r3, d0
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fa fec3 	bl	8000b40 <__aeabi_d2iz>
 8005dba:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dc6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	ed93 7a00 	vldr	s14, [r3]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	edd3 7a00 	vldr	s15, [r3]
 8005ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de4:	d501      	bpl.n	8005dea <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	e000      	b.n	8005dec <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005dea:	687b      	ldr	r3, [r7, #4]
    }
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	ed93 7a00 	vldr	s14, [r3]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	edd3 7a00 	vldr	s15, [r3]
 8005e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e16:	d501      	bpl.n	8005e1c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	e000      	b.n	8005e1e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005e1c:	687b      	ldr	r3, [r7, #4]
    }
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	ed87 0b00 	vstr	d0, [r7]
 8005e34:	ed97 0b00 	vldr	d0, [r7]
 8005e38:	f00a fe26 	bl	8010a88 <round>
 8005e3c:	eeb0 7a40 	vmov.f32	s14, s0
 8005e40:	eef0 7a60 	vmov.f32	s15, s1
 8005e44:	eeb0 0a47 	vmov.f32	s0, s14
 8005e48:	eef0 0a67 	vmov.f32	s1, s15
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e60:	f7ff fe21 	bl	8005aa6 <_ZSt5roundf>
 8005e64:	eef0 7a40 	vmov.f32	s15, s0
 8005e68:	eeb0 0a67 	vmov.f32	s0, s15
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	237f      	movs	r3, #127	; 0x7f
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	23ff      	movs	r3, #255	; 0xff
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	ffff8000 	.word	0xffff8000

08005ec8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	ed87 0b00 	vstr	d0, [r7]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f18:	ec43 2b17 	vmov	d7, r2, r3
 8005f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f20:	eef0 0a67 	vmov.f32	s1, s15
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	019b      	lsls	r3, r3, #6
 8005f48:	4413      	add	r3, r2
 8005f4a:	e006      	b.n	8005f5a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	bf00      	nop
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	db0f      	blt.n	8005f96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	da0b      	bge.n	8005f96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f90:	d001      	beq.n	8005f96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e001      	b.n	8005f9a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8005fb6:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff ffce 	bl	8005f62 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8005fc6:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da01      	bge.n	8005fd2 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e005      	b.n	8005fde <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8005fd2:	6979      	ldr	r1, [r7, #20]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff ffaa 	bl	8005f2e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	bf00      	nop
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff ffd5 	bl	8005fa6 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8006016:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff ff9e 	bl	8005f62 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006026:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da01      	bge.n	8006032 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800602e:	2300      	movs	r3, #0
 8006030:	e005      	b.n	800603e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff ff7a 	bl	8005f2e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800603a:	4603      	mov	r3, r0
 800603c:	bf00      	nop
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ffc5 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800605c:	4603      	mov	r3, r0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 8006068:	b5b0      	push	{r4, r5, r7, lr}
 800606a:	b09c      	sub	sp, #112	; 0x70
 800606c:	af04      	add	r7, sp, #16
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800607c:	2b01      	cmp	r3, #1
 800607e:	d013      	beq.n	80060a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	695c      	ldr	r4, [r3, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800608a:	461a      	mov	r2, r3
 800608c:	2301      	movs	r3, #1
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	9202      	str	r2, [sp, #8]
 8006092:	4b98      	ldr	r3, [pc, #608]	; (80062f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	4b98      	ldr	r3, [pc, #608]	; (80062f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	23da      	movs	r3, #218	; 0xda
 800609c:	4a97      	ldr	r2, [pc, #604]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800609e:	4998      	ldr	r1, [pc, #608]	; (8006300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	47a0      	blx	r4
 80060a4:	2301      	movs	r3, #1
 80060a6:	e173      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d013      	beq.n	80060da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	695c      	ldr	r4, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060bc:	461a      	mov	r2, r3
 80060be:	2301      	movs	r3, #1
 80060c0:	9303      	str	r3, [sp, #12]
 80060c2:	9202      	str	r2, [sp, #8]
 80060c4:	4b8b      	ldr	r3, [pc, #556]	; (80062f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	4b8e      	ldr	r3, [pc, #568]	; (8006304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	23dc      	movs	r3, #220	; 0xdc
 80060ce:	4a8b      	ldr	r2, [pc, #556]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80060d0:	498b      	ldr	r1, [pc, #556]	; (8006300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	47a0      	blx	r4
 80060d6:	2301      	movs	r3, #1
 80060d8:	e15a      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060de:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 80060e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	695c      	ldr	r4, [r3, #20]
 80060ea:	4b87      	ldr	r3, [pc, #540]	; (8006308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	23e7      	movs	r3, #231	; 0xe7
 80060f0:	4a82      	ldr	r2, [pc, #520]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80060f2:	4986      	ldr	r1, [pc, #536]	; (800630c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	47a0      	blx	r4
 80060f8:	2301      	movs	r3, #1
 80060fa:	e149      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80060fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	695c      	ldr	r4, [r3, #20]
 8006108:	4b81      	ldr	r3, [pc, #516]	; (8006310 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	23e8      	movs	r3, #232	; 0xe8
 800610e:	4a7b      	ldr	r2, [pc, #492]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006110:	497e      	ldr	r1, [pc, #504]	; (800630c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	47a0      	blx	r4
 8006116:	2301      	movs	r3, #1
 8006118:	e13a      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800611a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	bfcc      	ite	gt
 8006124:	2301      	movgt	r3, #1
 8006126:	2300      	movle	r3, #0
 8006128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800612c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006130:	2b00      	cmp	r3, #0
 8006132:	d067      	beq.n	8006204 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b09      	cmp	r3, #9
 800613a:	d00e      	beq.n	800615a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b07      	cmp	r3, #7
 8006142:	d00a      	beq.n	800615a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	695c      	ldr	r4, [r3, #20]
 8006148:	4b72      	ldr	r3, [pc, #456]	; (8006314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	23ec      	movs	r3, #236	; 0xec
 800614e:	4a6b      	ldr	r2, [pc, #428]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006150:	496e      	ldr	r1, [pc, #440]	; (800630c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	47a0      	blx	r4
 8006156:	2301      	movs	r3, #1
 8006158:	e11a      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b09      	cmp	r3, #9
 8006160:	d012      	beq.n	8006188 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x120>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	695c      	ldr	r4, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	2309      	movs	r3, #9
 800616e:	9303      	str	r3, [sp, #12]
 8006170:	9202      	str	r2, [sp, #8]
 8006172:	4b69      	ldr	r3, [pc, #420]	; (8006318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	4b69      	ldr	r3, [pc, #420]	; (800631c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	23ee      	movs	r3, #238	; 0xee
 800617c:	4a5f      	ldr	r2, [pc, #380]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800617e:	4960      	ldr	r1, [pc, #384]	; (8006300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	47a0      	blx	r4
 8006184:	2301      	movs	r3, #1
 8006186:	e103      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8006188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006192:	429a      	cmp	r2, r3
 8006194:	d013      	beq.n	80061be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x156>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	695c      	ldr	r4, [r3, #20]
 800619a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061a4:	9203      	str	r2, [sp, #12]
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	4b5d      	ldr	r3, [pc, #372]	; (8006320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>)
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	23ef      	movs	r3, #239	; 0xef
 80061b2:	4a52      	ldr	r2, [pc, #328]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061b4:	4952      	ldr	r1, [pc, #328]	; (8006300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	47a0      	blx	r4
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0e8      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d017      	beq.n	8006204 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	695c      	ldr	r4, [r3, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061ec:	9302      	str	r3, [sp, #8]
 80061ee:	4b4e      	ldr	r3, [pc, #312]	; (8006328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c0>)
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	4b4b      	ldr	r3, [pc, #300]	; (8006320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	23f0      	movs	r3, #240	; 0xf0
 80061f8:	4a40      	ldr	r2, [pc, #256]	; (80062fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061fa:	4941      	ldr	r1, [pc, #260]	; (8006300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	47a0      	blx	r4
 8006200:	2301      	movs	r3, #1
 8006202:	e0c5      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800620a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 8006210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3304      	adds	r3, #4
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 8006218:	2300      	movs	r3, #0
 800621a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800621c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800621e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006222:	429a      	cmp	r2, r3
 8006224:	da47      	bge.n	80062b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8006226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d2>
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006234:	4413      	add	r3, r2
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	e001      	b.n	800623e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 8006240:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006242:	f7fa f98b 	bl	800055c <__aeabi_f2d>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800624e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006250:	f7fa f984 	bl	800055c <__aeabi_f2d>
 8006254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006258:	f7fa f9d8 	bl	800060c <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4614      	mov	r4, r2
 8006262:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8006264:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006266:	f7fa f979 	bl	800055c <__aeabi_f2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa faf5 	bl	8000860 <__aeabi_ddiv>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800627e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800628e:	f7ff fc23 	bl	8005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8006292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800629a:	4413      	add	r3, r2
 800629c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629e:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80062a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80062a8:	4413      	add	r3, r2
 80062aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ac:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80062ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b0:	3301      	adds	r3, #1
 80062b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b4:	e7b2      	b.n	800621c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d146      	bne.n	800634c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80062ca:	f107 0318 	add.w	r3, r7, #24
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f85c 	bl	8006398 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80062e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01e      	beq.n	800632c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c4>
 80062ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062f2:	e04d      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
 80062f4:	08013200 	.word	0x08013200
 80062f8:	0801321c 	.word	0x0801321c
 80062fc:	080131a8 	.word	0x080131a8
 8006300:	080131e4 	.word	0x080131e4
 8006304:	08013238 	.word	0x08013238
 8006308:	0801326c 	.word	0x0801326c
 800630c:	08013254 	.word	0x08013254
 8006310:	08013280 	.word	0x08013280
 8006314:	0801329c 	.word	0x0801329c
 8006318:	080132d8 	.word	0x080132d8
 800631c:	080132e4 	.word	0x080132e4
 8006320:	080132f4 	.word	0x080132f4
 8006324:	08013304 	.word	0x08013304
 8006328:	08013328 	.word	0x08013328
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800632c:	ed97 7b06 	vldr	d7, [r7, #24]
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4619      	mov	r1, r3
 8006336:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006338:	eeb0 0a47 	vmov.f32	s0, s14
 800633c:	eef0 0a67 	vmov.f32	s1, s15
 8006340:	f7ff fbca 	bl	8005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	425a      	negs	r2, r3
 8006348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800634a:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b09      	cmp	r3, #9
 8006352:	d007      	beq.n	8006364 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d003      	beq.n	8006364 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
      input->type == kTfLiteInt16) {
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006360:	2b07      	cmp	r3, #7
 8006362:	d114      	bne.n	800638e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8006364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006366:	7819      	ldrb	r1, [r3, #0]
 8006368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006372:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa01 	bl	800677c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
 8006388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800638c:	e000      	b.n	8006390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3760      	adds	r7, #96	; 0x60
 8006394:	46bd      	mov	sp, r7
 8006396:	bdb0      	pop	{r4, r5, r7, pc}

08006398 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b08e      	sub	sp, #56	; 0x38
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa f8d6 	bl	800055c <__aeabi_f2d>
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fa f8cf 	bl	800055c <__aeabi_f2d>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7fa f921 	bl	800060c <__aeabi_dmul>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d04b      	beq.n	8006470 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa f8bd 	bl	800055c <__aeabi_f2d>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80063ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063f2:	f7f9 ff53 	bl	800029c <__aeabi_dsub>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	ec43 2b17 	vmov	d7, r2, r3
 80063fe:	eeb0 0a47 	vmov.f32	s0, s14
 8006402:	eef0 0a67 	vmov.f32	s1, s15
 8006406:	f7ff fd7e 	bl	8005f06 <_ZSt3absd>
 800640a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fa f8a2 	bl	800055c <__aeabi_f2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006420:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006424:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006428:	f7fa fa1a 	bl	8000860 <__aeabi_ddiv>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	2301      	movs	r3, #1
 8006436:	461c      	mov	r4, r3
 8006438:	a318      	add	r3, pc, #96	; (adr r3, 800649c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa fb61 	bl	8000b04 <__aeabi_dcmple>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8006448:	2300      	movs	r3, #0
 800644a:	461c      	mov	r4, r3
 800644c:	b2e3      	uxtb	r3, r4
 800644e:	f083 0301 	eor.w	r3, r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	695c      	ldr	r4, [r3, #20]
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8006464:	4a0b      	ldr	r2, [pc, #44]	; (8006494 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8006466:	490c      	ldr	r1, [pc, #48]	; (8006498 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	47a0      	blx	r4
 800646c:	2301      	movs	r3, #1
 800646e:	e009      	b.n	8006484 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8006470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f812 	bl	80064a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8006480:	4603      	mov	r3, r0
                                          multiplier);
 8006482:	bf00      	nop
}
 8006484:	4618      	mov	r0, r3
 8006486:	3730      	adds	r7, #48	; 0x30
 8006488:	46bd      	mov	sp, r7
 800648a:	bdb0      	pop	{r4, r5, r7, pc}
 800648c:	f3af 8000 	nop.w
 8006490:	08013368 	.word	0x08013368
 8006494:	080131a8 	.word	0x080131a8
 8006498:	08013254 	.word	0x08013254
 800649c:	47ae147b 	.word	0x47ae147b
 80064a0:	3f947ae1 	.word	0x3f947ae1

080064a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80064c2:	ee17 0a90 	vmov	r0, s15
 80064c6:	f7fa f849 	bl	800055c <__aeabi_f2d>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80064d2:	2301      	movs	r3, #1
 80064d4:	461c      	mov	r4, r3
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064e2:	f7fa fb19 	bl	8000b18 <__aeabi_dcmpge>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80064ec:	2300      	movs	r3, #0
 80064ee:	461c      	mov	r4, r3
 80064f0:	b2e3      	uxtb	r3, r4
 80064f2:	f083 0301 	eor.w	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	695c      	ldr	r4, [r3, #20]
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	f240 134b 	movw	r3, #331	; 0x14b
 8006508:	4a0e      	ldr	r2, [pc, #56]	; (8006544 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800650a:	490f      	ldr	r1, [pc, #60]	; (8006548 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	47a0      	blx	r4
 8006510:	2301      	movs	r3, #1
 8006512:	e010      	b.n	8006536 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa f81f 	bl	800055c <__aeabi_f2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006526:	f7fa f99b 	bl	8000860 <__aeabi_ddiv>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006530:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd90      	pop	{r4, r7, pc}
 800653e:	bf00      	nop
 8006540:	0801338c 	.word	0x0801338c
 8006544:	080131a8 	.word	0x080131a8
 8006548:	08013254 	.word	0x08013254

0800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b08b      	sub	sp, #44	; 0x2c
 8006550:	af02      	add	r7, sp, #8
 8006552:	6178      	str	r0, [r7, #20]
 8006554:	ed87 0a04 	vstr	s0, [r7, #16]
 8006558:	60f9      	str	r1, [r7, #12]
 800655a:	edc7 0a02 	vstr	s1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8006560:	ed97 7a02 	vldr	s14, [r7, #8]
 8006564:	edd7 7a04 	vldr	s15, [r7, #16]
 8006568:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800656c:	eeb0 0a66 	vmov.f32	s0, s13
 8006570:	f7ff fc6f 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006574:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006578:	f7ff fcaf 	bl	8005eda <_ZNSt14numeric_limitsIlE3minEv>
 800657c:	ee07 0a90 	vmov	s15, r0
 8006580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006584:	ed97 7a07 	vldr	s14, [r7, #28]
 8006588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	db0e      	blt.n	80065b0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006592:	f7ff fa98 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 8006596:	ee07 0a90 	vmov	s15, r0
 800659a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800659e:	ed97 7a07 	vldr	s14, [r7, #28]
 80065a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	d801      	bhi.n	80065b0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80065b0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80065b2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80065b4:	7efb      	ldrb	r3, [r7, #27]
 80065b6:	f083 0301 	eor.w	r3, r3, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	695c      	ldr	r4, [r3, #20]
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	f240 1359 	movw	r3, #345	; 0x159
 80065cc:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80065ce:	490c      	ldr	r1, [pc, #48]	; (8006600 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80065d0:	6978      	ldr	r0, [r7, #20]
 80065d2:	47a0      	blx	r4
 80065d4:	2301      	movs	r3, #1
 80065d6:	e00a      	b.n	80065ee <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80065d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80065dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e0:	ee17 2a90 	vmov	r2, s15
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd90      	pop	{r4, r7, pc}
 80065f6:	bf00      	nop
 80065f8:	080133a8 	.word	0x080133a8
 80065fc:	080131a8 	.word	0x080131a8
 8006600:	08013254 	.word	0x08013254

08006604 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	460b      	mov	r3, r1
 8006612:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d120      	bne.n	8006668 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8006626:	f107 0314 	add.w	r3, r7, #20
 800662a:	461a      	mov	r2, r3
 800662c:	eddf 0a52 	vldr	s1, [pc, #328]	; 8006778 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006630:	6a39      	ldr	r1, [r7, #32]
 8006632:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff ff88 	bl	800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800663c:	4603      	mov	r3, r0
 800663e:	76fb      	strb	r3, [r7, #27]
 8006640:	7efb      	ldrb	r3, [r7, #27]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8006646:	7efb      	ldrb	r3, [r7, #27]
 8006648:	e091      	b.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800664a:	f107 0214 	add.w	r2, r7, #20
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f8fe 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 8006658:	4603      	mov	r3, r0
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e081      	b.n	800676c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d13a      	bne.n	80066e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	461a      	mov	r2, r3
 8006674:	eddf 0a40 	vldr	s1, [pc, #256]	; 8006778 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006678:	6a39      	ldr	r1, [r7, #32]
 800667a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff ff64 	bl	800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006684:	4603      	mov	r3, r0
 8006686:	777b      	strb	r3, [r7, #29]
 8006688:	7f7b      	ldrb	r3, [r7, #29]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800668e:	7f7b      	ldrb	r3, [r7, #29]
 8006690:	e06d      	b.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006692:	f107 0214 	add.w	r2, r7, #20
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f8da 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 80066a0:	4603      	mov	r3, r0
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	461a      	mov	r2, r3
 80066ae:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80066b2:	6a39      	ldr	r1, [r7, #32]
 80066b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ff47 	bl	800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80066be:	4603      	mov	r3, r0
 80066c0:	773b      	strb	r3, [r7, #28]
 80066c2:	7f3b      	ldrb	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80066c8:	7f3b      	ldrb	r3, [r7, #28]
 80066ca:	e050      	b.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80066cc:	f107 0214 	add.w	r2, r7, #20
 80066d0:	463b      	mov	r3, r7
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f8a9 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 80066da:	4603      	mov	r3, r0
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e043      	b.n	800676c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d13a      	bne.n	8006760 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	461a      	mov	r2, r3
 80066f0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80066f4:	6a39      	ldr	r1, [r7, #32]
 80066f6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff ff26 	bl	800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006700:	4603      	mov	r3, r0
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	7ffb      	ldrb	r3, [r7, #31]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800670a:	7ffb      	ldrb	r3, [r7, #31]
 800670c:	e02f      	b.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800670e:	f107 0214 	add.w	r2, r7, #20
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f89c 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800671c:	4603      	mov	r3, r0
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	461a      	mov	r2, r3
 800672a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800672e:	6a39      	ldr	r1, [r7, #32]
 8006730:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff ff09 	bl	800654c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800673a:	4603      	mov	r3, r0
 800673c:	77bb      	strb	r3, [r7, #30]
 800673e:	7fbb      	ldrb	r3, [r7, #30]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8006744:	7fbb      	ldrb	r3, [r7, #30]
 8006746:	e012      	b.n	800676e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006748:	f107 0214 	add.w	r2, r7, #20
 800674c:	463b      	mov	r3, r7
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f86b 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 8006756:	4603      	mov	r3, r0
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e005      	b.n	800676c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3728      	adds	r7, #40	; 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	00000000 	.word	0x00000000

0800677c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b08b      	sub	sp, #44	; 0x2c
 8006780:	af04      	add	r7, sp, #16
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	460b      	mov	r3, r1
 800678a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d108      	bne.n	80067ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800679c:	f7ff fb7a 	bl	8005e94 <_ZNSt14numeric_limitsIhE3minEv>
 80067a0:	4603      	mov	r3, r0
 80067a2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80067a4:	f7ff fb7e 	bl	8005ea4 <_ZNSt14numeric_limitsIhE3maxEv>
 80067a8:	4603      	mov	r3, r0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	e025      	b.n	80067fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d108      	bne.n	80067c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80067b6:	f7ff fb5c 	bl	8005e72 <_ZNSt14numeric_limitsIaE3minEv>
 80067ba:	4603      	mov	r3, r0
 80067bc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80067be:	f7ff fb61 	bl	8005e84 <_ZNSt14numeric_limitsIaE3maxEv>
 80067c2:	4603      	mov	r3, r0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	e018      	b.n	80067fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b07      	cmp	r3, #7
 80067ce:	d108      	bne.n	80067e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80067d0:	f7ff fb70 	bl	8005eb4 <_ZNSt14numeric_limitsIsE3minEv>
 80067d4:	4603      	mov	r3, r0
 80067d6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80067d8:	f7ff fb76 	bl	8005ec8 <_ZNSt14numeric_limitsIsE3maxEv>
 80067dc:	4603      	mov	r3, r0
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	e00b      	b.n	80067fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	695c      	ldr	r4, [r3, #20]
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	f240 1391 	movw	r3, #401	; 0x191
 80067ee:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 80067f0:	490d      	ldr	r1, [pc, #52]	; (8006828 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	47a0      	blx	r4
 80067f6:	2301      	movs	r3, #1
 80067f8:	e00d      	b.n	8006816 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 80067fa:	7af9      	ldrb	r1, [r7, #11]
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fef9 	bl	8006604 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8006812:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8006814:	bf00      	nop
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bd90      	pop	{r4, r7, pc}
 800681e:	bf00      	nop
 8006820:	080133d0 	.word	0x080133d0
 8006824:	080131a8 	.word	0x080131a8
 8006828:	08013254 	.word	0x08013254

0800682c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	da01      	bge.n	8006846 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	e000      	b.n	8006848 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8006846:	687b      	ldr	r3, [r7, #4]
    }
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	da01      	bge.n	800686e <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	e000      	b.n	8006870 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800686e:	687b      	ldr	r3, [r7, #4]
    }
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <DebugLog>:

//#include <cstdio>
//
//extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }

extern "C" void __attribute__((weak)) DebugLog(const char* s) {
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  // To be implemented by user
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	210a      	movs	r1, #10
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f847 	bl	8006930 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80068a2:	4603      	mov	r3, r0
  }
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2108      	movs	r1, #8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f849 	bl	8006950 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80068be:	4603      	mov	r3, r0
  }
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ffdd 	bl	8006890 <_ZNK6tflite8SubGraph9operatorsEv>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d008      	beq.n	80068f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ffd2 	bl	8006890 <_ZNK6tflite8SubGraph9operatorsEv>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f83e 	bl	8006970 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80068f4:	4603      	mov	r3, r0
 80068f6:	e000      	b.n	80068fa <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 80068f8:	2300      	movs	r3, #0
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ffcd 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8006912:	4602      	mov	r2, r0
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 f845 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800691e:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ffd1 	bl	80068c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006926:	4603      	mov	r3, r0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f865 	bl	8006a10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8006946:	4603      	mov	r3, r0
  }
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f875 	bl	8006a50 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8006966:	4603      	mov	r3, r0
  }
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7fb f81c 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8006982:	4603      	mov	r3, r0
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7fb f80e 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800699e:	4603      	mov	r3, r0
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ffea 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80069b8:	4602      	mov	r2, r0
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d306      	bcc.n	80069ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 80069c2:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 80069c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80069c8:	4809      	ldr	r0, [pc, #36]	; (80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 80069ca:	f00a f9ef 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f872 	bl	8006ab8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 80069d4:	4603      	mov	r3, r0
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f859 	bl	8006a90 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 80069de:	4603      	mov	r3, r0
  }
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08013488 	.word	0x08013488
 80069ec:	08013494 	.word	0x08013494
 80069f0:	08013590 	.word	0x08013590

080069f4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80069fe:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006a1c:	887b      	ldrh	r3, [r7, #2]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7fa fb21 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006a26:	4603      	mov	r3, r0
 8006a28:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a32:	89fb      	ldrh	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d006      	beq.n	8006a46 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8006a38:	68b8      	ldr	r0, [r7, #8]
 8006a3a:	f7fa ffd7 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4413      	add	r3, r2
                        : nullptr;
 8006a44:	e000      	b.n	8006a48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a46:	2300      	movs	r3, #0
  }
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fa fb01 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006a66:	4603      	mov	r3, r0
 8006a68:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8006a78:	68b8      	ldr	r0, [r7, #8]
 8006a7a:	f7fa ffb7 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4413      	add	r3, r2
                        : nullptr;
 8006a84:	e000      	b.n	8006a88 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a86:	2300      	movs	r3, #0
  }
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fa ffa1 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4413      	add	r3, r2
  }
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3304      	adds	r3, #4
  }
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2104      	movs	r1, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fd fdf0 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006ae2:	4603      	mov	r3, r0
  }
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	2106      	movs	r1, #6
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fd fdf1 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006b00:	4603      	mov	r3, r0
 8006b02:	b2db      	uxtb	r3, r3
  }
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f866 	bl	8006c10 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	dd08      	ble.n	8006b70 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f009 fe93 	bl	8010896 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	dd02      	ble.n	8006ba8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	e001      	b.n	8006bac <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
  }
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	dd08      	ble.n	8006bdc <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f009 fe5d 	bl	8010896 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	dd0f      	ble.n	8006c08 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d201      	bcs.n	8006bf6 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	e001      	b.n	8006bfa <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f009 fe6d 	bl	80108da <_Znaj>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff ffca 	bl	8006bb8 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff ffb4 	bl	8006b92 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8006c2a:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	461a      	mov	r2, r3
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	6978      	ldr	r0, [r7, #20]
 8006c36:	f00a f929 	bl	8010e8c <memcpy>
  }
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8006c64:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006c66:	68bb      	ldr	r3, [r7, #8]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8006c90:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006c92:	68bb      	ldr	r3, [r7, #8]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	fb02 f303 	mul.w	r3, r2, r3
 8006cbe:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d857      	bhi.n	8006d94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d4d 	.word	0x08006d4d
 8006cf4:	08006d5d 	.word	0x08006d5d
 8006cf8:	08006d6d 	.word	0x08006d6d
 8006cfc:	08006d95 	.word	0x08006d95
 8006d00:	08006d7d 	.word	0x08006d7d
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d85 	.word	0x08006d85
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d8d 	.word	0x08006d8d
 8006d1c:	08006d75 	.word	0x08006d75
 8006d20:	08006d95 	.word	0x08006d95
 8006d24:	08006d95 	.word	0x08006d95
 8006d28:	08006d55 	.word	0x08006d55
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	601a      	str	r2, [r3, #0]
      break;
 8006d32:	e031      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2204      	movs	r2, #4
 8006d38:	601a      	str	r2, [r3, #0]
      break;
 8006d3a:	e02d      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2208      	movs	r2, #8
 8006d40:	601a      	str	r2, [r3, #0]
      break;
 8006d42:	e029      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2202      	movs	r2, #2
 8006d48:	601a      	str	r2, [r3, #0]
      break;
 8006d4a:	e025      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	601a      	str	r2, [r3, #0]
      break;
 8006d52:	e021      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2204      	movs	r2, #4
 8006d58:	601a      	str	r2, [r3, #0]
      break;
 8006d5a:	e01d      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
      break;
 8006d62:	e019      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
      break;
 8006d6a:	e015      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2208      	movs	r2, #8
 8006d70:	601a      	str	r2, [r3, #0]
      break;
 8006d72:	e011      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2208      	movs	r2, #8
 8006d78:	601a      	str	r2, [r3, #0]
      break;
 8006d7a:	e00d      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
      break;
 8006d82:	e009      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2208      	movs	r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
      break;
 8006d8a:	e005      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	601a      	str	r2, [r3, #0]
      break;
 8006d92:	e001      	b.n	8006d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fe88 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d022      	beq.n	8006e16 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fe7b 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f884 	bl	8006eea <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8006de2:	4602      	mov	r2, r0
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	4293      	cmp	r3, r2
 8006de8:	bf34      	ite	cc
 8006dea:	2301      	movcc	r3, #1
 8006dec:	2300      	movcs	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fe6b 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd fcd0 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	3301      	adds	r3, #1
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e7de      	b.n	8006dd4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fe68 	bl	8006aec <_ZNK6tflite6Tensor4typeEv>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f107 0315 	add.w	r3, r7, #21
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	f7fd f938 	bl	800409c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	e013      	b.n	8006e62 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8006e3a:	7d7b      	ldrb	r3, [r7, #21]
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff ff46 	bl	8006cd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75bb      	strb	r3, [r7, #22]
 8006e48:	7dbb      	ldrb	r3, [r7, #22]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8006e4e:	7dbb      	ldrb	r3, [r7, #22]
 8006e50:	e007      	b.n	8006e62 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	fb02 f203 	mul.w	r2, r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8006e7a:	f009 ff90 	bl	8010d9e <abort>

  int element_count = 1;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d015      	beq.n	8006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	da0d      	bge.n	8006eb6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	e7eb      	b.n	8006e8e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7a1b      	ldrb	r3, [r3, #8]
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff05 	bl	8006cd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	e006      	b.n	8006ee2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	fb02 f203 	mul.w	r2, r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fd fc47 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fc7f 	bl	8008812 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8006f14:	4603      	mov	r3, r0
  }
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	210a      	movs	r1, #10
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fc81 	bl	8008832 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8006f30:	4603      	mov	r3, r0
  }
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2110      	movs	r1, #16
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fb9c 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006f4e:	4603      	mov	r3, r0
  }
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	2108      	movs	r1, #8
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fa fd5c 	bl	8001a24 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006f6c:	4603      	mov	r3, r0
  }
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	210c      	movs	r1, #12
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fc65 	bl	8008852 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006f88:	4603      	mov	r3, r0
  }
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	210e      	movs	r1, #14
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fd fb41 	bl	8004628 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
  }
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2106      	movs	r1, #6
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fd fb7b 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006fcc:	4603      	mov	r3, r0
  }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2108      	movs	r1, #8
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fd fb6d 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006fe8:	4603      	mov	r3, r0
  }
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fc37 	bl	8008872 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007004:	4603      	mov	r3, r0
  }
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2106      	movs	r1, #6
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd fb51 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007020:	4603      	mov	r3, r0
  }
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2108      	movs	r1, #8
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd fb43 	bl	80046c2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800703c:	4603      	mov	r3, r0
  }
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2104      	movs	r1, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f001 fbcd 	bl	80087f2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8007058:	4603      	mov	r3, r0
  }
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2104      	movs	r1, #4
 800706e:	4618      	mov	r0, r3
 8007070:	f7fd fb57 	bl	8004722 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8007074:	4603      	mov	r3, r0
  }
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	2106      	movs	r1, #6
 800708c:	4618      	mov	r0, r3
 800708e:	f7fa fcc9 	bl	8001a24 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8007092:	4603      	mov	r3, r0
  }
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	210c      	movs	r1, #12
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 fbf2 	bl	8008892 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80070ae:	4603      	mov	r3, r0
  }
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2110      	movs	r1, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fbf4 	bl	80088b2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 80070ca:	4603      	mov	r3, r0
  }
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	08017204 	.word	0x08017204

080070f4 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ffe9 	bl	80070d4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8007102:	2104      	movs	r1, #4
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f009 fbc4 	bl	8010892 <_ZdlPvj>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	4a04      	ldr	r2, [pc, #16]	; (8007130 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	08017204 	.word	0x08017204

08007134 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ffe7 	bl	8007114 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	080171b0 	.word	0x080171b0

08007160 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6858      	ldr	r0, [r3, #4]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	330c      	adds	r3, #12
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
  }
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b096      	sub	sp, #88	; 0x58
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 80071e8:	f009 fdd9 	bl	8010d9e <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80071ec:	2300      	movs	r3, #0
 80071ee:	657b      	str	r3, [r7, #84]	; 0x54
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d267      	bcs.n	80072ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6819      	ldr	r1, [r3, #0]
 80071fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	440b      	add	r3, r1
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800720c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	461a      	mov	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	4413      	add	r3, r2
 800721c:	461a      	mov	r2, r3
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 8007222:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	461a      	mov	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	4413      	add	r3, r2
 8007232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007234:	4611      	mov	r1, r2
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fe17 	bl	8006e6a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800724a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800724e:	e117      	b.n	8007480 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8007250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007256:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8007258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800725e:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8007260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	461a      	mov	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	4413      	add	r3, r2
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d113      	bne.n	800729e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8007276:	68b8      	ldr	r0, [r7, #8]
 8007278:	f7ff febb 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 800727c:	4603      	mov	r3, r0
 800727e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fbaf 	bl	80089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fe82 	bl	8006f92 <_ZNK6tflite6Tensor11is_variableEv>
 800728e:	4603      	mov	r3, r0
 8007290:	f083 0301 	eor.w	r3, r3, #1
 8007294:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800729a:	2201      	movs	r2, #1
 800729c:	e000      	b.n	80072a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800729e:	2200      	movs	r2, #0
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80072aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b6:	611a      	str	r2, [r3, #16]
 80072b8:	e003      	b.n	80072c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 80072ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072c0:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 80072c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c4:	3301      	adds	r3, #1
 80072c6:	657b      	str	r3, [r7, #84]	; 0x54
 80072c8:	e792      	b.n	80071f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80072ca:	68b8      	ldr	r0, [r7, #8]
 80072cc:	f7ff fafc 	bl	80068c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80072d0:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80072d2:	2300      	movs	r3, #0
 80072d4:	653b      	str	r3, [r7, #80]	; 0x50
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f7ff fe99 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 80072dc:	4603      	mov	r3, r0
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fd fa51 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bf34      	ite	cc
 80072ec:	2301      	movcc	r3, #1
 80072ee:	2300      	movcs	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d018      	beq.n	8007328 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 80072f6:	68b8      	ldr	r0, [r7, #8]
 80072f8:	f7ff fe89 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007300:	4618      	mov	r0, r3
 8007302:	f7fd fa4f 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007306:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	440b      	add	r3, r1
 8007318:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2200      	movs	r2, #0
 800731e:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	3301      	adds	r3, #1
 8007324:	653b      	str	r3, [r7, #80]	; 0x50
 8007326:	e7d6      	b.n	80072d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8007328:	2300      	movs	r3, #0
 800732a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732c:	68b8      	ldr	r0, [r7, #8]
 800732e:	f7ff fe7c 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 8007332:	4603      	mov	r3, r0
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd fa26 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800733a:	4602      	mov	r2, r0
 800733c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733e:	4293      	cmp	r3, r2
 8007340:	bf34      	ite	cc
 8007342:	2301      	movcc	r3, #1
 8007344:	2300      	movcs	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01a      	beq.n	8007382 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f7ff fe6c 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 8007352:	4603      	mov	r3, r0
 8007354:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fa24 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800735c:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	440b      	add	r3, r1
 800736e:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	3b01      	subs	r3, #1
 8007374:	461a      	mov	r2, r3
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800737a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737c:	3301      	adds	r3, #1
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007380:	e7d4      	b.n	800732c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	3b01      	subs	r3, #1
 8007386:	64bb      	str	r3, [r7, #72]	; 0x48
 8007388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800738a:	2b00      	cmp	r3, #0
 800738c:	db77      	blt.n	800747e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 800738e:	68b8      	ldr	r0, [r7, #8]
 8007390:	f7ff fa7e 	bl	8006890 <_ZNK6tflite8SubGraph9operatorsEv>
 8007394:	4602      	mov	r2, r0
 8007396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f001 fb48 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80073a0:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80073a2:	2300      	movs	r3, #0
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
 80073a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a8:	f7ff fe07 	bl	8006fba <_ZNK6tflite8Operator6inputsEv>
 80073ac:	4603      	mov	r3, r0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fd f9e9 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bf34      	ite	cc
 80073bc:	2301      	movcc	r3, #1
 80073be:	2300      	movcs	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d022      	beq.n	800740c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 80073c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c8:	f7ff fdf7 	bl	8006fba <_ZNK6tflite8Operator6inputsEv>
 80073cc:	4603      	mov	r3, r0
 80073ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd f9e7 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	440b      	add	r3, r1
 80073e8:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	d004      	beq.n	80073fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fa:	429a      	cmp	r2, r3
 80073fc:	dd02      	ble.n	8007404 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007402:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8007404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007406:	3301      	adds	r3, #1
 8007408:	647b      	str	r3, [r7, #68]	; 0x44
 800740a:	e7cc      	b.n	80073a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800740c:	2300      	movs	r3, #0
 800740e:	643b      	str	r3, [r7, #64]	; 0x40
 8007410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007412:	f7ff fde0 	bl	8006fd6 <_ZNK6tflite8Operator7outputsEv>
 8007416:	4603      	mov	r3, r0
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd f9b4 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800741e:	4602      	mov	r2, r0
 8007420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007422:	4293      	cmp	r3, r2
 8007424:	bf34      	ite	cc
 8007426:	2301      	movcc	r3, #1
 8007428:	2300      	movcs	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d022      	beq.n	8007476 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 8007430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007432:	f7ff fdd0 	bl	8006fd6 <_ZNK6tflite8Operator7outputsEv>
 8007436:	4603      	mov	r3, r0
 8007438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd f9b2 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007440:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	4413      	add	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	440b      	add	r3, r1
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745c:	d004      	beq.n	8007468 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007464:	429a      	cmp	r2, r3
 8007466:	da02      	bge.n	800746e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746c:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800746e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007470:	3301      	adds	r3, #1
 8007472:	643b      	str	r3, [r7, #64]	; 0x40
 8007474:	e7cc      	b.n	8007410 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 8007476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007478:	3b01      	subs	r3, #1
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
 800747c:	e784      	b.n	8007388 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3758      	adds	r7, #88	; 0x58
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	; 0x30
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f7ff fe0f 	bl	80070b8 <_ZNK6tflite5Model8metadataEv>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d060      	beq.n	800756c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80074aa:	2300      	movs	r3, #0
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ae:	68b8      	ldr	r0, [r7, #8]
 80074b0:	f7ff fe02 	bl	80070b8 <_ZNK6tflite5Model8metadataEv>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fb14 	bl	8008ae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80074bc:	4602      	mov	r2, r0
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bf34      	ite	cc
 80074c4:	2301      	movcc	r3, #1
 80074c6:	2300      	movcs	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d04e      	beq.n	800756c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f7ff fdf2 	bl	80070b8 <_ZNK6tflite5Model8metadataEv>
 80074d4:	4603      	mov	r3, r0
 80074d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fb11 	bl	8008b00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 80074de:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80074e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e2:	f7ff fdbe 	bl	8007062 <_ZNK6tflite8Metadata4nameEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fc fbc6 	bl	8003c7a <_ZNK11flatbuffers6String5c_strEv>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2217      	movs	r2, #23
 80074f2:	4921      	ldr	r1, [pc, #132]	; (8007578 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 80074f4:	4618      	mov	r0, r3
 80074f6:	f00a f905 	bl	8011704 <strncmp>
 80074fa:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007506:	2b00      	cmp	r3, #0
 8007508:	d02c      	beq.n	8007564 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800750a:	68b8      	ldr	r0, [r7, #8]
 800750c:	f7ff fdc6 	bl	800709c <_ZNK6tflite5Model7buffersEv>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8007512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007514:	f7ff fdb3 	bl	800707e <_ZNK6tflite8Metadata6bufferEv>
 8007518:	4603      	mov	r3, r0
 800751a:	4619      	mov	r1, r3
 800751c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800751e:	f001 fb23 	bl	8008b68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8007522:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8007524:	6a38      	ldr	r0, [r7, #32]
 8007526:	f7ff fd8e 	bl	8007046 <_ZNK6tflite6Buffer4dataEv>
 800752a:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800752c:	69f8      	ldr	r0, [r7, #28]
 800752e:	f001 fb29 	bl	8008b84 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8007532:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	3308      	adds	r3, #8
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	429a      	cmp	r2, r3
 800754e:	d009      	beq.n	8007564 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68d8      	ldr	r0, [r3, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4908      	ldr	r1, [pc, #32]	; (800757c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800755c:	f7fc fb4e 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8007560:	2301      	movs	r3, #1
 8007562:	e004      	b.n	800756e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	3301      	adds	r3, #1
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800756a:	e7a0      	b.n	80074ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3730      	adds	r7, #48	; 0x30
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	0801718c 	.word	0x0801718c
 800757c:	08013728 	.word	0x08013728

08007580 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8007580:	b480      	push	{r7}
 8007582:	b089      	sub	sp, #36	; 0x24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	4413      	add	r3, r2
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d232      	bcs.n	8007608 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4413      	add	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	4613      	mov	r3, r2
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	4413      	add	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	440b      	add	r3, r1
 80075d2:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f8:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2201      	movs	r2, #1
 80075fe:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	3301      	adds	r3, #1
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	e7c4      	b.n	8007592 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3724      	adds	r7, #36	; 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007616:	b590      	push	{r4, r7, lr}
 8007618:	b08b      	sub	sp, #44	; 0x2c
 800761a:	af02      	add	r7, sp, #8
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d247      	bcs.n	80076c0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	4613      	mov	r3, r2
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4413      	add	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4413      	add	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d036      	beq.n	80076b8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2110      	movs	r1, #16
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fb25 	bl	8006ca0 <_ZN6tflite11AlignSizeUpEjj>
 8007656:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007660:	d114      	bne.n	800768c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	681c      	ldr	r4, [r3, #0]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6899      	ldr	r1, [r3, #8]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	460b      	mov	r3, r1
 8007678:	68f9      	ldr	r1, [r7, #12]
 800767a:	68b8      	ldr	r0, [r7, #8]
 800767c:	47a0      	blx	r4
 800767e:	4603      	mov	r3, r0
 8007680:	74bb      	strb	r3, [r7, #18]
 8007682:	7cbb      	ldrb	r3, [r7, #18]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d017      	beq.n	80076b8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007688:	7cbb      	ldrb	r3, [r7, #18]
 800768a:	e01a      	b.n	80076c2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6898      	ldr	r0, [r3, #8]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	6912      	ldr	r2, [r2, #16]
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	460a      	mov	r2, r1
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	68b8      	ldr	r0, [r7, #8]
 80076a6:	f008 fe15 	bl	80102d4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80076aa:	4603      	mov	r3, r0
 80076ac:	74fb      	strb	r3, [r7, #19]
 80076ae:	7cfb      	ldrb	r3, [r7, #19]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	e004      	b.n	80076c2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e7b3      	b.n	8007628 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3724      	adds	r7, #36	; 0x24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd90      	pop	{r4, r7, pc}

080076ca <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80076ca:	b590      	push	{r4, r7, lr}
 80076cc:	b08b      	sub	sp, #44	; 0x2c
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80076dc:	2300      	movs	r3, #0
 80076de:	623b      	str	r3, [r7, #32]
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d22e      	bcs.n	8007746 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 80076e8:	6a3a      	ldr	r2, [r7, #32]
 80076ea:	4613      	mov	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	461a      	mov	r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	4413      	add	r3, r2
 80076f8:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	7d1b      	ldrb	r3, [r3, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01d      	beq.n	800773e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8007702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007706:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3314      	adds	r3, #20
 800770e:	681c      	ldr	r4, [r3, #0]
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	68b8      	ldr	r0, [r7, #8]
 800771a:	47a0      	blx	r4
 800771c:	4603      	mov	r3, r0
 800771e:	76fb      	strb	r3, [r7, #27]
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8007726:	7efb      	ldrb	r3, [r7, #27]
 8007728:	e00e      	b.n	8007748 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4619      	mov	r1, r3
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	440a      	add	r2, r1
 8007736:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	3301      	adds	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	3301      	adds	r3, #1
 8007742:	623b      	str	r3, [r7, #32]
 8007744:	e7cc      	b.n	80076e0 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	372c      	adds	r7, #44	; 0x2c
 800774c:	46bd      	mov	sp, r7
 800774e:	bd90      	pop	{r4, r7, pc}

08007750 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fbfa 	bl	8006f58 <_ZNK6tflite6Tensor6bufferEv>
 8007764:	4603      	mov	r3, r0
 8007766:	4619      	mov	r1, r3
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f001 f9fd 	bl	8008b68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800776e:	6138      	str	r0, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d015      	beq.n	80077a2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8007776:	6938      	ldr	r0, [r7, #16]
 8007778:	f7ff fc65 	bl	8007046 <_ZNK6tflite6Buffer4dataEv>
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00e      	beq.n	80077a2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 f8a4 	bl	80088d2 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf14      	ite	ne
 8007790:	2301      	movne	r3, #1
 8007792:	2300      	moveq	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 f9f2 	bl	8008b84 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80077a0:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80077a2:	697b      	ldr	r3, [r7, #20]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80077ac:	b590      	push	{r4, r7, lr}
 80077ae:	b08d      	sub	sp, #52	; 0x34
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	460b      	mov	r3, r1
 80077ba:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 80077c2:	f009 faec 	bl	8010d9e <abort>

  *result = {};
 80077c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c8:	4618      	mov	r0, r3
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	461a      	mov	r2, r3
 80077ce:	2100      	movs	r1, #0
 80077d0:	f009 fb84 	bl	8010edc <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff f989 	bl	8006aec <_ZNK6tflite6Tensor4typeEv>
 80077da:	4603      	mov	r3, r0
 80077dc:	4618      	mov	r0, r3
 80077de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7fc fc5a 	bl	800409c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 80077f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077fa:	e127      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fbc8 	bl	8006f92 <_ZNK6tflite6Tensor11is_variableEv>
 8007802:	4603      	mov	r3, r0
 8007804:	461a      	mov	r2, r3
 8007806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007808:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff9e 	bl	8007750 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007814:	4602      	mov	r2, r0
 8007816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007818:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800781a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8007822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007824:	2202      	movs	r2, #2
 8007826:	751a      	strb	r2, [r3, #20]
 8007828:	e002      	b.n	8007830 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800782a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782c:	2201      	movs	r2, #1
 800782e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8007830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007832:	f103 0118 	add.w	r1, r3, #24
 8007836:	f107 0210 	add.w	r2, r7, #16
 800783a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fab3 	bl	8006da8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007848:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8007850:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007854:	e0fa      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f93a 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800786c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786e:	4a79      	ldr	r2, [pc, #484]	; (8007a54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 8007870:	609a      	str	r2, [r3, #8]
 8007872:	e013      	b.n	800789c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff f92b 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 800787a:	4602      	mov	r2, r0
 800787c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787e:	3308      	adds	r3, #8
 8007880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f001 f98a 	bl	8008b9c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800788e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8007896:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800789a:	e0d7      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fb6a 	bl	8006f76 <_ZNK6tflite6Tensor12quantizationEv>
 80078a2:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d021      	beq.n	80078ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 80078aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ac:	f7ff fb29 	bl	8006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01b      	beq.n	80078ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 80078b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078b8:	f7ff fb23 	bl	8006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80078bc:	4603      	mov	r3, r0
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 f815 	bl	80088ee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80078c4:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 80078ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078cc:	f7ff fb27 	bl	8006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80078d0:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 80078d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d8:	f7ff fb21 	bl	8006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80078dc:	4603      	mov	r3, r0
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f83c 	bl	800895c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80078e4:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 80078ee:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80aa 	beq.w	8007a4a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 80078f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f8:	f7ff fb03 	bl	8006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f001 f803 	bl	800890c <_ZNK11flatbuffers6VectorIfE3GetEm>
 8007906:	eef0 7a40 	vmov.f32	s15, s0
 800790a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8007910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007912:	f7ff fb04 	bl	8006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007916:	4603      	mov	r3, r0
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f82c 	bl	8008978 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
    result->params.zero_point =
 8007924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007926:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8007928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792a:	f7ff faea 	bl	8006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>
 800792e:	4603      	mov	r3, r0
 8007930:	4618      	mov	r0, r3
 8007932:	f000 ffdc 	bl	80088ee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007936:	4603      	mov	r3, r0
 8007938:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3310      	adds	r3, #16
 8007946:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8007948:	2204      	movs	r2, #4
 800794a:	210c      	movs	r1, #12
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	4798      	blx	r3
 8007950:	4603      	mov	r3, r0
 8007952:	e008      	b.n	8007966 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800795c:	2204      	movs	r2, #4
 800795e:	210c      	movs	r1, #12
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	4798      	blx	r3
 8007964:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8007966:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800796e:	493a      	ldr	r1, [pc, #232]	; (8007a58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8007970:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007972:	f7fc f943 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8007976:	2301      	movs	r3, #1
 8007978:	e068      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3310      	adds	r3, #16
 8007986:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8007988:	6a38      	ldr	r0, [r7, #32]
 800798a:	f7fc f8ad 	bl	8003ae8 <TfLiteIntArrayGetSizeInBytes>
 800798e:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8007990:	2204      	movs	r2, #4
 8007992:	4619      	mov	r1, r3
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	47a0      	blx	r4
 8007998:	4603      	mov	r3, r0
 800799a:	e00c      	b.n	80079b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80079a4:	6a38      	ldr	r0, [r7, #32]
 80079a6:	f7fc f89f 	bl	8003ae8 <TfLiteIntArrayGetSizeInBytes>
 80079aa:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 80079ac:	2204      	movs	r2, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	47a0      	blx	r4
 80079b4:	4603      	mov	r3, r0
    quantization->zero_point =
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 80079c2:	4926      	ldr	r1, [pc, #152]	; (8007a5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 80079c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079c6:	f7fc f919 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e03e      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80079ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079d0:	f7ff fa97 	bl	8006f02 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80079d4:	4602      	mov	r2, r0
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f001 f8f7 	bl	8008bce <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80079e0:	4603      	mov	r3, r0
 80079e2:	76fb      	strb	r3, [r7, #27]
 80079e4:	7efb      	ldrb	r3, [r7, #27]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 80079ea:	7efb      	ldrb	r3, [r7, #27]
 80079ec:	e02e      	b.n	8007a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 80079fe:	2300      	movs	r3, #0
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	da12      	bge.n	8007a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8007a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0c:	f7ff fa87 	bl	8006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007a10:	4602      	mov	r2, r0
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f000 ffae 	bl	8008978 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4413      	add	r3, r2
 8007a24:	4602      	mov	r2, r0
 8007a26:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2e:	e7e8      	b.n	8007a02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8007a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a32:	f7ff fa82 	bl	8006f3a <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8007a36:	4602      	mov	r2, r0
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8007a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3734      	adds	r7, #52	; 0x34
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd90      	pop	{r4, r7, pc}
 8007a54:	080171a4 	.word	0x080171a4
 8007a58:	08013774 	.word	0x08013774
 8007a5c:	080137a4 	.word	0x080137a4

08007a60 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
  *result = {};
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	461a      	mov	r2, r3
 8007a72:	2300      	movs	r3, #0
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	6053      	str	r3, [r2, #4]
 8007a78:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007a7a:	68b8      	ldr	r0, [r7, #8]
 8007a7c:	f7ff f836 	bl	8006aec <_ZNK6tflite6Tensor4typeEv>
 8007a80:	4603      	mov	r3, r0
 8007a82:	4618      	mov	r0, r3
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	3308      	adds	r3, #8
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f7fc fb06 	bl	800409c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	e027      	b.n	8007aee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7ff fe55 	bl	8007750 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8007aac:	68b8      	ldr	r0, [r7, #8]
 8007aae:	f7ff f80f 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8007ac6:	605a      	str	r2, [r3, #4]
 8007ac8:	e010      	b.n	8007aec <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007aca:	68b8      	ldr	r0, [r7, #8]
 8007acc:	f7ff f800 	bl	8006ad0 <_ZNK6tflite6Tensor5shapeEv>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f001 f85f 	bl	8008b9c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75bb      	strb	r3, [r7, #22]
 8007ae2:	7dbb      	ldrb	r3, [r7, #22]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8007ae8:	7dbb      	ldrb	r3, [r7, #22]
 8007aea:	e000      	b.n	8007aee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	080171a4 	.word	0x080171a4

08007afc <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	741a      	strb	r2, [r3, #16]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	615a      	str	r2, [r3, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	080171c8 	.word	0x080171c8

08007b40 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	4a04      	ldr	r2, [pc, #16]	; (8007b5c <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	080171c8 	.word	0x080171c8

08007b60 <_ZN6tflite14MicroAllocatorD0Ev>:
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ffe9 	bl	8007b40 <_ZN6tflite14MicroAllocatorD1Ev>
 8007b6e:	211c      	movs	r1, #28
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f008 fe8e 	bl	8010892 <_ZdlPvj>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff f857 	bl	8006c42 <_ZN6tflite14AlignPointerUpEPhj>
 8007b94:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	441a      	add	r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	6979      	ldr	r1, [r7, #20]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f003 f806 	bl	800abb8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8007bac:	4603      	mov	r3, r0
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f805 	bl	8007bc0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007bb6:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8007bd0:	f009 f8e5 	bl	8010d9e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8007bda:	f009 f8e0 	bl	8010d9e <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8007be6:	2204      	movs	r2, #4
 8007be8:	211c      	movs	r1, #28
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
 8007bee:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	201c      	movs	r0, #28
 8007bf6:	f7fc f834 	bl	8003c62 <_ZnwjPv>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7ff ff7b 	bl	8007afc <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007c06:	60bc      	str	r4, [r7, #8]
  return allocator;
 8007c08:	68bb      	ldr	r3, [r7, #8]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd90      	pop	{r4, r7, pc}
	...

08007c14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8007c24:	f009 f8bb 	bl	8010d9e <abort>

  if (model_is_allocating_) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7c1b      	ldrb	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4936      	ldr	r1, [pc, #216]	; (8007d10 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fb ffe0 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e063      	b.n	8007d08 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6858      	ldr	r0, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007c54:	2204      	movs	r2, #4
 8007c56:	2108      	movs	r1, #8
 8007c58:	4798      	blx	r3
 8007c5a:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 8007c5c:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 8007c5e:	4619      	mov	r1, r3
 8007c60:	2008      	movs	r0, #8
 8007c62:	f7fb fffe 	bl	8003c62 <_ZnwjPv>
 8007c66:	4604      	mov	r4, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fa60 	bl	8007134 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fd6b 	bl	8008754 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e03a      	b.n	8007d08 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685d      	ldr	r5, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8007ca0:	6838      	ldr	r0, [r7, #0]
 8007ca2:	f7fe fe03 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fe6f 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47a0      	blx	r4
 8007cba:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8007cc2:	4814      	ldr	r0, [pc, #80]	; (8007d14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 8007cc4:	f001 f98e 	bl	8008fe4 <_Z11MicroPrintfPKcz>
    return nullptr;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e01d      	b.n	8007d08 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	331c      	adds	r3, #28
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e000      	b.n	8007d08 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 8007d06:	68bb      	ldr	r3, [r7, #8]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d10:	080137d4 	.word	0x080137d4
 8007d14:	0801382c 	.word	0x0801382c

08007d18 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b08b      	sub	sp, #44	; 0x2c
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	7c1b      	ldrb	r3, [r3, #16]
 8007d2a:	f083 0301 	eor.w	r3, r3, #1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4936      	ldr	r1, [pc, #216]	; (8007e14 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fb ff5e 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e062      	b.n	8007e0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	68b8      	ldr	r0, [r7, #8]
 8007d4a:	f7fe fdaf 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fe1b 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007d56:	4602      	mov	r2, r0
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf34      	ite	cc
 8007d5e:	2301      	movcc	r3, #1
 8007d60:	2300      	movcs	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d04c      	beq.n	8007e02 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f7fe fd9f 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	69f9      	ldr	r1, [r7, #28]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fe18 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007d78:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 8007d80:	f009 f80d 	bl	8010d9e <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3330      	adds	r3, #48	; 0x30
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	6952      	ldr	r2, [r2, #20]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	4798      	blx	r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	e032      	b.n	8007e0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	332c      	adds	r3, #44	; 0x2c
 8007daa:	681c      	ldr	r4, [r3, #0]
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6819      	ldr	r1, [r3, #0]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	47a0      	blx	r4
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75bb      	strb	r3, [r7, #22]
 8007dca:	7dbb      	ldrb	r3, [r7, #22]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 8007dd0:	7dbb      	ldrb	r3, [r7, #22]
 8007dd2:	e01a      	b.n	8007e0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3320      	adds	r3, #32
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	00d2      	lsls	r2, r2, #3
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	440a      	add	r2, r1
 8007de4:	6852      	ldr	r2, [r2, #4]
 8007de6:	69b9      	ldr	r1, [r7, #24]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	757b      	strb	r3, [r7, #21]
 8007df0:	7d7b      	ldrb	r3, [r7, #21]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 8007df6:	7d7b      	ldrb	r3, [r7, #21]
 8007df8:	e007      	b.n	8007e0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e7a2      	b.n	8007d48 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3724      	adds	r7, #36	; 0x24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd90      	pop	{r4, r7, pc}
 8007e12:	bf00      	nop
 8007e14:	0801385c 	.word	0x0801385c

08007e18 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6858      	ldr	r0, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2210      	movs	r2, #16
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	4798      	blx	r3
 8007e36:	4603      	mov	r3, r0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fc9d 	bl	800878e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007e54:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d20e      	bcs.n	8007e86 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e76:	d102      	bne.n	8007e7e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	e7eb      	b.n	8007e5e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b0b      	cmp	r3, #11
 8007e8a:	d908      	bls.n	8007e9e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	220c      	movs	r2, #12
 8007e92:	4913      	ldr	r1, [pc, #76]	; (8007ee0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb feb1 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e01c      	b.n	8007ed8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	461a      	mov	r2, r3
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec0:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	080138a8 	.word	0x080138a8

08007ee4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc47 	bl	800878e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007f00:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d211      	bcs.n	8007f34 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f1e:	d105      	bne.n	8007f2c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e7e8      	b.n	8007f06 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6858      	ldr	r0, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6952      	ldr	r2, [r2, #20]
 8007f46:	320c      	adds	r2, #12
 8007f48:	00d1      	lsls	r1, r2, #3
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	4798      	blx	r3
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	e000      	b.n	8007f5e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8007f7a:	f008 ff10 	bl	8010d9e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f7fe fc92 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fcfe 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007f90:	4602      	mov	r2, r0
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bf34      	ite	cc
 8007f98:	2301      	movcc	r3, #1
 8007f9a:	2300      	movcs	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d034      	beq.n	800800c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007fa2:	68b8      	ldr	r0, [r7, #8]
 8007fa4:	f7fe fc82 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	69f9      	ldr	r1, [r7, #28]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fcfb 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007fb2:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8007fba:	f008 fef0 	bl	8010d9e <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007fbe:	69b8      	ldr	r0, [r7, #24]
 8007fc0:	f7fe fc82 	bl	80068c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8007fc4:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6858      	ldr	r0, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	212c      	movs	r1, #44	; 0x2c
 8007fd8:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 8007fdc:	2204      	movs	r2, #4
 8007fde:	4798      	blx	r3
 8007fe0:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d107      	bne.n	8007ff8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	490a      	ldr	r1, [pc, #40]	; (8008018 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fb fe04 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e00a      	b.n	800800e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4413      	add	r3, r2
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3301      	adds	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e7ba      	b.n	8007f82 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	080138e0 	.word	0x080138e0

0800801c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b089      	sub	sp, #36	; 0x24
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800802a:	68b8      	ldr	r0, [r7, #8]
 800802c:	f7fe fc3e 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8008030:	4602      	mov	r2, r0
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f7fe fcb6 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800803c:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008044:	f008 feab 	bl	8010d9e <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3324      	adds	r3, #36	; 0x24
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	4798      	blx	r3
 8008054:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3328      	adds	r3, #40	; 0x28
 800805c:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800805e:	2300      	movs	r3, #0
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	47a0      	blx	r4
 8008070:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 8008072:	2b00      	cmp	r3, #0
 8008074:	bf14      	ite	ne
 8008076:	2301      	movne	r3, #1
 8008078:	2300      	moveq	r3, #0
 800807a:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	4914      	ldr	r1, [pc, #80]	; (80080d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 8008086:	4618      	mov	r0, r3
 8008088:	f7fb fdb8 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800808c:	2300      	movs	r3, #0
 800808e:	e01f      	b.n	80080d0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01b      	beq.n	80080ce <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	6859      	ldr	r1, [r3, #4]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80080ce:	693b      	ldr	r3, [r7, #16]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd90      	pop	{r4, r7, pc}
 80080d8:	08013918 	.word	0x08013918

080080dc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b089      	sub	sp, #36	; 0x24
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f7fe fbde 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f7fe fc56 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80080fc:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008104:	f008 fe4b 	bl	8010d9e <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6858      	ldr	r0, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3310      	adds	r3, #16
 8008114:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8008116:	2204      	movs	r2, #4
 8008118:	2140      	movs	r1, #64	; 0x40
 800811a:	4798      	blx	r3
 800811c:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3328      	adds	r3, #40	; 0x28
 8008124:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008126:	2301      	movs	r3, #1
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	47a0      	blx	r4
 8008138:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800813a:	2b00      	cmp	r3, #0
 800813c:	bf14      	ite	ne
 800813e:	2301      	movne	r3, #1
 8008140:	2300      	moveq	r3, #0
 8008142:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	4914      	ldr	r1, [pc, #80]	; (80081a0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800814e:	4618      	mov	r0, r3
 8008150:	f7fb fd54 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 8008154:	2300      	movs	r3, #0
 8008156:	e01f      	b.n	8008198 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01b      	beq.n	8008196 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	6859      	ldr	r1, [r3, #4]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	4613      	mov	r3, r2
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	6859      	ldr	r1, [r3, #4]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	4613      	mov	r3, r2
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8008196:	693b      	ldr	r3, [r7, #16]
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd90      	pop	{r4, r7, pc}
 80081a0:	08013964 	.word	0x08013964

080081a4 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3314      	adds	r3, #20
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4610      	mov	r0, r2
 80081bc:	4798      	blx	r3
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80081da:	f008 fde0 	bl	8010d9e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80081de:	2300      	movs	r3, #0
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	f7fe fb62 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 80081e8:	4603      	mov	r3, r0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fbce 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	4293      	cmp	r3, r2
 80081f6:	bf34      	ite	cc
 80081f8:	2301      	movcc	r3, #1
 80081fa:	2300      	movcs	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d076      	beq.n	80082f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8008202:	68b8      	ldr	r0, [r7, #8]
 8008204:	f7fe fb52 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8008208:	4603      	mov	r3, r0
 800820a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fbcb 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008212:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800821a:	f008 fdc0 	bl	8010d9e <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800821e:	69f8      	ldr	r0, [r7, #28]
 8008220:	f7fe fee7 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 8008224:	4603      	mov	r3, r0
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fbce 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800822c:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6858      	ldr	r0, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	4613      	mov	r3, r2
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	2204      	movs	r2, #4
 8008248:	4619      	mov	r1, r3
 800824a:	47a0      	blx	r4
 800824c:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10c      	bne.n	800826e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68d8      	ldr	r0, [r3, #12]
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4613      	mov	r3, r2
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	461a      	mov	r2, r3
 8008264:	4925      	ldr	r1, [pc, #148]	; (80082fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 8008266:	f7fb fcc9 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800826a:	2301      	movs	r3, #1
 800826c:	e041      	b.n	80082f2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800826e:	2300      	movs	r3, #0
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	429a      	cmp	r2, r3
 8008278:	d230      	bcs.n	80082dc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800827e:	69f8      	ldr	r0, [r7, #28]
 8008280:	f7fe feb7 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 8008284:	4603      	mov	r3, r0
 8008286:	6a39      	ldr	r1, [r7, #32]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fbab 	bl	80089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800828e:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8008290:	68b8      	ldr	r0, [r7, #8]
 8008292:	f7fe ff03 	bl	800709c <_ZNK6tflite5Model7buffersEv>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	4413      	add	r3, r2
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	460b      	mov	r3, r1
 80082ae:	4602      	mov	r2, r0
 80082b0:	4629      	mov	r1, r5
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fbd4 	bl	8007a60 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 80082b8:	4603      	mov	r3, r0
 80082ba:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	490d      	ldr	r1, [pc, #52]	; (8008300 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fb fc96 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e00e      	b.n	80082f2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	3301      	adds	r3, #1
 80082d8:	623b      	str	r3, [r7, #32]
 80082da:	e7ca      	b.n	8008272 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4413      	add	r3, r2
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	3301      	adds	r3, #1
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
 80082ee:	e778      	b.n	80081e2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3728      	adds	r7, #40	; 0x28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bdb0      	pop	{r4, r5, r7, pc}
 80082fa:	bf00      	nop
 80082fc:	080139a8 	.word	0x080139a8
 8008300:	080139f0 	.word	0x080139f0

08008304 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8008304:	b5b0      	push	{r4, r5, r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	68b8      	ldr	r0, [r7, #8]
 8008316:	f7fe fe6c 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 800831a:	4603      	mov	r3, r0
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fb53 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008322:	4602      	mov	r2, r0
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4293      	cmp	r3, r2
 8008328:	bf34      	ite	cc
 800832a:	2301      	movcc	r3, #1
 800832c:	2300      	movcs	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d04f      	beq.n	80083d4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8008334:	68b8      	ldr	r0, [r7, #8]
 8008336:	f7fe fe5c 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 800833a:	4603      	mov	r3, r0
 800833c:	69f9      	ldr	r1, [r7, #28]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb50 	bl	80089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008344:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8008346:	69b8      	ldr	r0, [r7, #24]
 8008348:	f7fe fe23 	bl	8006f92 <_ZNK6tflite6Tensor11is_variableEv>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d03c      	beq.n	80083cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	4613      	mov	r3, r2
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4413      	add	r3, r2
 8008362:	f107 0210 	add.w	r2, r7, #16
 8008366:	4611      	mov	r1, r2
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fd7e 	bl	8006e6a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	e02c      	b.n	80083d6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6858      	ldr	r0, [r3, #4]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	681d      	ldr	r5, [r3, #0]
 800838a:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	4613      	mov	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800839c:	2210      	movs	r2, #16
 800839e:	47a8      	blx	r5
 80083a0:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 80083a2:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d108      	bne.n	80083cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4907      	ldr	r1, [pc, #28]	; (80083e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fb fc1a 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e004      	b.n	80083d6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
 80083d2:	e79f      	b.n	8008314 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bdb0      	pop	{r4, r5, r7, pc}
 80083de:	bf00      	nop
 80083e0:	08013a10 	.word	0x08013a10

080083e4 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6858      	ldr	r0, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80083fa:	2204      	movs	r2, #4
 80083fc:	2140      	movs	r1, #64	; 0x40
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 800840a:	b5b0      	push	{r4, r5, r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af02      	add	r7, sp, #8
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f7fe fa45 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8008422:	4602      	mov	r2, r0
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f7fe fabd 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800842e:	4603      	mov	r3, r0
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fdde 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 8008436:	4602      	mov	r2, r0
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f000 fad1 	bl	80089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008442:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008444:	68b8      	ldr	r0, [r7, #8]
 8008446:	f7fe fe29 	bl	800709c <_ZNK6tflite5Model7buffersEv>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	9201      	str	r2, [sp, #4]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4603      	mov	r3, r0
 800845a:	462a      	mov	r2, r5
 800845c:	4620      	mov	r0, r4
 800845e:	f7ff f9a5 	bl	80077ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8008462:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bdb0      	pop	{r4, r5, r7, pc}

0800846c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b0a5      	sub	sp, #148	; 0x94
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8008480:	68b8      	ldr	r0, [r7, #8]
 8008482:	f7fe fa13 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8008486:	4602      	mov	r2, r0
 8008488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fa8a 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008494:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 8008498:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800849c:	f7fe fda9 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fa90 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80084a8:	4602      	mov	r2, r0
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	4413      	add	r3, r2
 80084b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80084b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084b4:	4613      	mov	r3, r2
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	4413      	add	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6858      	ldr	r0, [r3, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3310      	adds	r3, #16
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2204      	movs	r2, #4
 80084ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80084d0:	4798      	blx	r3
 80084d2:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 80084d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084e0:	4985      	ldr	r1, [pc, #532]	; (80086f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fb fb8a 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80084e8:	2401      	movs	r4, #1
 80084ea:	e0ff      	b.n	80086ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 80084ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80084f0:	f7fe fd7f 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fa66 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80084fc:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	460a      	mov	r2, r1
 8008510:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008512:	f7fe fe45 	bl	80071a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8008516:	2300      	movs	r3, #0
 8008518:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 800851a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800851e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe ffaf 	bl	8007488 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008530:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8008538:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 800853c:	e0d6      	b.n	80086ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800853e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008540:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800854a:	f7fe fe43 	bl	80071d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8008554:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 800855c:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 8008560:	e0c4      	b.n	80086ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f913 	bl	800878e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008568:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800856a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff f804 	bl	8007580 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800857e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 8008586:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800858a:	e0af      	b.n	80086ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2110      	movs	r1, #16
 8008592:	4618      	mov	r0, r3
 8008594:	f002 fc26 	bl	800ade4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8008598:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6858      	ldr	r0, [r3, #4]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3310      	adds	r3, #16
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2210      	movs	r2, #16
 80085aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085ac:	4798      	blx	r3
 80085ae:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80085b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10e      	bne.n	80085d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68d8      	ldr	r0, [r3, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68d9      	ldr	r1, [r3, #12]
 80085be:	4b4f      	ldr	r3, [pc, #316]	; (80086fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	f240 33d2 	movw	r3, #978	; 0x3d2
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	4b4d      	ldr	r3, [pc, #308]	; (8008700 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 80085ca:	4a4e      	ldr	r2, [pc, #312]	; (8008704 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 80085cc:	f7fb fb2f 	bl	8003c2e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80085d0:	2401      	movs	r4, #1
 80085d2:	e08b      	b.n	80086ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80085d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085d6:	f107 0314 	add.w	r3, r7, #20
 80085da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80085dc:	4618      	mov	r0, r3
 80085de:	f007 fdcb 	bl	8010178 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68d8      	ldr	r0, [r3, #12]
 80085e6:	f107 0114 	add.w	r1, r7, #20
 80085ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085ee:	f7ff f812 	bl	8007616 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 8008600:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8008604:	e06d      	b.n	80086e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2110      	movs	r1, #16
 800861e:	4618      	mov	r0, r3
 8008620:	f002 fbe0 	bl	800ade4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8008624:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8008626:	f107 0314 	add.w	r3, r7, #20
 800862a:	4618      	mov	r0, r3
 800862c:	f008 f85d 	bl	80106ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008630:	4602      	mov	r2, r0
 8008632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008634:	4293      	cmp	r3, r2
 8008636:	bf34      	ite	cc
 8008638:	2301      	movcc	r3, #1
 800863a:	2300      	movcs	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68dc      	ldr	r4, [r3, #12]
 8008646:	f107 0314 	add.w	r3, r7, #20
 800864a:	4618      	mov	r0, r3
 800864c:	f008 f84d 	bl	80106ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008650:	4602      	mov	r2, r0
 8008652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008654:	492c      	ldr	r1, [pc, #176]	; (8008708 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 8008656:	4620      	mov	r0, r4
 8008658:	f7fb fad0 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800865c:	2401      	movs	r4, #1
 800865e:	e040      	b.n	80086e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68dc      	ldr	r4, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4618      	mov	r0, r3
 800866a:	f002 fbaf 	bl	800adcc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800866e:	4602      	mov	r2, r0
 8008670:	f107 0114 	add.w	r1, r7, #20
 8008674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800867a:	4620      	mov	r0, r4
 800867c:	f7ff f825 	bl	80076ca <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 800868e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8008692:	e026      	b.n	80086e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 8008694:	f107 0314 	add.w	r3, r7, #20
 8008698:	4618      	mov	r0, r3
 800869a:	f008 f826 	bl	80106ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800869e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d903      	bls.n	80086b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086b4:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6858      	ldr	r0, [r3, #4]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3308      	adds	r3, #8
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	6991      	ldr	r1, [r2, #24]
 80086c8:	2210      	movs	r2, #16
 80086ca:	4798      	blx	r3
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80086d2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 80086da:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 80086de:	e000      	b.n	80086e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 80086e0:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	4618      	mov	r0, r3
 80086e8:	f007 fd98 	bl	801021c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80086ec:	4623      	mov	r3, r4
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	378c      	adds	r7, #140	; 0x8c
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd90      	pop	{r4, r7, pc}
 80086f6:	bf00      	nop
 80086f8:	08013a40 	.word	0x08013a40
 80086fc:	08013ad8 	.word	0x08013ad8
 8008700:	08013a84 	.word	0x08013a84
 8008704:	08013ac0 	.word	0x08013ac0
 8008708:	08013af4 	.word	0x08013af4

0800870c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800871e:	f008 fb3e 	bl	8010d9e <abort>

  if (scratch_buffer_request_count_ == 0) {
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800872a:	2300      	movs	r3, #0
 800872c:	e00e      	b.n	800874c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6858      	ldr	r0, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	0091      	lsls	r1, r2, #2
 8008740:	2204      	movs	r2, #4
 8008742:	4798      	blx	r3
 8008744:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6858      	ldr	r0, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2204      	movs	r2, #4
 8008772:	2160      	movs	r1, #96	; 0x60
 8008774:	4798      	blx	r3
 8008776:	4603      	mov	r3, r0
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	e000      	b.n	8008786 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4618      	mov	r0, r3
 800879c:	f002 fb16 	bl	800adcc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2104      	movs	r1, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fa4c 	bl	8006c42 <_ZN6tflite14AlignPointerUpEPhj>
 80087aa:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6858      	ldr	r0, [r3, #4]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68d9      	ldr	r1, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	f000 f9e6 	bl	8008b9c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80087d0:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80087fe:	887b      	ldrh	r3, [r7, #2]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9fc 	bl	8008c00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008808:	4603      	mov	r3, r0
  }
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa0c 	bl	8008c40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8008828:	4603      	mov	r3, r0
  }
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800883e:	887b      	ldrh	r3, [r7, #2]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa1c 	bl	8008c80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008848:	4603      	mov	r3, r0
  }
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800885e:	887b      	ldrh	r3, [r7, #2]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa2c 	bl	8008cc0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8008868:	4603      	mov	r3, r0
  }
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800887e:	887b      	ldrh	r3, [r7, #2]
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa3c 	bl	8008d00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8008888:	4603      	mov	r3, r0
  }
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800889e:	887b      	ldrh	r3, [r7, #2]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa4c 	bl	8008d40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80088a8:	4603      	mov	r3, r0
  }
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088be:	887b      	ldrh	r3, [r7, #2]
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa5c 	bl	8008d80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 80088c8:	4603      	mov	r3, r0
  }
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 f86b 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80088e4:	4603      	mov	r3, r0
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f9 f85d 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008900:	4603      	mov	r3, r0
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ffe9 	bl	80088ee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800891c:	4602      	mov	r2, r0
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4293      	cmp	r3, r2
 8008922:	d306      	bcc.n	8008932 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8008926:	4a0b      	ldr	r2, [pc, #44]	; (8008954 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8008928:	f44f 7183 	mov.w	r1, #262	; 0x106
 800892c:	480a      	ldr	r0, [pc, #40]	; (8008958 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800892e:	f008 fa3d 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa66 	bl	8008e04 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8008938:	4603      	mov	r3, r0
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fa4b 	bl	8008dd8 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8008942:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008946:	eeb0 0a67 	vmov.f32	s0, s15
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	08013b44 	.word	0x08013b44
 8008954:	08013b50 	.word	0x08013b50
 8008958:	08013c18 	.word	0x08013c18

0800895c <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7f9 f826 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800896e:	4603      	mov	r3, r0
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ffea 	bl	800895c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8008988:	4602      	mov	r2, r0
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	4293      	cmp	r3, r2
 800898e:	d306      	bcc.n	800899e <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8008992:	4a0b      	ldr	r2, [pc, #44]	; (80089c0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8008994:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008998:	480a      	ldr	r0, [pc, #40]	; (80089c4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800899a:	f008 fa07 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa52 	bl	8008e48 <_ZNK11flatbuffers6VectorIxE4DataEv>
 80089a4:	4603      	mov	r3, r0
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fa37 	bl	8008e1c <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
  }
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	08013b44 	.word	0x08013b44
 80089c0:	08013ca8 	.word	0x08013ca8
 80089c4:	08013c18 	.word	0x08013c18

080089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7f8 fff0 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80089da:	4603      	mov	r3, r0
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ffea 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80089f4:	4602      	mov	r2, r0
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d306      	bcc.n	8008a0a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 80089fe:	4a0a      	ldr	r2, [pc, #40]	; (8008a28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8008a00:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a04:	4809      	ldr	r0, [pc, #36]	; (8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8008a06:	f008 f9d1 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa3c 	bl	8008e88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8008a10:	4603      	mov	r3, r0
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fa23 	bl	8008e60 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8008a1a:	4603      	mov	r3, r0
  }
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08013b44 	.word	0x08013b44
 8008a28:	08013e50 	.word	0x08013e50
 8008a2c:	08013c18 	.word	0x08013c18

08008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fd ff98 	bl	8006970 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008a40:	4602      	mov	r2, r0
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d306      	bcc.n	8008a56 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8008a4a:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8008a4c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a50:	4809      	ldr	r0, [pc, #36]	; (8008a78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8008a52:	f008 f9ab 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa36 	bl	8008ec8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fa1d 	bl	8008ea0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8008a66:	4603      	mov	r3, r0
  }
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	08013b44 	.word	0x08013b44
 8008a74:	08013f48 	.word	0x08013f48
 8008a78:	08013c18 	.word	0x08013c18

08008a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7f8 ff96 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff ffea 	bl	8008a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d306      	bcc.n	8008abe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8008ab2:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8008ab4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008ab8:	4809      	ldr	r0, [pc, #36]	; (8008ae0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8008aba:	f008 f977 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa22 	bl	8008f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fa09 	bl	8008ee0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8008ace:	4603      	mov	r3, r0
  }
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	08013b44 	.word	0x08013b44
 8008adc:	08014140 	.word	0x08014140
 8008ae0:	08013c18 	.word	0x08013c18

08008ae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7f8 ff62 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008af6:	4603      	mov	r3, r0
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ffea 	bl	8008ae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008b10:	4602      	mov	r2, r0
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d306      	bcc.n	8008b26 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8008b1c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b20:	4809      	ldr	r0, [pc, #36]	; (8008b48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008b22:	f008 f943 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa0e 	bl	8008f48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f9f5 	bl	8008f20 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8008b36:	4603      	mov	r3, r0
  }
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	08013b44 	.word	0x08013b44
 8008b44:	08014238 	.word	0x08014238
 8008b48:	08013c18 	.word	0x08013c18

08008b4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7fd ff25 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ff8f 	bl	8008a98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f917 	bl	8008dc0 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008bb0:	f008 f8f5 	bl	8010d9e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008bba:	f008 f8f0 	bl	8010d9e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008be2:	f008 f8dc 	bl	8010d9e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008bec:	f008 f8d7 	bl	8010d9e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c0c:	887b      	ldrh	r3, [r7, #2]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7f8 fa29 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c16:	4603      	mov	r3, r0
 8008c18:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	4413      	add	r3, r2
 8008c20:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c22:	89fb      	ldrh	r3, [r7, #14]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f7f8 fedf 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4413      	add	r3, r2
                        : nullptr;
 8008c34:	e000      	b.n	8008c38 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c36:	2300      	movs	r3, #0
  }
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7f8 fa09 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c56:	4603      	mov	r3, r0
 8008c58:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	89fb      	ldrh	r3, [r7, #14]
 8008c5e:	4413      	add	r3, r2
 8008c60:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c62:	89fb      	ldrh	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8008c68:	68b8      	ldr	r0, [r7, #8]
 8008c6a:	f7f8 febf 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	4413      	add	r3, r2
                        : nullptr;
 8008c74:	e000      	b.n	8008c78 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c76:	2300      	movs	r3, #0
  }
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c8c:	887b      	ldrh	r3, [r7, #2]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7f8 f9e9 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c96:	4603      	mov	r3, r0
 8008c98:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	89fb      	ldrh	r3, [r7, #14]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8008ca8:	68b8      	ldr	r0, [r7, #8]
 8008caa:	f7f8 fe9f 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4413      	add	r3, r2
                        : nullptr;
 8008cb4:	e000      	b.n	8008cb8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cb6:	2300      	movs	r3, #0
  }
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008ccc:	887b      	ldrh	r3, [r7, #2]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7f8 f9c9 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008ce2:	89fb      	ldrh	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f7f8 fe7f 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4413      	add	r3, r2
                        : nullptr;
 8008cf4:	e000      	b.n	8008cf8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cf6:	2300      	movs	r3, #0
  }
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d0c:	887b      	ldrh	r3, [r7, #2]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7f8 f9a9 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d16:	4603      	mov	r3, r0
 8008d18:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	89fb      	ldrh	r3, [r7, #14]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d22:	89fb      	ldrh	r3, [r7, #14]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008d28:	68b8      	ldr	r0, [r7, #8]
 8008d2a:	f7f8 fe5f 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4413      	add	r3, r2
                        : nullptr;
 8008d34:	e000      	b.n	8008d38 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d36:	2300      	movs	r3, #0
  }
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 f989 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d56:	4603      	mov	r3, r0
 8008d58:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	89fb      	ldrh	r3, [r7, #14]
 8008d5e:	4413      	add	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d62:	89fb      	ldrh	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008d68:	68b8      	ldr	r0, [r7, #8]
 8008d6a:	f7f8 fe3f 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4413      	add	r3, r2
                        : nullptr;
 8008d74:	e000      	b.n	8008d78 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d76:	2300      	movs	r3, #0
  }
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d8c:	887b      	ldrh	r3, [r7, #2]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7f8 f969 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d96:	4603      	mov	r3, r0
 8008d98:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	89fb      	ldrh	r3, [r7, #14]
 8008d9e:	4413      	add	r3, r2
 8008da0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008da2:	89fb      	ldrh	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d006      	beq.n	8008db6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008da8:	68b8      	ldr	r0, [r7, #8]
 8008daa:	f7f8 fe1f 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008dae:	4602      	mov	r2, r0
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4413      	add	r3, r2
                        : nullptr;
 8008db4:	e000      	b.n	8008db8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008db6:	2300      	movs	r3, #0
  }
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
  }
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	edd3 7a00 	vldr	s15, [r3]
 8008dee:	eeb0 0a67 	vmov.f32	s0, s15
 8008df2:	f7fc f99b 	bl	800512c <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008df6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3304      	adds	r3, #4
  }
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	f7fd fddd 	bl	80069f4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
  }
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3304      	adds	r3, #4
  }
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7f8 fdb9 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4413      	add	r3, r2
  }
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	3304      	adds	r3, #4
  }
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7f8 fd99 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4413      	add	r3, r2
  }
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
  }
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7f8 fd79 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4413      	add	r3, r2
  }
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
  }
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7f8 fd59 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4413      	add	r3, r2
  }
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
  }
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe f8af 	bl	80070d4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	080171b0 	.word	0x080171b0

08008f84 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ffe7 	bl	8008f60 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008f92:	2108      	movs	r1, #8
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f007 fc7c 	bl	8010892 <_ZdlPvj>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b0c2      	sub	sp, #264	; 0x108
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	1d3b      	adds	r3, r7, #4
 8008fac:	6018      	str	r0, [r3, #0]
 8008fae:	463b      	mov	r3, r7
 8008fb0:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	1d3a      	adds	r2, r7, #4
 8008fb6:	f107 0008 	add.w	r0, r7, #8
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fc2:	f001 fc01 	bl	800a7c8 <MicroVsnprintf>
  DebugLog(log_buffer);
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fd fc56 	bl	800687c <DebugLog>
  DebugLog("\r\n");
 8008fd0:	4803      	ldr	r0, [pc, #12]	; (8008fe0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 8008fd2:	f7fd fc53 	bl	800687c <DebugLog>
#endif
}
 8008fd6:	bf00      	nop
 8008fd8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	08014334 	.word	0x08014334

08008fe4 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 8008fe4:	b40f      	push	{r0, r1, r2, r3}
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	607b      	str	r3, [r7, #4]
  Log(format, args);
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	6938      	ldr	r0, [r7, #16]
 8008ff6:	f7ff ffd5 	bl	8008fa4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009004:	b004      	add	sp, #16
 8009006:	4770      	bx	lr

08009008 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  Log(format, args);
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	68b8      	ldr	r0, [r7, #8]
 8009018:	f7ff ffc4 	bl	8008fa4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00c      	beq.n	8009060 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	4610      	mov	r0, r2
 8009058:	4798      	blx	r3
 800905a:	4602      	mov	r2, r0
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	601a      	str	r2, [r3, #0]
    }
  }
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6858      	ldr	r0, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	330c      	adds	r3, #12
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6812      	ldr	r2, [r2, #0]
 800908c:	4611      	mov	r1, r2
 800908e:	4798      	blx	r3
    }
  }
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d102      	bne.n	80090b0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	e007      	b.n	80090c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fc fc20 	bl	80058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80090bc:	4603      	mov	r3, r0
 80090be:	bf00      	nop
  }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 80090d6:	4a10      	ldr	r2, [pc, #64]	; (8009118 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	605a      	str	r2, [r3, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	609a      	str	r2, [r3, #8]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	611a      	str	r2, [r3, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7fd fbd3 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8009106:	4602      	mov	r2, r0
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	619a      	str	r2, [r3, #24]
  }
}
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	08017230 	.word	0x08017230

0800911c <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	4a04      	ldr	r2, [pc, #16]	; (8009138 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	08017230 	.word	0x08017230

0800913c <_ZN6tflite10MicroGraphD0Ev>:
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe9 	bl	800911c <_ZN6tflite10MicroGraphD1Ev>
 800914a:	211c      	movs	r1, #28
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f007 fba0 	bl	8010892 <_ZdlPvj>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800916a:	2300      	movs	r3, #0
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fc0a 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009178:	4602      	mov	r2, r0
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	4293      	cmp	r3, r2
 800917e:	bf34      	ite	cc
 8009180:	2301      	movcc	r3, #1
 8009182:	2300      	movcs	r3, #0
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d04f      	beq.n	800922a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800918a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fd fbb2 	bl	8006902 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800919e:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80091a0:	2300      	movs	r3, #0
 80091a2:	623b      	str	r3, [r7, #32]
 80091a4:	6a3a      	ldr	r2, [r7, #32]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d23a      	bcs.n	8009222 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	4413      	add	r3, r2
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	212c      	movs	r1, #44	; 0x2c
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	4413      	add	r3, r2
      TfLiteNode* node =
 80091c2:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4413      	add	r3, r2
              .node_and_registrations[i]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	212c      	movs	r1, #44	; 0x2c
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d106      	bne.n	80091f4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	61fb      	str	r3, [r7, #28]
 80091f2:	e004      	b.n	80091fe <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6850      	ldr	r0, [r2, #4]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	4798      	blx	r3
 8009214:	4602      	mov	r2, r0
        node->user_data =
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	3301      	adds	r3, #1
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	e7c0      	b.n	80091a4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	3301      	adds	r3, #1
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
 8009228:	e7a1      	b.n	800916e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3728      	adds	r7, #40	; 0x28
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800924a:	2300      	movs	r3, #0
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fd fb9a 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009258:	4602      	mov	r2, r0
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	4293      	cmp	r3, r2
 800925e:	bf34      	ite	cc
 8009260:	2301      	movcc	r3, #1
 8009262:	2300      	movcs	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d053      	beq.n	8009312 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800926a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7fd fb42 	bl	8006902 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800927e:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 8009280:	2300      	movs	r3, #0
 8009282:	623b      	str	r3, [r7, #32]
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	429a      	cmp	r2, r3
 800928a:	d23e      	bcs.n	800930a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691a      	ldr	r2, [r3, #16]
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	212c      	movs	r1, #44	; 0x2c
 800929c:	fb01 f303 	mul.w	r3, r1, r3
 80092a0:	4413      	add	r3, r2
      TfLiteNode* node =
 80092a2:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4413      	add	r3, r2
              .node_and_registrations[i]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	212c      	movs	r1, #44	; 0x2c
 80092b4:	fb01 f303 	mul.w	r3, r1, r3
 80092b8:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092bc:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d016      	beq.n	80092f4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	6852      	ldr	r2, [r2, #4]
 80092ce:	6979      	ldr	r1, [r7, #20]
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 80092de:	6938      	ldr	r0, [r7, #16]
 80092e0:	f7ff fedb 	bl	800909a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80092e4:	4601      	mov	r1, r0
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	480e      	ldr	r0, [pc, #56]	; (8009324 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 80092ec:	f7ff fe7a 	bl	8008fe4 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e012      	b.n	800931a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	6a3a      	ldr	r2, [r7, #32]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fdf1 	bl	8007ee4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	3301      	adds	r3, #1
 8009306:	623b      	str	r3, [r7, #32]
 8009308:	e7bc      	b.n	8009284 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	3301      	adds	r3, #1
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
 8009310:	e79d      	b.n	800924e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3728      	adds	r7, #40	; 0x28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	08014a20 	.word	0x08014a20

08009328 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	4618      	mov	r0, r3
 8009340:	f7fd fb24 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009344:	4602      	mov	r2, r0
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4293      	cmp	r3, r2
 800934a:	bf34      	ite	cc
 800934c:	2301      	movcc	r3, #1
 800934e:	2300      	movcs	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d040      	beq.n	80093d8 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fd facc 	bl	8006902 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800936a:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800936c:	2300      	movs	r3, #0
 800936e:	61bb      	str	r3, [r7, #24]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	429a      	cmp	r2, r3
 8009376:	d22b      	bcs.n	80093d0 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	212c      	movs	r1, #44	; 0x2c
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	4413      	add	r3, r2
      TfLiteNode* node =
 800938e:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
              .node_and_registrations[i]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	212c      	movs	r1, #44	; 0x2c
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6850      	ldr	r0, [r2, #4]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	6912      	ldr	r2, [r2, #16]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	3301      	adds	r3, #1
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e7cf      	b.n	8009370 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	3301      	adds	r3, #1
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	e7b0      	b.n	800933a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 80093e8:	b5b0      	push	{r4, r5, r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	4618      	mov	r0, r3
 8009406:	f7fd fac1 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800940a:	4602      	mov	r2, r0
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	bf94      	ite	ls
 8009412:	2301      	movls	r3, #1
 8009414:	2300      	movhi	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd fab3 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	483c      	ldr	r0, [pc, #240]	; (8009520 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 800942e:	f7ff fdd9 	bl	8008fe4 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8009432:	2401      	movs	r4, #1
 8009434:	e06e      	b.n	8009514 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	4618      	mov	r0, r3
 800943e:	f7fd fa60 	bl	8006902 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8009442:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8009444:	2300      	movs	r3, #0
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	429a      	cmp	r2, r3
 800944e:	d25d      	bcs.n	800950c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	4413      	add	r3, r2
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	212c      	movs	r1, #44	; 0x2c
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
    TfLiteNode* node =
 8009466:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	212c      	movs	r1, #44	; 0x2c
 8009478:	fb01 f303 	mul.w	r3, r1, r3
 800947c:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8009482:	6978      	ldr	r0, [r7, #20]
 8009484:	f7ff fe09 	bl	800909a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009488:	4601      	mov	r1, r0
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009490:	f107 0308 	add.w	r3, r7, #8
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff fdc6 	bl	8009026 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 80094a2:	f007 fc7c 	bl	8010d9e <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6852      	ldr	r2, [r2, #4]
 80094ae:	69b9      	ldr	r1, [r7, #24]
 80094b0:	4610      	mov	r0, r2
 80094b2:	4798      	blx	r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4610      	mov	r0, r2
 80094c8:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 80094ca:	7cfb      	ldrb	r3, [r7, #19]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d10b      	bne.n	80094e8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 80094d0:	6978      	ldr	r0, [r7, #20]
 80094d2:	f7ff fde2 	bl	800909a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80094d6:	4601      	mov	r1, r0
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094dc:	4811      	ldr	r0, [pc, #68]	; (8009524 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 80094de:	f7ff fd81 	bl	8008fe4 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 80094e2:	2401      	movs	r4, #1
 80094e4:	2500      	movs	r5, #0
 80094e6:	e006      	b.n	80094f6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 80094e8:	7cfb      	ldrb	r3, [r7, #19]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 80094ee:	7cfc      	ldrb	r4, [r7, #19]
 80094f0:	2500      	movs	r5, #0
 80094f2:	e000      	b.n	80094f6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 80094f4:	2501      	movs	r5, #1
 80094f6:	f107 0308 	add.w	r3, r7, #8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff fdb5 	bl	800906a <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8009500:	2d01      	cmp	r5, #1
 8009502:	d107      	bne.n	8009514 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	3301      	adds	r3, #1
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
 800950a:	e79d      	b.n	8009448 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a3a      	ldr	r2, [r7, #32]
 8009510:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8009512:	2400      	movs	r4, #0
 8009514:	4623      	mov	r3, r4
}
 8009516:	4618      	mov	r0, r3
 8009518:	3728      	adds	r7, #40	; 0x28
 800951a:	46bd      	mov	sp, r7
 800951c:	bdb0      	pop	{r4, r5, r7, pc}
 800951e:	bf00      	nop
 8009520:	08014a58 	.word	0x08014a58
 8009524:	08014a8c 	.word	0x08014a8c

08009528 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	; 0x28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009530:	2300      	movs	r3, #0
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	4618      	mov	r0, r3
 800953a:	f7fd fa27 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800953e:	4602      	mov	r2, r0
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	4293      	cmp	r3, r2
 8009544:	bf34      	ite	cc
 8009546:	2301      	movcc	r3, #1
 8009548:	2300      	movcs	r3, #0
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d077      	beq.n	8009640 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff faf8 	bl	8008b4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800955c:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
 8009562:	69b8      	ldr	r0, [r7, #24]
 8009564:	f7fd fd45 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 8009568:	4603      	mov	r3, r0
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff fa2c 	bl	80089c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009570:	4602      	mov	r2, r0
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	4293      	cmp	r3, r2
 8009576:	bf34      	ite	cc
 8009578:	2301      	movcc	r3, #1
 800957a:	2300      	movcs	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d05a      	beq.n	8009638 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 8009582:	69b8      	ldr	r0, [r7, #24]
 8009584:	f7fd fd35 	bl	8006ff2 <_ZNK6tflite8SubGraph7tensorsEv>
 8009588:	4603      	mov	r3, r0
 800958a:	6a39      	ldr	r1, [r7, #32]
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fa29 	bl	80089e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009592:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 8009594:	6978      	ldr	r0, [r7, #20]
 8009596:	f7fd fcfc 	bl	8006f92 <_ZNK6tflite6Tensor11is_variableEv>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d047      	beq.n	8009630 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	6859      	ldr	r1, [r3, #4]
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	4613      	mov	r3, r2
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	f107 020c 	add.w	r2, r7, #12
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fd fc53 	bl	8006e6a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80095c4:	4603      	mov	r3, r0
 80095c6:	74fb      	strb	r3, [r7, #19]
 80095c8:	7cfb      	ldrb	r3, [r7, #19]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 80095ce:	7cfb      	ldrb	r3, [r7, #19]
 80095d0:	e037      	b.n	8009642 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 80095d6:	6978      	ldr	r0, [r7, #20]
 80095d8:	f7fd fa88 	bl	8006aec <_ZNK6tflite6Tensor4typeEv>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b09      	cmp	r3, #9
 80095e0:	bf0c      	ite	eq
 80095e2:	2301      	moveq	r3, #1
 80095e4:	2300      	movne	r3, #0
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00f      	beq.n	800960c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 80095ec:	6978      	ldr	r0, [r7, #20]
 80095ee:	f7fd fcc2 	bl	8006f76 <_ZNK6tflite6Tensor12quantizationEv>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fd fc92 	bl	8006f1e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff f9ba 	bl	8008978 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4613      	mov	r3, r2
 800960a:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	4413      	add	r3, r2
 8009616:	6859      	ldr	r1, [r3, #4]
 8009618:	6a3a      	ldr	r2, [r7, #32]
 800961a:	4613      	mov	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	4618      	mov	r0, r3
 800962c:	f007 fc56 	bl	8010edc <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	3301      	adds	r3, #1
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	e794      	b.n	8009562 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	3301      	adds	r3, #1
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
 800963e:	e779      	b.n	8009534 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3728      	adds	r7, #40	; 0x28
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd f928 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 800965c:	4603      	mov	r3, r0
 800965e:	4618      	mov	r0, r3
 8009660:	f7fd f994 	bl	800698c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009664:	4603      	mov	r3, r0
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	611a      	str	r2, [r3, #16]
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4618      	mov	r0, r3
 800969a:	f7fd f907 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 800969e:	4602      	mov	r2, r0
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fd f97f 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80096aa:	4603      	mov	r3, r0
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fd fcae 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fb f866 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80096ba:	4603      	mov	r3, r0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd f8e9 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 80096da:	4602      	mov	r2, r0
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f7fd f961 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80096e6:	4603      	mov	r3, r0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fc90 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 80096ee:	4602      	mov	r2, r0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fb f855 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80096fa:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	4413      	add	r3, r2
 8009706:	6859      	ldr	r1, [r3, #4]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	4613      	mov	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd f8be 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8009730:	4602      	mov	r2, r0
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fd f936 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800973c:	4603      	mov	r3, r0
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fc73 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 8009744:	4603      	mov	r3, r0
 8009746:	4618      	mov	r0, r3
 8009748:	f7fb f81d 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800974c:	4603      	mov	r3, r0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd f8a0 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 800976c:	4602      	mov	r2, r0
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fd f918 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009778:	4603      	mov	r3, r0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd fc55 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 8009780:	4602      	mov	r2, r0
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f7fb f80c 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800978c:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	4413      	add	r3, r2
 8009798:	6859      	ldr	r1, [r3, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	2104      	movs	r1, #4
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f8 f931 	bl	8001a24 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80097c2:	4603      	mov	r3, r0
  }
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	210e      	movs	r1, #14
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff f80a 	bl	80087f2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80097de:	4603      	mov	r3, r0
  }
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2106      	movs	r1, #6
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fd50 	bl	800a29a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80097fa:	4603      	mov	r3, r0
  }
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7fd f833 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8009846:	4603      	mov	r3, r0
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f7fd f8ac 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009850:	4603      	mov	r3, r0
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd fbdb 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 8009858:	4603      	mov	r3, r0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa ff93 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009860:	4603      	mov	r3, r0
  }
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fd f818 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 800987c:	4603      	mov	r3, r0
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd f891 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009886:	4603      	mov	r3, r0
 8009888:	4618      	mov	r0, r3
 800988a:	f7fd fbc0 	bl	800700e <_ZNK6tflite8SubGraph6inputsEv>
 800988e:	4603      	mov	r3, r0
  }
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd f801 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fd f87a 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80098b4:	4603      	mov	r3, r0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fd fbb7 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 80098bc:	4603      	mov	r3, r0
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fa ff61 	bl	8004786 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80098c4:	4603      	mov	r3, r0
  }
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fc ffe6 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fd f85f 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd fb9c 	bl	800702a <_ZNK6tflite8SubGraph7outputsEv>
 80098f2:	4603      	mov	r3, r0
  }
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	336c      	adds	r3, #108	; 0x6c
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff ff7b 	bl	8009804 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800990e:	4603      	mov	r3, r0
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	330c      	adds	r3, #12
 800993c:	225c      	movs	r2, #92	; 0x5c
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f007 facb 	bl	8010edc <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	69b9      	ldr	r1, [r7, #24]
 800994a:	6838      	ldr	r0, [r7, #0]
 800994c:	f7fe f918 	bl	8007b80 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8009950:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	669a      	str	r2, [r3, #104]	; 0x68
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	f7ff fbae 	bl	80090c8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 8009994:	6a39      	ldr	r1, [r7, #32]
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f826 	bl	80099e8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	336c      	adds	r3, #108	; 0x6c
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff ff32 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bf14      	ite	ne
 80099be:	2301      	movne	r3, #1
 80099c0:	2300      	moveq	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	336c      	adds	r3, #108	; 0x6c
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fcab 	bl	8009328 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	336c      	adds	r3, #108	; 0x6c
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fba0 	bl	800911c <_ZN6tflite10MicroGraphD1Ev>
  }
}
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a0d      	ldr	r2, [pc, #52]	; (8009a30 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 80099fc:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a02:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a0a      	ldr	r2, [pc, #40]	; (8009a30 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8009a08:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 8009a14:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	0800a1ad 	.word	0x0800a1ad
 8009a34:	0800a1e5 	.word	0x0800a1e5
 8009a38:	0800a235 	.word	0x0800a235

08009a3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 8009a3c:	b5b0      	push	{r4, r5, r7, lr}
 8009a3e:	b096      	sub	sp, #88	; 0x58
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009a44:	2300      	movs	r3, #0
 8009a46:	657b      	str	r3, [r7, #84]	; 0x54
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	336c      	adds	r3, #108	; 0x6c
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff fdfc 	bl	800964a <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a56:	4293      	cmp	r3, r2
 8009a58:	bfb4      	ite	lt
 8009a5a:	2301      	movlt	r3, #1
 8009a5c:	2300      	movge	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 8155 	beq.w	8009d10 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fc ff1e 	bl	80068ac <_ZNK6tflite5Model9subgraphsEv>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f7fc ff96 	bl	80069a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009a7c:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 8009a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 8009a84:	f007 f98b 	bl	8010d9e <abort>

    auto* opcodes = model_->operator_codes();
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff feab 	bl	80097e8 <_ZNK6tflite5Model14operator_codesEv>
 8009a92:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fe9e 	bl	80087da <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 8009a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009aa0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009aa2:	f7fc ff11 	bl	80068c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8009aa6:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8009aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	f080 8129 	bcs.w	8009d08 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      const auto* op = subgraph->operators()->Get(i);
 8009ab6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ab8:	f7fc feea 	bl	8006890 <_ZNK6tflite8SubGraph9operatorsEv>
 8009abc:	4603      	mov	r3, r0
 8009abe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe ffb5 	bl	8008a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8009ac6:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 8009ac8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009aca:	f7ff fe70 	bl	80097ae <_ZNK6tflite8Operator12opcode_indexEv>
 8009ace:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 8009ad0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ad2:	f000 fbf2 	bl	800a2ba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	4293      	cmp	r3, r2
 8009adc:	bf2c      	ite	cs
 8009ade:	2301      	movcs	r3, #1
 8009ae0:	2300      	movcc	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8009ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aea:	488c      	ldr	r0, [pc, #560]	; (8009d1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8009aec:	f7ff fa7a 	bl	8008fe4 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e10e      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* opcode = opcodes->Get(index);
 8009af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009af6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009af8:	f000 fbee 	bl	800a2d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8009afc:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	461d      	mov	r5, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	336c      	adds	r3, #108	; 0x6c
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fe85 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b1e:	212c      	movs	r1, #44	; 0x2c
 8009b20:	fb01 f303 	mul.w	r3, r1, r3
 8009b24:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009b26:	3328      	adds	r3, #40	; 0x28
 8009b28:	4622      	mov	r2, r4
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b2e:	f7fb ff29 	bl	8005984 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 8009b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00e      	beq.n	8009b5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 8009b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b42:	f006 fe6e 	bl	8010822 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fb fed7 	bl	80058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4619      	mov	r1, r3
 8009b52:	4873      	ldr	r0, [pc, #460]	; (8009d20 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 8009b54:	f7ff fa46 	bl	8008fe4 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 8009b58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b5c:	e0d9      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	336c      	adds	r3, #108	; 0x6c
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fe5a 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b74:	212c      	movs	r1, #44	; 0x2c
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
                                     .registration;
 8009b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 8009b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b88:	4866      	ldr	r0, [pc, #408]	; (8009d24 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8009b8a:	f7ff fa2b 	bl	8008fe4 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e0bf      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 8009b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      const char* custom_data = nullptr;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	613b      	str	r3, [r7, #16]

      if (op_type == BuiltinOperator_CUSTOM) {
 8009ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009baa:	2b20      	cmp	r3, #32
 8009bac:	d11b      	bne.n	8009be6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8009bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bb0:	f7ff fe0c 	bl	80097cc <_ZNK6tflite8Operator14custom_optionsEv>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bf14      	ite	ne
 8009bba:	2301      	movne	r3, #1
 8009bbc:	2300      	moveq	r3, #0
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d051      	beq.n	8009c68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 8009bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bc6:	f7ff fe01 	bl	80097cc <_ZNK6tflite8Operator14custom_optionsEv>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe ffd9 	bl	8008b84 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009bd2:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 8009bd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bd6:	f7ff fdf9 	bl	80097cc <_ZNK6tflite8Operator14custom_optionsEv>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fe fe78 	bl	80088d2 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8009be2:	64b8      	str	r0, [r7, #72]	; 0x48
 8009be4:	e040      	b.n	8009c68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 8009be6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009be8:	f7ff fdf0 	bl	80097cc <_ZNK6tflite8Operator14custom_optionsEv>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf14      	ite	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	2300      	moveq	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8009bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fb fe7b 	bl	80058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c06:	4603      	mov	r3, r0
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4847      	ldr	r0, [pc, #284]	; (8009d28 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8009c0c:	f7ff f9ea 	bl	8008fe4 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e07e      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3320      	adds	r3, #32
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
 8009c2a:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 8009c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fb fe60 	bl	80058fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4619      	mov	r1, r3
 8009c40:	483a      	ldr	r0, [pc, #232]	; (8009d2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 8009c42:	f7ff f9cf 	bl	8008fe4 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e063      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6899      	ldr	r1, [r3, #8]
 8009c4e:	f107 0310 	add.w	r3, r7, #16
 8009c52:	69fc      	ldr	r4, [r7, #28]
 8009c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c58:	47a0      	blx	r4
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	76fb      	strb	r3, [r7, #27]
 8009c5e:	7efb      	ldrb	r3, [r7, #27]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
 8009c64:	7efb      	ldrb	r3, [r7, #27]
 8009c66:	e054      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009c6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c6e:	f7fd f9a4 	bl	8006fba <_ZNK6tflite8Operator6inputsEv>
 8009c72:	4601      	mov	r1, r0
 8009c74:	f107 030c 	add.w	r3, r7, #12
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7fe fd9a 	bl	80087b4 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009c80:	4603      	mov	r3, r0
 8009c82:	76bb      	strb	r3, [r7, #26]
 8009c84:	7ebb      	ldrb	r3, [r7, #26]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x252>
 8009c8a:	7ebb      	ldrb	r3, [r7, #26]
 8009c8c:	e041      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009c92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c94:	f7fd f99f 	bl	8006fd6 <_ZNK6tflite8Operator7outputsEv>
 8009c98:	4601      	mov	r1, r0
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7fe fd87 	bl	80087b4 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	767b      	strb	r3, [r7, #25]
 8009caa:	7e7b      	ldrb	r3, [r7, #25]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x278>
 8009cb0:	7e7b      	ldrb	r3, [r7, #25]
 8009cb2:	e02e      	b.n	8009d12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	336c      	adds	r3, #108	; 0x6c
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fdaf 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cca:	212c      	movs	r1, #44	; 0x2c
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]
      *node = {};
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	2328      	movs	r3, #40	; 0x28
 8009cda:	461a      	mov	r2, r3
 8009cdc:	2100      	movs	r1, #0
 8009cde:	f007 f8fd 	bl	8010edc <memset>
      node->inputs = inputs_array;
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cf8:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 8009cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < operators_size; ++i) {
 8009d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d02:	3301      	adds	r3, #1
 8009d04:	653b      	str	r3, [r7, #80]	; 0x50
 8009d06:	e6d1      	b.n	8009aac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8009d0e:	e69b      	b.n	8009a48 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3758      	adds	r7, #88	; 0x58
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bdb0      	pop	{r4, r5, r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	080155e0 	.word	0x080155e0
 8009d20:	0801560c 	.word	0x0801560c
 8009d24:	0801563c 	.word	0x0801563c
 8009d28:	08015660 	.word	0x08015660
 8009d2c:	080156a8 	.word	0x080156a8

08009d30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	b088      	sub	sp, #32
 8009d36:	af02      	add	r7, sp, #8
 8009d38:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	4610      	mov	r0, r2
 8009d46:	f7fd ff65 	bl	8007c14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 8009d4a:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	49a4      	ldr	r1, [pc, #656]	; (8009fe8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f9 ff4f 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e139      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	336c      	adds	r3, #108	; 0x6c
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fc7c 	bl	800966e <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fe60 	bl	8009a3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	72fb      	strb	r3, [r7, #11]
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 8009d86:	7afb      	ldrb	r3, [r7, #11]
 8009d88:	e129      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a97      	ldr	r2, [pc, #604]	; (8009fec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8009d8e:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a94      	ldr	r2, [pc, #592]	; (8009ff0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8009da0:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	336c      	adds	r3, #108	; 0x6c
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff f9d8 	bl	800915c <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a91      	ldr	r2, [pc, #580]	; (8009ff4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8009db0:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	336c      	adds	r3, #108	; 0x6c
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fa40 	bl	800923c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a8b      	ldr	r2, [pc, #556]	; (8009ff8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8009dcc:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681d      	ldr	r5, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	336c      	adds	r3, #108	; 0x6c
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fd1e 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009de0:	4602      	mov	r2, r0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	338c      	adds	r3, #140	; 0x8c
 8009de6:	4629      	mov	r1, r5
 8009de8:	4620      	mov	r0, r4
 8009dea:	f7fd ff95 	bl	8007d18 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8009dee:	4603      	mov	r3, r0
 8009df0:	72bb      	strb	r3, [r7, #10]
 8009df2:	7abb      	ldrb	r3, [r7, #10]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 8009df8:	7abb      	ldrb	r3, [r7, #10]
 8009dfa:	e0f0      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	681c      	ldr	r4, [r3, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fd12 	bl	8009834 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e10:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4619      	mov	r1, r3
 8009e16:	4628      	mov	r0, r5
 8009e18:	47a0      	blx	r4
 8009e1a:	4602      	mov	r2, r0
  input_tensors_ =
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10d      	bne.n	8009e48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689c      	ldr	r4, [r3, #8]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fcff 	bl	8009834 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e36:	4603      	mov	r3, r0
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	496f      	ldr	r1, [pc, #444]	; (8009ffc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7f9 fedc 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e0ca      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fcf1 	bl	8009834 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e52:	4602      	mov	r2, r0
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bf34      	ite	cc
 8009e5a:	2301      	movcc	r3, #1
 8009e5c:	2300      	movcs	r3, #0
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d03c      	beq.n	8009ede <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	336c      	adds	r3, #108	; 0x6c
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fcce 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009e80:	4680      	mov	r8, r0
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fcf1 	bl	800986a <_ZNK6tflite16MicroInterpreter6inputsEv>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	6979      	ldr	r1, [r7, #20]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fa fc89 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009e92:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	18d4      	adds	r4, r2, r3
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	47a8      	blx	r5
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d108      	bne.n	8009ed6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	494d      	ldr	r1, [pc, #308]	; (800a000 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f9 fe95 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e083      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e7b6      	b.n	8009e4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	330c      	adds	r3, #12
 8009eea:	681c      	ldr	r4, [r3, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fcd3 	bl	8009898 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009ef2:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47a0      	blx	r4
 8009efc:	4602      	mov	r2, r0
  output_tensors_ =
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10d      	bne.n	8009f2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689c      	ldr	r4, [r3, #8]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff fcc0 	bl	8009898 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	4939      	ldr	r1, [pc, #228]	; (800a004 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7f9 fe6b 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e059      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fcb2 	bl	8009898 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	bf34      	ite	cc
 8009f3c:	2301      	movcc	r3, #1
 8009f3e:	2300      	movcs	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d03c      	beq.n	8009fc0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	336c      	adds	r3, #108	; 0x6c
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fc5d 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009f62:	4680      	mov	r8, r0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fcb2 	bl	80098ce <_ZNK6tflite16MicroInterpreter7outputsEv>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6939      	ldr	r1, [r7, #16]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fa fc18 	bl	80047a4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009f74:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	18d4      	adds	r4, r2, r3
 8009f82:	2300      	movs	r3, #0
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	460b      	mov	r3, r1
 8009f88:	4642      	mov	r2, r8
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	47a8      	blx	r5
 8009f90:	4603      	mov	r3, r0
 8009f92:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d108      	bne.n	8009fb8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4916      	ldr	r1, [pc, #88]	; (800a008 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f9 fe24 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e012      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	613b      	str	r3, [r7, #16]
 8009fbe:	e7b6      	b.n	8009f2e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f89d 	bl	800a100 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	727b      	strb	r3, [r7, #9]
 8009fca:	7a7b      	ldrb	r3, [r7, #9]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 8009fd0:	7a7b      	ldrb	r3, [r7, #9]
 8009fd2:	e004      	b.n	8009fde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	080156c8 	.word	0x080156c8
 8009fec:	0800a11d 	.word	0x0800a11d
 8009ff0:	0800a273 	.word	0x0800a273
 8009ff4:	0800a149 	.word	0x0800a149
 8009ff8:	0800a17f 	.word	0x0800a17f
 8009ffc:	080156ec 	.word	0x080156ec
 800a000:	08015738 	.word	0x08015738
 800a004:	08015760 	.word	0x08015760
 800a008:	080157ac 	.word	0x080157ac

0800a00c <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	4912      	ldr	r1, [pc, #72]	; (800a06c <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800a024:	4618      	mov	r0, r3
 800a026:	f7f9 fde9 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e019      	b.n	800a062 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a034:	f083 0301 	eor.w	r3, r3, #1
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff fe76 	bl	8009d30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	e007      	b.n	800a062 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	336c      	adds	r3, #108	; 0x6c
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff f9c5 	bl	80093e8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800a05e:	4603      	mov	r3, r0
 800a060:	bf00      	nop
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	080157d4 	.word	0x080157d4

0800a070 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fbda 	bl	8009834 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a080:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	429a      	cmp	r2, r3
 800a088:	d308      	bcc.n	800a09c <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6898      	ldr	r0, [r3, #8]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	4908      	ldr	r1, [pc, #32]	; (800a0b4 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800a094:	f7f9 fdb2 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a098:	2300      	movs	r3, #0
 800a09a:	e006      	b.n	800a0aa <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	681b      	ldr	r3, [r3, #0]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	08015804 	.word	0x08015804

0800a0b8 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fbe8 	bl	8009898 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a0c8:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d308      	bcc.n	800a0e4 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6898      	ldr	r0, [r3, #8]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	4908      	ldr	r1, [pc, #32]	; (800a0fc <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800a0dc:	f7f9 fd8e 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e006      	b.n	800a0f2 <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	681b      	ldr	r3, [r3, #0]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	08015830 	.word	0x08015830

0800a100 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	336c      	adds	r3, #108	; 0x6c
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fa0b 	bl	8009528 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800a112:	4603      	mov	r3, r0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a12a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	330c      	adds	r3, #12
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	4610      	mov	r0, r2
 800a13c:	4798      	blx	r3
 800a13e:	4603      	mov	r3, r0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800a148:	b590      	push	{r4, r7, lr}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	336c      	adds	r3, #108	; 0x6c
 800a162:	4618      	mov	r0, r3
 800a164:	f7ff fb4e 	bl	8009804 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800a168:	4602      	mov	r2, r0
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	4620      	mov	r0, r4
 800a170:	f7fd fe66 	bl	8007e40 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800a174:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800a176:	4618      	mov	r0, r3
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd90      	pop	{r4, r7, pc}

0800a17e <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800a198:	4413      	add	r3, r2
 800a19a:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	681b      	ldr	r3, [r3, #0]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800a1ac:	b40e      	push	{r1, r2, r3}
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800a1bc:	f107 0320 	add.w	r3, r7, #32
 800a1c0:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6898      	ldr	r0, [r3, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	69f9      	ldr	r1, [r7, #28]
 800a1d4:	4798      	blx	r3
  va_end(args);
#endif
}
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1e0:	b003      	add	sp, #12
 800a1e2:	4770      	bx	lr

0800a1e4 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	b086      	sub	sp, #24
 800a1ea:	af02      	add	r7, sp, #8
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3304      	adds	r3, #4
 800a202:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	336c      	adds	r3, #108	; 0x6c
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff fb05 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a212:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff fb71 	bl	80098fc <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a21a:	4603      	mov	r3, r0
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	4642      	mov	r2, r8
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47a0      	blx	r4
 800a228:	4603      	mov	r3, r0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a234 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	336c      	adds	r3, #108	; 0x6c
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff fae7 	bl	800981c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a24e:	4604      	mov	r4, r0
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7ff fb53 	bl	80098fc <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a256:	4603      	mov	r3, r0
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800a25c:	6859      	ldr	r1, [r3, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4613      	mov	r3, r2
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	4413      	add	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	440b      	add	r3, r1
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd90      	pop	{r4, r7, pc}

0800a272 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a2a6:	887b      	ldrh	r3, [r7, #2]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f83a 	bl	800a324 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800a2b0:	4603      	mov	r3, r0
  }
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f7 fb77 	bl	80019ba <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff ffe9 	bl	800a2ba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d306      	bcc.n	800a2fe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800a2f0:	4b09      	ldr	r3, [pc, #36]	; (800a318 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800a2f2:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800a2f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a2f8:	4809      	ldr	r0, [pc, #36]	; (800a320 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800a2fa:	f006 fd57 	bl	8010dac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f844 	bl	800a38c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800a304:	4603      	mov	r3, r0
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 f82b 	bl	800a364 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800a30e:	4603      	mov	r3, r0
  }
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0801585c 	.word	0x0801585c
 800a31c:	08015ac4 	.word	0x08015ac4
 800a320:	08015938 	.word	0x08015938

0800a324 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a330:	887b      	ldrh	r3, [r7, #2]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7f6 fe97 	bl	8001068 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a33a:	4603      	mov	r3, r0
 800a33c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	4413      	add	r3, r2
 800a344:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a346:	89fb      	ldrh	r3, [r7, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800a34c:	68b8      	ldr	r0, [r7, #8]
 800a34e:	f7f7 fb4d 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a352:	4602      	mov	r2, r0
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4413      	add	r3, r2
                        : nullptr;
 800a358:	e000      	b.n	800a35c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a35a:	2300      	movs	r3, #0
  }
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7f7 fb37 	bl	80019ec <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a37e:	4602      	mov	r2, r0
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4413      	add	r3, r2
  }
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
  }
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d20e      	bcs.n	800a3de <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	617a      	str	r2, [r7, #20]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	7812      	ldrb	r2, [r2, #0]
 800a3d0:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1e5a      	subs	r2, r3, #1
 800a3d6:	613a      	str	r2, [r7, #16]
 800a3d8:	7bfa      	ldrb	r2, [r7, #15]
 800a3da:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800a3dc:	e7ec      	b.n	800a3b8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800a3de:	687b      	ldr	r3, [r7, #4]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  char* current = main;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3301      	adds	r3, #1
 800a408:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a40a:	e7f7      	b.n	800a3fc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	3b01      	subs	r3, #1
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00e      	beq.n	800a43c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	429a      	cmp	r2, r3
 800a424:	d20a      	bcs.n	800a43c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	781a      	ldrb	r2, [r3, #0]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	701a      	strb	r2, [r3, #0]
    ++current;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	3301      	adds	r3, #1
 800a432:	617b      	str	r3, [r7, #20]
    ++to_append;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3301      	adds	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800a43a:	e7ec      	b.n	800a416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
  return current;
 800a442:	697b      	ldr	r3, [r7, #20]
}
 800a444:	4618      	mov	r0, r3
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	fbb3 f1f2 	udiv	r1, r3, r2
 800a468:	fb02 f201 	mul.w	r2, r2, r1
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2b09      	cmp	r3, #9
 800a474:	dc04      	bgt.n	800a480 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	3330      	adds	r3, #48	; 0x30
 800a47c:	77fb      	strb	r3, [r7, #31]
 800a47e:	e003      	b.n	800a488 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	3357      	adds	r3, #87	; 0x57
 800a486:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	60ba      	str	r2, [r7, #8]
 800a48e:	7ffa      	ldrb	r2, [r7, #31]
 800a490:	701a      	strb	r2, [r3, #0]
    i /= base;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d000      	beq.n	800a4a4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800a4a2:	e7dd      	b.n	800a460 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	69b8      	ldr	r0, [r7, #24]
 800a4ae:	f7ff ff79 	bl	800a3a4 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da07      	bge.n	800a4e0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	603a      	str	r2, [r7, #0]
 800a4d6:	222d      	movs	r2, #45	; 0x2d
 800a4d8:	701a      	strb	r2, [r3, #0]
    u = -u;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	425b      	negs	r3, r3
 800a4de:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7ff ffb3 	bl	800a450 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a4ea:	4603      	mov	r3, r0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b090      	sub	sp, #64	; 0x40
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800a500:	f107 0310 	add.w	r3, r7, #16
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ffd8 	bl	800a4bc <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800a50c:	f107 0310 	add.w	r3, r7, #16
 800a510:	461a      	mov	r2, r3
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff ff69 	bl	800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a51a:	4603      	mov	r3, r0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3740      	adds	r7, #64	; 0x40
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b090      	sub	sp, #64	; 0x40
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800a532:	f107 0310 	add.w	r3, r7, #16
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ff88 	bl	800a450 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800a540:	f107 0310 	add.w	r3, r7, #16
 800a544:	461a      	mov	r2, r3
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff ff4f 	bl	800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a54e:	4603      	mov	r3, r0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3740      	adds	r7, #64	; 0x40
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800a558:	b590      	push	{r4, r7, lr}
 800a55a:	b09b      	sub	sp, #108	; 0x6c
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a562:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	332f      	adds	r3, #47	; 0x2f
 800a56c:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800a56e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a572:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800a574:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a578:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800a57a:	2317      	movs	r3, #23
 800a57c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800a57e:	237f      	movs	r3, #127	; 0x7f
 800a580:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800a582:	4b6a      	ldr	r3, [pc, #424]	; (800a72c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a586:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800a588:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	0ddb      	lsrs	r3, r3, #23
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800a592:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	da05      	bge.n	800a5ae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800a5a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a4:	222d      	movs	r2, #45	; 0x2d
 800a5a6:	701a      	strb	r2, [r3, #0]
    current += 1;
 800a5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800a5ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	2b80      	cmp	r3, #128	; 0x80
 800a5b8:	d118      	bne.n	800a5ec <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800a5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800a5c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	4a5a      	ldr	r2, [pc, #360]	; (800a730 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a5cc:	f7ff ff0e 	bl	800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a5d0:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a5d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d4:	e0a5      	b.n	800a722 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800a5d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	4a55      	ldr	r2, [pc, #340]	; (800a734 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a5e2:	f7ff ff03 	bl	800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a5e6:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ea:	e09a      	b.n	800a722 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800a5f0:	4b51      	ldr	r3, [pc, #324]	; (800a738 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800a5f2:	f107 040c 	add.w	r4, r7, #12
 800a5f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5f8:	c407      	stmia	r4!, {r0, r1, r2}
 800a5fa:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fe:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a600:	2300      	movs	r3, #0
 800a602:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a606:	2b0c      	cmp	r3, #12
 800a608:	dc0f      	bgt.n	800a62a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800a60a:	f107 020c 	add.w	r2, r7, #12
 800a60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a610:	4413      	add	r3, r2
 800a612:	f993 3000 	ldrsb.w	r3, [r3]
 800a616:	461a      	mov	r2, r3
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	40d3      	lsrs	r3, r2
 800a61c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a61e:	4413      	add	r3, r2
 800a620:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a624:	3301      	adds	r3, #1
 800a626:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a628:	e7ec      	b.n	800a604 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800a62a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a62c:	2231      	movs	r2, #49	; 0x31
 800a62e:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a632:	3301      	adds	r3, #1
 800a634:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800a636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a638:	222e      	movs	r2, #46	; 0x2e
 800a63a:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a63c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63e:	3301      	adds	r3, #1
 800a640:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800a642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a644:	2200      	movs	r2, #0
 800a646:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800a648:	2307      	movs	r3, #7
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800a64c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a64e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	2b07      	cmp	r3, #7
 800a654:	dc01      	bgt.n	800a65a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800a656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a658:	e063      	b.n	800a722 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a65a:	2301      	movs	r3, #1
 800a65c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a660:	2b06      	cmp	r3, #6
 800a662:	dc08      	bgt.n	800a676 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800a664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a668:	4413      	add	r3, r2
 800a66a:	2230      	movs	r2, #48	; 0x30
 800a66c:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a66e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a670:	3301      	adds	r3, #1
 800a672:	65bb      	str	r3, [r7, #88]	; 0x58
 800a674:	e7f3      	b.n	800a65e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800a676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a678:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800a67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a67c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67e:	1ad1      	subs	r1, r2, r3
 800a680:	230a      	movs	r3, #10
 800a682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a684:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a686:	f7ff ff4d 	bl	800a524 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800a68a:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800a68c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	f1c3 0307 	rsb	r3, r3, #7
 800a69a:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800a69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69e:	2230      	movs	r2, #48	; 0x30
 800a6a0:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d018      	beq.n	800a6da <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	da0f      	bge.n	800a6d4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800a6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6be:	4413      	add	r3, r2
 800a6c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6c2:	7812      	ldrb	r2, [r2, #0]
 800a6c4:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800a6c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6c8:	2230      	movs	r2, #48	; 0x30
 800a6ca:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800a6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	657b      	str	r3, [r7, #84]	; 0x54
 800a6d2:	e7eb      	b.n	800a6ac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800a6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d6:	3307      	adds	r3, #7
 800a6d8:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b30      	cmp	r3, #48	; 0x30
 800a6e2:	d108      	bne.n	800a6f6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800a6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d203      	bcs.n	800a6f6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800a6ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a6f4:	e7f1      	b.n	800a6da <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800a6f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800a6fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	4a0e      	ldr	r2, [pc, #56]	; (800a73c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800a704:	4619      	mov	r1, r3
 800a706:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a708:	f7ff fe70 	bl	800a3ec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a70c:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800a70e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a716:	4619      	mov	r1, r3
 800a718:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a71a:	f7ff feeb 	bl	800a4f4 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800a71e:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800a720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800a722:	4618      	mov	r0, r3
 800a724:	376c      	adds	r7, #108	; 0x6c
 800a726:	46bd      	mov	sp, r7
 800a728:	bd90      	pop	{r4, r7, pc}
 800a72a:	bf00      	nop
 800a72c:	007fffff 	.word	0x007fffff
 800a730:	08015cc4 	.word	0x08015cc4
 800a734:	08015cc8 	.word	0x08015cc8
 800a738:	08015cd0 	.word	0x08015cd0
 800a73c:	08015ccc 	.word	0x08015ccc

0800a740 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	6838      	ldr	r0, [r7, #0]
 800a74e:	f7ff feb5 	bl	800a4bc <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800a752:	4602      	mov	r2, r0
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	1ad3      	subs	r3, r2, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800a76a:	220a      	movs	r2, #10
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	6838      	ldr	r0, [r7, #0]
 800a770:	f7ff fe6e 	bl	800a450 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a774:	4602      	mov	r2, r0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	1ad3      	subs	r3, r2, r3
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800a78c:	2210      	movs	r2, #16
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	6838      	ldr	r0, [r7, #0]
 800a792:	f7ff fe5d 	bl	800a450 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a796:	4602      	mov	r2, r0
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	1ad3      	subs	r3, r2, r3
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	ed97 0a00 	vldr	s0, [r7]
 800a7b6:	f7ff fecf 	bl	800a558 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	1ad3      	subs	r3, r2, r3
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800a7c8:	b590      	push	{r4, r7, lr}
 800a7ca:	b08b      	sub	sp, #44	; 0x2c
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8151 	beq.w	800aa90 <MicroVsnprintf+0x2c8>
 800a7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	f280 814c 	bge.w	800aa90 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b25      	cmp	r3, #37	; 0x25
 800a7fe:	f040 813b 	bne.w	800aa78 <MicroVsnprintf+0x2b0>
      current++;
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	3301      	adds	r3, #1
 800a806:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b25      	cmp	r3, #37	; 0x25
 800a80e:	f000 80e2 	beq.w	800a9d6 <MicroVsnprintf+0x20e>
 800a812:	2b25      	cmp	r3, #37	; 0x25
 800a814:	dbe6      	blt.n	800a7e4 <MicroVsnprintf+0x1c>
 800a816:	2b78      	cmp	r3, #120	; 0x78
 800a818:	dce4      	bgt.n	800a7e4 <MicroVsnprintf+0x1c>
 800a81a:	2b63      	cmp	r3, #99	; 0x63
 800a81c:	dbe2      	blt.n	800a7e4 <MicroVsnprintf+0x1c>
 800a81e:	3b63      	subs	r3, #99	; 0x63
 800a820:	2b15      	cmp	r3, #21
 800a822:	d8df      	bhi.n	800a7e4 <MicroVsnprintf+0x1c>
 800a824:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <MicroVsnprintf+0x64>)
 800a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82a:	bf00      	nop
 800a82c:	0800a9ef 	.word	0x0800a9ef
 800a830:	0800a885 	.word	0x0800a885
 800a834:	0800a7e5 	.word	0x0800a7e5
 800a838:	0800a96b 	.word	0x0800a96b
 800a83c:	0800a7e5 	.word	0x0800a7e5
 800a840:	0800a7e5 	.word	0x0800a7e5
 800a844:	0800a7e5 	.word	0x0800a7e5
 800a848:	0800a7e5 	.word	0x0800a7e5
 800a84c:	0800a7e5 	.word	0x0800a7e5
 800a850:	0800a7e5 	.word	0x0800a7e5
 800a854:	0800a7e5 	.word	0x0800a7e5
 800a858:	0800a7e5 	.word	0x0800a7e5
 800a85c:	0800a7e5 	.word	0x0800a7e5
 800a860:	0800a7e5 	.word	0x0800a7e5
 800a864:	0800a7e5 	.word	0x0800a7e5
 800a868:	0800a7e5 	.word	0x0800a7e5
 800a86c:	0800aa2d 	.word	0x0800aa2d
 800a870:	0800a7e5 	.word	0x0800a7e5
 800a874:	0800a8c7 	.word	0x0800a8c7
 800a878:	0800a7e5 	.word	0x0800a7e5
 800a87c:	0800a7e5 	.word	0x0800a7e5
 800a880:	0800a909 	.word	0x0800a909
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a884:	69ba      	ldr	r2, [r7, #24]
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b0a      	cmp	r3, #10
 800a88c:	dc09      	bgt.n	800a8a2 <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	627a      	str	r2, [r7, #36]	; 0x24
 800a894:	461a      	mov	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	e0ff      	b.n	800aaa2 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	18d0      	adds	r0, r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	1d1a      	adds	r2, r3, #4
 800a8ac:	603a      	str	r2, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f7ff ff45 	bl	800a740 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800a8b6:	4602      	mov	r2, r0
          output_index +=
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	4413      	add	r3, r2
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	623b      	str	r3, [r7, #32]
          break;
 800a8c4:	e0e3      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	2b0a      	cmp	r3, #10
 800a8ce:	dc09      	bgt.n	800a8e4 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	627a      	str	r2, [r7, #36]	; 0x24
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	e0de      	b.n	800aaa2 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	18d0      	adds	r0, r2, r3
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	1d1a      	adds	r2, r3, #4
 800a8ee:	603a      	str	r2, [r7, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	f7ff ff34 	bl	800a760 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800a8f8:	4602      	mov	r2, r0
          output_index +=
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	4413      	add	r3, r2
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	3301      	adds	r3, #1
 800a904:	623b      	str	r3, [r7, #32]
          break;
 800a906:	e0c2      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800a908:	69ba      	ldr	r2, [r7, #24]
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b09      	cmp	r3, #9
 800a910:	dc09      	bgt.n	800a926 <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	627a      	str	r2, [r7, #36]	; 0x24
 800a918:	461a      	mov	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	e0bd      	b.n	800aaa2 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	627a      	str	r2, [r7, #36]	; 0x24
 800a92c:	461a      	mov	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	2230      	movs	r2, #48	; 0x30
 800a934:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	627a      	str	r2, [r7, #36]	; 0x24
 800a93c:	461a      	mov	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	2278      	movs	r2, #120	; 0x78
 800a944:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	18d0      	adds	r0, r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	603a      	str	r2, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4619      	mov	r1, r3
 800a956:	f7ff ff14 	bl	800a782 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800a95a:	4602      	mov	r2, r0
          output_index +=
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	4413      	add	r3, r2
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	3301      	adds	r3, #1
 800a966:	623b      	str	r3, [r7, #32]
          break;
 800a968:	e091      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	ee07 3a90 	vmov	s15, r3
 800a974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a978:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800a97c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d509      	bpl.n	800a99a <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	627a      	str	r2, [r7, #36]	; 0x24
 800a98c:	461a      	mov	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	e083      	b.n	800aaa2 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	18d4      	adds	r4, r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	3307      	adds	r3, #7
 800a9a4:	f023 0307 	bic.w	r3, r3, #7
 800a9a8:	f103 0208 	add.w	r2, r3, #8
 800a9ac:	603a      	str	r2, [r7, #0]
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f7f6 f8eb 	bl	8000b90 <__aeabi_d2f>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	ee00 3a10 	vmov	s0, r3
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff feef 	bl	800a7a4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800a9c6:	4602      	mov	r2, r0
          output_index +=
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	4413      	add	r3, r2
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	623b      	str	r3, [r7, #32]
          break;
 800a9d4:	e05b      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	623a      	str	r2, [r7, #32]
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9de:	1c51      	adds	r1, r2, #1
 800a9e0:	6279      	str	r1, [r7, #36]	; 0x24
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	7013      	strb	r3, [r2, #0]
          break;
 800a9ec:	e04f      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc09      	bgt.n	800aa0c <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	627a      	str	r2, [r7, #36]	; 0x24
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
            return output_index;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	e04a      	b.n	800aaa2 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	1d1a      	adds	r2, r3, #4
 800aa10:	603a      	str	r2, [r7, #0]
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	627a      	str	r2, [r7, #36]	; 0x24
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	b2ca      	uxtb	r2, r1
 800aa22:	701a      	strb	r2, [r3, #0]
          current++;
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	3301      	adds	r3, #1
 800aa28:	623b      	str	r3, [r7, #32]
          break;
 800aa2a:	e030      	b.n	800aa8e <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	603a      	str	r2, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800aa3a:	69fa      	ldr	r2, [r7, #28]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	4413      	add	r3, r2
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	dd14      	ble.n	800aa70 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00e      	beq.n	800aa70 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	1c5a      	adds	r2, r3, #1
 800aa56:	61fa      	str	r2, [r7, #28]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	441a      	add	r2, r3
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	1c59      	adds	r1, r3, #1
 800aa62:	6279      	str	r1, [r7, #36]	; 0x24
 800aa64:	4619      	mov	r1, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	440b      	add	r3, r1
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aa6e:	e7e4      	b.n	800aa3a <MicroVsnprintf+0x272>
          }
          current++;
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	3301      	adds	r3, #1
 800aa74:	623b      	str	r3, [r7, #32]
 800aa76:	e6b5      	b.n	800a7e4 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	623a      	str	r2, [r7, #32]
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	1c51      	adds	r1, r2, #1
 800aa82:	6279      	str	r1, [r7, #36]	; 0x24
 800aa84:	4611      	mov	r1, r2
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	440a      	add	r2, r1
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800aa8e:	e6a9      	b.n	800a7e4 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	627a      	str	r2, [r7, #36]	; 0x24
 800aa96:	461a      	mov	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
  return output_index;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	372c      	adds	r7, #44	; 0x2c
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd90      	pop	{r4, r7, pc}
 800aaaa:	bf00      	nop

0800aaac <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  int result = 1;
 800aab4:	2301      	movs	r3, #1
 800aab6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800aab8:	2300      	movs	r3, #0
 800aaba:	60bb      	str	r3, [r7, #8]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	da0c      	bge.n	800aae0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3301      	adds	r3, #1
 800aadc:	60bb      	str	r3, [r7, #8]
 800aade:	e7ed      	b.n	800aabc <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800aae0:	68fb      	ldr	r3, [r7, #12]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
	...

0800aaf0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	4a11      	ldr	r2, [pc, #68]	; (800ab40 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	609a      	str	r2, [r3, #8]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60da      	str	r2, [r3, #12]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	691a      	ldr	r2, [r3, #16]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	611a      	str	r2, [r3, #16]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	695a      	ldr	r2, [r3, #20]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	615a      	str	r2, [r3, #20]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	619a      	str	r2, [r3, #24]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	08017268 	.word	0x08017268

0800ab44 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800ab52:	4a0e      	ldr	r2, [pc, #56]	; (800ab8c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	605a      	str	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	609a      	str	r2, [r3, #8]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	611a      	str	r2, [r3, #16]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	615a      	str	r2, [r3, #20]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	619a      	str	r2, [r3, #24]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	08017268 	.word	0x08017268

0800ab90 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	4413      	add	r3, r2
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f7ff ffcb 	bl	800ab44 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800abb8:	b590      	push	{r4, r7, lr}
 800abba:	b08d      	sub	sp, #52	; 0x34
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800abca:	f006 f8e8 	bl	8010d9e <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800abd4:	f006 f8e3 	bl	8010d9e <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800abd8:	f107 0010 	add.w	r0, r7, #16
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	68f9      	ldr	r1, [r7, #12]
 800abe2:	f7ff ffd5 	bl	800ab90 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800abe6:	f107 0310 	add.w	r3, r7, #16
 800abea:	2204      	movs	r2, #4
 800abec:	211c      	movs	r1, #28
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f87c 	bl	800acec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800abf4:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	4619      	mov	r1, r3
 800abfa:	201c      	movs	r0, #28
 800abfc:	f7f9 f831 	bl	8003c62 <_ZnwjPv>
 800ac00:	4604      	mov	r4, r0
 800ac02:	f107 0310 	add.w	r3, r7, #16
 800ac06:	4619      	mov	r1, r3
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff ff71 	bl	800aaf0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800ac0e:	f107 0310 	add.w	r3, r7, #16
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f806 	bl	800ac24 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800ac18:	4623      	mov	r3, r4
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3734      	adds	r7, #52	; 0x34
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd90      	pop	{r4, r7, pc}
	...

0800ac24 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	4a04      	ldr	r2, [pc, #16]	; (800ac40 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	08017268 	.word	0x08017268

0800ac44 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff ffe9 	bl	800ac24 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800ac52:	211c      	movs	r1, #28
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f005 fe1c 	bl	8010892 <_ZdlPvj>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d007      	beq.n	800ac8c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4918      	ldr	r1, [pc, #96]	; (800ace4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f8 ffba 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e026      	b.n	800acda <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fb ffd5 	bl	8006c42 <_ZN6tflite14AlignPointerUpEPhj>
 800ac98:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	695a      	ldr	r2, [r3, #20]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d20c      	bcs.n	800acc6 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6858      	ldr	r0, [r3, #4]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	490a      	ldr	r1, [pc, #40]	; (800ace8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800acbe:	f7f8 ff9d 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e009      	b.n	800acda <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	441a      	add	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08015cf4 	.word	0x08015cf4
 800ace8:	08015d4c 	.word	0x08015d4c

0800acec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	695a      	ldr	r2, [r3, #20]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	425b      	negs	r3, r3
 800ad00:	4413      	add	r3, r2
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fb ffb5 	bl	8006c74 <_ZN6tflite16AlignPointerDownEPhj>
 800ad0a:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d212      	bcs.n	800ad3c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691a      	ldr	r2, [r3, #16]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6858      	ldr	r0, [r3, #4]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	1ad2      	subs	r2, r2, r3
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	4906      	ldr	r1, [pc, #24]	; (800ad4c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800ad34:	f7f8 ff62 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e003      	b.n	800ad44 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800ad42:	697b      	ldr	r3, [r7, #20]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08015d90 	.word	0x08015d90

0800ad50 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fb ff6d 	bl	8006c42 <_ZN6tflite14AlignPointerUpEPhj>
 800ad68:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	695a      	ldr	r2, [r3, #20]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d20c      	bcs.n	800ad96 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6858      	ldr	r0, [r3, #4]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4907      	ldr	r1, [pc, #28]	; (800adac <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800ad8e:	f7f8 ff35 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e005      	b.n	800ada2 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	441a      	add	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800ada0:	697b      	ldr	r3, [r7, #20]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	08015ddc 	.word	0x08015ddc

0800adb0 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	619a      	str	r2, [r3, #24]
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fb ff24 	bl	8006c42 <_ZN6tflite14AlignPointerUpEPhj>
 800adfa:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fb ff36 	bl	8006c74 <_ZN6tflite16AlignPointerDownEPhj>
 800ae08:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	1ad3      	subs	r3, r2, r3
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800ae20:	f04f 0201 	mov.w	r2, #1
 800ae24:	f04f 0300 	mov.w	r3, #0
 800ae28:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	da1b      	bge.n	800ae72 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	461a      	mov	r2, r3
 800ae46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ae4a:	6979      	ldr	r1, [r7, #20]
 800ae4c:	fb02 f001 	mul.w	r0, r2, r1
 800ae50:	6939      	ldr	r1, [r7, #16]
 800ae52:	fb03 f101 	mul.w	r1, r3, r1
 800ae56:	4401      	add	r1, r0
 800ae58:	6938      	ldr	r0, [r7, #16]
 800ae5a:	fba0 2302 	umull	r2, r3, r0, r2
 800ae5e:	4419      	add	r1, r3
 800ae60:	460b      	mov	r3, r1
 800ae62:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ae66:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e7de      	b.n	800ae30 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800ae72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800ae96:	f005 ff82 	bl	8010d9e <abort>
  TFLITE_DCHECK(node != nullptr);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800aea0:	f005 ff7d 	bl	8010d9e <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	4790      	blx	r2
 800aeba:	4603      	mov	r3, r0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff ffd5 	bl	800ae84 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800aef6:	f005 ff52 	bl	8010d9e <abort>
  TFLITE_DCHECK(node != nullptr);
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800af00:	f005 ff4d 	bl	8010d9e <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	6859      	ldr	r1, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4619      	mov	r1, r3
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	4790      	blx	r2
 800af1a:	4603      	mov	r3, r0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800af32:	f005 ff34 	bl	8010d9e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	e000      	b.n	800af58 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800af72:	f005 ff14 	bl	8010d9e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	e000      	b.n	800af98 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800afa4:	b5b0      	push	{r4, r5, r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d107      	bne.n	800afc6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800afb6:	f7fa ff90 	bl	8005eda <_ZNSt14numeric_limitsIlE3minEv>
 800afba:	4602      	mov	r2, r0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d101      	bne.n	800afc6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800afc6:	2300      	movs	r3, #0
 800afc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	461a      	mov	r2, r3
 800afd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800afd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800afe0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	fb02 f203 	mul.w	r2, r2, r3
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	6a39      	ldr	r1, [r7, #32]
 800aff0:	fb01 f303 	mul.w	r3, r1, r3
 800aff4:	18d1      	adds	r1, r2, r3
 800aff6:	6a3a      	ldr	r2, [r7, #32]
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	fba2 2303 	umull	r2, r3, r2, r3
 800affe:	4419      	add	r1, r3
 800b000:	460b      	mov	r3, r1
 800b002:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b006:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b00a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b00e:	2a00      	cmp	r2, #0
 800b010:	f173 0300 	sbcs.w	r3, r3, #0
 800b014:	db02      	blt.n	800b01c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800b016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b01a:	e000      	b.n	800b01e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800b01c:	4b18      	ldr	r3, [pc, #96]	; (800b080 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800b01e:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4618      	mov	r0, r3
 800b024:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b02c:	1884      	adds	r4, r0, r2
 800b02e:	eb41 0503 	adc.w	r5, r1, r3
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	2a00      	cmp	r2, #0
 800b038:	f173 0100 	sbcs.w	r1, r3, #0
 800b03c:	da06      	bge.n	800b04c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800b03e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b042:	f04f 0100 	mov.w	r1, #0
 800b046:	1812      	adds	r2, r2, r0
 800b048:	eb41 0303 	adc.w	r3, r1, r3
 800b04c:	f04f 0000 	mov.w	r0, #0
 800b050:	f04f 0100 	mov.w	r1, #0
 800b054:	0fd0      	lsrs	r0, r2, #31
 800b056:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b05a:	17d9      	asrs	r1, r3, #31
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800b060:	4613      	mov	r3, r2
 800b062:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800b06c:	f7fa fd2b 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 800b070:	4603      	mov	r3, r0
 800b072:	e000      	b.n	800b076 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800b074:	68bb      	ldr	r3, [r7, #8]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3730      	adds	r7, #48	; 0x30
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bdb0      	pop	{r4, r5, r7, pc}
 800b07e:	bf00      	nop
 800b080:	c0000001 	.word	0xc0000001

0800b084 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	da01      	bge.n	800b098 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800b094:	f005 fe83 	bl	8010d9e <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	db01      	blt.n	800b0a6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800b0a2:	f005 fe7c 	bl	8010d9e <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	dd06      	ble.n	800b0bc <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	e004      	b.n	800b0c6 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	685b      	ldr	r3, [r3, #4]
  }
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	dd02      	ble.n	800b0e4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	e001      	b.n	800b0e8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
  }
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ffe4 	bl	800b0ce <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800b106:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800b108:	2300      	movs	r3, #0
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	429a      	cmp	r2, r3
 800b114:	da0c      	bge.n	800b130 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4413      	add	r3, r2
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	fb02 f303 	mul.w	r3, r2, r3
 800b126:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3301      	adds	r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	e7ed      	b.n	800b10c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800b130:	697b      	ldr	r3, [r7, #20]
  }
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	60b9      	str	r1, [r7, #8]
 800b144:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b14c:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc02      	bgt.n	800b15a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	425b      	negs	r3, r3
 800b158:	e000      	b.n	800b15c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800b15a:	2300      	movs	r3, #0
 800b15c:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	fa02 f303 	lsl.w	r3, r2, r3
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff ff1b 	bl	800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800b16e:	4603      	mov	r3, r0
 800b170:	6939      	ldr	r1, [r7, #16]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f806 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b178:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800b184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b186:	b089      	sub	sp, #36	; 0x24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	2900      	cmp	r1, #0
 800b192:	da06      	bge.n	800b1a2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800b194:	4b31      	ldr	r3, [pc, #196]	; (800b25c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800b196:	4a32      	ldr	r2, [pc, #200]	; (800b260 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b198:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b19c:	4831      	ldr	r0, [pc, #196]	; (800b264 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b19e:	f005 fe05 	bl	8010dac <__assert_func>
  assert(exponent <= 31);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	291f      	cmp	r1, #31
 800b1a6:	dd06      	ble.n	800b1b6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800b1a8:	4b2f      	ldr	r3, [pc, #188]	; (800b268 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800b1aa:	4a2d      	ldr	r2, [pc, #180]	; (800b260 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b1ac:	f240 1167 	movw	r1, #359	; 0x167
 800b1b0:	482c      	ldr	r0, [pc, #176]	; (800b264 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b1b2:	f005 fdfb 	bl	8010dac <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b1b6:	f04f 0001 	mov.w	r0, #1
 800b1ba:	f04f 0100 	mov.w	r1, #0
 800b1be:	683c      	ldr	r4, [r7, #0]
 800b1c0:	f1a4 0620 	sub.w	r6, r4, #32
 800b1c4:	f1c4 0520 	rsb	r5, r4, #32
 800b1c8:	fa01 f304 	lsl.w	r3, r1, r4
 800b1cc:	fa00 f606 	lsl.w	r6, r0, r6
 800b1d0:	4333      	orrs	r3, r6
 800b1d2:	fa20 f505 	lsr.w	r5, r0, r5
 800b1d6:	432b      	orrs	r3, r5
 800b1d8:	fa00 f204 	lsl.w	r2, r0, r4
 800b1dc:	4613      	mov	r3, r2
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f843 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1e6:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f000 f83f 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1ee:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	f000 f83b 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1f6:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f841 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b200:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800b202:	2101      	movs	r1, #1
 800b204:	69f8      	ldr	r0, [r7, #28]
 800b206:	f000 f84a 	bl	800b29e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b20a:	4604      	mov	r4, r0
 800b20c:	69b9      	ldr	r1, [r7, #24]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f854 	bl	800b2bc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800b214:	4603      	mov	r3, r0
 800b216:	6979      	ldr	r1, [r7, #20]
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 f832 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b21e:	4603      	mov	r3, r0
 800b220:	4619      	mov	r1, r3
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f85e 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b228:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f836 	bl	800b29e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b232:	4604      	mov	r4, r0
 800b234:	68f9      	ldr	r1, [r7, #12]
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f000 f862 	bl	800b300 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800b23c:	4603      	mov	r3, r0
 800b23e:	6979      	ldr	r1, [r7, #20]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f81e 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b246:	4603      	mov	r3, r0
 800b248:	4619      	mov	r1, r3
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 f84a 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b250:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800b252:	4618      	mov	r0, r3
 800b254:	3724      	adds	r7, #36	; 0x24
 800b256:	46bd      	mov	sp, r7
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	bf00      	nop
 800b25c:	08015eb0 	.word	0x08015eb0
 800b260:	08015ec0 	.word	0x08015ec0
 800b264:	08015f1c 	.word	0x08015f1c
 800b268:	08015f9c 	.word	0x08015f9c

0800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  return x;
 800b274:	687b      	ldr	r3, [r7, #4]
}
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  return a & b;
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	4013      	ands	r3, r2
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	fa42 f303 	asr.w	r3, r2, r3
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	bfb4      	ite	lt
 800b2ce:	2301      	movlt	r3, #1
 800b2d0:	2300      	movge	r3, #0
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 f827 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b2da:	4603      	mov	r3, r0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  return a + b;
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	4413      	add	r3, r2
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	bfcc      	ite	gt
 800b312:	2301      	movgt	r3, #1
 800b314:	2300      	movle	r3, #0
 800b316:	b2db      	uxtb	r3, r3
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 f805 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d004      	beq.n	800b340 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800b336:	2000      	movs	r0, #0
 800b338:	f000 f807 	bl	800b34a <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b33c:	4603      	mov	r3, r0
 800b33e:	e000      	b.n	800b342 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  return ~a;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	43db      	mvns	r3, r3
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
	...

0800b364 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eeb0 0a67 	vmov.f32	s0, s15
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	7f7fffff 	.word	0x7f7fffff

0800b380 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800b380:	b480      	push	{r7}
 800b382:	af00      	add	r7, sp, #0
 800b384:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eeb0 0a67 	vmov.f32	s0, s15
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7fb fbdb 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	d001      	beq.n	800b3ce <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800b3ca:	f005 fce8 	bl	8010d9e <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff ffe2 	bl	800b398 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800b3d4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db04      	blt.n	800b3e6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	db01      	blt.n	800b3ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800b3e6:	f005 fcda 	bl	8010d9e <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	db05      	blt.n	800b3fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	db01      	blt.n	800b400 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800b3fc:	f005 fccf 	bl	8010d9e <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	db05      	blt.n	800b412 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3308      	adds	r3, #8
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	db01      	blt.n	800b416 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800b412:	f005 fcc4 	bl	8010d9e <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	db05      	blt.n	800b428 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	330c      	adds	r3, #12
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6a3a      	ldr	r2, [r7, #32]
 800b424:	429a      	cmp	r2, r3
 800b426:	db01      	blt.n	800b42c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800b428:	f005 fcb9 	bl	8010d9e <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	3304      	adds	r3, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	fb02 f203 	mul.w	r2, r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	3208      	adds	r2, #8
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	fb02 f203 	mul.w	r2, r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	4413      	add	r3, r2
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	320c      	adds	r2, #12
 800b44e:	6812      	ldr	r2, [r2, #0]
 800b450:	fb02 f203 	mul.w	r2, r2, r3
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	4413      	add	r3, r2
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b476:	429a      	cmp	r2, r3
 800b478:	da01      	bge.n	800b47e <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	e000      	b.n	800b480 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800b47e:	687b      	ldr	r3, [r7, #4]
    }
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	ed87 0a03 	vstr	s0, [r7, #12]
 800b496:	edc7 0a02 	vstr	s1, [r7, #8]
 800b49a:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800b49e:	f107 0208 	add.w	r2, r7, #8
 800b4a2:	f107 030c 	add.w	r3, r7, #12
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fa fca5 	bl	8005df8 <_ZSt3maxIfERKT_S2_S2_>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	1d3b      	adds	r3, r7, #4
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	f7fa fc86 	bl	8005dc6 <_ZSt3minIfERKT_S2_S2_>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	ee07 3a90 	vmov	s15, r3
}
 800b4c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d10b      	bne.n	800b4f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800b4e8:	f7ff ff3c 	bl	800b364 <_ZNSt14numeric_limitsIfE3maxEv>
 800b4ec:	eef0 7a40 	vmov.f32	s15, s0
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800b4f6:	e023      	b.n	800b540 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d107      	bne.n	800b50e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800b50a:	601a      	str	r2, [r3, #0]
}
 800b50c:	e018      	b.n	800b540 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	2b02      	cmp	r3, #2
 800b512:	d107      	bne.n	800b524 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800b518:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b520:	601a      	str	r2, [r3, #0]
}
 800b522:	e00d      	b.n	800b540 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800b524:	f7ff ff2c 	bl	800b380 <_ZNSt14numeric_limitsIfE6lowestEv>
 800b528:	eef0 7a40 	vmov.f32	s15, s0
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800b532:	f7ff ff17 	bl	800b364 <_ZNSt14numeric_limitsIfE3maxEv>
 800b536:	eef0 7a40 	vmov.f32	s15, s0
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	edc3 7a00 	vstr	s15, [r3]
}
 800b540:	bf00      	nop
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	40c00000 	.word	0x40c00000
 800b54c:	bf800000 	.word	0xbf800000

0800b550 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800b55e:	f005 fc1e 	bl	8010d9e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	e000      	b.n	800b584 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d101      	bne.n	800b5d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800b5d2:	f005 fbe4 	bl	8010d9e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b082      	sub	sp, #8
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x12>
 800b5f0:	f005 fbd5 	bl	8010d9e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff fd37 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b616:	4604      	mov	r4, r0
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fd32 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b620:	4603      	mov	r3, r0
 800b622:	429c      	cmp	r4, r3
 800b624:	d001      	beq.n	800b62a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800b626:	f005 fbba 	bl	8010d9e <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fd29 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b632:	4603      	mov	r3, r0
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fd23 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b63e:	4603      	mov	r3, r0
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	f107 0214 	add.w	r2, r7, #20
 800b646:	f107 0310 	add.w	r3, r7, #16
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fb f8ed 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800b652:	4603      	mov	r3, r0
 800b654:	681b      	ldr	r3, [r3, #0]
}
 800b656:	4618      	mov	r0, r3
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd90      	pop	{r4, r7, pc}
	...

0800b660 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

inline int32_t MultiplyByQuantizedMultiplier(int64_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	b089      	sub	sp, #36	; 0x24
 800b666:	af00      	add	r7, sp, #0
 800b668:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800b66c:	607a      	str	r2, [r7, #4]
 800b66e:	603b      	str	r3, [r7, #0]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	da05      	bge.n	800b682 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 800b676:	4b42      	ldr	r3, [pc, #264]	; (800b780 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 800b678:	4a42      	ldr	r2, [pc, #264]	; (800b784 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b67a:	21b3      	movs	r1, #179	; 0xb3
 800b67c:	4842      	ldr	r0, [pc, #264]	; (800b788 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b67e:	f005 fb95 	bl	8010dac <__assert_func>
  assert(shift >= -31 && shift < 8);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	f113 0f1f 	cmn.w	r3, #31
 800b688:	db02      	blt.n	800b690 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b07      	cmp	r3, #7
 800b68e:	dd05      	ble.n	800b69c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 800b690:	4b3e      	ldr	r3, [pc, #248]	; (800b78c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 800b692:	4a3c      	ldr	r2, [pc, #240]	; (800b784 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b694:	21b4      	movs	r1, #180	; 0xb4
 800b696:	483c      	ldr	r0, [pc, #240]	; (800b788 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b698:	f005 fb88 	bl	8010dac <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 800b69c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a4:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800b6a8:	4290      	cmp	r0, r2
 800b6aa:	eb71 0303 	sbcs.w	r3, r1, r3
 800b6ae:	da09      	bge.n	800b6c4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x64>
 800b6b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b6bc:	4290      	cmp	r0, r2
 800b6be:	eb71 0303 	sbcs.w	r3, r1, r3
 800b6c2:	da05      	bge.n	800b6d0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x70>
 800b6c4:	4b32      	ldr	r3, [pc, #200]	; (800b790 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 800b6c6:	4a2f      	ldr	r2, [pc, #188]	; (800b784 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b6c8:	21b5      	movs	r1, #181	; 0xb5
 800b6ca:	482f      	ldr	r0, [pc, #188]	; (800b788 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b6cc:	f005 fb6e 	bl	8010dac <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a30      	ldr	r2, [pc, #192]	; (800b794 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	dc04      	bgt.n	800b6e2 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x82>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6de:	141b      	asrs	r3, r3, #16
 800b6e0:	e001      	b.n	800b6e6 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x86>
 800b6e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 800b6e6:	61fb      	str	r3, [r7, #28]
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	f1c3 030f 	rsb	r3, r3, #15
 800b6ee:	61bb      	str	r3, [r7, #24]
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	fb03 f001 	mul.w	r0, r3, r1
 800b6fe:	68f9      	ldr	r1, [r7, #12]
 800b700:	fb02 f101 	mul.w	r1, r2, r1
 800b704:	1846      	adds	r6, r0, r1
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	fba1 0102 	umull	r0, r1, r1, r2
 800b70c:	1873      	adds	r3, r6, r1
 800b70e:	4619      	mov	r1, r3
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	1e5e      	subs	r6, r3, #1
 800b714:	f04f 0201 	mov.w	r2, #1
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	f1a6 0e20 	sub.w	lr, r6, #32
 800b720:	f1c6 0c20 	rsb	ip, r6, #32
 800b724:	fa03 f506 	lsl.w	r5, r3, r6
 800b728:	fa02 fe0e 	lsl.w	lr, r2, lr
 800b72c:	ea45 050e 	orr.w	r5, r5, lr
 800b730:	fa22 fc0c 	lsr.w	ip, r2, ip
 800b734:	ea45 050c 	orr.w	r5, r5, ip
 800b738:	fa02 f406 	lsl.w	r4, r2, r6
 800b73c:	eb10 0a04 	adds.w	sl, r0, r4
 800b740:	eb41 0b05 	adc.w	fp, r1, r5
 800b744:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  int32_t result = x >> total_shift;
 800b748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b74c:	69b9      	ldr	r1, [r7, #24]
 800b74e:	f1c1 0420 	rsb	r4, r1, #32
 800b752:	f1b1 0020 	subs.w	r0, r1, #32
 800b756:	fa22 f801 	lsr.w	r8, r2, r1
 800b75a:	fa03 f404 	lsl.w	r4, r3, r4
 800b75e:	ea48 0804 	orr.w	r8, r8, r4
 800b762:	d403      	bmi.n	800b76c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10c>
 800b764:	fa43 f000 	asr.w	r0, r3, r0
 800b768:	ea48 0800 	orr.w	r8, r8, r0
 800b76c:	fa43 f901 	asr.w	r9, r3, r1
 800b770:	4643      	mov	r3, r8
 800b772:	617b      	str	r3, [r7, #20]
  return result;
 800b774:	697b      	ldr	r3, [r7, #20]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3724      	adds	r7, #36	; 0x24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b780:	08015fac 	.word	0x08015fac
 800b784:	08015fc8 	.word	0x08015fc8
 800b788:	08016010 	.word	0x08016010
 800b78c:	08016090 	.word	0x08016090
 800b790:	080160ac 	.word	0x080160ac
 800b794:	7ffeffff 	.word	0x7ffeffff

0800b798 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	ed2d 8b02 	vpush	{d8}
 800b79e:	b0a9      	sub	sp, #164	; 0xa4
 800b7a0:	af02      	add	r7, sp, #8
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7b0:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b7b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b7c0:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b7c8:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7d0:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e4:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800b7e6:	68b8      	ldr	r0, [r7, #8]
 800b7e8:	f7fb f9c7 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d001      	beq.n	800b7f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 800b7f2:	f005 fad4 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800b7f6:	6838      	ldr	r0, [r7, #0]
 800b7f8:	f7fb f9bf 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d001      	beq.n	800b806 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 800b802:	f005 facc 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800b806:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b80a:	f7fb f9b6 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b04      	cmp	r3, #4
 800b812:	d001      	beq.n	800b818 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 800b814:	f005 fac3 	bl	8010d9e <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800b818:	2300      	movs	r3, #0
 800b81a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b81e:	2100      	movs	r1, #0
 800b820:	68b8      	ldr	r0, [r7, #8]
 800b822:	f7ff feed 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b826:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800b828:	2303      	movs	r3, #3
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	2103      	movs	r1, #3
 800b82e:	68b8      	ldr	r0, [r7, #8]
 800b830:	f7ff fee6 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b834:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800b836:	2303      	movs	r3, #3
 800b838:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b83c:	2100      	movs	r1, #0
 800b83e:	6838      	ldr	r0, [r7, #0]
 800b840:	f7ff fede 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b844:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 800b846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800b84e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800b852:	f7ff fc4f 	bl	800b0f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800b856:	4602      	mov	r2, r0
 800b858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d001      	beq.n	800b862 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 800b85e:	f005 fa9e 	bl	8010d9e <abort>
  }
  const int input_height = input_shape.Dims(1);
 800b862:	2101      	movs	r1, #1
 800b864:	68b8      	ldr	r0, [r7, #8]
 800b866:	f7ff fc0d 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b86a:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 800b86c:	2102      	movs	r1, #2
 800b86e:	68b8      	ldr	r0, [r7, #8]
 800b870:	f7ff fc08 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b874:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 800b876:	2101      	movs	r1, #1
 800b878:	6838      	ldr	r0, [r7, #0]
 800b87a:	f7ff fc03 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b87e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 800b880:	2102      	movs	r1, #2
 800b882:	6838      	ldr	r0, [r7, #0]
 800b884:	f7ff fbfe 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b888:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 800b88a:	2101      	movs	r1, #1
 800b88c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b890:	f7ff fbf8 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b894:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 800b896:	2102      	movs	r1, #2
 800b898:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b89c:	f7ff fbf2 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8a0:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	f280 80f0 	bge.w	800ba94 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	f280 80e1 	bge.w	800ba88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800b8c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8cc:	fb02 f203 	mul.w	r2, r2, r3
 800b8d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	f280 80ca 	bge.w	800ba7c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800b8e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8ee:	fb02 f203 	mul.w	r2, r2, r3
 800b8f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b904:	429a      	cmp	r2, r3
 800b906:	f280 80b3 	bge.w	800ba70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 800b90a:	f04f 0300 	mov.w	r3, #0
 800b90e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800b912:	2300      	movs	r3, #0
 800b914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b918:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	429a      	cmp	r2, r3
 800b920:	da6d      	bge.n	800b9fe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800b922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b928:	fb02 f303 	mul.w	r3, r2, r3
 800b92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b92e:	4413      	add	r3, r2
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800b932:	2300      	movs	r3, #0
 800b934:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b936:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	429a      	cmp	r2, r3
 800b93c:	da59      	bge.n	800b9f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800b93e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b940:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b942:	fb02 f303 	mul.w	r3, r2, r3
 800b946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b948:	4413      	add	r3, r2
 800b94a:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	db0c      	blt.n	800b96c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b952:	6a3a      	ldr	r2, [r7, #32]
 800b954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b956:	429a      	cmp	r2, r3
 800b958:	da08      	bge.n	800b96c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	db05      	blt.n	800b96c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b964:	429a      	cmp	r2, r3
 800b966:	da01      	bge.n	800b96c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 800b96c:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800b96e:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800b970:	7ffb      	ldrb	r3, [r7, #31]
 800b972:	f083 0301 	eor.w	r3, r3, #1
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d135      	bne.n	800b9e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800b97c:	2300      	movs	r3, #0
 800b97e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b980:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b984:	429a      	cmp	r2, r3
 800b986:	da30      	bge.n	800b9ea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 800b988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b990:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f7ff fd0b 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800b99a:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 800b9a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b9b4:	6838      	ldr	r0, [r7, #0]
 800b9b6:	f7ff fcfb 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800b9ba:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9c2:	4413      	add	r3, r2
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 800b9c8:	ed97 7a06 	vldr	s14, [r7, #24]
 800b9cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800b9d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9dc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800b9e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9e6:	e7cb      	b.n	800b980 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 800b9e8:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800b9ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9f0:	e7a1      	b.n	800b936 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800b9f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9fc:	e78c      	b.n	800b918 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 800ba04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d007      	beq.n	800ba1c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 800ba0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba16:	4413      	add	r3, r2
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800ba1c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800ba20:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ba24:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800ba28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba36:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800ba3a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ba3e:	f7ff fcb7 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ba42:	4603      	mov	r3, r0
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba4a:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 800ba4c:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 800ba50:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800ba54:	eeb0 0a48 	vmov.f32	s0, s16
 800ba58:	f7ff fd18 	bl	800b48c <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800ba5c:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800ba60:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800ba64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba68:	3301      	adds	r3, #1
 800ba6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba6e:	e746      	b.n	800b8fe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800ba70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba74:	3301      	adds	r3, #1
 800ba76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba7a:	e72f      	b.n	800b8dc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800ba7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba80:	3301      	adds	r3, #1
 800ba82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba86:	e718      	b.n	800b8ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 800ba88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba92:	e709      	b.n	800b8a8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 800ba94:	bf00      	nop
 800ba96:	379c      	adds	r7, #156	; 0x9c
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	ecbd 8b02 	vpop	{d8}
 800ba9e:	bd90      	pop	{r4, r7, pc}

0800baa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b0a9      	sub	sp, #164	; 0xa4
 800baa4:	af02      	add	r7, sp, #8
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800baba:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bac2:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800baca:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bad2:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bada:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bae2:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	dd01      	ble.n	800bb02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 800bafe:	f005 f94e 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bb02:	6838      	ldr	r0, [r7, #0]
 800bb04:	f7fb f839 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	d001      	beq.n	800bb12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 800bb0e:	f005 f946 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800bb12:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb16:	f7fb f830 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d001      	beq.n	800bb24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 800bb20:	f005 f93d 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bb24:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bb28:	f7fb f827 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d001      	beq.n	800bb36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 800bb32:	f005 f934 	bl	8010d9e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6838      	ldr	r0, [r7, #0]
 800bb40:	f7ff fd5e 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb44:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800bb46:	2303      	movs	r3, #3
 800bb48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb4c:	2103      	movs	r1, #3
 800bb4e:	6838      	ldr	r0, [r7, #0]
 800bb50:	f7ff fd56 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb54:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800bb56:	2303      	movs	r3, #3
 800bb58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb62:	f7ff fd4d 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb66:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 800bb68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d009      	beq.n	800bb84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800bb70:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bb74:	f7ff fabe 	bl	800b0f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d001      	beq.n	800bb84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 800bb80:	f005 f90d 	bl	8010d9e <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800bb84:	2101      	movs	r1, #1
 800bb86:	6838      	ldr	r0, [r7, #0]
 800bb88:	f7ff fa7c 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb8c:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800bb8e:	2102      	movs	r1, #2
 800bb90:	6838      	ldr	r0, [r7, #0]
 800bb92:	f7ff fa77 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb96:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb9e:	f7ff fa71 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bba2:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 800bba4:	2102      	movs	r1, #2
 800bba6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbaa:	f7ff fa6b 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbae:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bbb6:	f7ff fa65 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbba:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 800bbbc:	2102      	movs	r1, #2
 800bbbe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bbc2:	f7ff fa5f 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbc6:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bbd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	f280 8113 	bge.w	800be00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bbe0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	f280 8104 	bge.w	800bdf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800bbec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbf0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbf2:	fb02 f203 	mul.w	r2, r2, r3
 800bbf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	f280 80ed 	bge.w	800bde8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800bc0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bc14:	fb02 f203 	mul.w	r2, r2, r3
 800bc18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	f280 80d6 	bge.w	800bddc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bc34:	2300      	movs	r3, #0
 800bc36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc40:	429a      	cmp	r2, r3
 800bc42:	da76      	bge.n	800bd32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800bc44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc50:	4413      	add	r3, r2
 800bc52:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bc54:	2300      	movs	r3, #0
 800bc56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc60:	429a      	cmp	r2, r3
 800bc62:	da60      	bge.n	800bd26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800bc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc70:	4413      	add	r3, r2
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	db0c      	blt.n	800bc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bc7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	da08      	bge.n	800bc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	db05      	blt.n	800bc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	da01      	bge.n	800bc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 800bc94:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800bc96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800bc9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc9e:	f083 0301 	eor.w	r3, r3, #1
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d137      	bne.n	800bd18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800bca8:	2300      	movs	r3, #0
 800bcaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bcac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bcae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	da32      	bge.n	800bd1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 800bcb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcbc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800bcc0:	6838      	ldr	r0, [r7, #0]
 800bcc2:	f7ff fb75 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 800bcca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bcce:	4413      	add	r3, r2
 800bcd0:	f993 3000 	ldrsb.w	r3, [r3]
 800bcd4:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800bcd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bce2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bce6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bcea:	f7ff fb61 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800bcf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f993 3000 	ldrsb.w	r3, [r3]
 800bcfc:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 800bcfe:	6a3a      	ldr	r2, [r7, #32]
 800bd00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd02:	4413      	add	r3, r2
 800bd04:	69fa      	ldr	r2, [r7, #28]
 800bd06:	fb02 f203 	mul.w	r2, r2, r3
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800bd10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd12:	3301      	adds	r3, #1
 800bd14:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd16:	e7c9      	b.n	800bcac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 800bd18:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bd1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd1e:	3301      	adds	r3, #1
 800bd20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd24:	e799      	b.n	800bc5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bd26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd30:	e783      	b.n	800bc3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 800bd32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 800bd3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd44:	4413      	add	r3, r2
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 800bd4e:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800bd50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800bd5a:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800bd5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	f7ff f9e6 	bl	800b13a <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd76:	4413      	add	r3, r2
 800bd78:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 800bd7a:	f107 0218 	add.w	r2, r7, #24
 800bd7e:	f107 0310 	add.w	r3, r7, #16
 800bd82:	4611      	mov	r1, r2
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fa fd65 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 800bd90:	f107 0214 	add.w	r2, r7, #20
 800bd94:	f107 0310 	add.w	r3, r7, #16
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fa fd46 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800bda0:	4603      	mov	r3, r0
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800bda6:	693c      	ldr	r4, [r7, #16]
 800bda8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bdb6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800bdba:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bdbe:	f7ff faf7 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdca:	4413      	add	r3, r2
 800bdcc:	b262      	sxtb	r2, r4
 800bdce:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bdd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdda:	e723      	b.n	800bc24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bde0:	3301      	adds	r3, #1
 800bde2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bde6:	e70c      	b.n	800bc02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bde8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdec:	3301      	adds	r3, #1
 800bdee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdf2:	e6f5      	b.n	800bbe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 800bdf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdfe:	e6e6      	b.n	800bbce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800be00:	bf00      	nop
 800be02:	379c      	adds	r7, #156	; 0x9c
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}

0800be08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800be08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be0c:	b0a9      	sub	sp, #164	; 0xa4
 800be0e:	af02      	add	r7, sp, #8
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	607a      	str	r2, [r7, #4]
 800be16:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int stride_width = params.stride_width;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be1e:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800be26:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be2e:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800be36:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be3e:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be46:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4c:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be52:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	429a      	cmp	r2, r3
 800be5a:	dd01      	ble.n	800be60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58>
 800be5c:	f004 ff9f 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800be60:	6838      	ldr	r0, [r7, #0]
 800be62:	f7fa fe8a 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800be66:	4603      	mov	r3, r0
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d001      	beq.n	800be70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x68>
 800be6c:	f004 ff97 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800be70:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800be74:	f7fa fe81 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d001      	beq.n	800be82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x7a>
 800be7e:	f004 ff8e 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800be82:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800be86:	f7fa fe78 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d001      	beq.n	800be94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x8c>
 800be90:	f004 ff85 	bl	8010d9e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800be94:	2300      	movs	r3, #0
 800be96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800be9a:	2100      	movs	r1, #0
 800be9c:	6838      	ldr	r0, [r7, #0]
 800be9e:	f7ff fbaf 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bea2:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800bea4:	2303      	movs	r3, #3
 800bea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800beaa:	2103      	movs	r1, #3
 800beac:	6838      	ldr	r0, [r7, #0]
 800beae:	f7ff fba7 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800beb2:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800beb4:	2303      	movs	r3, #3
 800beb6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800beba:	2100      	movs	r1, #0
 800bebc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bec0:	f7ff fb9e 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bec4:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 800bec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800bece:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bed2:	f7ff f90f 	bl	800b0f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800bed6:	4602      	mov	r2, r0
 800bed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beda:	4293      	cmp	r3, r2
 800bedc:	d001      	beq.n	800bee2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
 800bede:	f004 ff5e 	bl	8010d9e <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800bee2:	2101      	movs	r1, #1
 800bee4:	6838      	ldr	r0, [r7, #0]
 800bee6:	f7ff f8cd 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800beea:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800beec:	2102      	movs	r1, #2
 800beee:	6838      	ldr	r0, [r7, #0]
 800bef0:	f7ff f8c8 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bef4:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 800bef6:	2101      	movs	r1, #1
 800bef8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800befc:	f7ff f8c2 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf00:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 800bf02:	2102      	movs	r1, #2
 800bf04:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bf08:	f7ff f8bc 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf0c:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 800bf0e:	2101      	movs	r1, #1
 800bf10:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bf14:	f7ff f8b6 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf18:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 800bf1a:	2102      	movs	r1, #2
 800bf1c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bf20:	f7ff f8b0 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bf24:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800bf26:	2300      	movs	r3, #0
 800bf28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf32:	429a      	cmp	r2, r3
 800bf34:	f280 8113 	bge.w	800c15e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x356>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf44:	429a      	cmp	r2, r3
 800bf46:	f280 8104 	bge.w	800c152 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x34a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800bf4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf50:	fb02 f203 	mul.w	r2, r2, r3
 800bf54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf60:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	429a      	cmp	r2, r3
 800bf68:	f280 80ed 	bge.w	800c146 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x33e>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800bf6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bf72:	fb02 f203 	mul.w	r2, r2, r3
 800bf76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bf86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	f280 80d6 	bge.w	800c13a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x332>
          std::int64_t acc = 0;
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	da71      	bge.n	800c08a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x282>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800bfa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bfaa:	fb02 f303 	mul.w	r3, r2, r3
 800bfae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfb0:	4413      	add	r3, r2
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	da60      	bge.n	800c082 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800bfc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfc4:	fb02 f303 	mul.w	r3, r2, r3
 800bfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfca:	4413      	add	r3, r2
 800bfcc:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db0c      	blt.n	800bfee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800bfd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	da08      	bge.n	800bfee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	db05      	blt.n	800bfee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800bfe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	da01      	bge.n	800bfee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e8>
 800bfee:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800bff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800bff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bff8:	f083 0301 	eor.w	r3, r3, #1
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d13a      	bne.n	800c078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x270>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800c002:	2300      	movs	r3, #0
 800c004:	677b      	str	r3, [r7, #116]	; 0x74
 800c006:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00a:	429a      	cmp	r2, r3
 800c00c:	da35      	bge.n	800c07a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x272>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 800c00e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c016:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c01a:	6838      	ldr	r0, [r7, #0]
 800c01c:	f7ff f9c8 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c020:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c028:	4413      	add	r3, r2
 800c02a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c02e:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800c030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c036:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c038:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c03c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c040:	f7ff f9b6 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800c048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c04c:	4413      	add	r3, r2
 800c04e:	f993 3000 	ldrsb.w	r3, [r3]
 800c052:	61fb      	str	r3, [r7, #28]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	6a3a      	ldr	r2, [r7, #32]
 800c058:	fb02 f303 	mul.w	r3, r2, r3
 800c05c:	461a      	mov	r2, r3
 800c05e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c066:	1884      	adds	r4, r0, r2
 800c068:	eb41 0503 	adc.w	r5, r1, r3
 800c06c:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800c070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c072:	3301      	adds	r3, #1
 800c074:	677b      	str	r3, [r7, #116]	; 0x74
 800c076:	e7c6      	b.n	800c006 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fe>
                continue;
 800c078:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c07a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c07c:	3301      	adds	r3, #1
 800c07e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c080:	e79a      	b.n	800bfb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800c082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c084:	3301      	adds	r3, #1
 800c086:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c088:	e789      	b.n	800bf9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x196>
              }
            }
          }
          if (bias_data) {
 800c08a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00f      	beq.n	800c0b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2aa>
            acc += bias_data[out_channel];
 800c092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c09c:	4413      	add	r3, r2
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0a6:	eb10 0802 	adds.w	r8, r0, r2
 800c0aa:	eb41 0903 	adc.w	r9, r1, r3
 800c0ae:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c0b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800c0bc:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c0be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	460a      	mov	r2, r1
 800c0cc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0d0:	f7ff fac6 	bl	800b660 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800c0d4:	4603      	mov	r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c0d6:	613b      	str	r3, [r7, #16]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 800c0d8:	f107 0218 	add.w	r2, r7, #24
 800c0dc:	f107 0310 	add.w	r3, r7, #16
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fa fbb6 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	613b      	str	r3, [r7, #16]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 800c0ee:	f107 0214 	add.w	r2, r7, #20
 800c0f2:	f107 0310 	add.w	r3, r7, #16
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fa fb97 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800c0fe:	4603      	mov	r3, r0
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800c104:	693e      	ldr	r6, [r7, #16]
 800c106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c110:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c114:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c118:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c11c:	f7ff f948 	bl	800b3b0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c120:	4603      	mov	r3, r0
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c128:	4413      	add	r3, r2
 800c12a:	b232      	sxth	r2, r6
 800c12c:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800c12e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c132:	3301      	adds	r3, #1
 800c134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c138:	e723      	b.n	800bf82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c13a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c13e:	3301      	adds	r3, #1
 800c140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c144:	e70c      	b.n	800bf60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c14a:	3301      	adds	r3, #1
 800c14c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c150:	e6f5      	b.n	800bf3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x136>
  for (int batch = 0; batch < batches; ++batch) {
 800c152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c156:	3301      	adds	r3, #1
 800c158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c15c:	e6e6      	b.n	800bf2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x124>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 800c15e:	bf00      	nop
 800c160:	379c      	adds	r7, #156	; 0x9c
 800c162:	46bd      	mov	sp, r7
 800c164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c168 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800c17c:	f004 fe0f 	bl	8010d9e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c184:	2134      	movs	r1, #52	; 0x34
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	4798      	blx	r3
 800c18a:	4603      	mov	r3, r0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800c194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c198:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800c19c:	af08      	add	r7, sp, #32
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	6018      	str	r0, [r3, #0]
 800c1a4:	f107 0308 	add.w	r3, r7, #8
 800c1a8:	6019      	str	r1, [r3, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800c1aa:	4bc0      	ldr	r3, [pc, #768]	; (800c4ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	f107 0108 	add.w	r1, r7, #8
 800c1b2:	f107 030c 	add.w	r3, r7, #12
 800c1b6:	6809      	ldr	r1, [r1, #0]
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	f7fe fe83 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c1be:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800c1c2:	4bbb      	ldr	r3, [pc, #748]	; (800c4b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31c>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	f107 0108 	add.w	r1, r7, #8
 800c1ca:	f107 030c 	add.w	r3, r7, #12
 800c1ce:	6809      	ldr	r1, [r1, #0]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	f7fe fe77 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c1d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	f7ff f9d6 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800c1e4:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	d10b      	bne.n	800c202 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
 800c1ea:	4bb2      	ldr	r3, [pc, #712]	; (800c4b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x320>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	f107 0108 	add.w	r1, r7, #8
 800c1f2:	f107 030c 	add.w	r3, r7, #12
 800c1f6:	6809      	ldr	r1, [r1, #0]
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f7fe fe63 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c1fe:	4603      	mov	r3, r0
 800c200:	e000      	b.n	800c204 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 800c202:	2300      	movs	r3, #0
          : nullptr;
 800c204:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800c208:	4bab      	ldr	r3, [pc, #684]	; (800c4b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x324>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	f107 030c 	add.w	r3, r7, #12
 800c214:	6809      	ldr	r1, [r1, #0]
 800c216:	6818      	ldr	r0, [r3, #0]
 800c218:	f7fe fe64 	bl	800aee4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800c21c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

  TFLITE_DCHECK(node->builtin_data != nullptr);
 800c220:	f107 0308 	add.w	r3, r7, #8
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 800c22c:	f004 fdb7 	bl	8010d9e <abort>
  const auto& params =
 800c230:	f107 0308 	add.w	r3, r7, #8
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 800c23c:	f107 0308 	add.w	r3, r7, #8
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d101      	bne.n	800c24c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
 800c248:	f004 fda9 	bl	8010d9e <abort>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800c258:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c25c:	7a1a      	ldrb	r2, [r3, #8]
 800c25e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c262:	7a1b      	ldrb	r3, [r3, #8]
 800c264:	429a      	cmp	r2, r3
 800c266:	d019      	beq.n	800c29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
 800c268:	f107 030c 	add.w	r3, r7, #12
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	695c      	ldr	r4, [r3, #20]
 800c270:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c274:	7a1b      	ldrb	r3, [r3, #8]
 800c276:	461a      	mov	r2, r3
 800c278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c27c:	7a1b      	ldrb	r3, [r3, #8]
 800c27e:	f107 000c 	add.w	r0, r7, #12
 800c282:	9303      	str	r3, [sp, #12]
 800c284:	9202      	str	r2, [sp, #8]
 800c286:	4b8d      	ldr	r3, [pc, #564]	; (800c4bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x328>)
 800c288:	9301      	str	r3, [sp, #4]
 800c28a:	4b8d      	ldr	r3, [pc, #564]	; (800c4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32c>)
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	2337      	movs	r3, #55	; 0x37
 800c290:	4a8c      	ldr	r2, [pc, #560]	; (800c4c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x330>)
 800c292:	498d      	ldr	r1, [pc, #564]	; (800c4c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x334>)
 800c294:	6800      	ldr	r0, [r0, #0]
 800c296:	47a0      	blx	r4
 800c298:	2301      	movs	r3, #1
 800c29a:	e19b      	b.n	800c5d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
  TF_LITE_ENSURE_MSG(
 800c29c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2a0:	7a1a      	ldrb	r2, [r3, #8]
 800c2a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c2a6:	7a1b      	ldrb	r3, [r3, #8]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d014      	beq.n	800c2d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 800c2ac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2b0:	7a1b      	ldrb	r3, [r3, #8]
 800c2b2:	2b07      	cmp	r3, #7
 800c2b4:	d104      	bne.n	800c2c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12c>
 800c2b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c2ba:	7a1b      	ldrb	r3, [r3, #8]
 800c2bc:	2b09      	cmp	r3, #9
 800c2be:	d00a      	beq.n	800c2d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 800c2c0:	f107 030c 	add.w	r3, r7, #12
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	f107 020c 	add.w	r2, r7, #12
 800c2cc:	497f      	ldr	r1, [pc, #508]	; (800c4cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>)
 800c2ce:	6810      	ldr	r0, [r2, #0]
 800c2d0:	4798      	blx	r3
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e17e      	b.n	800c5d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
      context,
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 800c2d6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2da:	7a1b      	ldrb	r3, [r3, #8]
 800c2dc:	2b09      	cmp	r3, #9
 800c2de:	f000 80f7 	beq.w	800c4d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33c>
 800c2e2:	2b09      	cmp	r3, #9
 800c2e4:	f300 8160 	bgt.w	800c5a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d002      	beq.n	800c2f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 800c2ec:	2b07      	cmp	r3, #7
 800c2ee:	d071      	beq.n	800c3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
 800c2f0:	e15a      	b.n	800c5a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c2f2:	f107 0310 	add.w	r3, r7, #16
 800c2f6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c2fa:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fa31 	bl	800c766 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c308:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c30c:	4618      	mov	r0, r3
 800c30e:	f001 f950 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c312:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c316:	f7fe fe05 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c31a:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800c31c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c320:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c324:	4618      	mov	r0, r3
 800c326:	f001 f944 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c32a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c32e:	f7fe fdf9 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c332:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800c334:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c338:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c33c:	4618      	mov	r0, r3
 800c33e:	f001 f938 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c342:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c346:	f7fe fded 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c34a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800c34c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c350:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c354:	4618      	mov	r0, r3
 800c356:	f001 f92c 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c35a:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c35e:	f7fe fdf0 	bl	800af42 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800c362:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c364:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c368:	2100      	movs	r1, #0
 800c36a:	4618      	mov	r0, r3
 800c36c:	f001 f921 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c370:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c374:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c378:	f107 0010 	add.w	r0, r7, #16
 800c37c:	2300      	movs	r3, #0
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	9604      	str	r6, [sp, #16]
 800c388:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	9502      	str	r5, [sp, #8]
 800c390:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	9400      	str	r4, [sp, #0]
 800c398:	4613      	mov	r3, r2
 800c39a:	4642      	mov	r2, r8
 800c39c:	f7ff f9fc 	bl	800b798 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c3a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fa fbd2 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 800c3aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fa fbcd 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c3b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fa fbc8 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c3be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fa fbc3 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c3c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fa fbbe 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800c3d2:	e0fe      	b.n	800c5d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
    }
    case kTfLiteInt16: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
 800c3d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c3d8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c3dc:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f9fc 	bl	800c7de <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c3e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c3ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c3f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c3f6:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f001 f8d9 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c400:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c404:	f7ff f8a4 	bl	800b550 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800c408:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int16_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c40a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c40e:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c412:	4618      	mov	r0, r3
 800c414:	f001 f8cd 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c418:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c41c:	f7fe fda2 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c420:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c422:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c426:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 f8c1 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c430:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c434:	f7ff f8d5 	bl	800b5e2 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800c438:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<std::int64_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c43a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c43e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c442:	4618      	mov	r0, r3
 800c444:	f001 f8b5 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c448:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c44c:	f7ff f88f 	bl	800b56e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800c450:	4603      	mov	r3, r0
 800c452:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800c456:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800c45a:	9306      	str	r3, [sp, #24]
 800c45c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c460:	9305      	str	r3, [sp, #20]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	9302      	str	r3, [sp, #8]
 800c470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	9600      	str	r6, [sp, #0]
 800c478:	4613      	mov	r3, r2
 800c47a:	462a      	mov	r2, r5
 800c47c:	4621      	mov	r1, r4
 800c47e:	f7ff fcc3 	bl	800be08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
 800c482:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c486:	4618      	mov	r0, r3
 800c488:	f7fa fb61 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c48c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c490:	4618      	mov	r0, r3
 800c492:	f7fa fb5c 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fa fb57 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c4a0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fa fb52 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int16_t>(output));
      break;
 800c4aa:	e092      	b.n	800c5d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
 800c4ac:	08017280 	.word	0x08017280
 800c4b0:	08017284 	.word	0x08017284
 800c4b4:	08017288 	.word	0x08017288
 800c4b8:	0801728c 	.word	0x0801728c
 800c4bc:	08016154 	.word	0x08016154
 800c4c0:	08016164 	.word	0x08016164
 800c4c4:	080160fc 	.word	0x080160fc
 800c4c8:	08016138 	.word	0x08016138
 800c4cc:	08016170 	.word	0x08016170
    }
    case kTfLiteInt8: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
 800c4d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800c4d4:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c4d8:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 f97e 	bl	800c7de <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c4e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c4e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c4e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c4ec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c4ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800c4f2:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f001 f85b 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c4fc:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800c500:	f7fe fd30 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c504:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c506:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c50a:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f84f 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c514:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800c518:	f7fe fd24 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c51c:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c51e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c522:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800c526:	4618      	mov	r0, r3
 800c528:	f001 f843 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c52c:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800c530:	f7ff f848 	bl	800b5c4 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800c534:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c536:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c53a:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 f837 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 800c544:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800c548:	f7fe fd1b 	bl	800af82 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800c54c:	4603      	mov	r3, r0
 800c54e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800c552:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c556:	9306      	str	r3, [sp, #24]
 800c558:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c566:	9303      	str	r3, [sp, #12]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	9600      	str	r6, [sp, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	462a      	mov	r2, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	f7ff fa91 	bl	800baa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
 800c57e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c582:	4618      	mov	r0, r3
 800c584:	f7fa fae3 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c588:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fa fade 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c592:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800c596:	4618      	mov	r0, r3
 800c598:	f7fa fad9 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 800c59c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fa fad4 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800c5a6:	e014      	b.n	800c5d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43e>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800c5a8:	f107 030c 	add.w	r3, r7, #12
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695c      	ldr	r4, [r3, #20]
 800c5b0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c5b4:	7a1b      	ldrb	r3, [r3, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f7 faa4 	bl	8003b04 <TfLiteTypeGetName>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c5c2:	7a1b      	ldrb	r3, [r3, #8]
 800c5c4:	f107 000c 	add.w	r0, r7, #12
 800c5c8:	4905      	ldr	r1, [pc, #20]	; (800c5e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>)
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x440>
  }
  return kTfLiteOk;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e0:	080161dc 	.word	0x080161dc

0800c5e4 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 800c5e4:	b4b0      	push	{r4, r5, r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a07      	ldr	r2, [pc, #28]	; (800c60c <_ZN6tflite16Register_CONV_2DEv+0x28>)
 800c5f0:	461c      	mov	r4, r3
 800c5f2:	4615      	mov	r5, r2
 800c5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c5fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	bcb0      	pop	{r4, r5, r7}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	080161f8 	.word	0x080161f8

0800c610 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	3b01      	subs	r3, #1
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	fb02 f303 	mul.w	r3, r2, r3
 800c628:	3301      	adds	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	3b01      	subs	r3, #1
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	fb02 f203 	mul.w	r2, r2, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	441a      	add	r2, r3
  int total_padding =
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c646:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	bfb8      	it	lt
 800c652:	425b      	neglt	r3, r3
 800c654:	461a      	mov	r2, r3
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	0fda      	lsrs	r2, r3, #31
 800c65e:	4413      	add	r3, r2
 800c660:	105b      	asrs	r3, r3, #1
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 800c66e:	b480      	push	{r7}
 800c670:	b087      	sub	sp, #28
 800c672:	af00      	add	r7, sp, #0
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3b01      	subs	r3, #1
 800c682:	6a3a      	ldr	r2, [r7, #32]
 800c684:	fb02 f303 	mul.w	r3, r2, r3
 800c688:	3301      	adds	r3, #1
 800c68a:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 800c692:	2300      	movs	r3, #0
 800c694:	e017      	b.n	800c6c6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d002      	beq.n	800c6a2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d008      	beq.n	800c6b2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 800c6a0:	e010      	b.n	800c6c4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	1e5a      	subs	r2, r3, #1
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800c6b0:	e009      	b.n	800c6c6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	441a      	add	r2, r3
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	1ad2      	subs	r2, r2, r3
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	fb92 f3f3 	sdiv	r3, r2, r3
 800c6c2:	e000      	b.n	800c6c6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 800c6c4:	2300      	movs	r3, #0
  }
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	371c      	adds	r7, #28
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b088      	sub	sp, #32
 800c6d6:	af02      	add	r7, sp, #8
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	607a      	str	r2, [r7, #4]
 800c6de:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800c6e0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6ee:	f7ff ffbe 	bl	800c66e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f6:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800c6f8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c706:	f7ff ffb2 	bl	800c66e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800c70a:	4602      	mov	r2, r0
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f107 0214 	add.w	r2, r7, #20
 800c71c:	9201      	str	r2, [sp, #4]
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7ff ff72 	bl	800c610 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800c72c:	4602      	mov	r2, r0
  padding_values.height =
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 800c738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f107 0214 	add.w	r2, r7, #20
 800c740:	9201      	str	r2, [sp, #4]
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c748:	6a39      	ldr	r1, [r7, #32]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff ff60 	bl	800c610 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800c750:	4602      	mov	r2, r0
  padding_values.width =
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	609a      	str	r2, [r3, #8]
  return padding_values;
 800c75c:	bf00      	nop
}
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	7b18      	ldrb	r0, [r3, #12]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	3330      	adds	r3, #48	; 0x30
 800c780:	4619      	mov	r1, r3
 800c782:	f7fe fea3 	bl	800b4cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 ff33 	bl	800d5f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	b21a      	sxth	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	b21a      	sxth	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	b21a      	sxth	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	b21a      	sxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	b21a      	sxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	b21a      	sxth	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	821a      	strh	r2, [r3, #16]
  return op_params;
 800c7d4:	bf00      	nop
}
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	425a      	negs	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	425a      	negs	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699a      	ldr	r2, [r3, #24]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69da      	ldr	r2, [r3, #28]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	425a      	negs	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 feea 	bl	800d5f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c822:	4603      	mov	r3, r0
 800c824:	461a      	mov	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	b21a      	sxth	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	b21a      	sxth	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	b21a      	sxth	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	b21a      	sxth	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	b21a      	sxth	r2, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	b21a      	sxth	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800c876:	bf00      	nop
}
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c882:	b09d      	sub	sp, #116	; 0x74
 800c884:	af0a      	add	r7, sp, #40	; 0x28
 800c886:	6278      	str	r0, [r7, #36]	; 0x24
 800c888:	6239      	str	r1, [r7, #32]
 800c88a:	61fa      	str	r2, [r7, #28]
 800c88c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b03      	cmp	r3, #3
 800c896:	bf0c      	ite	eq
 800c898:	2301      	moveq	r3, #1
 800c89a:	2300      	movne	r3, #0
 800c89c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800c8a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c8a4:	f083 0301 	eor.w	r3, r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00f      	beq.n	800c8ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d00a      	beq.n	800c8ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	695c      	ldr	r4, [r3, #20]
 800c8bc:	4b68      	ldr	r3, [pc, #416]	; (800ca60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	2356      	movs	r3, #86	; 0x56
 800c8c2:	4a68      	ldr	r2, [pc, #416]	; (800ca64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c8c4:	4968      	ldr	r1, [pc, #416]	; (800ca68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c8c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8c8:	47a0      	blx	r4
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e0c4      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d012      	beq.n	800c8fe <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	695c      	ldr	r4, [r3, #20]
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	9203      	str	r2, [sp, #12]
 800c8e6:	9302      	str	r3, [sp, #8]
 800c8e8:	4b60      	ldr	r3, [pc, #384]	; (800ca6c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	4b60      	ldr	r3, [pc, #384]	; (800ca70 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	2357      	movs	r3, #87	; 0x57
 800c8f2:	4a5c      	ldr	r2, [pc, #368]	; (800ca64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c8f4:	495f      	ldr	r1, [pc, #380]	; (800ca74 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c8f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8f8:	47a0      	blx	r4
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e0ac      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	6899      	ldr	r1, [r3, #8]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	685c      	ldr	r4, [r3, #4]
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 800c916:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c918:	f107 0008 	add.w	r0, r7, #8
 800c91c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c920:	9207      	str	r2, [sp, #28]
 800c922:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c926:	9206      	str	r2, [sp, #24]
 800c928:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800c92c:	9205      	str	r2, [sp, #20]
 800c92e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c930:	9204      	str	r2, [sp, #16]
 800c932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c934:	9203      	str	r2, [sp, #12]
 800c936:	69ba      	ldr	r2, [r7, #24]
 800c938:	9202      	str	r2, [sp, #8]
 800c93a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c93c:	9201      	str	r2, [sp, #4]
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	462b      	mov	r3, r5
 800c942:	4622      	mov	r2, r4
 800c944:	f7ff fec5 	bl	800c6d2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800c948:	4634      	mov	r4, r6
 800c94a:	f107 0308 	add.w	r3, r7, #8
 800c94e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800c954:	2200      	movs	r2, #0
 800c956:	6a39      	ldr	r1, [r7, #32]
 800c958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c95a:	f7f9 fb44 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c95e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 800c960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	695c      	ldr	r4, [r3, #20]
 800c96a:	4b43      	ldr	r3, [pc, #268]	; (800ca78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	2361      	movs	r3, #97	; 0x61
 800c970:	4a3c      	ldr	r2, [pc, #240]	; (800ca64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c972:	493d      	ldr	r1, [pc, #244]	; (800ca68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c976:	47a0      	blx	r4
 800c978:	2301      	movs	r3, #1
 800c97a:	e06d      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800c97c:	2201      	movs	r2, #1
 800c97e:	6a39      	ldr	r1, [r7, #32]
 800c980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c982:	f7f9 fb30 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c986:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	695c      	ldr	r4, [r3, #20]
 800c992:	4b3a      	ldr	r3, [pc, #232]	; (800ca7c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	2363      	movs	r3, #99	; 0x63
 800c998:	4a32      	ldr	r2, [pc, #200]	; (800ca64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c99a:	4933      	ldr	r1, [pc, #204]	; (800ca68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c99c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c99e:	47a0      	blx	r4
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e059      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	6a39      	ldr	r1, [r7, #32]
 800c9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9aa:	f7f9 fb4c 	bl	8006046 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800c9ae:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6a39      	ldr	r1, [r7, #32]
 800c9b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9b6:	f7f9 fb26 	bl	8006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c9ba:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	695c      	ldr	r4, [r3, #20]
 800c9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ca80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	2367      	movs	r3, #103	; 0x67
 800c9cc:	4a25      	ldr	r2, [pc, #148]	; (800ca64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c9ce:	4926      	ldr	r1, [pc, #152]	; (800ca68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c9d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d2:	47a0      	blx	r4
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e03f      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800c9d8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d02e      	beq.n	800ca3e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	330c      	adds	r3, #12
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9f0:	321c      	adds	r2, #28
 800c9f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c9f4:	3120      	adds	r1, #32
 800c9f6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c9f8:	302c      	adds	r0, #44	; 0x2c
 800c9fa:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800c9fc:	3430      	adds	r4, #48	; 0x30
 800c9fe:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800ca00:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800ca02:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800ca04:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	9308      	str	r3, [sp, #32]
 800ca0a:	9607      	str	r6, [sp, #28]
 800ca0c:	9506      	str	r5, [sp, #24]
 800ca0e:	9405      	str	r4, [sp, #20]
 800ca10:	9004      	str	r0, [sp, #16]
 800ca12:	9103      	str	r1, [sp, #12]
 800ca14:	9202      	str	r2, [sp, #8]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca26:	f7f9 fb1f 	bl	8006068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 800ca38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca3c:	e00c      	b.n	800ca58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca40:	691a      	ldr	r2, [r3, #16]
 800ca42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca44:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800ca46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca48:	691a      	ldr	r2, [r3, #16]
 800ca4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca4c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca50:	691a      	ldr	r2, [r3, #16]
 800ca52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca54:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	374c      	adds	r7, #76	; 0x4c
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca60:	0801636c 	.word	0x0801636c
 800ca64:	08016314 	.word	0x08016314
 800ca68:	08016354 	.word	0x08016354
 800ca6c:	080163ac 	.word	0x080163ac
 800ca70:	080163b0 	.word	0x080163b0
 800ca74:	08016390 	.word	0x08016390
 800ca78:	080163c4 	.word	0x080163c4
 800ca7c:	080163d8 	.word	0x080163d8
 800ca80:	080163ec 	.word	0x080163ec

0800ca84 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800ca84:	b590      	push	{r4, r7, lr}
 800ca86:	b099      	sub	sp, #100	; 0x64
 800ca88:	af08      	add	r7, sp, #32
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ca96:	f004 f982 	bl	8010d9e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800caa2:	f004 f97c 	bl	8010d9e <abort>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto& params =
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	695b      	ldr	r3, [r3, #20]
 800cab0:	63bb      	str	r3, [r7, #56]	; 0x38
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800cab2:	2200      	movs	r2, #0
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7f9 faa5 	bl	8006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800cabc:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800cabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	695c      	ldr	r4, [r3, #20]
 800cac8:	4b75      	ldr	r3, [pc, #468]	; (800cca0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	2386      	movs	r3, #134	; 0x86
 800cace:	4a75      	ldr	r2, [pc, #468]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cad0:	4975      	ldr	r1, [pc, #468]	; (800cca8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	47a0      	blx	r4
 800cad6:	2301      	movs	r3, #1
 800cad8:	e0de      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800cada:	2200      	movs	r2, #0
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7f9 fa81 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cae4:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	695c      	ldr	r4, [r3, #20]
 800caf0:	4b6e      	ldr	r3, [pc, #440]	; (800ccac <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2388      	movs	r3, #136	; 0x88
 800caf6:	4a6b      	ldr	r2, [pc, #428]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800caf8:	496b      	ldr	r1, [pc, #428]	; (800cca8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	47a0      	blx	r4
 800cafe:	2301      	movs	r3, #1
 800cb00:	e0ca      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800cb02:	2201      	movs	r2, #1
 800cb04:	6839      	ldr	r1, [r7, #0]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f9 fa6d 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cb0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10a      	bne.n	800cb2a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	695c      	ldr	r4, [r3, #20]
 800cb18:	4b65      	ldr	r3, [pc, #404]	; (800ccb0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	238a      	movs	r3, #138	; 0x8a
 800cb1e:	4a61      	ldr	r2, [pc, #388]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cb20:	4961      	ldr	r1, [pc, #388]	; (800cca8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	47a0      	blx	r4
 800cb26:	2301      	movs	r3, #1
 800cb28:	e0b6      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>

  const int input_width = input->dims->data[2];
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	62bb      	str	r3, [r7, #40]	; 0x28
  const int input_height = input->dims->data[1];
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
  const int filter_width = filter->dims->data[2];
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	623b      	str	r3, [r7, #32]
  const int filter_height = filter->dims->data[1];
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	61fb      	str	r3, [r7, #28]
  const int output_width = output->dims->data[2];
 800cb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	61bb      	str	r3, [r7, #24]
  const int output_height = output->dims->data[1];
 800cb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	617b      	str	r3, [r7, #20]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	613b      	str	r3, [r7, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800cb66:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cb68:	0092      	lsls	r2, r2, #2
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	4798      	blx	r3
 800cb70:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 800cb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb74:	625a      	str	r2, [r3, #36]	; 0x24
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800cb7a:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800cb7c:	0092      	lsls	r2, r2, #2
 800cb7e:	4611      	mov	r1, r2
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	4798      	blx	r3
 800cb84:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800cb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb88:	629a      	str	r2, [r3, #40]	; 0x28

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b09      	cmp	r3, #9
 800cb90:	d003      	beq.n	800cb9a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x116>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b07      	cmp	r3, #7
 800cb98:	d161      	bne.n	800cc5e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1da>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d013      	beq.n	800cbcc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x148>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	695c      	ldr	r4, [r3, #20]
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbae:	461a      	mov	r2, r3
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	9303      	str	r3, [sp, #12]
 800cbb4:	9202      	str	r2, [sp, #8]
 800cbb6:	4b3f      	ldr	r3, [pc, #252]	; (800ccb4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	4b3f      	ldr	r3, [pc, #252]	; (800ccb8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	239e      	movs	r3, #158	; 0x9e
 800cbc0:	4a38      	ldr	r2, [pc, #224]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cbc2:	493e      	ldr	r1, [pc, #248]	; (800ccbc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	47a0      	blx	r4
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e065      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd0:	60fb      	str	r3, [r7, #12]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800cbd8:	f004 f8e1 	bl	8010d9e <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
 800cbe4:	f004 f8db 	bl	8010d9e <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x170>
 800cbf0:	f004 f8d5 	bl	8010d9e <abort>

    TF_LITE_ENSURE(context,
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d012      	beq.n	800cc24 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d00a      	beq.n	800cc24 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695c      	ldr	r4, [r3, #20]
 800cc12:	4b2b      	ldr	r3, [pc, #172]	; (800ccc0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	23a7      	movs	r3, #167	; 0xa7
 800cc18:	4a22      	ldr	r2, [pc, #136]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cc1a:	4923      	ldr	r1, [pc, #140]	; (800cca8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	47a0      	blx	r4
 800cc20:	2301      	movs	r3, #1
 800cc22:	e039      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d014      	beq.n	800cc5e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1da>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	695c      	ldr	r4, [r3, #20]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	6852      	ldr	r2, [r2, #4]
 800cc42:	6812      	ldr	r2, [r2, #0]
 800cc44:	9203      	str	r2, [sp, #12]
 800cc46:	9302      	str	r3, [sp, #8]
 800cc48:	4b1e      	ldr	r3, [pc, #120]	; (800ccc4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	4b1e      	ldr	r3, [pc, #120]	; (800ccc8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	23ab      	movs	r3, #171	; 0xab
 800cc52:	4a14      	ldr	r2, [pc, #80]	; (800cca4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800cc54:	4919      	ldr	r1, [pc, #100]	; (800ccbc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	47a0      	blx	r4
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e01c      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc64:	9206      	str	r2, [sp, #24]
 800cc66:	9305      	str	r3, [sp, #20]
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	9302      	str	r3, [sp, #8]
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff fdfc 	bl	800c880 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	72fb      	strb	r3, [r7, #11]
 800cc8c:	7afb      	ldrb	r3, [r7, #11]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x212>
 800cc92:	7afb      	ldrb	r3, [r7, #11]
 800cc94:	e000      	b.n	800cc98 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3744      	adds	r7, #68	; 0x44
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd90      	pop	{r4, r7, pc}
 800cca0:	080163ec 	.word	0x080163ec
 800cca4:	08016314 	.word	0x08016314
 800cca8:	08016354 	.word	0x08016354
 800ccac:	080163c4 	.word	0x080163c4
 800ccb0:	080163d8 	.word	0x080163d8
 800ccb4:	08016400 	.word	0x08016400
 800ccb8:	0801641c 	.word	0x0801641c
 800ccbc:	08016390 	.word	0x08016390
 800ccc0:	08016438 	.word	0x08016438
 800ccc4:	080164b4 	.word	0x080164b4
 800ccc8:	080164dc 	.word	0x080164dc

0800cccc <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fe f89d 	bl	800ae18 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
}
 800cce2:	4610      	mov	r0, r2
 800cce4:	4619      	mov	r1, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccf6:	ed97 0a01 	vldr	s0, [r7, #4]
 800ccfa:	f003 ff31 	bl	8010b60 <expf>
 800ccfe:	eef0 7a40 	vmov.f32	s15, s0
 800cd02:	eeb0 0a67 	vmov.f32	s0, s15
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7f9 ff2f 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cd1c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	db03      	blt.n	800cd2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	db01      	blt.n	800cd30 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800cd2c:	f004 f837 	bl	8010d9e <abort>
  const auto* dims_data = shape.DimsData();
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7fe f9cc 	bl	800b0ce <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800cd36:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	613b      	str	r3, [r7, #16]
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	da12      	bge.n	800cd6e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d005      	beq.n	800cd5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	4413      	add	r3, r2
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	e000      	b.n	800cd5e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	fb03 f302 	mul.w	r3, r3, r2
 800cd64:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	e7e8      	b.n	800cd40 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800cd6e:	697b      	ldr	r3, [r7, #20]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3718      	adds	r7, #24
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b091      	sub	sp, #68	; 0x44
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6a1b      	ldr	r3, [r3, #32]
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800cd92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cd94:	f7f9 fef1 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cd98:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800cd9a:	6838      	ldr	r0, [r7, #0]
 800cd9c:	f7f9 feed 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cda0:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	4619      	mov	r1, r3
 800cda8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cdaa:	f7ff ffaf 	bl	800cd0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800cdae:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	1e99      	subs	r1, r3, #2
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdba:	6838      	ldr	r0, [r7, #0]
 800cdbc:	f7fe fc20 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800cdc0:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6838      	ldr	r0, [r7, #0]
 800cdca:	f7fe f95b 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cdce:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	da5f      	bge.n	800ce9c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800cddc:	2300      	movs	r3, #0
 800cdde:	63bb      	str	r3, [r7, #56]	; 0x38
 800cde0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	da55      	bge.n	800ce94 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800cde8:	f04f 0300 	mov.w	r3, #0
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800cdee:	2300      	movs	r3, #0
 800cdf0:	633b      	str	r3, [r7, #48]	; 0x30
 800cdf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	da21      	bge.n	800ce3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800cdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	fb02 f203 	mul.w	r2, r2, r3
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	4413      	add	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	fb02 f203 	mul.w	r2, r2, r3
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce20:	4413      	add	r3, r2
 800ce22:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800ce26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	3301      	adds	r3, #1
 800ce3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ce3c:	e7d9      	b.n	800cdf2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800ce44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d005      	beq.n	800ce56 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce50:	4413      	add	r3, r2
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800ce56:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ce5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce66:	fb02 f203 	mul.w	r2, r2, r3
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce72:	18d4      	adds	r4, r2, r3
 800ce74:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800ce78:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800ce7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce80:	f7fe fb04 	bl	800b48c <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800ce84:	eef0 7a40 	vmov.f32	s15, s0
 800ce88:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	3301      	adds	r3, #1
 800ce90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce92:	e7a5      	b.n	800cde0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800ce94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce96:	3301      	adds	r3, #1
 800ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce9a:	e79b      	b.n	800cdd4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	3744      	adds	r7, #68	; 0x44
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd90      	pop	{r4, r7, pc}

0800cea4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b096      	sub	sp, #88	; 0x58
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800cedc:	6838      	ldr	r0, [r7, #0]
 800cede:	f7f9 fe4c 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	dc01      	bgt.n	800ceec <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800cee8:	f003 ff59 	bl	8010d9e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800ceec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ceee:	f7f9 fe44 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d001      	beq.n	800cefc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800cef8:	f003 ff51 	bl	8010d9e <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	dd01      	ble.n	800cf08 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800cf04:	f003 ff4b 	bl	8010d9e <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800cf08:	6838      	ldr	r0, [r7, #0]
 800cf0a:	f7f9 fe36 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf0e:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800cf10:	2100      	movs	r1, #0
 800cf12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf14:	f7fe f8b6 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf18:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf1e:	f7fe f8b1 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf22:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800cf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf26:	3b02      	subs	r3, #2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6838      	ldr	r0, [r7, #0]
 800cf2c:	f7fe f8aa 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	4293      	cmp	r3, r2
 800cf36:	dd01      	ble.n	800cf3c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800cf38:	f003 ff31 	bl	8010d9e <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	4619      	mov	r1, r3
 800cf42:	6838      	ldr	r0, [r7, #0]
 800cf44:	f7fe f89e 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cf48:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	657b      	str	r3, [r7, #84]	; 0x54
 800cf4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	429a      	cmp	r2, r3
 800cf54:	da75      	bge.n	800d042 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800cf56:	2300      	movs	r3, #0
 800cf58:	653b      	str	r3, [r7, #80]	; 0x50
 800cf5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	da6b      	bge.n	800d03a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800cf66:	2300      	movs	r3, #0
 800cf68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	da26      	bge.n	800cfc0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 800cf72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf76:	fb02 f203 	mul.w	r2, r2, r3
 800cf7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf7c:	4413      	add	r3, r2
 800cf7e:	461a      	mov	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4413      	add	r3, r2
 800cf84:	f993 3000 	ldrsb.w	r3, [r3]
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800cf8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf8e:	fb02 f203 	mul.w	r2, r2, r3
 800cf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf94:	4413      	add	r3, r2
 800cf96:	461a      	mov	r2, r3
 800cf98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f993 3000 	ldrsb.w	r3, [r3]
 800cfa0:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800cfa2:	6a3a      	ldr	r2, [r7, #32]
 800cfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfa6:	4413      	add	r3, r2
 800cfa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfac:	440a      	add	r2, r1
 800cfae:	fb02 f203 	mul.w	r2, r2, r3
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800cfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfba:	3301      	adds	r3, #1
 800cfbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfbe:	e7d4      	b.n	800cf6a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800cfc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d007      	beq.n	800cfd6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800cfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfcc:	4413      	add	r3, r2
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe f8ac 	bl	800b13a <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfea:	4413      	add	r3, r2
 800cfec:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800cfee:	f107 021c 	add.w	r2, r7, #28
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7f9 fc2b 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800cffe:	4603      	mov	r3, r0
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800d004:	f107 0218 	add.w	r2, r7, #24
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f9 fc0c 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800d014:	4603      	mov	r3, r0
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800d01a:	6979      	ldr	r1, [r7, #20]
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d020:	fb02 f203 	mul.w	r2, r2, r3
 800d024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d026:	4413      	add	r3, r2
 800d028:	461a      	mov	r2, r3
 800d02a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d02c:	4413      	add	r3, r2
 800d02e:	b24a      	sxtb	r2, r1
 800d030:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800d032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d034:	3301      	adds	r3, #1
 800d036:	653b      	str	r3, [r7, #80]	; 0x50
 800d038:	e78f      	b.n	800cf5a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800d03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d03c:	3301      	adds	r3, #1
 800d03e:	657b      	str	r3, [r7, #84]	; 0x54
 800d040:	e785      	b.n	800cf4e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800d042:	bf00      	nop
 800d044:	3758      	adds	r7, #88	; 0x58
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800d05e:	f003 fe9e 	bl	8010d9e <abort>
  return context->AllocatePersistentBuffer(context,
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	2120      	movs	r1, #32
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	4798      	blx	r3
 800d06c:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800d078:	b5b0      	push	{r4, r5, r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af04      	add	r7, sp, #16
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800d08a:	f003 fe88 	bl	8010d9e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800d096:	f003 fe82 	bl	8010d9e <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	61fb      	str	r3, [r7, #28]
  const auto params =
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 800d0a6:	4b47      	ldr	r3, [pc, #284]	; (800d1c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7f8 ff99 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d0b4:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	695c      	ldr	r4, [r3, #20]
 800d0c0:	4b41      	ldr	r3, [pc, #260]	; (800d1c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	232f      	movs	r3, #47	; 0x2f
 800d0c6:	4a41      	ldr	r2, [pc, #260]	; (800d1cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d0c8:	4941      	ldr	r1, [pc, #260]	; (800d1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	47a0      	blx	r4
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e073      	b.n	800d1ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 800d0d2:	4b40      	ldr	r3, [pc, #256]	; (800d1d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7f8 ff83 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d0e0:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	695c      	ldr	r4, [r3, #20]
 800d0ec:	4b3a      	ldr	r3, [pc, #232]	; (800d1d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	2332      	movs	r3, #50	; 0x32
 800d0f2:	4a36      	ldr	r2, [pc, #216]	; (800d1cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d0f4:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	47a0      	blx	r4
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e05d      	b.n	800d1ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 800d0fe:	4b37      	ldr	r3, [pc, #220]	; (800d1dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7f8 ff9d 	bl	8006046 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800d10c:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 800d10e:	4b34      	ldr	r3, [pc, #208]	; (800d1e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7f8 ff75 	bl	8006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d11c:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10a      	bne.n	800d13a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	695c      	ldr	r4, [r3, #20]
 800d128:	4b2e      	ldr	r3, [pc, #184]	; (800d1e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	2336      	movs	r3, #54	; 0x36
 800d12e:	4a27      	ldr	r2, [pc, #156]	; (800d1cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d130:	4927      	ldr	r1, [pc, #156]	; (800d1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	47a0      	blx	r4
 800d136:	2301      	movs	r3, #1
 800d138:	e03f      	b.n	800d1ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	781a      	ldrb	r2, [r3, #0]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d01a      	beq.n	800d17c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	695c      	ldr	r4, [r3, #20]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7f6 fcd8 	bl	8003b04 <TfLiteTypeGetName>
 800d154:	4605      	mov	r5, r0
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f6 fcd2 	bl	8003b04 <TfLiteTypeGetName>
 800d160:	4603      	mov	r3, r0
 800d162:	9303      	str	r3, [sp, #12]
 800d164:	9502      	str	r5, [sp, #8]
 800d166:	4b20      	ldr	r3, [pc, #128]	; (800d1e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	4b20      	ldr	r3, [pc, #128]	; (800d1ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	2338      	movs	r3, #56	; 0x38
 800d170:	4a16      	ldr	r2, [pc, #88]	; (800d1cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800d172:	491f      	ldr	r1, [pc, #124]	; (800d1f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	47a0      	blx	r4
 800d178:	2301      	movs	r3, #1
 800d17a:	e01e      	b.n	800d1ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	781a      	ldrb	r2, [r3, #0]
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d006      	beq.n	800d196 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	4919      	ldr	r1, [pc, #100]	; (800d1f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	4798      	blx	r3
 800d192:	2301      	movs	r3, #1
 800d194:	e011      	b.n	800d1ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	7819      	ldrb	r1, [r3, #0]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	781a      	ldrb	r2, [r3, #0]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	9303      	str	r3, [sp, #12]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	9302      	str	r3, [sp, #8]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f9a8 	bl	800d506 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800d1b6:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 800d1b8:	bf00      	nop
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3720      	adds	r7, #32
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	08017290 	.word	0x08017290
 800d1c8:	0801655c 	.word	0x0801655c
 800d1cc:	08016500 	.word	0x08016500
 800d1d0:	08016544 	.word	0x08016544
 800d1d4:	08017294 	.word	0x08017294
 800d1d8:	08016570 	.word	0x08016570
 800d1dc:	08017298 	.word	0x08017298
 800d1e0:	0801729c 	.word	0x0801729c
 800d1e4:	08016584 	.word	0x08016584
 800d1e8:	080165b4 	.word	0x080165b4
 800d1ec:	080165c4 	.word	0x080165c4
 800d1f0:	08016598 	.word	0x08016598
 800d1f4:	080165d0 	.word	0x080165d0

0800d1f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1fa:	b0d3      	sub	sp, #332	; 0x14c
 800d1fc:	af06      	add	r7, sp, #24
 800d1fe:	1d3b      	adds	r3, r7, #4
 800d200:	6018      	str	r0, [r3, #0]
 800d202:	463b      	mov	r3, r7
 800d204:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d206:	463b      	mov	r3, r7
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800d210:	f003 fdc5 	bl	8010d9e <abort>
  const auto* params =
 800d214:	463b      	mov	r3, r7
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800d21e:	4b8a      	ldr	r3, [pc, #552]	; (800d448 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	4639      	mov	r1, r7
 800d224:	1d3b      	adds	r3, r7, #4
 800d226:	6809      	ldr	r1, [r1, #0]
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f7fd fe4b 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d22e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800d232:	4b86      	ldr	r3, [pc, #536]	; (800d44c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	4639      	mov	r1, r7
 800d238:	1d3b      	adds	r3, r7, #4
 800d23a:	6809      	ldr	r1, [r1, #0]
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	f7fd fe41 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d242:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800d246:	4b82      	ldr	r3, [pc, #520]	; (800d450 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	4639      	mov	r1, r7
 800d24c:	1d3b      	adds	r3, r7, #4
 800d24e:	6809      	ldr	r1, [r1, #0]
 800d250:	6818      	ldr	r0, [r3, #0]
 800d252:	f7fd fe37 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d256:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800d25a:	4b7e      	ldr	r3, [pc, #504]	; (800d454 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	4639      	mov	r1, r7
 800d260:	1d3b      	adds	r3, r7, #4
 800d262:	6809      	ldr	r1, [r1, #0]
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	f7fd fe3d 	bl	800aee4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800d26a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 800d26e:	463b      	mov	r3, r7
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800d278:	f003 fd91 	bl	8010d9e <abort>
  const auto& data =
 800d27c:	463b      	mov	r3, r7
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800d286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d28a:	7a1b      	ldrb	r3, [r3, #8]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d002      	beq.n	800d296 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 800d290:	2b09      	cmp	r3, #9
 800d292:	d061      	beq.n	800d358 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800d294:	e0bf      	b.n	800d416 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800d296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d29a:	781a      	ldrb	r2, [r3, #0]
 800d29c:	f107 0308 	add.w	r3, r7, #8
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f91a 	bl	800d4dc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800d2a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2ac:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f97e 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d2b6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d2ba:	f7fd fe33 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d2be:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800d2c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d2c4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 f972 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d2ce:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d2d2:	f7fd fe27 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d2d6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800d2d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d2dc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 f966 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d2e6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d2ea:	f7fd fe1b 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d2ee:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800d2f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d2f4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 f95a 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800d2fe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d302:	f7fd fe1e 	bl	800af42 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800d306:	4603      	mov	r3, r0
 800d308:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d30c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d310:	f107 0008 	add.w	r0, r7, #8
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d31a:	9303      	str	r3, [sp, #12]
 800d31c:	9502      	str	r5, [sp, #8]
 800d31e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d322:	9301      	str	r3, [sp, #4]
 800d324:	9400      	str	r4, [sp, #0]
 800d326:	4613      	mov	r3, r2
 800d328:	4632      	mov	r2, r6
 800d32a:	f7ff fd25 	bl	800cd78 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800d32e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d332:	4618      	mov	r0, r3
 800d334:	f7f9 fc0b 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800d338:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f9 fc06 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800d342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d346:	4618      	mov	r0, r3
 800d348:	f7f9 fc01 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800d34c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d350:	4618      	mov	r0, r3
 800d352:	f7f9 fbfc 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800d356:	e071      	b.n	800d43c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800d358:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d35c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d360:	4618      	mov	r0, r3
 800d362:	f000 f891 	bl	800d488 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800d366:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d36a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f91f 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d374:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d378:	f7fd fdf4 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d37c:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800d37e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d382:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f913 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d38c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d390:	f7fd fde8 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d394:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800d396:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d39a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 f907 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d3a4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d3a8:	f7fe f90c 	bl	800b5c4 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800d3ac:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800d3ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3b2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f8fb 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800d3bc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d3c0:	f7fd fddf 	bl	800af82 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800d3ca:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800d3ce:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800d3d2:	9304      	str	r3, [sp, #16]
 800d3d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3d8:	9303      	str	r3, [sp, #12]
 800d3da:	9502      	str	r5, [sp, #8]
 800d3dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	9400      	str	r4, [sp, #0]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	f7ff fd5c 	bl	800cea4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800d3ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f9 fbac 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800d3f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7f9 fba7 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800d400:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d404:	4618      	mov	r0, r3
 800d406:	f7f9 fba2 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800d40a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d40e:	4618      	mov	r0, r3
 800d410:	f7f9 fb9d 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800d414:	e012      	b.n	800d43c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800d416:	1d3b      	adds	r3, r7, #4
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	695c      	ldr	r4, [r3, #20]
 800d41c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d420:	7a1b      	ldrb	r3, [r3, #8]
 800d422:	4618      	mov	r0, r3
 800d424:	f7f6 fb6e 	bl	8003b04 <TfLiteTypeGetName>
 800d428:	4602      	mov	r2, r0
 800d42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d42e:	7a1b      	ldrb	r3, [r3, #8]
 800d430:	1d38      	adds	r0, r7, #4
 800d432:	4909      	ldr	r1, [pc, #36]	; (800d458 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800d434:	6800      	ldr	r0, [r0, #0]
 800d436:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d444:	46bd      	mov	sp, r7
 800d446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d448:	08017290 	.word	0x08017290
 800d44c:	08017294 	.word	0x08017294
 800d450:	08017298 	.word	0x08017298
 800d454:	0801729c 	.word	0x0801729c
 800d458:	08016648 	.word	0x08016648

0800d45c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800d45c:	b4b0      	push	{r4, r5, r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a07      	ldr	r2, [pc, #28]	; (800d484 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800d468:	461c      	mov	r4, r3
 800d46a:	4615      	mov	r5, r2
 800d46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d470:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bcb0      	pop	{r4, r5, r7}
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	08016664 	.word	0x08016664

0800d488 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	425a      	negs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	425a      	negs	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	69da      	ldr	r2, [r3, #28]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	689a      	ldr	r2, [r3, #8]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	619a      	str	r2, [r3, #24]
  return op_params;
 800d4ce:	bf00      	nop
}
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f103 0220 	add.w	r2, r3, #32
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f103 011c 	add.w	r1, r3, #28
 800d4f4:	78fb      	ldrb	r3, [r7, #3]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fd ffe8 	bl	800b4cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800d4fc:	bf00      	nop
}
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800d506:	b580      	push	{r7, lr}
 800d508:	b08a      	sub	sp, #40	; 0x28
 800d50a:	af02      	add	r7, sp, #8
 800d50c:	60f8      	str	r0, [r7, #12]
 800d50e:	607b      	str	r3, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	72fb      	strb	r3, [r7, #11]
 800d514:	4613      	mov	r3, r2
 800d516:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800d518:	7abb      	ldrb	r3, [r7, #10]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d044      	beq.n	800d5a8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800d51e:	f04f 0200 	mov.w	r2, #0
 800d522:	f04f 0300 	mov.w	r3, #0
 800d526:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800d52a:	f107 0310 	add.w	r3, r7, #16
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f7f8 ff2c 	bl	8006398 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800d540:	4603      	mov	r3, r0
 800d542:	77fb      	strb	r3, [r7, #31]
 800d544:	7ffb      	ldrb	r3, [r7, #31]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	e02d      	b.n	800d5aa <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800d54e:	ed97 7b04 	vldr	d7, [r7, #16]
 800d552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d556:	3304      	adds	r3, #4
 800d558:	4619      	mov	r1, r3
 800d55a:	4610      	mov	r0, r2
 800d55c:	eeb0 0a47 	vmov.f32	s0, s14
 800d560:	eef0 0a67 	vmov.f32	s1, s15
 800d564:	f7f8 fab8 	bl	8005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	691a      	ldr	r2, [r3, #16]
 800d56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56e:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800d578:	f003 fc11 	bl	8010d9e <abort>
    data->filter_zero_point = filter->params.zero_point;
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	691a      	ldr	r2, [r3, #16]
 800d580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d582:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	691a      	ldr	r2, [r3, #16]
 800d588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58a:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	f103 0208 	add.w	r2, r3, #8
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	330c      	adds	r3, #12
 800d596:	7af9      	ldrb	r1, [r7, #11]
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	4613      	mov	r3, r2
 800d59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7f9 f8ec 	bl	800677c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800d5a4:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800d5a6:	e000      	b.n	800d5aa <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b086      	sub	sp, #24
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7f9 fa9e 	bl	8006b0c <_ZN6tflite12RuntimeShapeC1Ev>
 800d5d0:	e00d      	b.n	800d5ee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	6939      	ldr	r1, [r7, #16]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f9 fa9d 	bl	8006b28 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d002      	beq.n	800d60c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 800d606:	2b02      	cmp	r3, #2
 800d608:	d002      	beq.n	800d610 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 800d60a:	e003      	b.n	800d614 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e002      	b.n	800d616 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 800d610:	2302      	movs	r3, #2
 800d612:	e000      	b.n	800d616 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800d614:	2300      	movs	r3, #0
  }
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800d622:	b590      	push	{r4, r7, lr}
 800d624:	b087      	sub	sp, #28
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7f9 faa3 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d634:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800d636:	2300      	movs	r3, #0
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	429a      	cmp	r2, r3
 800d640:	da15      	bge.n	800d66e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	429a      	cmp	r2, r3
 800d648:	d00d      	beq.n	800d666 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d64a:	6979      	ldr	r1, [r7, #20]
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7fd fd19 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d652:	4604      	mov	r4, r0
 800d654:	6979      	ldr	r1, [r7, #20]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7fd fd14 	bl	800b084 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d65c:	4603      	mov	r3, r0
 800d65e:	429c      	cmp	r4, r3
 800d660:	d001      	beq.n	800d666 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800d662:	f003 fb9c 	bl	8010d9e <abort>
  for (int i = 0; i < dims_count; ++i) {
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	3301      	adds	r3, #1
 800d66a:	617b      	str	r3, [r7, #20]
 800d66c:	e7e5      	b.n	800d63a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff fb4b 	bl	800cd0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800d676:	4603      	mov	r3, r0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	371c      	adds	r7, #28
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd90      	pop	{r4, r7, pc}

0800d680 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800d694:	e000      	b.n	800d698 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800d696:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d6ba:	b590      	push	{r4, r7, lr}
 800d6bc:	b085      	sub	sp, #20
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d6c2:	f107 030c 	add.w	r3, r7, #12
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff ffec 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fd fdcc 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	6023      	str	r3, [r4, #0]
    return retval;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
  }
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd90      	pop	{r4, r7, pc}

0800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7fd fd49 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d6f2:	4603      	mov	r3, r0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f813 	bl	800d730 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800d70a:	4603      	mov	r3, r0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  return a - b;
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	1ad3      	subs	r3, r2, r3
}
 800d724:	4618      	mov	r0, r3
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d738:	2101      	movs	r1, #1
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7fd fd22 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d740:	4603      	mov	r3, r0
  }
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800d74a:	b480      	push	{r7}
 800d74c:	b089      	sub	sp, #36	; 0x24
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	461a      	mov	r2, r3
 800d758:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d75c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800d760:	2201      	movs	r2, #1
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	fa02 f303 	lsl.w	r3, r2, r3
 800d768:	461a      	mov	r2, r3
 800d76a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d76e:	69f9      	ldr	r1, [r7, #28]
 800d770:	fb02 f001 	mul.w	r0, r2, r1
 800d774:	69b9      	ldr	r1, [r7, #24]
 800d776:	fb03 f101 	mul.w	r1, r3, r1
 800d77a:	4401      	add	r1, r0
 800d77c:	69b8      	ldr	r0, [r7, #24]
 800d77e:	fba0 2302 	umull	r2, r3, r0, r2
 800d782:	4419      	add	r1, r3
 800d784:	460b      	mov	r3, r1
 800d786:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d78a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800d78e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d792:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800d794:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d798:	60bb      	str	r3, [r7, #8]
             ? min
 800d79a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d79e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d7a2:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800d7a6:	db0e      	blt.n	800d7c6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800d7a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d7b0:	f04f 0100 	mov.w	r1, #0
 800d7b4:	4290      	cmp	r0, r2
 800d7b6:	eb71 0303 	sbcs.w	r3, r1, r3
 800d7ba:	db01      	blt.n	800d7c0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800d7bc:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800d7be:	e004      	b.n	800d7ca <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800d7c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800d7c4:	e001      	b.n	800d7ca <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800d7c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3724      	adds	r7, #36	; 0x24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800d7d6:	b590      	push	{r4, r7, lr}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7fd fd4c 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f7fd fdac 	bl	800b34a <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fd fd43 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	4619      	mov	r1, r3
 800d800:	4620      	mov	r0, r4
 800d802:	f000 f805 	bl	800d810 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800d806:	4603      	mov	r3, r0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd90      	pop	{r4, r7, pc}

0800d810 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	4053      	eors	r3, r2
}
 800d820:	4618      	mov	r0, r3
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800d82c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d830:	b08b      	sub	sp, #44	; 0x2c
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	4608      	mov	r0, r1
 800d83c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d840:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	4608      	mov	r0, r1
 800d848:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d84c:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 800d850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d858:	eb18 0a00 	adds.w	sl, r8, r0
 800d85c:	eb49 0b01 	adc.w	fp, r9, r1
 800d860:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800d864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d868:	2800      	cmp	r0, #0
 800d86a:	f171 0100 	sbcs.w	r1, r1, #0
 800d86e:	db04      	blt.n	800d87a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 800d870:	f04f 0001 	mov.w	r0, #1
 800d874:	f04f 0100 	mov.w	r1, #0
 800d878:	e003      	b.n	800d882 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 800d87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d87e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d882:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800d886:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800d88a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d88e:	eb18 0400 	adds.w	r4, r8, r0
 800d892:	eb49 0501 	adc.w	r5, r9, r1
 800d896:	0fe9      	lsrs	r1, r5, #31
 800d898:	4608      	mov	r0, r1
 800d89a:	f04f 0100 	mov.w	r1, #0
 800d89e:	1902      	adds	r2, r0, r4
 800d8a0:	eb41 0305 	adc.w	r3, r1, r5
 800d8a4:	f04f 0000 	mov.w	r0, #0
 800d8a8:	f04f 0100 	mov.w	r1, #0
 800d8ac:	0850      	lsrs	r0, r2, #1
 800d8ae:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d8b2:	1059      	asrs	r1, r3, #1
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	4613      	mov	r3, r2
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	372c      	adds	r7, #44	; 0x2c
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d8c4:	4770      	bx	lr

0800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d8ce:	f107 030c 	add.w	r3, r7, #12
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fee6 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6013      	str	r3, [r2, #0]
    return retval;
 800d8de:	68fb      	ldr	r3, [r7, #12]
  }
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800d8f0:	f000 f9f7 	bl	800dce2 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f9fd 	bl	800dcf8 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d8fe:	4603      	mov	r3, r0
 800d900:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800d902:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800d906:	f000 fa29 	bl	800dd5c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d90a:	4603      	mov	r3, r0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 fa11 	bl	800dd34 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d912:	4603      	mov	r3, r0
 800d914:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800d916:	4823      	ldr	r0, [pc, #140]	; (800d9a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800d918:	f000 fa20 	bl	800dd5c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d91c:	4603      	mov	r3, r0
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fa08 	bl	800dd34 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d924:	4603      	mov	r3, r0
 800d926:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800d928:	69b9      	ldr	r1, [r7, #24]
 800d92a:	6a38      	ldr	r0, [r7, #32]
 800d92c:	f000 fa23 	bl	800dd76 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d930:	4603      	mov	r3, r0
 800d932:	4619      	mov	r1, r3
 800d934:	69f8      	ldr	r0, [r7, #28]
 800d936:	f000 fa40 	bl	800ddba <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d93a:	4603      	mov	r3, r0
 800d93c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d93e:	2300      	movs	r3, #0
 800d940:	627b      	str	r3, [r7, #36]	; 0x24
 800d942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d944:	2b02      	cmp	r3, #2
 800d946:	dc21      	bgt.n	800d98c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800d948:	6979      	ldr	r1, [r7, #20]
 800d94a:	6a38      	ldr	r0, [r7, #32]
 800d94c:	f000 fa13 	bl	800dd76 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d950:	4603      	mov	r3, r0
 800d952:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800d954:	f000 fa4f 	bl	800ddf6 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800d958:	4603      	mov	r3, r0
 800d95a:	6939      	ldr	r1, [r7, #16]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f000 fa53 	bl	800de08 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d962:	4603      	mov	r3, r0
 800d964:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800d966:	68f9      	ldr	r1, [r7, #12]
 800d968:	6978      	ldr	r0, [r7, #20]
 800d96a:	f000 fa6b 	bl	800de44 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d96e:	4603      	mov	r3, r0
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fa89 	bl	800de88 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d976:	4603      	mov	r3, r0
 800d978:	4619      	mov	r1, r3
 800d97a:	6978      	ldr	r0, [r7, #20]
 800d97c:	f000 fa1d 	bl	800ddba <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d980:	4603      	mov	r3, r0
 800d982:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	3301      	adds	r3, #1
 800d988:	627b      	str	r3, [r7, #36]	; 0x24
 800d98a:	e7da      	b.n	800d942 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800d98c:	6978      	ldr	r0, [r7, #20]
 800d98e:	f000 fa95 	bl	800debc <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800d992:	4603      	mov	r3, r0
 800d994:	4618      	mov	r0, r3
 800d996:	f000 faa7 	bl	800dee8 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d99a:	4603      	mov	r3, r0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3728      	adds	r7, #40	; 0x28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	c3c3c3c4 	.word	0xc3c3c3c4

0800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d9b0:	f107 030c 	add.w	r3, r7, #12
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 f989 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6013      	str	r3, [r2, #0]
    return retval;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
  }
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800d9cc:	b590      	push	{r4, r7, lr}
 800d9ce:	b091      	sub	sp, #68	; 0x44
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800d9d4:	f000 faa2 	bl	800df1c <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800d9dc:	2001      	movs	r0, #1
 800d9de:	f000 faa6 	bl	800df2e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9e8:	f000 fab5 	bl	800df56 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800d9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 facd 	bl	800df92 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 faaa 	bl	800df56 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da02:	4603      	mov	r3, r0
 800da04:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800da06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da08:	f000 fae1 	bl	800dfce <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800da0c:	4603      	mov	r3, r0
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 faf8 	bl	800e004 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800da14:	4603      	mov	r3, r0
 800da16:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da1c:	f000 fa9b 	bl	800df56 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da20:	4603      	mov	r3, r0
 800da22:	63bb      	str	r3, [r7, #56]	; 0x38
 800da24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f94f 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800da2e:	4603      	mov	r3, r0
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800da34:	4883      	ldr	r0, [pc, #524]	; (800dc44 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800da36:	f7ff fe54 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800da3a:	4603      	mov	r3, r0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7ff fe3c 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800da42:	4603      	mov	r3, r0
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
 800da46:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800da4a:	f7fd fc0f 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800da4e:	4603      	mov	r3, r0
 800da50:	4619      	mov	r1, r3
 800da52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800da54:	f7fd fc15 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800da58:	4603      	mov	r3, r0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd fc64 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800da60:	4604      	mov	r4, r0
 800da62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da66:	f000 fb2f 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800da6a:	4603      	mov	r3, r0
 800da6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da6e:	4619      	mov	r1, r3
 800da70:	4620      	mov	r0, r4
 800da72:	f000 fb4b 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800da76:	4603      	mov	r3, r0
 800da78:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800da7a:	4873      	ldr	r0, [pc, #460]	; (800dc48 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800da7c:	f7ff fe31 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800da80:	4603      	mov	r3, r0
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff fe19 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800da88:	4603      	mov	r3, r0
 800da8a:	623b      	str	r3, [r7, #32]
 800da8c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800da90:	f7fd fbec 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800da94:	4603      	mov	r3, r0
 800da96:	4619      	mov	r1, r3
 800da98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800da9a:	f7fd fbf2 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800da9e:	4603      	mov	r3, r0
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fd fc41 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800daa6:	4604      	mov	r4, r0
 800daa8:	6a39      	ldr	r1, [r7, #32]
 800daaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daac:	f000 fb0c 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dab0:	4603      	mov	r3, r0
 800dab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab4:	4619      	mov	r1, r3
 800dab6:	4620      	mov	r0, r4
 800dab8:	f000 fb28 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dabc:	4603      	mov	r3, r0
 800dabe:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800dac0:	4862      	ldr	r0, [pc, #392]	; (800dc4c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800dac2:	f7ff fe0e 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800dac6:	4603      	mov	r3, r0
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff fdf6 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dace:	4603      	mov	r3, r0
 800dad0:	61fb      	str	r3, [r7, #28]
 800dad2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800dad6:	f7fd fbc9 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dada:	4603      	mov	r3, r0
 800dadc:	4619      	mov	r1, r3
 800dade:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dae0:	f7fd fbcf 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dae4:	4603      	mov	r3, r0
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fd fc1e 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800daec:	4604      	mov	r4, r0
 800daee:	69f9      	ldr	r1, [r7, #28]
 800daf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daf2:	f000 fae9 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800daf6:	4603      	mov	r3, r0
 800daf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dafa:	4619      	mov	r1, r3
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fb05 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db02:	4603      	mov	r3, r0
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800db06:	4852      	ldr	r0, [pc, #328]	; (800dc50 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800db08:	f7ff fdeb 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db0c:	4603      	mov	r3, r0
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fdd3 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800db14:	4603      	mov	r3, r0
 800db16:	61bb      	str	r3, [r7, #24]
 800db18:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800db1c:	f7fd fba6 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800db20:	4603      	mov	r3, r0
 800db22:	4619      	mov	r1, r3
 800db24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db26:	f7fd fbac 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800db2a:	4603      	mov	r3, r0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fd fbfb 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800db32:	4604      	mov	r4, r0
 800db34:	69b9      	ldr	r1, [r7, #24]
 800db36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db38:	f000 fac6 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800db3c:	4603      	mov	r3, r0
 800db3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db40:	4619      	mov	r1, r3
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fae2 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db48:	4603      	mov	r3, r0
 800db4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800db4c:	4841      	ldr	r0, [pc, #260]	; (800dc54 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800db4e:	f7ff fdc8 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db52:	4603      	mov	r3, r0
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fdb0 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800db5a:	4603      	mov	r3, r0
 800db5c:	617b      	str	r3, [r7, #20]
 800db5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800db62:	f7fd fb83 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800db66:	4603      	mov	r3, r0
 800db68:	4619      	mov	r1, r3
 800db6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db6c:	f7fd fb89 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800db70:	4603      	mov	r3, r0
 800db72:	4618      	mov	r0, r3
 800db74:	f7fd fbd8 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800db78:	4604      	mov	r4, r0
 800db7a:	6979      	ldr	r1, [r7, #20]
 800db7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db7e:	f000 faa3 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800db82:	4603      	mov	r3, r0
 800db84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db86:	4619      	mov	r1, r3
 800db88:	4620      	mov	r0, r4
 800db8a:	f000 fabf 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800db8e:	4603      	mov	r3, r0
 800db90:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800db92:	4831      	ldr	r0, [pc, #196]	; (800dc58 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800db94:	f7ff fda5 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800db98:	4603      	mov	r3, r0
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff fd8d 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dba0:	4603      	mov	r3, r0
 800dba2:	613b      	str	r3, [r7, #16]
 800dba4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800dba8:	f7fd fb60 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dbac:	4603      	mov	r3, r0
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbb2:	f7fd fb66 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fd fbb5 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	6939      	ldr	r1, [r7, #16]
 800dbc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbc4:	f000 fa80 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbcc:	4619      	mov	r1, r3
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f000 fa9c 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800dbd8:	20f2      	movs	r0, #242	; 0xf2
 800dbda:	f7ff fd82 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff fd6a 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800dbee:	f7fd fb3d 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbf8:	f7fd fb43 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fd fb92 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dc04:	4604      	mov	r4, r0
 800dc06:	68f9      	ldr	r1, [r7, #12]
 800dc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc0a:	f000 fa5d 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc12:	4619      	mov	r1, r3
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 fa79 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fa95 	bl	800e14e <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800dc24:	4604      	mov	r4, r0
 800dc26:	f000 f85c 	bl	800dce2 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 fa6b 	bl	800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800dc36:	4603      	mov	r3, r0
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3744      	adds	r7, #68	; 0x44
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd90      	pop	{r4, r7, pc}
 800dc44:	63afbe7b 	.word	0x63afbe7b
 800dc48:	4da2cbf2 	.word	0x4da2cbf2
 800dc4c:	2f16ac6c 	.word	0x2f16ac6c
 800dc50:	1152aaa4 	.word	0x1152aaa4
 800dc54:	02582ab7 	.word	0x02582ab7
 800dc58:	000afe11 	.word	0x000afe11

0800dc5c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800dc5c:	b5b0      	push	{r4, r5, r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800dc64:	1d3b      	adds	r3, r7, #4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff fd1c 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	681d      	ldr	r5, [r3, #0]
 800dc70:	f107 030c 	add.w	r3, r7, #12
 800dc74:	4618      	mov	r0, r3
 800dc76:	f000 fa7c 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 fa83 	bl	800e188 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800dc82:	4603      	mov	r3, r0
 800dc84:	6023      	str	r3, [r4, #0]
  return result;
 800dc86:	68fb      	ldr	r3, [r7, #12]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc90 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800dc90:	b590      	push	{r4, r7, lr}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
 800dc9a:	1d3b      	adds	r3, r7, #4
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 fa68 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dca2:	4603      	mov	r3, r0
 800dca4:	681c      	ldr	r4, [r3, #0]
 800dca6:	463b      	mov	r3, r7
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 fa62 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7fd fb15 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 fa6f 	bl	800e1a0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd90      	pop	{r4, r7, pc}

0800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800dce2:	b580      	push	{r7, lr}
 800dce4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800dce6:	f000 fa82 	bl	800e1ee <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800dcea:	4603      	mov	r3, r0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff fce4 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dcf2:	4603      	mov	r3, r0
  }
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800dcf8:	b590      	push	{r4, r7, lr}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	1d3b      	adds	r3, r7, #4
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff fccd 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	681c      	ldr	r4, [r3, #0]
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff fcc7 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd16:	4603      	mov	r3, r0
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f7ff fd85 	bl	800d82c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800dd22:	4603      	mov	r3, r0
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7ff fdce 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd90      	pop	{r4, r7, pc}

0800dd34 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800dd3c:	f107 030c 	add.w	r3, r7, #12
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 fa5b 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dd46:	4604      	mov	r4, r0
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7fd fa8f 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	6023      	str	r3, [r4, #0]
    return retval;
 800dd52:	68fb      	ldr	r3, [r7, #12]
  }
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd90      	pop	{r4, r7, pc}

0800dd5c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800dd64:	2100      	movs	r1, #0
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7fd fa0c 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800dd6c:	4603      	mov	r3, r0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800dd76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800dd80:	1d3b      	adds	r3, r7, #4
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7ff fc8e 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	681d      	ldr	r5, [r3, #0]
 800dd8c:	463b      	mov	r3, r7
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fa34 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dd94:	4603      	mov	r3, r0
 800dd96:	681e      	ldr	r6, [r3, #0]
 800dd98:	f107 030c 	add.w	r3, r7, #12
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 fa2d 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dda2:	4604      	mov	r4, r0
 800dda4:	4631      	mov	r1, r6
 800dda6:	4628      	mov	r0, r5
 800dda8:	f7fd f8fc 	bl	800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ddac:	4603      	mov	r3, r0
 800ddae:	6023      	str	r3, [r4, #0]
  return c;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3714      	adds	r7, #20
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddba <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800ddba:	b590      	push	{r4, r7, lr}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
 800ddc4:	1d3b      	adds	r3, r7, #4
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 fa18 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	681c      	ldr	r4, [r3, #0]
 800ddd0:	463b      	mov	r3, r7
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 fa12 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	4620      	mov	r0, r4
 800dde0:	f7fd fa80 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800dde4:	4603      	mov	r3, r0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 fa13 	bl	800e212 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800ddec:	4603      	mov	r3, r0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd90      	pop	{r4, r7, pc}

0800ddf6 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800ddfa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800ddfe:	f7ff ff99 	bl	800dd34 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800de02:	4603      	mov	r3, r0
  }
 800de04:	4618      	mov	r0, r3
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	1d3b      	adds	r3, r7, #4
 800de14:	4618      	mov	r0, r3
 800de16:	f000 f9f1 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de1a:	4603      	mov	r3, r0
 800de1c:	681c      	ldr	r4, [r3, #0]
 800de1e:	463b      	mov	r3, r7
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f9eb 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de26:	4603      	mov	r3, r0
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff fc71 	bl	800d714 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800de32:	4603      	mov	r3, r0
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f9ec 	bl	800e212 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800de3a:	4603      	mov	r3, r0
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}

0800de44 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800de44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800de4e:	1d3b      	adds	r3, r7, #4
 800de50:	4618      	mov	r0, r3
 800de52:	f000 f9d3 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de56:	4603      	mov	r3, r0
 800de58:	681d      	ldr	r5, [r3, #0]
 800de5a:	463b      	mov	r3, r7
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f9cd 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800de62:	4603      	mov	r3, r0
 800de64:	681e      	ldr	r6, [r3, #0]
 800de66:	f107 030c 	add.w	r3, r7, #12
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 f9e2 	bl	800e234 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800de70:	4604      	mov	r4, r0
 800de72:	4631      	mov	r1, r6
 800de74:	4628      	mov	r0, r5
 800de76:	f7fd f895 	bl	800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800de7a:	4603      	mov	r3, r0
 800de7c:	6023      	str	r3, [r4, #0]
  return c;
 800de7e:	68fb      	ldr	r3, [r7, #12]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de88 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800de88:	b5b0      	push	{r4, r5, r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800de90:	1d3b      	adds	r3, r7, #4
 800de92:	4618      	mov	r0, r3
 800de94:	f000 f9ce 	bl	800e234 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800de98:	4603      	mov	r3, r0
 800de9a:	681d      	ldr	r5, [r3, #0]
 800de9c:	f107 030c 	add.w	r3, r7, #12
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f9ab 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dea6:	4604      	mov	r4, r0
 800dea8:	4628      	mov	r0, r5
 800deaa:	f000 f9ce 	bl	800e24a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800deae:	4603      	mov	r3, r0
 800deb0:	6023      	str	r3, [r4, #0]
  return result;
 800deb2:	68fb      	ldr	r3, [r7, #12]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bdb0      	pop	{r4, r5, r7, pc}

0800debc <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800dec4:	1d3b      	adds	r3, r7, #4
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 f998 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800decc:	4604      	mov	r4, r0
 800dece:	f107 030c 	add.w	r3, r7, #12
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f9c5 	bl	800e262 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800ded8:	4602      	mov	r2, r0
 800deda:	6823      	ldr	r3, [r4, #0]
 800dedc:	6013      	str	r3, [r2, #0]
  return c;
 800dede:	68fb      	ldr	r3, [r7, #12]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd90      	pop	{r4, r7, pc}

0800dee8 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800dee8:	b5b0      	push	{r4, r5, r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800def0:	1d3b      	adds	r3, r7, #4
 800def2:	4618      	mov	r0, r3
 800def4:	f000 f9b5 	bl	800e262 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800def8:	4603      	mov	r3, r0
 800defa:	681d      	ldr	r5, [r3, #0]
 800defc:	f107 030c 	add.w	r3, r7, #12
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fbcf 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800df06:	4604      	mov	r4, r0
 800df08:	4628      	mov	r0, r5
 800df0a:	f000 f9b5 	bl	800e278 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800df0e:	4603      	mov	r3, r0
 800df10:	6023      	str	r3, [r4, #0]
  return result;
 800df12:	68fb      	ldr	r3, [r7, #12]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bdb0      	pop	{r4, r5, r7, pc}

0800df1c <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800df20:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800df24:	f000 f803 	bl	800df2e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800df28:	4603      	mov	r3, r0
  }
 800df2a:	4618      	mov	r0, r3
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800df2e:	b590      	push	{r4, r7, lr}
 800df30:	b085      	sub	sp, #20
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800df36:	f107 030c 	add.w	r3, r7, #12
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff fec6 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800df40:	4604      	mov	r4, r0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7fd f992 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800df48:	4603      	mov	r3, r0
 800df4a:	6023      	str	r3, [r4, #0]
    return retval;
 800df4c:	68fb      	ldr	r3, [r7, #12]
  }
 800df4e:	4618      	mov	r0, r3
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	bd90      	pop	{r4, r7, pc}

0800df56 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800df56:	b590      	push	{r4, r7, lr}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	6039      	str	r1, [r7, #0]
 800df60:	1d3b      	adds	r3, r7, #4
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff feb2 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800df68:	4603      	mov	r3, r0
 800df6a:	681c      	ldr	r4, [r3, #0]
 800df6c:	463b      	mov	r3, r7
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff feac 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800df74:	4603      	mov	r3, r0
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4619      	mov	r1, r3
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff fbca 	bl	800d714 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800df80:	4603      	mov	r3, r0
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff fd10 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800df88:	4603      	mov	r3, r0
 800df8a:	4618      	mov	r0, r3
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd90      	pop	{r4, r7, pc}

0800df92 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800df92:	b590      	push	{r4, r7, lr}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
 800df9c:	1d3b      	adds	r3, r7, #4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff fe94 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	681c      	ldr	r4, [r3, #0]
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff fe8e 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7fd f963 	bl	800b282 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff fcf2 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd90      	pop	{r4, r7, pc}

0800dfce <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800dfce:	b5b0      	push	{r4, r5, r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800dfd6:	1d3b      	adds	r3, r7, #4
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff fe77 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	681d      	ldr	r5, [r3, #0]
 800dfe2:	f107 030c 	add.w	r3, r7, #12
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff fb5c 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dfec:	4604      	mov	r4, r0
 800dfee:	4628      	mov	r0, r5
 800dff0:	f000 f94e 	bl	800e290 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800dff4:	4603      	mov	r3, r0
 800dff6:	6023      	str	r3, [r4, #0]
  return result;
 800dff8:	68fb      	ldr	r3, [r7, #12]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e004 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800e00c:	482c      	ldr	r0, [pc, #176]	; (800e0c0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800e00e:	f7ff fb68 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e012:	4603      	mov	r3, r0
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff fb50 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e01a:	4603      	mov	r3, r0
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800e01e:	4829      	ldr	r0, [pc, #164]	; (800e0c4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800e020:	f7ff fb5f 	bl	800d6e2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e024:	4603      	mov	r3, r0
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff fb47 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e02c:	4603      	mov	r3, r0
 800e02e:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800e030:	f000 f93a 	bl	800e2a8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800e034:	4603      	mov	r3, r0
 800e036:	4619      	mov	r1, r3
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f93e 	bl	800e2ba <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e03e:	4603      	mov	r3, r0
 800e040:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800e042:	69f9      	ldr	r1, [r7, #28]
 800e044:	69f8      	ldr	r0, [r7, #28]
 800e046:	f000 f83f 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e04a:	4603      	mov	r3, r0
 800e04c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800e04e:	69f9      	ldr	r1, [r7, #28]
 800e050:	69b8      	ldr	r0, [r7, #24]
 800e052:	f000 f839 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e056:	4603      	mov	r3, r0
 800e058:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800e05a:	69b9      	ldr	r1, [r7, #24]
 800e05c:	69b8      	ldr	r0, [r7, #24]
 800e05e:	f000 f833 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e062:	4603      	mov	r3, r0
 800e064:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800e066:	6938      	ldr	r0, [r7, #16]
 800e068:	f000 f945 	bl	800e2f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800e06c:	4603      	mov	r3, r0
 800e06e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800e070:	6979      	ldr	r1, [r7, #20]
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 f921 	bl	800e2ba <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e078:	4603      	mov	r3, r0
 800e07a:	6a39      	ldr	r1, [r7, #32]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 f823 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e082:	4603      	mov	r3, r0
 800e084:	69b9      	ldr	r1, [r7, #24]
 800e086:	4618      	mov	r0, r3
 800e088:	f000 f917 	bl	800e2ba <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e08c:	4603      	mov	r3, r0
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 f947 	bl	800e322 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800e094:	4603      	mov	r3, r0
 800e096:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800e098:	68b9      	ldr	r1, [r7, #8]
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f000 f90d 	bl	800e2ba <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0a6:	f000 f80f 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0b0:	f000 f94d 	bl	800e34e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e0b4:	4603      	mov	r3, r0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3728      	adds	r7, #40	; 0x28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	70f5a894 	.word	0x70f5a894
 800e0c4:	2aaaaaab 	.word	0x2aaaaaab

0800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800e0d2:	1d3b      	adds	r3, r7, #4
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff fae5 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	681d      	ldr	r5, [r3, #0]
 800e0de:	463b      	mov	r3, r7
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff fadf 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	681e      	ldr	r6, [r3, #0]
 800e0ea:	f107 030c 	add.w	r3, r7, #12
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fad8 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7fc ff53 	bl	800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e0fe:	4603      	mov	r3, r0
 800e100:	6023      	str	r3, [r4, #0]
  return c;
 800e102:	68fb      	ldr	r3, [r7, #12]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e10c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800e10c:	b590      	push	{r4, r7, lr}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800e118:	f107 0308 	add.w	r3, r7, #8
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fac1 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e122:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e124:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800e126:	1d3b      	adds	r3, r7, #4
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff fabb 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e12e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	4621      	mov	r1, r4
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff fb4d 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e13c:	4603      	mov	r3, r0
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff fbc1 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e144:	4603      	mov	r3, r0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd90      	pop	{r4, r7, pc}

0800e14e <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800e14e:	b580      	push	{r7, lr}
 800e150:	b082      	sub	sp, #8
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	1d3b      	adds	r3, r7, #4
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff fdb7 	bl	800dccc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e15e:	4603      	mov	r3, r0
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 f911 	bl	800e38a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800e168:	4603      	mov	r3, r0
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f90c 	bl	800e3ae <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800e196:	4603      	mov	r3, r0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e1a8:	f107 030c 	add.w	r3, r7, #12
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7ff ffe0 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6013      	str	r3, [r2, #0]
    return retval;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
  }
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e1c2:	b480      	push	{r7}
 800e1c4:	b083      	sub	sp, #12
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f993 2000 	ldrsb.w	r2, [r3]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	f993 3000 	ldrsb.w	r3, [r3]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	da01      	bge.n	800e1e0 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	e000      	b.n	800e1e2 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800e1e0:	687b      	ldr	r3, [r7, #4]
    }
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	370c      	adds	r7, #12
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr

0800e1ee <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800e1f2:	f7f7 fc68 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 800e1f6:	4603      	mov	r3, r0
  }
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4618      	mov	r0, r3
 800e208:	370c      	adds	r7, #12
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e21a:	f107 030c 	add.w	r3, r7, #12
 800e21e:	4618      	mov	r0, r3
 800e220:	f7ff ffec 	bl	800e1fc <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e224:	4602      	mov	r2, r0
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6013      	str	r3, [r2, #0]
    return retval;
 800e22a:	68fb      	ldr	r3, [r7, #12]
  }
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4618      	mov	r0, r3
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f8b8 	bl	800e3c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800e258:	4603      	mov	r3, r0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800e262:	b480      	push	{r7}
 800e264:	b083      	sub	sp, #12
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f8e3 	bl	800e44c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800e286:	4603      	mov	r3, r0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f919 	bl	800e4d0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800e29e:	4603      	mov	r3, r0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800e2ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e2b0:	f7ff fa03 	bl	800d6ba <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e2b4:	4603      	mov	r3, r0
  }
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800e2ba:	b590      	push	{r4, r7, lr}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	6039      	str	r1, [r7, #0]
 800e2c4:	1d3b      	adds	r3, r7, #4
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff f9ec 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	681c      	ldr	r4, [r3, #0]
 800e2d0:	463b      	mov	r3, r7
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff f9e6 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7fd f800 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff faed 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd90      	pop	{r4, r7, pc}

0800e2f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800e2fe:	1d3b      	adds	r3, r7, #4
 800e300:	4618      	mov	r0, r3
 800e302:	f7ff f9cf 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e306:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 f922 	bl	800e554 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800e310:	4603      	mov	r3, r0
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff fad7 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e318:	4603      	mov	r3, r0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800e32a:	1d3b      	adds	r3, r7, #4
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7ff f9b9 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e332:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff f9e0 	bl	800d6fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800e33c:	4603      	mov	r3, r0
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff fac1 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e344:	4603      	mov	r3, r0
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800e34e:	b590      	push	{r4, r7, lr}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800e358:	1d3b      	adds	r3, r7, #4
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff f9a2 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e360:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e362:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800e364:	463b      	mov	r3, r7
 800e366:	4618      	mov	r0, r3
 800e368:	f7ff f99c 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e36c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4619      	mov	r1, r3
 800e372:	4620      	mov	r0, r4
 800e374:	f000 f8fa 	bl	800e56c <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800e378:	4603      	mov	r3, r0
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff faa3 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e380:	4603      	mov	r3, r0
}
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	bd90      	pop	{r4, r7, pc}

0800e38a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b082      	sub	sp, #8
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	bf0c      	ite	eq
 800e398:	2301      	moveq	r3, #1
 800e39a:	2300      	movne	r3, #0
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc ffc2 	bl	800b328 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e3a4:	4603      	mov	r3, r0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b082      	sub	sp, #8
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e3b6:	210c      	movs	r1, #12
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7fc fee3 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e3be:	4603      	mov	r3, r0
  }
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	; 0x28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e3d0:	f7f7 fd83 	bl	8005eda <_ZNSt14numeric_limitsIlE3minEv>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc ff48 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e3dc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e3de:	f7f7 fb72 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fc ff41 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e3ea:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e3ec:	2320      	movs	r3, #32
 800e3ee:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e3f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e3f4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e3f6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800e3fa:	f7fc ff37 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e3fe:	4603      	mov	r3, r0
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7fc ff7c 	bl	800b300 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e408:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e40a:	480f      	ldr	r0, [pc, #60]	; (800e448 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800e40c:	f7fc ff2e 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e410:	4603      	mov	r3, r0
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7fc ff51 	bl	800b2bc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e41a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e41c:	2102      	movs	r1, #2
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7ff f993 	bl	800d74a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e424:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	6a39      	ldr	r1, [r7, #32]
 800e42a:	6978      	ldr	r0, [r7, #20]
 800e42c:	f7ff f9d3 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e430:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e436:	6938      	ldr	r0, [r7, #16]
 800e438:	f7ff f9cd 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e43c:	60f8      	str	r0, [r7, #12]
    return result;
 800e43e:	68fb      	ldr	r3, [r7, #12]
  }
 800e440:	4618      	mov	r0, r3
 800e442:	3728      	adds	r7, #40	; 0x28
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	e0000001 	.word	0xe0000001

0800e44c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	; 0x28
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e454:	f7f7 fd41 	bl	8005eda <_ZNSt14numeric_limitsIlE3minEv>
 800e458:	4603      	mov	r3, r0
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fc ff06 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e460:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e462:	f7f7 fb30 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 800e466:	4603      	mov	r3, r0
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fc feff 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e46e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e470:	2320      	movs	r3, #32
 800e472:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e474:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e478:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e47a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800e47e:	f7fc fef5 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e482:	4603      	mov	r3, r0
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7fc ff3a 	bl	800b300 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e48c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e48e:	480f      	ldr	r0, [pc, #60]	; (800e4cc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800e490:	f7fc feec 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e494:	4603      	mov	r3, r0
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7fc ff0f 	bl	800b2bc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e49e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff f951 	bl	800d74a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e4a8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	6a39      	ldr	r1, [r7, #32]
 800e4ae:	6978      	ldr	r0, [r7, #20]
 800e4b0:	f7ff f991 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e4b4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ba:	6938      	ldr	r0, [r7, #16]
 800e4bc:	f7ff f98b 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e4c0:	60f8      	str	r0, [r7, #12]
    return result;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
  }
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3728      	adds	r7, #40	; 0x28
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	c0000001 	.word	0xc0000001

0800e4d0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08a      	sub	sp, #40	; 0x28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800e4d8:	f7f7 fcff 	bl	8005eda <_ZNSt14numeric_limitsIlE3minEv>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fc fec4 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4e4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800e4e6:	f7f7 faee 	bl	8005ac6 <_ZNSt14numeric_limitsIlE3maxEv>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fc febd 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4f2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800e4f4:	2320      	movs	r3, #32
 800e4f6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800e4f8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800e4fc:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800e4fe:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800e502:	f7fc feb3 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e506:	4603      	mov	r3, r0
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7fc fef8 	bl	800b300 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e510:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800e512:	480f      	ldr	r0, [pc, #60]	; (800e550 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800e514:	f7fc feaa 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e518:	4603      	mov	r3, r0
 800e51a:	4619      	mov	r1, r3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7fc fecd 	bl	800b2bc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e522:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800e524:	2105      	movs	r1, #5
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f7ff f90f 	bl	800d74a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800e52c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	6a39      	ldr	r1, [r7, #32]
 800e532:	6978      	ldr	r0, [r7, #20]
 800e534:	f7ff f94f 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e538:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e53e:	6938      	ldr	r0, [r7, #16]
 800e540:	f7ff f949 	bl	800d7d6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800e544:	60f8      	str	r0, [r7, #12]
    return result;
 800e546:	68fb      	ldr	r3, [r7, #12]
  }
 800e548:	4618      	mov	r0, r3
 800e54a:	3728      	adds	r7, #40	; 0x28
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	fc000001 	.word	0xfc000001

0800e554 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f813 	bl	800e588 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800e562:	4603      	mov	r3, r0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f812 	bl	800e5a2 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800e57e:	4603      	mov	r3, r0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e590:	2102      	movs	r1, #2
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7fc fdf6 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e598:	4603      	mov	r3, r0
  }
 800e59a:	4618      	mov	r0, r3
 800e59c:	3708      	adds	r7, #8
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
 800e5aa:	6039      	str	r1, [r7, #0]
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7fc fe98 	bl	800b2e4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
	...

0800e5c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800e5c0:	b5b0      	push	{r4, r5, r7, lr}
 800e5c2:	b08e      	sub	sp, #56	; 0x38
 800e5c4:	af04      	add	r7, sp, #16
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7f7 fd09 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e5d4:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10a      	bne.n	800e5f2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	695c      	ldr	r4, [r3, #20]
 800e5e0:	4b62      	ldr	r3, [pc, #392]	; (800e76c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	2323      	movs	r3, #35	; 0x23
 800e5e6:	4a62      	ldr	r2, [pc, #392]	; (800e770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e5e8:	4962      	ldr	r1, [pc, #392]	; (800e774 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	47a0      	blx	r4
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e0b8      	b.n	800e764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f7 fd05 	bl	8006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e5fc:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	695c      	ldr	r4, [r3, #20]
 800e608:	4b5b      	ldr	r3, [pc, #364]	; (800e778 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	2325      	movs	r3, #37	; 0x25
 800e60e:	4a58      	ldr	r2, [pc, #352]	; (800e770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e610:	4958      	ldr	r1, [pc, #352]	; (800e774 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	47a0      	blx	r4
 800e616:	2301      	movs	r3, #1
 800e618:	e0a4      	b.n	800e764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800e61a:	69b8      	ldr	r0, [r7, #24]
 800e61c:	f7fe fb56 	bl	800cccc <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	4613      	mov	r3, r2
 800e626:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e62e:	6838      	ldr	r0, [r7, #0]
 800e630:	f7fc ffae 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e634:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e636:	2b01      	cmp	r3, #1
 800e638:	d109      	bne.n	800e64e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d105      	bne.n	800e64e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e000      	b.n	800e650 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800e64e:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e650:	2b00      	cmp	r3, #0
 800e652:	d002      	beq.n	800e65a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800e65a:	2301      	movs	r3, #1
 800e65c:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 800e65e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e662:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 800e664:	2300      	movs	r3, #0
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	69fa      	ldr	r2, [r7, #28]
 800e66e:	429a      	cmp	r2, r3
 800e670:	da2b      	bge.n	800e6ca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4413      	add	r3, r2
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e684:	d118      	bne.n	800e6b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e68c:	d011      	beq.n	800e6b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	695c      	ldr	r4, [r3, #20]
 800e692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e696:	9303      	str	r3, [sp, #12]
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	9302      	str	r3, [sp, #8]
 800e69c:	4b37      	ldr	r3, [pc, #220]	; (800e77c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800e69e:	9301      	str	r3, [sp, #4]
 800e6a0:	4b37      	ldr	r3, [pc, #220]	; (800e780 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	233a      	movs	r3, #58	; 0x3a
 800e6a6:	4a32      	ldr	r2, [pc, #200]	; (800e770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e6a8:	4936      	ldr	r1, [pc, #216]	; (800e784 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	47a0      	blx	r4
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e058      	b.n	800e764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	623b      	str	r3, [r7, #32]
 800e6b6:	e004      	b.n	800e6c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	fb02 f303 	mul.w	r3, r2, r3
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	61fb      	str	r3, [r7, #28]
 800e6c8:	e7ce      	b.n	800e668 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6d0:	d011      	beq.n	800e6f6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	fb92 f2f3 	sdiv	r2, r2, r3
 800e6da:	68f9      	ldr	r1, [r7, #12]
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	440b      	add	r3, r1
 800e6e2:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	fb02 f303 	mul.w	r3, r2, r3
 800e6f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	781a      	ldrb	r2, [r3, #0]
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d01a      	beq.n	800e738 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	695c      	ldr	r4, [r3, #20]
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f5 f9fa 	bl	8003b04 <TfLiteTypeGetName>
 800e710:	4605      	mov	r5, r0
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	4618      	mov	r0, r3
 800e718:	f7f5 f9f4 	bl	8003b04 <TfLiteTypeGetName>
 800e71c:	4603      	mov	r3, r0
 800e71e:	9303      	str	r3, [sp, #12]
 800e720:	9502      	str	r5, [sp, #8]
 800e722:	4b19      	ldr	r3, [pc, #100]	; (800e788 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	4b19      	ldr	r3, [pc, #100]	; (800e78c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	2345      	movs	r3, #69	; 0x45
 800e72c:	4a10      	ldr	r2, [pc, #64]	; (800e770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e72e:	4918      	ldr	r1, [pc, #96]	; (800e790 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	47a0      	blx	r4
 800e734:	2301      	movs	r3, #1
 800e736:	e015      	b.n	800e764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d010      	beq.n	800e762 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	695c      	ldr	r4, [r3, #20]
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	9302      	str	r3, [sp, #8]
 800e74c:	4b11      	ldr	r3, [pc, #68]	; (800e794 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800e74e:	9301      	str	r3, [sp, #4]
 800e750:	4b11      	ldr	r3, [pc, #68]	; (800e798 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	2346      	movs	r3, #70	; 0x46
 800e756:	4a06      	ldr	r2, [pc, #24]	; (800e770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e758:	490a      	ldr	r1, [pc, #40]	; (800e784 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	47a0      	blx	r4
 800e75e:	2301      	movs	r3, #1
 800e760:	e000      	b.n	800e764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3728      	adds	r7, #40	; 0x28
 800e768:	46bd      	mov	sp, r7
 800e76a:	bdb0      	pop	{r4, r5, r7, pc}
 800e76c:	080167e8 	.word	0x080167e8
 800e770:	08016794 	.word	0x08016794
 800e774:	080167d0 	.word	0x080167d0
 800e778:	080167fc 	.word	0x080167fc
 800e77c:	0801682c 	.word	0x0801682c
 800e780:	08016830 	.word	0x08016830
 800e784:	08016810 	.word	0x08016810
 800e788:	08016858 	.word	0x08016858
 800e78c:	08016868 	.word	0x08016868
 800e790:	0801683c 	.word	0x0801683c
 800e794:	08016874 	.word	0x08016874
 800e798:	08016888 	.word	0x08016888

0800e79c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800e79c:	b590      	push	{r4, r7, lr}
 800e79e:	b087      	sub	sp, #28
 800e7a0:	af04      	add	r7, sp, #16
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800e7a6:	6838      	ldr	r0, [r7, #0]
 800e7a8:	f7fc fef2 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d007      	beq.n	800e7c2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e7b2:	6838      	ldr	r0, [r7, #0]
 800e7b4:	f7fc feec 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d001      	beq.n	800e7c2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00a      	beq.n	800e7de <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	695c      	ldr	r4, [r3, #20]
 800e7cc:	4b27      	ldr	r3, [pc, #156]	; (800e86c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	234b      	movs	r3, #75	; 0x4b
 800e7d2:	4a27      	ldr	r2, [pc, #156]	; (800e870 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e7d4:	4927      	ldr	r1, [pc, #156]	; (800e874 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	47a0      	blx	r4
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e041      	b.n	800e862 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e7de:	6838      	ldr	r0, [r7, #0]
 800e7e0:	f7fc fee3 	bl	800b5aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	bf14      	ite	ne
 800e7ea:	2301      	movne	r3, #1
 800e7ec:	2300      	moveq	r3, #0
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d013      	beq.n	800e81c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	695c      	ldr	r4, [r3, #20]
 800e7f8:	6838      	ldr	r0, [r7, #0]
 800e7fa:	f7fc fed6 	bl	800b5aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2201      	movs	r2, #1
 800e802:	9203      	str	r2, [sp, #12]
 800e804:	9302      	str	r3, [sp, #8]
 800e806:	4b1c      	ldr	r3, [pc, #112]	; (800e878 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	4b1c      	ldr	r3, [pc, #112]	; (800e87c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	234c      	movs	r3, #76	; 0x4c
 800e810:	4a17      	ldr	r2, [pc, #92]	; (800e870 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e812:	491b      	ldr	r1, [pc, #108]	; (800e880 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	47a0      	blx	r4
 800e818:	2301      	movs	r3, #1
 800e81a:	e022      	b.n	800e862 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7ff fece 	bl	800e5c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	bf14      	ite	ne
 800e82a:	2301      	movne	r3, #1
 800e82c:	2300      	moveq	r3, #0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	d015      	beq.n	800e860 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	695c      	ldr	r4, [r3, #20]
 800e838:	6839      	ldr	r1, [r7, #0]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff fec0 	bl	800e5c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e840:	4603      	mov	r3, r0
 800e842:	461a      	mov	r2, r3
 800e844:	2300      	movs	r3, #0
 800e846:	9303      	str	r3, [sp, #12]
 800e848:	9202      	str	r2, [sp, #8]
 800e84a:	4b0e      	ldr	r3, [pc, #56]	; (800e884 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	4b0e      	ldr	r3, [pc, #56]	; (800e888 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	234d      	movs	r3, #77	; 0x4d
 800e854:	4a06      	ldr	r2, [pc, #24]	; (800e870 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e856:	490a      	ldr	r1, [pc, #40]	; (800e880 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	47a0      	blx	r4
 800e85c:	2301      	movs	r3, #1
 800e85e:	e000      	b.n	800e862 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}
 800e86a:	bf00      	nop
 800e86c:	0801689c 	.word	0x0801689c
 800e870:	08016794 	.word	0x08016794
 800e874:	080167d0 	.word	0x080167d0
 800e878:	080168cc 	.word	0x080168cc
 800e87c:	080168d0 	.word	0x080168d0
 800e880:	08016810 	.word	0x08016810
 800e884:	080168e4 	.word	0x080168e4
 800e888:	080168f0 	.word	0x080168f0

0800e88c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800e896:	2200      	movs	r2, #0
 800e898:	6839      	ldr	r1, [r7, #0]
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7fc fb12 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e8a0:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fc fb1c 	bl	800aee4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e8ac:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	7a1b      	ldrb	r3, [r3, #8]
 800e8b2:	f107 020c 	add.w	r2, r7, #12
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7f8 fa09 	bl	8006cd0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	74fb      	strb	r3, [r7, #19]
 800e8c2:	7cfb      	ldrb	r3, [r7, #19]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800e8c8:	7cfb      	ldrb	r3, [r7, #19]
 800e8ca:	e024      	b.n	800e916 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fc f8eb 	bl	800aaac <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	fb02 f303 	mul.w	r3, r2, r3
 800e8de:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d013      	beq.n	800e914 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d20d      	bcs.n	800e914 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	441a      	add	r2, r3
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	6819      	ldr	r1, [r3, #0]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	440b      	add	r3, r1
 800e908:	7812      	ldrb	r2, [r2, #0]
 800e90a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	3301      	adds	r3, #1
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e7ed      	b.n	800e8f0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800e920:	b4b0      	push	{r4, r5, r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a07      	ldr	r2, [pc, #28]	; (800e948 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800e92c:	461c      	mov	r4, r3
 800e92e:	4615      	mov	r5, r2
 800e930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e934:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	bcb0      	pop	{r4, r5, r7}
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	08016910 	.word	0x08016910

0800e94c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	fa02 f303 	lsl.w	r3, r2, r3
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	4618      	mov	r0, r3
 800e964:	f7fc fb1e 	bl	800afa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e968:	4603      	mov	r3, r0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
	...

0800e974 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
}

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	6039      	str	r1, [r7, #0]
 800e97e:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800e980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e984:	11db      	asrs	r3, r3, #7
 800e986:	b29b      	uxth	r3, r3
 800e988:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e98c:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800e98e:	8afb      	ldrh	r3, [r7, #22]
 800e990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e994:	d306      	bcc.n	800e9a4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800e996:	4b1b      	ldr	r3, [pc, #108]	; (800ea04 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800e998:	4a1b      	ldr	r2, [pc, #108]	; (800ea08 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800e99a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e99e:	481b      	ldr	r0, [pc, #108]	; (800ea0c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800e9a0:	f002 fa04 	bl	8010dac <__assert_func>
  int16_t offset = value & 0x7f;
 800e9a4:	88fb      	ldrh	r3, [r7, #6]
 800e9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9aa:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800e9ac:	8afb      	ldrh	r3, [r7, #22]
 800e9ae:	005b      	lsls	r3, r3, #1
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800e9b8:	8afb      	ldrh	r3, [r7, #22]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	005b      	lsls	r3, r3, #1
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	8afb      	ldrh	r3, [r7, #22]
 800e9ca:	005b      	lsls	r3, r3, #1
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	440b      	add	r3, r1
 800e9d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800e9dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e9e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800e9e4:	fb02 f303 	mul.w	r3, r2, r3
 800e9e8:	3340      	adds	r3, #64	; 0x40
 800e9ea:	11db      	asrs	r3, r3, #7
 800e9ec:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	8a7b      	ldrh	r3, [r7, #18]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	b21b      	sxth	r3, r3
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	08016930 	.word	0x08016930
 800ea08:	0801695c 	.word	0x0801695c
 800ea0c:	080169a0 	.word	0x080169a0

0800ea10 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fe2e 	bl	800d680 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800ea24:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	1ad2      	subs	r2, r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	fa02 f303 	lsl.w	r3, r2, r3
 800ea38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800ea3c:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800ea3e:	69b8      	ldr	r0, [r7, #24]
 800ea40:	f7fe ff41 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ea44:	4603      	mov	r3, r0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe ff4e 	bl	800d8e8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800ea50:	f107 0314 	add.w	r3, r7, #20
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe fe25 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	681b      	ldr	r3, [r3, #0]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3720      	adds	r7, #32
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800ea66:	b580      	push	{r7, lr}
 800ea68:	ed2d 8b02 	vpush	{d8}
 800ea6c:	b08e      	sub	sp, #56	; 0x38
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	607a      	str	r2, [r7, #4]
 800ea76:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ea78:	68b8      	ldr	r0, [r7, #8]
 800ea7a:	f7f8 f87e 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	3b01      	subs	r3, #1
 800ea82:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	6a39      	ldr	r1, [r7, #32]
 800ea88:	68b8      	ldr	r0, [r7, #8]
 800ea8a:	f7fe fdca 	bl	800d622 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ea8e:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	6a39      	ldr	r1, [r7, #32]
 800ea96:	68b8      	ldr	r0, [r7, #8]
 800ea98:	f7fc fdb2 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ea9c:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	637b      	str	r3, [r7, #52]	; 0x34
 800eaa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	f280 8087 	bge.w	800ebba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800eaac:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800eab0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800eab2:	2300      	movs	r3, #0
 800eab4:	633b      	str	r3, [r7, #48]	; 0x30
 800eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	da15      	bge.n	800eaea <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800eabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac0:	69ba      	ldr	r2, [r7, #24]
 800eac2:	fb02 f203 	mul.w	r2, r2, r3
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	4413      	add	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	441a      	add	r2, r3
 800ead0:	f107 0310 	add.w	r3, r7, #16
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f7 f98e 	bl	8005df8 <_ZSt3maxIfERKT_S2_S2_>
 800eadc:	4603      	mov	r3, r0
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	3301      	adds	r3, #1
 800eae6:	633b      	str	r3, [r7, #48]	; 0x30
 800eae8:	e7e5      	b.n	800eab6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800eaea:	f04f 0300 	mov.w	r3, #0
 800eaee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	da36      	bge.n	800eb6a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800eafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafe:	69ba      	ldr	r2, [r7, #24]
 800eb00:	fb02 f203 	mul.w	r2, r2, r3
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	ed93 7a00 	vldr	s14, [r3]
 800eb12:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb16:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	4610      	mov	r0, r2
 800eb22:	4619      	mov	r1, r3
 800eb24:	f7f2 f834 	bl	8000b90 <__aeabi_d2f>
 800eb28:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800eb2c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800eb30:	eeb0 0a67 	vmov.f32	s0, s15
 800eb34:	f7fe f8da 	bl	800ccec <_ZSt3expf>
 800eb38:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3e:	69ba      	ldr	r2, [r7, #24]
 800eb40:	fb02 f203 	mul.w	r2, r2, r3
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb4c:	4413      	add	r3, r2
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800eb52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800eb56:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	3301      	adds	r3, #1
 800eb66:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb68:	e7c4      	b.n	800eaf4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	da1d      	bge.n	800ebb2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	69ba      	ldr	r2, [r7, #24]
 800eb7a:	fb02 f203 	mul.w	r2, r2, r3
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb80:	4413      	add	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb86:	4413      	add	r3, r2
 800eb88:	edd3 6a00 	vldr	s13, [r3]
 800eb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	fb02 f203 	mul.w	r2, r2, r3
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	4413      	add	r3, r2
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb9c:	4413      	add	r3, r2
 800eb9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800eba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eba6:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	3301      	adds	r3, #1
 800ebae:	627b      	str	r3, [r7, #36]	; 0x24
 800ebb0:	e7dd      	b.n	800eb6e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb8:	e773      	b.n	800eaa2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800ebba:	bf00      	nop
 800ebbc:	3738      	adds	r7, #56	; 0x38
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	ecbd 8b02 	vpop	{d8}
 800ebc4:	bd80      	pop	{r7, pc}
	...

0800ebc8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08a      	sub	sp, #40	; 0x28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	fb02 f203 	mul.w	r2, r2, r3
 800ebde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe0:	4413      	add	r3, r2
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebec:	461a      	mov	r2, r3
 800ebee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6899      	ldr	r1, [r3, #8]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 800ebfe:	461a      	mov	r2, r3
 800ec00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec02:	f7fc fa9a 	bl	800b13a <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ec06:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800ec0e:	337f      	adds	r3, #127	; 0x7f
 800ec10:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800ec12:	4b12      	ldr	r3, [pc, #72]	; (800ec5c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800ec14:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 800ec16:	f107 0214 	add.w	r2, r7, #20
 800ec1a:	f107 0310 	add.w	r3, r7, #16
 800ec1e:	4611      	mov	r1, r2
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7f7 fe17 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800ec26:	4602      	mov	r2, r0
 800ec28:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ec2c:	61bb      	str	r3, [r7, #24]
 800ec2e:	f107 0318 	add.w	r3, r7, #24
 800ec32:	4619      	mov	r1, r3
 800ec34:	4610      	mov	r0, r2
 800ec36:	f7f7 fdf9 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800ec3a:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800ec3c:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800ec3e:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ec48:	4611      	mov	r1, r2
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff fe92 	bl	800e974 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800ec50:	4603      	mov	r3, r0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3728      	adds	r7, #40	; 0x28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	ffff8000 	.word	0xffff8000

0800ec60 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	b0a1      	sub	sp, #132	; 0x84
 800ec66:	af02      	add	r7, sp, #8
 800ec68:	6178      	str	r0, [r7, #20]
 800ec6a:	6139      	str	r1, [r7, #16]
 800ec6c:	60fa      	str	r2, [r7, #12]
 800ec6e:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ec70:	6938      	ldr	r0, [r7, #16]
 800ec72:	f7f7 ff82 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ec76:	4603      	mov	r3, r0
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec80:	6938      	ldr	r0, [r7, #16]
 800ec82:	f7fe fcce 	bl	800d622 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ec86:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ec88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec8e:	6938      	ldr	r0, [r7, #16]
 800ec90:	f7fc fcb6 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ec94:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 800ec96:	2300      	movs	r3, #0
 800ec98:	677b      	str	r3, [r7, #116]	; 0x74
 800ec9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	f280 8119 	bge.w	800eed6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800eca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eca8:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800ecaa:	2300      	movs	r3, #0
 800ecac:	673b      	str	r3, [r7, #112]	; 0x70
 800ecae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ecb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	da16      	bge.n	800ece4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800ecb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecba:	fb02 f203 	mul.w	r2, r2, r3
 800ecbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecc0:	4413      	add	r3, r2
 800ecc2:	005b      	lsls	r3, r3, #1
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	441a      	add	r2, r3
 800ecc8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800eccc:	4611      	mov	r1, r2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fc fbc6 	bl	800b460 <_ZSt3maxIsERKT_S2_S2_>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecda:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800ecdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecde:	3301      	adds	r3, #1
 800ece0:	673b      	str	r3, [r7, #112]	; 0x70
 800ece2:	e7e4      	b.n	800ecae <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800ece4:	2300      	movs	r3, #0
 800ece6:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 800ece8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecec:	fb02 f303 	mul.w	r3, r2, r3
 800ecf0:	005b      	lsls	r3, r3, #1
 800ecf2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ecf6:	4413      	add	r3, r2
 800ecf8:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed02:	429a      	cmp	r2, r3
 800ed04:	da1f      	bge.n	800ed46 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800ed06:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 800ed0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed0c:	005b      	lsls	r3, r3, #1
 800ed0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed10:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800ed12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed1e:	68f9      	ldr	r1, [r7, #12]
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	f7ff ff51 	bl	800ebc8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800ed26:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800ed28:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800ed2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed30:	4413      	add	r3, r2
 800ed32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed36:	461a      	mov	r2, r3
 800ed38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed3a:	4413      	add	r3, r2
 800ed3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 800ed3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed40:	3301      	adds	r3, #1
 800ed42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed44:	e7db      	b.n	800ecfe <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800ed46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fe fc99 	bl	800d680 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800ed54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed56:	461a      	mov	r2, r3
 800ed58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ed5c:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 800ed60:	3901      	subs	r1, #1
 800ed62:	f1a1 0620 	sub.w	r6, r1, #32
 800ed66:	f1c1 0020 	rsb	r0, r1, #32
 800ed6a:	fa03 f501 	lsl.w	r5, r3, r1
 800ed6e:	fa02 f606 	lsl.w	r6, r2, r6
 800ed72:	4335      	orrs	r5, r6
 800ed74:	fa22 f000 	lsr.w	r0, r2, r0
 800ed78:	4305      	orrs	r5, r0
 800ed7a:	fa02 f401 	lsl.w	r4, r2, r1
 800ed7e:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 800ed82:	603b      	str	r3, [r7, #0]
 800ed84:	f145 0300 	adc.w	r3, r5, #0
 800ed88:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 800ed8a:	f04f 0200 	mov.w	r2, #0
 800ed8e:	f04f 0300 	mov.w	r3, #0
 800ed92:	6839      	ldr	r1, [r7, #0]
 800ed94:	0b8a      	lsrs	r2, r1, #14
 800ed96:	6879      	ldr	r1, [r7, #4]
 800ed98:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800eda0:	4613      	mov	r3, r2
 800eda2:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800eda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eda6:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800edaa:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800edac:	4b4c      	ldr	r3, [pc, #304]	; (800eee0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 800edae:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 800edb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800edb4:	f107 0320 	add.w	r3, r7, #32
 800edb8:	4611      	mov	r1, r2
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f7 fd4a 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800edc0:	4602      	mov	r2, r0
 800edc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800edc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	f7f7 fd2c 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800edd4:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800edd6:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800edd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 800ede0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800ede4:	4611      	mov	r1, r2
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff fdc4 	bl	800e974 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800edec:	4603      	mov	r3, r0
 800edee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800edf2:	2300      	movs	r3, #0
 800edf4:	667b      	str	r3, [r7, #100]	; 0x64
 800edf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800edf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edfa:	429a      	cmp	r2, r3
 800edfc:	da67      	bge.n	800eece <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 800edfe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ee02:	f1c3 031f 	rsb	r3, r3, #31
 800ee06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 800ee0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	2201      	movs	r2, #1
 800ee12:	fa02 f303 	lsl.w	r3, r2, r3
 800ee16:	461a      	mov	r2, r3
 800ee18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ee1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800ee20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee26:	4413      	add	r3, r2
 800ee28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2c:	b218      	sxth	r0, r3
 800ee2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800ee32:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800ee36:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800ee3a:	fb02 fc01 	mul.w	ip, r2, r1
 800ee3e:	fb00 f603 	mul.w	r6, r0, r3
 800ee42:	4466      	add	r6, ip
 800ee44:	fba0 2302 	umull	r2, r3, r0, r2
 800ee48:	18f1      	adds	r1, r6, r3
 800ee4a:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800ee4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ee50:	eb12 0a00 	adds.w	sl, r2, r0
 800ee54:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 800ee58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 800ee5c:	f1c3 0120 	rsb	r1, r3, #32
 800ee60:	f1b3 0220 	subs.w	r2, r3, #32
 800ee64:	fa2a f803 	lsr.w	r8, sl, r3
 800ee68:	fa0b f101 	lsl.w	r1, fp, r1
 800ee6c:	ea48 0801 	orr.w	r8, r8, r1
 800ee70:	d403      	bmi.n	800ee7a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 800ee72:	fa4b f202 	asr.w	r2, fp, r2
 800ee76:	ea48 0802 	orr.w	r8, r8, r2
 800ee7a:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800ee7e:	4643      	mov	r3, r8
 800ee80:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 800ee82:	2300      	movs	r3, #0
 800ee84:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 800ee86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ee8a:	f107 031c 	add.w	r3, r7, #28
 800ee8e:	4611      	mov	r1, r2
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f7 fcdf 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800ee96:	4602      	mov	r2, r0
 800ee98:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7f7 fcc1 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800eeaa:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800eeac:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800eeae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eeb2:	fb02 f203 	mul.w	r2, r2, r3
 800eeb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeb8:	4413      	add	r3, r2
 800eeba:	005b      	lsls	r3, r3, #1
 800eebc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800eec0:	4413      	add	r3, r2
 800eec2:	b20a      	sxth	r2, r1
 800eec4:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800eec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eec8:	3301      	adds	r3, #1
 800eeca:	667b      	str	r3, [r7, #100]	; 0x64
 800eecc:	e793      	b.n	800edf6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 800eece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eed0:	3301      	adds	r3, #1
 800eed2:	677b      	str	r3, [r7, #116]	; 0x74
 800eed4:	e6e1      	b.n	800ec9a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800eed6:	bf00      	nop
 800eed8:	377c      	adds	r7, #124	; 0x7c
 800eeda:	46bd      	mov	sp, r7
 800eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee0:	ffff8000 	.word	0xffff8000

0800eee4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b0ab      	sub	sp, #172	; 0xac
 800eee8:	af02      	add	r7, sp, #8
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	7a1b      	ldrb	r3, [r3, #8]
 800eef4:	2b09      	cmp	r3, #9
 800eef6:	d153      	bne.n	800efa0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xbc>
    if (output->type == kTfLiteInt16) {
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	7a1b      	ldrb	r3, [r3, #8]
 800eefc:	2b07      	cmp	r3, #7
 800eefe:	d127      	bne.n	800ef50 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6c>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	68f9      	ldr	r1, [r7, #12]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fb53 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7fc f829 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ef12:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 800ef14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fb49 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef20:	68b8      	ldr	r0, [r7, #8]
 800ef22:	f7fc fb24 	bl	800b56e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800ef26:	4602      	mov	r2, r0
 800ef28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef2c:	f107 0110 	add.w	r1, r7, #16
 800ef30:	9200      	str	r2, [sp, #0]
 800ef32:	4622      	mov	r2, r4
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 f8ed 	bl	800f114 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800ef3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7f7 fe05 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800ef44:	f107 0310 	add.w	r3, r7, #16
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7f7 fe00 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800ef4e:	e04e      	b.n	800efee <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
          op_data, tflite::micro::GetTensorShape(input),
 800ef50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef54:	68f9      	ldr	r1, [r7, #12]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fe fb2b 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f7fc f801 	bl	800af64 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ef62:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800ef64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef68:	68b9      	ldr	r1, [r7, #8]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe fb21 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ef70:	68b8      	ldr	r0, [r7, #8]
 800ef72:	f7fc f806 	bl	800af82 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ef76:	4602      	mov	r2, r0
 800ef78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef7c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ef80:	9200      	str	r2, [sp, #0]
 800ef82:	4622      	mov	r2, r4
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f9e3 	bl	800f350 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800ef8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7f7 fddd 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800ef94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f7 fdd8 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
}
 800ef9e:	e026      	b.n	800efee <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
        op_data, tflite::micro::GetTensorShape(input),
 800efa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800efa4:	68f9      	ldr	r1, [r7, #12]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe fb03 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f7fc facf 	bl	800b550 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800efb2:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800efb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800efb8:	68b9      	ldr	r1, [r7, #8]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe faf9 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800efc0:	68b8      	ldr	r0, [r7, #8]
 800efc2:	f7fc fad4 	bl	800b56e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800efc6:	4602      	mov	r2, r0
 800efc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800efcc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800efd0:	9200      	str	r2, [sp, #0]
 800efd2:	4622      	mov	r2, r4
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff fe43 	bl	800ec60 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800efda:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800efde:	4618      	mov	r0, r3
 800efe0:	f7f7 fdb5 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800efe4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800efe8:	4618      	mov	r0, r3
 800efea:	f7f7 fdb0 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
}
 800efee:	bf00      	nop
 800eff0:	37a4      	adds	r7, #164	; 0xa4
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd90      	pop	{r4, r7, pc}
	...

0800eff8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800eff8:	b5b0      	push	{r4, r5, r7, lr}
 800effa:	b0a0      	sub	sp, #128	; 0x80
 800effc:	af02      	add	r7, sp, #8
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800f002:	2200      	movs	r2, #0
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7fb ff5c 	bl	800aec4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f00c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800f00e:	2200      	movs	r2, #0
 800f010:	6839      	ldr	r1, [r7, #0]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fb ff66 	bl	800aee4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f018:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 800f022:	f001 febc 	bl	8010d9e <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	f107 0408 	add.w	r4, r7, #8
 800f02e:	461d      	mov	r5, r3
 800f030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f03a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f03c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f040:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800f044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f046:	7a1b      	ldrb	r3, [r3, #8]
 800f048:	2b09      	cmp	r3, #9
 800f04a:	d030      	beq.n	800f0ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800f04c:	2b09      	cmp	r3, #9
 800f04e:	dc37      	bgt.n	800f0c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 800f050:	2b01      	cmp	r3, #1
 800f052:	d002      	beq.n	800f05a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 800f054:	2b07      	cmp	r3, #7
 800f056:	d02a      	beq.n	800f0ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800f058:	e032      	b.n	800f0c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800f05a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f05e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f060:	4618      	mov	r0, r3
 800f062:	f7fe faa6 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800f066:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f068:	f7fb ff5c 	bl	800af24 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800f06c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 800f06e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f072:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f074:	4618      	mov	r0, r3
 800f076:	f7fe fa9c 	bl	800d5b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800f07a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f07c:	f7fb ff61 	bl	800af42 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800f080:	4602      	mov	r2, r0
 800f082:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f086:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f08a:	f107 0008 	add.w	r0, r7, #8
 800f08e:	9200      	str	r2, [sp, #0]
 800f090:	4622      	mov	r2, r4
 800f092:	f7ff fce8 	bl	800ea66 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 800f096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f7 fd57 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800f0a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f7 fd52 	bl	8006b4e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	e016      	b.n	800f0dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800f0ae:	f107 0308 	add.w	r3, r7, #8
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f0b6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f0b8:	f7ff ff14 	bl	800eee4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	e00d      	b.n	800f0dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	695c      	ldr	r4, [r3, #20]
 800f0c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0c6:	7a1b      	ldrb	r3, [r3, #8]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7f4 fd1b 	bl	8003b04 <TfLiteTypeGetName>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0d2:	7a1b      	ldrb	r3, [r3, #8]
 800f0d4:	4903      	ldr	r1, [pc, #12]	; (800f0e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800f0da:	2301      	movs	r3, #1
  }
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3778      	adds	r7, #120	; 0x78
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f0e4:	08016a20 	.word	0x08016a20

0800f0e8 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800f0e8:	b4b0      	push	{r4, r5, r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a07      	ldr	r2, [pc, #28]	; (800f110 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800f0f4:	461c      	mov	r4, r3
 800f0f6:	4615      	mov	r5, r2
 800f0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	bcb0      	pop	{r4, r5, r7}
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	08016a3c 	.word	0x08016a3c

0800f114 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b09f      	sub	sp, #124	; 0x7c
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f134:	68b8      	ldr	r0, [r7, #8]
 800f136:	f7f7 fd20 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f13a:	4603      	mov	r3, r0
 800f13c:	3b01      	subs	r3, #1
 800f13e:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800f140:	683a      	ldr	r2, [r7, #0]
 800f142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f144:	68b8      	ldr	r0, [r7, #8]
 800f146:	f7fe fa6c 	bl	800d622 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f14a:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800f14c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f152:	68b8      	ldr	r0, [r7, #8]
 800f154:	f7fc fa54 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f158:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800f15a:	2300      	movs	r3, #0
 800f15c:	677b      	str	r3, [r7, #116]	; 0x74
 800f15e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f162:	429a      	cmp	r2, r3
 800f164:	f280 80f0 	bge.w	800f348 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800f168:	2380      	movs	r3, #128	; 0x80
 800f16a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f16e:	2300      	movs	r3, #0
 800f170:	673b      	str	r3, [r7, #112]	; 0x70
 800f172:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f176:	429a      	cmp	r2, r3
 800f178:	da17      	bge.n	800f1aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800f17a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f17c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f17e:	fb02 f203 	mul.w	r2, r2, r3
 800f182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f184:	4413      	add	r3, r2
 800f186:	461a      	mov	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	441a      	add	r2, r3
 800f18c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f190:	4611      	mov	r1, r2
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff f815 	bl	800e1c2 <_ZSt3maxIaERKT_S2_S2_>
 800f198:	4603      	mov	r3, r0
 800f19a:	f993 3000 	ldrsb.w	r3, [r3]
 800f19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	673b      	str	r3, [r7, #112]	; 0x70
 800f1a8:	e7e3      	b.n	800f172 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800f1aa:	f000 f9ef 	bl	800f58c <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f1b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	da30      	bge.n	800f220 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1c2:	fb02 f203 	mul.w	r2, r2, r3
 800f1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1c8:	4413      	add	r3, r2
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f993 3000 	ldrsb.w	r3, [r3]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800f1de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	db18      	blt.n	800f218 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f1e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f1e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f1ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f1ec:	f7ff fbae 	bl	800e94c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f1f0:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f1f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f1f4:	f7fe fbd8 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800f1fc:	69f8      	ldr	r0, [r7, #28]
 800f1fe:	f7fe fbe5 	bl	800d9cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f202:	4603      	mov	r3, r0
 800f204:	4618      	mov	r0, r3
 800f206:	f7fe fd29 	bl	800dc5c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4619      	mov	r1, r3
 800f20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f210:	f7fe fd3e 	bl	800dc90 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f214:	4603      	mov	r3, r0
 800f216:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f21a:	3301      	adds	r3, #1
 800f21c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f21e:	e7ca      	b.n	800f1b6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800f220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe ffa4 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f22a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f232:	210c      	movs	r1, #12
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff fbeb 	bl	800ea10 <_ZN6tflite13GetReciprocalEliPi>
 800f23a:	4603      	mov	r3, r0
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe fb42 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f242:	4603      	mov	r3, r0
 800f244:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800f246:	2300      	movs	r3, #0
 800f248:	66bb      	str	r3, [r7, #104]	; 0x68
 800f24a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f24e:	429a      	cmp	r2, r3
 800f250:	da76      	bge.n	800f340 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f256:	fb02 f203 	mul.w	r2, r2, r3
 800f25a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f25c:	4413      	add	r3, r2
 800f25e:	461a      	mov	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4413      	add	r3, r2
 800f264:	f993 3000 	ldrsb.w	r3, [r3]
 800f268:	461a      	mov	r2, r3
 800f26a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800f272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f276:	429a      	cmp	r2, r3
 800f278:	db50      	blt.n	800f31c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f27a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f27c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f27e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f280:	f7ff fb64 	bl	800e94c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f284:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f286:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f288:	f7fe fb8e 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f28c:	4603      	mov	r3, r0
 800f28e:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800f290:	69b8      	ldr	r0, [r7, #24]
 800f292:	f7fe fb9b 	bl	800d9cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f296:	4603      	mov	r3, r0
 800f298:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800f29a:	6979      	ldr	r1, [r7, #20]
 800f29c:	6a38      	ldr	r0, [r7, #32]
 800f29e:	f7fe ff13 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	633b      	str	r3, [r7, #48]	; 0x30
 800f2a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe f9fa 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f2b0:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f2b2:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800f2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b6:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fb ff62 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f2c0:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800f2c2:	f7f6 fdf7 	bl	8005eb4 <_ZNSt14numeric_limitsIsE3minEv>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	461a      	mov	r2, r3
            unsat_output +
 800f2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2cc:	4413      	add	r3, r2
        const int32_t shifted_output =
 800f2ce:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800f2d0:	f7f6 fdfa 	bl	8005ec8 <_ZNSt14numeric_limitsIsE3maxEv>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800f2d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2dc:	f107 0310 	add.w	r3, r7, #16
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f7 faa2 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	f7f6 fde3 	bl	8005eb4 <_ZNSt14numeric_limitsIsE3minEv>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f7f7 faab 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800f2fe:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800f300:	6819      	ldr	r1, [r3, #0]
 800f302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f306:	fb02 f203 	mul.w	r2, r2, r3
 800f30a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f30c:	4413      	add	r3, r2
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f314:	4413      	add	r3, r2
 800f316:	b20a      	sxth	r2, r1
 800f318:	801a      	strh	r2, [r3, #0]
 800f31a:	e00d      	b.n	800f338 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800f31c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f31e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f320:	fb02 f203 	mul.w	r2, r2, r3
 800f324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f326:	4413      	add	r3, r2
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f32e:	18d4      	adds	r4, r2, r3
 800f330:	f7f6 fdc0 	bl	8005eb4 <_ZNSt14numeric_limitsIsE3minEv>
 800f334:	4603      	mov	r3, r0
 800f336:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800f338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f33a:	3301      	adds	r3, #1
 800f33c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f33e:	e784      	b.n	800f24a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800f340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f342:	3301      	adds	r3, #1
 800f344:	677b      	str	r3, [r7, #116]	; 0x74
 800f346:	e70a      	b.n	800f15e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800f348:	bf00      	nop
 800f34a:	377c      	adds	r7, #124	; 0x7c
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd90      	pop	{r4, r7, pc}

0800f350 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800f350:	b590      	push	{r4, r7, lr}
 800f352:	b09f      	sub	sp, #124	; 0x7c
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	699b      	ldr	r3, [r3, #24]
 800f36e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f370:	68b8      	ldr	r0, [r7, #8]
 800f372:	f7f7 fc02 	bl	8006b7a <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f376:	4603      	mov	r3, r0
 800f378:	3b01      	subs	r3, #1
 800f37a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f380:	68b8      	ldr	r0, [r7, #8]
 800f382:	f7fe f94e 	bl	800d622 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f386:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800f388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	f7fc f936 	bl	800b600 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f394:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800f396:	2300      	movs	r3, #0
 800f398:	677b      	str	r3, [r7, #116]	; 0x74
 800f39a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	f280 80f0 	bge.w	800f584 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800f3a4:	2380      	movs	r3, #128	; 0x80
 800f3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	673b      	str	r3, [r7, #112]	; 0x70
 800f3ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	da17      	bge.n	800f3e6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800f3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3ba:	fb02 f203 	mul.w	r2, r2, r3
 800f3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3c0:	4413      	add	r3, r2
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	441a      	add	r2, r3
 800f3c8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fe fef7 	bl	800e1c2 <_ZSt3maxIaERKT_S2_S2_>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f993 3000 	ldrsb.w	r3, [r3]
 800f3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f3de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	673b      	str	r3, [r7, #112]	; 0x70
 800f3e4:	e7e3      	b.n	800f3ae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800f3e6:	f000 f8d1 	bl	800f58c <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f3f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	da30      	bge.n	800f45c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3fe:	fb02 f203 	mul.w	r2, r2, r3
 800f402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f404:	4413      	add	r3, r2
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4413      	add	r3, r2
 800f40c:	f993 3000 	ldrsb.w	r3, [r3]
 800f410:	461a      	mov	r2, r3
 800f412:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f416:	1ad3      	subs	r3, r2, r3
 800f418:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800f41a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f41e:	429a      	cmp	r2, r3
 800f420:	db18      	blt.n	800f454 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f424:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f426:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f428:	f7ff fa90 	bl	800e94c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f42c:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f42e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f430:	f7fe faba 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f434:	4603      	mov	r3, r0
 800f436:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800f438:	69f8      	ldr	r0, [r7, #28]
 800f43a:	f7fe fac7 	bl	800d9cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f43e:	4603      	mov	r3, r0
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fc0b 	bl	800dc5c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f446:	4603      	mov	r3, r0
 800f448:	4619      	mov	r1, r3
 800f44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f44c:	f7fe fc20 	bl	800dc90 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f450:	4603      	mov	r3, r0
 800f452:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f456:	3301      	adds	r3, #1
 800f458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f45a:	e7ca      	b.n	800f3f2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800f45c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f460:	4618      	mov	r0, r3
 800f462:	f7fe fe86 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f466:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f46e:	210c      	movs	r1, #12
 800f470:	4618      	mov	r0, r3
 800f472:	f7ff facd 	bl	800ea10 <_ZN6tflite13GetReciprocalEliPi>
 800f476:	4603      	mov	r3, r0
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fa24 	bl	800d8c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f47e:	4603      	mov	r3, r0
 800f480:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800f482:	2300      	movs	r3, #0
 800f484:	66bb      	str	r3, [r7, #104]	; 0x68
 800f486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48a:	429a      	cmp	r2, r3
 800f48c:	da76      	bge.n	800f57c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800f48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f492:	fb02 f203 	mul.w	r2, r2, r3
 800f496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f498:	4413      	add	r3, r2
 800f49a:	461a      	mov	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	f993 3000 	ldrsb.w	r3, [r3]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800f4ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	db50      	blt.n	800f558 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800f4b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f4b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4bc:	f7ff fa46 	bl	800e94c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f4c0:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800f4c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f4c4:	f7fe fa70 	bl	800d9a8 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800f4cc:	69b8      	ldr	r0, [r7, #24]
 800f4ce:	f7fe fa7d 	bl	800d9cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800f4d6:	6979      	ldr	r1, [r7, #20]
 800f4d8:	6a38      	ldr	r0, [r7, #32]
 800f4da:	f7fe fdf5 	bl	800e0c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	633b      	str	r3, [r7, #48]	; 0x30
 800f4e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fe f8dc 	bl	800d6a4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f4ec:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f4ee:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fb fe44 	bl	800b184 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f4fc:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800f4fe:	f7f6 fcb8 	bl	8005e72 <_ZNSt14numeric_limitsIaE3minEv>
 800f502:	4603      	mov	r3, r0
 800f504:	461a      	mov	r2, r3
            unsat_output +
 800f506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f508:	4413      	add	r3, r2
        const int32_t shifted_output =
 800f50a:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800f50c:	f7f6 fcba 	bl	8005e84 <_ZNSt14numeric_limitsIaE3maxEv>
 800f510:	4603      	mov	r3, r0
 800f512:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800f514:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f518:	f107 0310 	add.w	r3, r7, #16
 800f51c:	4611      	mov	r1, r2
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f7 f984 	bl	800682c <_ZSt3minIlERKT_S2_S2_>
 800f524:	4604      	mov	r4, r0
 800f526:	f7f6 fca4 	bl	8005e72 <_ZNSt14numeric_limitsIaE3minEv>
 800f52a:	4603      	mov	r3, r0
 800f52c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f52e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f532:	4619      	mov	r1, r3
 800f534:	4620      	mov	r0, r4
 800f536:	f7f7 f98d 	bl	8006854 <_ZSt3maxIlERKT_S2_S2_>
 800f53a:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800f53c:	6819      	ldr	r1, [r3, #0]
 800f53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f542:	fb02 f203 	mul.w	r2, r2, r3
 800f546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f548:	4413      	add	r3, r2
 800f54a:	461a      	mov	r2, r3
 800f54c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f550:	4413      	add	r3, r2
 800f552:	b24a      	sxtb	r2, r1
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	e00d      	b.n	800f574 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800f558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f55a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f55c:	fb02 f203 	mul.w	r2, r2, r3
 800f560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f562:	4413      	add	r3, r2
 800f564:	461a      	mov	r2, r3
 800f566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f56a:	189c      	adds	r4, r3, r2
 800f56c:	f7f6 fc81 	bl	8005e72 <_ZNSt14numeric_limitsIaE3minEv>
 800f570:	4603      	mov	r3, r0
 800f572:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800f574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f576:	3301      	adds	r3, #1
 800f578:	66bb      	str	r3, [r7, #104]	; 0x68
 800f57a:	e784      	b.n	800f486 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800f57c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f57e:	3301      	adds	r3, #1
 800f580:	677b      	str	r3, [r7, #116]	; 0x74
 800f582:	e70a      	b.n	800f39a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800f584:	bf00      	nop
 800f586:	377c      	adds	r7, #124	; 0x7c
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd90      	pop	{r4, r7, pc}

0800f58c <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
 800f590:	2000      	movs	r0, #0
 800f592:	f000 f803 	bl	800f59c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800f596:	4603      	mov	r3, r0
 800f598:	4618      	mov	r0, r3
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f59c:	b590      	push	{r4, r7, lr}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f5a4:	f107 030c 	add.w	r3, r7, #12
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fe fde2 	bl	800e172 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7fb fe5b 	bl	800b26c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	6023      	str	r3, [r4, #0]
    return retval;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
  }
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd90      	pop	{r4, r7, pc}

0800f5c4 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	ed2d 8b02 	vpush	{d8}
 800f5ca:	b094      	sub	sp, #80	; 0x50
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6178      	str	r0, [r7, #20]
 800f5d0:	ed87 0a04 	vstr	s0, [r7, #16]
 800f5d4:	edc7 0a03 	vstr	s1, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 800f5dc:	ed97 7a03 	vldr	s14, [r7, #12]
 800f5e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800f5e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	ee07 3a90 	vmov	s15, r3
 800f5f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5f8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800f5fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f600:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f608:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800f60c:	2300      	movs	r3, #0
 800f60e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	3b01      	subs	r3, #1
 800f614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f616:	429a      	cmp	r2, r3
 800f618:	f280 80c0 	bge.w	800f79c <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800f61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f61e:	ee07 3a90 	vmov	s15, r3
 800f622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f626:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f62a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f62e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f632:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	eeb0 0a67 	vmov.f32	s0, s15
 800f63c:	4798      	blx	r3
 800f63e:	eef0 7a40 	vmov.f32	s15, s0
 800f642:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800f814 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f64a:	eeb0 0a67 	vmov.f32	s0, s15
 800f64e:	f7f6 fc00 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f652:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f658:	3301      	adds	r3, #1
 800f65a:	ee07 3a90 	vmov	s15, r3
 800f65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f662:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f66a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	eeb0 0a67 	vmov.f32	s0, s15
 800f678:	4798      	blx	r3
 800f67a:	eef0 7a40 	vmov.f32	s15, s0
 800f67e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f814 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f682:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800f686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f688:	ee07 3a90 	vmov	s15, r3
 800f68c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f690:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f698:	edd7 7a04 	vldr	s15, [r7, #16]
 800f69c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f6a6:	4798      	blx	r3
 800f6a8:	eef0 7a40 	vmov.f32	s15, s0
 800f6ac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f814 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f6b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f6b8:	f7f6 fbcb 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f6bc:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f6c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f6c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f6c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f6cc:	eeb0 0a47 	vmov.f32	s0, s14
 800f6d0:	f7f6 fbbf 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f6d4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800f6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6da:	ee07 3a90 	vmov	s15, r3
 800f6de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f6e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f6f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	eeb0 0a67 	vmov.f32	s0, s15
 800f700:	4798      	blx	r3
 800f702:	eef0 7a40 	vmov.f32	s15, s0
 800f706:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800f814 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f70a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f70e:	eeb0 0a67 	vmov.f32	s0, s15
 800f712:	f7f6 fb9e 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f716:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800f71a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f71e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f722:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f726:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800f72a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f72e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f732:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f736:	eeb0 0a47 	vmov.f32	s0, s14
 800f73a:	f7f6 fb8a 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f73e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f742:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f746:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f74a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f74e:	edc7 7a06 	vstr	s15, [r7, #24]
 800f752:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f756:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 800f758:	f107 021c 	add.w	r2, r7, #28
 800f75c:	f107 0318 	add.w	r3, r7, #24
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7f6 fb48 	bl	8005df8 <_ZSt3maxIfERKT_S2_S2_>
 800f768:	4602      	mov	r2, r0
 800f76a:	4b2b      	ldr	r3, [pc, #172]	; (800f818 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f76c:	623b      	str	r3, [r7, #32]
 800f76e:	f107 0320 	add.w	r3, r7, #32
 800f772:	4619      	mov	r1, r3
 800f774:	4610      	mov	r0, r2
 800f776:	f7f6 fb26 	bl	8005dc6 <_ZSt3minIfERKT_S2_S2_>
 800f77a:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f77c:	edd3 7a00 	vldr	s15, [r3]
 800f780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f782:	005b      	lsls	r3, r3, #1
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	4413      	add	r3, r2
 800f788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f78c:	ee17 2a90 	vmov	r2, s15
 800f790:	b212      	sxth	r2, r2
 800f792:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800f794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f796:	3301      	adds	r3, #1
 800f798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f79a:	e739      	b.n	800f610 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	ed97 0a03 	vldr	s0, [r7, #12]
 800f7a2:	4798      	blx	r3
 800f7a4:	eef0 7a40 	vmov.f32	s15, s0
 800f7a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f814 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f7ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7b0:	eeb0 0a67 	vmov.f32	s0, s15
 800f7b4:	f7f6 fb4d 	bl	8005e52 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f7b8:	eef0 7a40 	vmov.f32	s15, s0
 800f7bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f7c0:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f7ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7f6 fb11 	bl	8005df8 <_ZSt3maxIfERKT_S2_S2_>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	4b0f      	ldr	r3, [pc, #60]	; (800f818 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f7f6 faef 	bl	8005dc6 <_ZSt3minIfERKT_S2_S2_>
 800f7e8:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 800f7ea:	edd3 7a00 	vldr	s15, [r3]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f800:	ee17 2a90 	vmov	r2, s15
 800f804:	b212      	sxth	r2, r2
 800f806:	801a      	strh	r2, [r3, #0]
}
 800f808:	bf00      	nop
 800f80a:	3750      	adds	r7, #80	; 0x50
 800f80c:	46bd      	mov	sp, r7
 800f80e:	ecbd 8b02 	vpop	{d8}
 800f812:	bd80      	pop	{r7, pc}
 800f814:	47000000 	.word	0x47000000
 800f818:	46fffe00 	.word	0x46fffe00
 800f81c:	00000000 	.word	0x00000000

0800f820 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800f820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f824:	b090      	sub	sp, #64	; 0x40
 800f826:	af06      	add	r7, sp, #24
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
 800f82e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	2b09      	cmp	r3, #9
 800f836:	d004      	beq.n	800f842 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b07      	cmp	r3, #7
 800f83e:	f040 81b6 	bne.w	800fbae <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	2b07      	cmp	r3, #7
 800f848:	d156      	bne.n	800f8f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d011      	beq.n	800f876 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	695c      	ldr	r4, [r3, #20]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	2200      	movs	r2, #0
 800f85c:	9203      	str	r2, [sp, #12]
 800f85e:	9302      	str	r3, [sp, #8]
 800f860:	4ba1      	ldr	r3, [pc, #644]	; (800fae8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	4ba1      	ldr	r3, [pc, #644]	; (800faec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	2325      	movs	r3, #37	; 0x25
 800f86a:	4aa1      	ldr	r2, [pc, #644]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f86c:	49a1      	ldr	r1, [pc, #644]	; (800faf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	47a0      	blx	r4
 800f872:	2301      	movs	r3, #1
 800f874:	e1e0      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	edd3 7a03 	vldr	s15, [r3, #12]
 800f87c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800faf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f880:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f888:	dd07      	ble.n	800f89a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f890:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800faf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f898:	e006      	b.n	800f8a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8a0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800faf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f8a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8a8:	edc7 7a08 	vstr	s15, [r7, #32]
 800f8ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800f8b0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800fafc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 800f8b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	f340 80dd 	ble.w	800fa7a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	695c      	ldr	r4, [r3, #20]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7f0 fe47 	bl	800055c <__aeabi_f2d>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	f04f 0000 	mov.w	r0, #0
 800f8d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f8da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8e2:	4b87      	ldr	r3, [pc, #540]	; (800fb00 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	4b87      	ldr	r3, [pc, #540]	; (800fb04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	2326      	movs	r3, #38	; 0x26
 800f8ec:	4a80      	ldr	r2, [pc, #512]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f8ee:	4986      	ldr	r1, [pc, #536]	; (800fb08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	47a0      	blx	r4
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e19f      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2b09      	cmp	r3, #9
 800f8fe:	d018      	beq.n	800f932 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	695c      	ldr	r4, [r3, #20]
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f4 f8fb 	bl	8003b04 <TfLiteTypeGetName>
 800f90e:	4605      	mov	r5, r0
 800f910:	2009      	movs	r0, #9
 800f912:	f7f4 f8f7 	bl	8003b04 <TfLiteTypeGetName>
 800f916:	4603      	mov	r3, r0
 800f918:	9303      	str	r3, [sp, #12]
 800f91a:	9502      	str	r5, [sp, #8]
 800f91c:	4b7b      	ldr	r3, [pc, #492]	; (800fb0c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	4b7b      	ldr	r3, [pc, #492]	; (800fb10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	2329      	movs	r3, #41	; 0x29
 800f926:	4a72      	ldr	r2, [pc, #456]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f928:	497a      	ldr	r1, [pc, #488]	; (800fb14 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	47a0      	blx	r4
 800f92e:	2301      	movs	r3, #1
 800f930:	e182      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b07      	cmp	r3, #7
 800f938:	d155      	bne.n	800f9e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f942:	d011      	beq.n	800f968 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	695c      	ldr	r4, [r3, #20]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	4a72      	ldr	r2, [pc, #456]	; (800fb18 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800f94e:	9203      	str	r2, [sp, #12]
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	4b72      	ldr	r3, [pc, #456]	; (800fb1c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	4b65      	ldr	r3, [pc, #404]	; (800faec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	232b      	movs	r3, #43	; 0x2b
 800f95c:	4a64      	ldr	r2, [pc, #400]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f95e:	4965      	ldr	r1, [pc, #404]	; (800faf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	47a0      	blx	r4
 800f964:	2301      	movs	r3, #1
 800f966:	e167      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f96e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800fb20 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f972:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97a:	dd07      	ble.n	800f98c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f982:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb20 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f98a:	e006      	b.n	800f99a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f992:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800fb20 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f99a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f99e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f9a2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800fb24 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 800f9a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ae:	dd64      	ble.n	800fa7a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	695c      	ldr	r4, [r3, #20]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f0 fdcf 	bl	800055c <__aeabi_f2d>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	f04f 0000 	mov.w	r0, #0
 800f9c6:	4958      	ldr	r1, [pc, #352]	; (800fb28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800f9c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9d0:	4b56      	ldr	r3, [pc, #344]	; (800fb2c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800f9d2:	9301      	str	r3, [sp, #4]
 800f9d4:	4b4b      	ldr	r3, [pc, #300]	; (800fb04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	232c      	movs	r3, #44	; 0x2c
 800f9da:	4a45      	ldr	r2, [pc, #276]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f9dc:	494a      	ldr	r1, [pc, #296]	; (800fb08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	47a0      	blx	r4
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e128      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b09      	cmp	r3, #9
 800f9ec:	d018      	beq.n	800fa20 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	695c      	ldr	r4, [r3, #20]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f4 f884 	bl	8003b04 <TfLiteTypeGetName>
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	2009      	movs	r0, #9
 800fa00:	f7f4 f880 	bl	8003b04 <TfLiteTypeGetName>
 800fa04:	4603      	mov	r3, r0
 800fa06:	9303      	str	r3, [sp, #12]
 800fa08:	9502      	str	r5, [sp, #8]
 800fa0a:	4b40      	ldr	r3, [pc, #256]	; (800fb0c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800fa0c:	9301      	str	r3, [sp, #4]
 800fa0e:	4b48      	ldr	r3, [pc, #288]	; (800fb30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	232f      	movs	r3, #47	; 0x2f
 800fa14:	4a36      	ldr	r2, [pc, #216]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa16:	493f      	ldr	r1, [pc, #252]	; (800fb14 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	47a0      	blx	r4
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e10b      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800fa28:	d012      	beq.n	800fa50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	695c      	ldr	r4, [r3, #20]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	691b      	ldr	r3, [r3, #16]
 800fa32:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800fa36:	9203      	str	r2, [sp, #12]
 800fa38:	9302      	str	r3, [sp, #8]
 800fa3a:	4b3e      	ldr	r3, [pc, #248]	; (800fb34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	4b2b      	ldr	r3, [pc, #172]	; (800faec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	2330      	movs	r3, #48	; 0x30
 800fa44:	4a2a      	ldr	r2, [pc, #168]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa46:	492b      	ldr	r1, [pc, #172]	; (800faf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	47a0      	blx	r4
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e0f3      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	edd3 7a03 	vldr	s15, [r3, #12]
 800fa56:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fb38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 800fa5a:	eef4 7a47 	vcmp.f32	s15, s14
 800fa5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa62:	d00a      	beq.n	800fa7a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	695c      	ldr	r4, [r3, #20]
 800fa68:	4b34      	ldr	r3, [pc, #208]	; (800fb3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	2331      	movs	r3, #49	; 0x31
 800fa6e:	4a20      	ldr	r2, [pc, #128]	; (800faf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800fa70:	4933      	ldr	r1, [pc, #204]	; (800fb40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	47a0      	blx	r4
 800fa76:	2301      	movs	r3, #1
 800fa78:	e0de      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	2b07      	cmp	r3, #7
 800fa80:	d160      	bne.n	800fb44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7f0 fd68 	bl	800055c <__aeabi_f2d>
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7f0 fd61 	bl	800055c <__aeabi_f2d>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800fa9e:	4620      	mov	r0, r4
 800faa0:	4629      	mov	r1, r5
 800faa2:	f7f0 fdb3 	bl	800060c <__aeabi_dmul>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4610      	mov	r0, r2
 800faac:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 800faae:	a30c      	add	r3, pc, #48	; (adr r3, 800fae0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fed4 	bl	8000860 <__aeabi_ddiv>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800fac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac2:	3308      	adds	r3, #8
 800fac4:	f107 0214 	add.w	r2, r7, #20
 800fac8:	4611      	mov	r1, r2
 800faca:	4618      	mov	r0, r3
 800facc:	ed97 0b06 	vldr	d0, [r7, #24]
 800fad0:	f7f6 f802 	bl	8005ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad8:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800fada:	e0ac      	b.n	800fc36 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 800fadc:	f3af 8000 	nop.w
 800fae0:	00140014 	.word	0x00140014
 800fae4:	3f240014 	.word	0x3f240014
 800fae8:	08016bb8 	.word	0x08016bb8
 800faec:	08016bbc 	.word	0x08016bbc
 800faf0:	08016b58 	.word	0x08016b58
 800faf4:	08016b9c 	.word	0x08016b9c
 800faf8:	38000000 	.word	0x38000000
 800fafc:	3303126f 	.word	0x3303126f
 800fb00:	08016bf8 	.word	0x08016bf8
 800fb04:	08016c04 	.word	0x08016c04
 800fb08:	08016bd8 	.word	0x08016bd8
 800fb0c:	08016c38 	.word	0x08016c38
 800fb10:	08016c44 	.word	0x08016c44
 800fb14:	08016c1c 	.word	0x08016c1c
 800fb18:	ffff8000 	.word	0xffff8000
 800fb1c:	08016c50 	.word	0x08016c50
 800fb20:	37800000 	.word	0x37800000
 800fb24:	3283126f 	.word	0x3283126f
 800fb28:	3ef00000 	.word	0x3ef00000
 800fb2c:	08016c58 	.word	0x08016c58
 800fb30:	08016c64 	.word	0x08016c64
 800fb34:	08016c74 	.word	0x08016c74
 800fb38:	3b800000 	.word	0x3b800000
 800fb3c:	08016c94 	.word	0x08016c94
 800fb40:	08016c7c 	.word	0x08016c7c
          static_cast<double>(params->beta),
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7f0 fd07 	bl	800055c <__aeabi_f2d>
 800fb4e:	4680      	mov	r8, r0
 800fb50:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f0 fd00 	bl	800055c <__aeabi_f2d>
 800fb5c:	4682      	mov	sl, r0
 800fb5e:	468b      	mov	fp, r1
 800fb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb62:	3308      	adds	r3, #8
 800fb64:	f107 0210 	add.w	r2, r7, #16
 800fb68:	4619      	mov	r1, r3
 800fb6a:	2005      	movs	r0, #5
 800fb6c:	ec4b ab11 	vmov	d1, sl, fp
 800fb70:	ec49 8b10 	vmov	d0, r8, r9
 800fb74:	f7f6 f878 	bl	8005c68 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb7c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800fb7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb80:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800fb82:	221f      	movs	r2, #31
 800fb84:	4619      	mov	r1, r3
 800fb86:	2005      	movs	r0, #5
 800fb88:	f7f6 f8b6 	bl	8005cf8 <_ZN6tflite20CalculateInputRadiusEiii>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f0 fcd2 	bl	8000538 <__aeabi_i2d>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4614      	mov	r4, r2
 800fb9a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800fb9e:	4620      	mov	r0, r4
 800fba0:	4629      	mov	r1, r5
 800fba2:	f7f0 ffcd 	bl	8000b40 <__aeabi_d2iz>
 800fba6:	4602      	mov	r2, r0
 800fba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbaa:	619a      	str	r2, [r3, #24]
    }
 800fbac:	e043      	b.n	800fc36 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d018      	beq.n	800fbe8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	695c      	ldr	r4, [r3, #20]
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7f3 ffa0 	bl	8003b04 <TfLiteTypeGetName>
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	f7f3 ff9c 	bl	8003b04 <TfLiteTypeGetName>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	9303      	str	r3, [sp, #12]
 800fbd0:	9502      	str	r5, [sp, #8]
 800fbd2:	4b1c      	ldr	r3, [pc, #112]	; (800fc44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800fbd4:	9301      	str	r3, [sp, #4]
 800fbd6:	4b1c      	ldr	r3, [pc, #112]	; (800fc48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 800fbd8:	9300      	str	r3, [sp, #0]
 800fbda:	234e      	movs	r3, #78	; 0x4e
 800fbdc:	4a1b      	ldr	r2, [pc, #108]	; (800fc4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800fbde:	491c      	ldr	r1, [pc, #112]	; (800fc50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	47a0      	blx	r4
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e027      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d018      	beq.n	800fc22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	695c      	ldr	r4, [r3, #20]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f3 ff83 	bl	8003b04 <TfLiteTypeGetName>
 800fbfe:	4605      	mov	r5, r0
 800fc00:	2001      	movs	r0, #1
 800fc02:	f7f3 ff7f 	bl	8003b04 <TfLiteTypeGetName>
 800fc06:	4603      	mov	r3, r0
 800fc08:	9303      	str	r3, [sp, #12]
 800fc0a:	9502      	str	r5, [sp, #8]
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800fc0e:	9301      	str	r3, [sp, #4]
 800fc10:	4b10      	ldr	r3, [pc, #64]	; (800fc54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	234f      	movs	r3, #79	; 0x4f
 800fc16:	4a0d      	ldr	r2, [pc, #52]	; (800fc4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800fc18:	490d      	ldr	r1, [pc, #52]	; (800fc50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	47a0      	blx	r4
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e00a      	b.n	800fc38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7f0 fc98 	bl	800055c <__aeabi_f2d>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc32:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3728      	adds	r7, #40	; 0x28
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc42:	bf00      	nop
 800fc44:	08016cb8 	.word	0x08016cb8
 800fc48:	08016c44 	.word	0x08016c44
 800fc4c:	08016b58 	.word	0x08016b58
 800fc50:	08016c1c 	.word	0x08016c1c
 800fc54:	08016c64 	.word	0x08016c64

0800fc58 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d101      	bne.n	800fc70 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800fc6c:	f001 f897 	bl	8010d9e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc74:	2138      	movs	r1, #56	; 0x38
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	4798      	blx	r3
 800fc7a:	4603      	mov	r3, r0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	ed87 0a00 	vstr	s0, [r7]
 800fc90:	ed97 0a00 	vldr	s0, [r7]
 800fc94:	f7fd f82a 	bl	800ccec <_ZSt3expf>
 800fc98:	eef0 7a40 	vmov.f32	s15, s0
 800fc9c:	eeb0 0a67 	vmov.f32	s0, s15
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b082      	sub	sp, #8
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	ed87 0a01 	vstr	s0, [r7, #4]
 800fcb0:	ed97 0a01 	vldr	s0, [r7, #4]
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f7ff ffe5 	bl	800fc84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800fcba:	eef0 7a40 	vmov.f32	s15, s0
 800fcbe:	eeb0 0a67 	vmov.f32	s0, s15
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	0800fca7 	.word	0x0800fca7

0800fce4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	ed87 0a00 	vstr	s0, [r7]
 800fcf0:	edd7 7a00 	vldr	s15, [r7]
 800fcf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fd04:	eef0 7a66 	vmov.f32	s15, s13
 800fd08:	eeb0 0a67 	vmov.f32	s0, s15
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	ed87 0a01 	vstr	s0, [r7, #4]
 800fd20:	ed97 0a01 	vldr	s0, [r7, #4]
 800fd24:	2000      	movs	r0, #0
 800fd26:	f7ff ffdd 	bl	800fce4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800fd2a:	eef0 7a40 	vmov.f32	s15, s0
 800fd2e:	eeb0 0a67 	vmov.f32	s0, s15
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	4b03      	ldr	r3, [pc, #12]	; (800fd50 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800fd42:	4618      	mov	r0, r3
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	0800fd17 	.word	0x0800fd17

0800fd54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800fd54:	b590      	push	{r4, r7, lr}
 800fd56:	b08f      	sub	sp, #60	; 0x3c
 800fd58:	af04      	add	r7, sp, #16
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800fd5e:	6838      	ldr	r0, [r7, #0]
 800fd60:	f7fb fc16 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	bf14      	ite	ne
 800fd6a:	2301      	movne	r3, #1
 800fd6c:	2300      	moveq	r3, #0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d013      	beq.n	800fd9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	695c      	ldr	r4, [r3, #20]
 800fd78:	6838      	ldr	r0, [r7, #0]
 800fd7a:	f7fb fc09 	bl	800b590 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2201      	movs	r2, #1
 800fd82:	9203      	str	r2, [sp, #12]
 800fd84:	9302      	str	r3, [sp, #8]
 800fd86:	4b7c      	ldr	r3, [pc, #496]	; (800ff78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	4b7c      	ldr	r3, [pc, #496]	; (800ff7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	235d      	movs	r3, #93	; 0x5d
 800fd90:	4a7b      	ldr	r2, [pc, #492]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fd92:	497c      	ldr	r1, [pc, #496]	; (800ff84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	47a0      	blx	r4
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e146      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800fd9c:	6838      	ldr	r0, [r7, #0]
 800fd9e:	f7fb fc04 	bl	800b5aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	bf14      	ite	ne
 800fda8:	2301      	movne	r3, #1
 800fdaa:	2300      	moveq	r3, #0
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d013      	beq.n	800fdda <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	695c      	ldr	r4, [r3, #20]
 800fdb6:	6838      	ldr	r0, [r7, #0]
 800fdb8:	f7fb fbf7 	bl	800b5aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	9203      	str	r2, [sp, #12]
 800fdc2:	9302      	str	r3, [sp, #8]
 800fdc4:	4b6c      	ldr	r3, [pc, #432]	; (800ff78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	4b6f      	ldr	r3, [pc, #444]	; (800ff88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	235e      	movs	r3, #94	; 0x5e
 800fdce:	4a6c      	ldr	r2, [pc, #432]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fdd0:	496c      	ldr	r1, [pc, #432]	; (800ff84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	47a0      	blx	r4
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e127      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800fdda:	2200      	movs	r2, #0
 800fddc:	6839      	ldr	r1, [r7, #0]
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7f6 f901 	bl	8005fe6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800fde4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	695c      	ldr	r4, [r3, #20]
 800fdf0:	4b66      	ldr	r3, [pc, #408]	; (800ff8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	2360      	movs	r3, #96	; 0x60
 800fdf6:	4a62      	ldr	r2, [pc, #392]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fdf8:	4965      	ldr	r1, [pc, #404]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	47a0      	blx	r4
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e113      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800fe02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe04:	f7f6 f872 	bl	8005eec <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bfd4      	ite	le
 800fe0e:	2301      	movle	r3, #1
 800fe10:	2300      	movgt	r3, #0
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00a      	beq.n	800fe2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	695c      	ldr	r4, [r3, #20]
 800fe1c:	4b5d      	ldr	r3, [pc, #372]	; (800ff94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	2361      	movs	r3, #97	; 0x61
 800fe22:	4a57      	ldr	r2, [pc, #348]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe24:	495a      	ldr	r1, [pc, #360]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	47a0      	blx	r4
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e0fd      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800fe2e:	2200      	movs	r2, #0
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f7f6 f8e7 	bl	8006006 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800fe38:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800fe3a:	6a3b      	ldr	r3, [r7, #32]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d10a      	bne.n	800fe56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	695c      	ldr	r4, [r3, #20]
 800fe44:	4b54      	ldr	r3, [pc, #336]	; (800ff98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	2363      	movs	r3, #99	; 0x63
 800fe4a:	4a4d      	ldr	r2, [pc, #308]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe4c:	4950      	ldr	r1, [pc, #320]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	47a0      	blx	r4
 800fe52:	2301      	movs	r3, #1
 800fe54:	e0e9      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10a      	bne.n	800fe74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	695c      	ldr	r4, [r3, #20]
 800fe62:	4b4e      	ldr	r3, [pc, #312]	; (800ff9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	2365      	movs	r3, #101	; 0x65
 800fe68:	4a45      	ldr	r2, [pc, #276]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fe6a:	4949      	ldr	r1, [pc, #292]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	47a0      	blx	r4
 800fe70:	2301      	movs	r3, #1
 800fe72:	e0da      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	2b07      	cmp	r3, #7
 800fe80:	d12f      	bne.n	800fee2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe86:	f240 4102 	movw	r1, #1026	; 0x402
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	4798      	blx	r3
 800fe8e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10a      	bne.n	800feac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	695c      	ldr	r4, [r3, #20]
 800fe9a:	4b41      	ldr	r3, [pc, #260]	; (800ffa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	236b      	movs	r3, #107	; 0x6b
 800fea0:	4a37      	ldr	r2, [pc, #220]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fea2:	493b      	ldr	r1, [pc, #236]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	47a0      	blx	r4
 800fea8:	2301      	movs	r3, #1
 800feaa:	e0be      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb6:	f240 4102 	movw	r1, #1026	; 0x402
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	4798      	blx	r3
 800febe:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d10a      	bne.n	800fedc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	695c      	ldr	r4, [r3, #20]
 800feca:	4b36      	ldr	r3, [pc, #216]	; (800ffa4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	236f      	movs	r3, #111	; 0x6f
 800fed0:	4a2b      	ldr	r2, [pc, #172]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fed2:	492f      	ldr	r1, [pc, #188]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	47a0      	blx	r4
 800fed8:	2301      	movs	r3, #1
 800feda:	e0a6      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800fee2:	6a3b      	ldr	r3, [r7, #32]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	2b07      	cmp	r3, #7
 800fee8:	d112      	bne.n	800ff10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 800feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b09      	cmp	r3, #9
 800fef0:	d028      	beq.n	800ff44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800fef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2b07      	cmp	r3, #7
 800fef8:	d024      	beq.n	800ff44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	695c      	ldr	r4, [r3, #20]
 800fefe:	4b2a      	ldr	r3, [pc, #168]	; (800ffa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	2375      	movs	r3, #117	; 0x75
 800ff04:	4a1e      	ldr	r2, [pc, #120]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff06:	4922      	ldr	r1, [pc, #136]	; (800ff90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	47a0      	blx	r4
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	e08c      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	781a      	ldrb	r2, [r3, #0]
 800ff14:	6a3b      	ldr	r3, [r7, #32]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d013      	beq.n	800ff44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	695c      	ldr	r4, [r3, #20]
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	6a3b      	ldr	r3, [r7, #32]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	9303      	str	r3, [sp, #12]
 800ff2c:	9202      	str	r2, [sp, #8]
 800ff2e:	4b1f      	ldr	r3, [pc, #124]	; (800ffac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	4b1f      	ldr	r3, [pc, #124]	; (800ffb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	2378      	movs	r3, #120	; 0x78
 800ff38:	4a11      	ldr	r2, [pc, #68]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff3a:	4912      	ldr	r1, [pc, #72]	; (800ff84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	47a0      	blx	r4
 800ff40:	2301      	movs	r3, #1
 800ff42:	e072      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2b07      	cmp	r3, #7
 800ff4a:	d161      	bne.n	8010010 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	691b      	ldr	r3, [r3, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d035      	beq.n	800ffc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	695c      	ldr	r4, [r3, #20]
 800ff58:	6a3b      	ldr	r3, [r7, #32]
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	9203      	str	r2, [sp, #12]
 800ff60:	9302      	str	r3, [sp, #8]
 800ff62:	4b14      	ldr	r3, [pc, #80]	; (800ffb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800ff64:	9301      	str	r3, [sp, #4]
 800ff66:	4b14      	ldr	r3, [pc, #80]	; (800ffb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	237d      	movs	r3, #125	; 0x7d
 800ff6c:	4a04      	ldr	r2, [pc, #16]	; (800ff80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800ff6e:	4905      	ldr	r1, [pc, #20]	; (800ff84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	47a0      	blx	r4
 800ff74:	2301      	movs	r3, #1
 800ff76:	e058      	b.n	801002a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 800ff78:	08016cc8 	.word	0x08016cc8
 800ff7c:	08016ccc 	.word	0x08016ccc
 800ff80:	08016b58 	.word	0x08016b58
 800ff84:	08016b9c 	.word	0x08016b9c
 800ff88:	08016cdc 	.word	0x08016cdc
 800ff8c:	08016cf0 	.word	0x08016cf0
 800ff90:	08016c7c 	.word	0x08016c7c
 800ff94:	08016d04 	.word	0x08016d04
 800ff98:	08016d20 	.word	0x08016d20
 800ff9c:	08016d34 	.word	0x08016d34
 800ffa0:	08016d50 	.word	0x08016d50
 800ffa4:	08016d68 	.word	0x08016d68
 800ffa8:	08016d8c 	.word	0x08016d8c
 800ffac:	08016c64 	.word	0x08016c64
 800ffb0:	08016c44 	.word	0x08016c44
 800ffb4:	08016bb8 	.word	0x08016bb8
 800ffb8:	08016bbc 	.word	0x08016bbc
 800ffbc:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800ffc0:	f107 0308 	add.w	r3, r7, #8
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7ff fe7f 	bl	800fcc8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffce:	f240 2201 	movw	r2, #513	; 0x201
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 800ffbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800ffd8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800ffdc:	f7ff faf2 	bl	800f5c4 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800ffe0:	f107 030c 	add.w	r3, r7, #12
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fea7 	bl	800fd38 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffee:	f240 2201 	movw	r2, #513	; 0x201
 800fff2:	4619      	mov	r1, r3
 800fff4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fff8:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800ffbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800fffc:	f7ff fae2 	bl	800f5c4 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	691a      	ldr	r2, [r3, #16]
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	68da      	ldr	r2, [r3, #12]
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	695b      	ldr	r3, [r3, #20]
 8010014:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	6a3a      	ldr	r2, [r7, #32]
 801001e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7ff fbfd 	bl	800f820 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8010026:	4603      	mov	r3, r0
 8010028:	bf00      	nop
}
 801002a:	4618      	mov	r0, r3
 801002c:	372c      	adds	r7, #44	; 0x2c
 801002e:	46bd      	mov	sp, r7
 8010030:	bd90      	pop	{r4, r7, pc}
 8010032:	bf00      	nop

08010034 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	4a04      	ldr	r2, [pc, #16]	; (8010050 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	601a      	str	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	080172c8 	.word	0x080172c8

08010054 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	4a04      	ldr	r2, [pc, #16]	; (8010070 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	601a      	str	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr
 8010070:	080172c8 	.word	0x080172c8

08010074 <_ZN6tflite13MemoryPlannerD0Ev>:
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff ffe9 	bl	8010054 <_ZN6tflite13MemoryPlannerD1Ev>
 8010082:	2104      	movs	r1, #4
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fc04 	bl	8010892 <_ZdlPvj>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 801009a:	2328      	movs	r3, #40	; 0x28
 801009c:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 801009e:	2328      	movs	r3, #40	; 0x28
  }
 80100a0:	4618      	mov	r0, r3
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 80100ac:	b480      	push	{r7}
 80100ae:	b089      	sub	sp, #36	; 0x24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 80100b8:	2300      	movs	r3, #0
 80100ba:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 80100bc:	2301      	movs	r3, #1
 80100be:	61bb      	str	r3, [r7, #24]
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	da4c      	bge.n	8010162 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80100ce:	3b01      	subs	r3, #1
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	4413      	add	r3, r2
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	68f9      	ldr	r1, [r7, #12]
 80100de:	440b      	add	r3, r1
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	da39      	bge.n	801015a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80100ec:	3b01      	subs	r3, #1
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	4413      	add	r3, r2
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	441a      	add	r2, r3
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010106:	3b01      	subs	r3, #1
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	68f9      	ldr	r1, [r7, #12]
 801010c:	440b      	add	r3, r1
 801010e:	6812      	ldr	r2, [r2, #0]
 8010110:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	4413      	add	r3, r2
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010124:	3b01      	subs	r3, #1
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	4413      	add	r3, r2
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	441a      	add	r2, r3
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801013e:	3b01      	subs	r3, #1
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	68b9      	ldr	r1, [r7, #8]
 8010144:	440b      	add	r3, r1
 8010146:	6812      	ldr	r2, [r2, #0]
 8010148:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	4413      	add	r3, r2
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8010156:	2301      	movs	r3, #1
 8010158:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	3301      	adds	r3, #1
 801015e:	61bb      	str	r3, [r7, #24]
 8010160:	e7ae      	b.n	80100c0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8010162:	7ffb      	ldrb	r3, [r7, #31]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d000      	beq.n	801016a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8010168:	e7a6      	b.n	80100b8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 801016a:	bf00      	nop
 801016c:	3724      	adds	r7, #36	; 0x24
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
	...

08010178 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8010178:	b590      	push	{r4, r7, lr}
 801017a:	b087      	sub	sp, #28
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ff54 	bl	8010034 <_ZN6tflite13MemoryPlannerC1Ev>
 801018c:	4a22      	ldr	r2, [pc, #136]	; (8010218 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	609a      	str	r2, [r3, #8]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 80101a0:	687c      	ldr	r4, [r7, #4]
 80101a2:	f7ff ff77 	bl	8010094 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 80101a6:	4603      	mov	r3, r0
 80101a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80101ac:	461a      	mov	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	697a      	ldr	r2, [r7, #20]
 80101ba:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	011b      	lsls	r3, r3, #4
 80101c2:	697a      	ldr	r2, [r7, #20]
 80101c4:	4413      	add	r3, r2
 80101c6:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	697a      	ldr	r2, [r7, #20]
 80101cc:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	697a      	ldr	r2, [r7, #20]
 80101d6:	4413      	add	r3, r2
 80101d8:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	697a      	ldr	r2, [r7, #20]
 80101de:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	697a      	ldr	r2, [r7, #20]
 80101e8:	4413      	add	r3, r2
 80101ea:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	461a      	mov	r2, r3
 80101f8:	4613      	mov	r3, r2
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	4413      	add	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	461a      	mov	r2, r3
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	4413      	add	r3, r2
 8010206:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4618      	mov	r0, r3
 8010212:	371c      	adds	r7, #28
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}
 8010218:	080172a8 	.word	0x080172a8

0801021c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	4a05      	ldr	r2, [pc, #20]	; (801023c <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff ff11 	bl	8010054 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	080172a8 	.word	0x080172a8

08010240 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
}
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff ffe7 	bl	801021c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 801024e:	212c      	movs	r1, #44	; 0x2c
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 fb1e 	bl	8010892 <_ZdlPvj>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	689a      	ldr	r2, [r3, #8]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	429a      	cmp	r2, r3
 8010278:	db08      	blt.n	801028c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	461a      	mov	r2, r3
 8010280:	4913      	ldr	r1, [pc, #76]	; (80102d0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8010282:	68b8      	ldr	r0, [r7, #8]
 8010284:	f7f3 fcba 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8010288:	2301      	movs	r3, #1
 801028a:	e01d      	b.n	80102c8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	68da      	ldr	r2, [r3, #12]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	011b      	lsls	r3, r3, #4
 8010296:	4413      	add	r3, r2
 8010298:	617b      	str	r3, [r7, #20]
  current->size = size;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	6a3a      	ldr	r2, [r7, #32]
 80102aa:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102b2:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3718      	adds	r7, #24
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	08016dc8 	.word	0x08016dc8

080102d4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 80102d4:	b590      	push	{r4, r7, lr}
 80102d6:	b089      	sub	sp, #36	; 0x24
 80102d8:	af02      	add	r7, sp, #8
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	607a      	str	r2, [r7, #4]
 80102e0:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	68da      	ldr	r2, [r3, #12]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	011b      	lsls	r3, r3, #4
 80102ec:	4413      	add	r3, r2
 80102ee:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	3308      	adds	r3, #8
 80102f6:	681c      	ldr	r4, [r3, #0]
 80102f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	68b9      	ldr	r1, [r7, #8]
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	47a0      	blx	r4
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	bf14      	ite	ne
 801030c:	2301      	movne	r3, #1
 801030e:	2300      	moveq	r3, #0
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8010316:	2301      	movs	r3, #1
 8010318:	e003      	b.n	8010322 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801031e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	371c      	adds	r7, #28
 8010326:	46bd      	mov	sp, r7
 8010328:	bd90      	pop	{r4, r7, pc}

0801032a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 801032a:	b480      	push	{r7}
 801032c:	b087      	sub	sp, #28
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	68da      	ldr	r2, [r3, #12]
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8010342:	4413      	add	r3, r2
 8010344:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	429a      	cmp	r2, r3
 801034e:	da01      	bge.n	8010354 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8010350:	2300      	movs	r3, #0
 8010352:	e007      	b.n	8010364 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	dd01      	ble.n	8010362 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 801035e:	2300      	movs	r3, #0
 8010360:	e000      	b.n	8010364 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8010362:	2301      	movs	r3, #1
}
 8010364:	4618      	mov	r0, r3
 8010366:	371c      	adds	r7, #28
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8010370:	b580      	push	{r7, lr}
 8010372:	b086      	sub	sp, #24
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 801037e:	2300      	movs	r3, #0
 8010380:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10b      	bne.n	80103a0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	699a      	ldr	r2, [r3, #24]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6a1b      	ldr	r3, [r3, #32]
 8010390:	4619      	mov	r1, r3
 8010392:	460b      	mov	r3, r1
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	440b      	add	r3, r1
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4413      	add	r3, r2
 801039c:	613b      	str	r3, [r7, #16]
 801039e:	e011      	b.n	80103c4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103a8:	d101      	bne.n	80103ae <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 80103aa:	2300      	movs	r3, #0
 80103ac:	e029      	b.n	8010402 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	699a      	ldr	r2, [r3, #24]
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	4619      	mov	r1, r3
 80103b8:	460b      	mov	r3, r1
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	440b      	add	r3, r1
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	6939      	ldr	r1, [r7, #16]
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7ff ffad 	bl	801032a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d002      	beq.n	80103dc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	617b      	str	r3, [r7, #20]
      break;
 80103da:	e011      	b.n	8010400 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103e4:	d00b      	beq.n	80103fe <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	699a      	ldr	r2, [r3, #24]
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	4619      	mov	r1, r3
 80103f0:	460b      	mov	r3, r1
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	440b      	add	r3, r1
 80103f6:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 80103f8:	4413      	add	r3, r2
 80103fa:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80103fc:	e7e2      	b.n	80103c4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 80103fe:	bf00      	nop
  } while (true);
  return result;
 8010400:	697b      	ldr	r3, [r7, #20]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3718      	adds	r7, #24
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 801040a:	b580      	push	{r7, lr}
 801040c:	b098      	sub	sp, #96	; 0x60
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010418:	f083 0301 	eor.w	r3, r3, #1
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	f040 815f 	bne.w	80106e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 815a 	beq.w	80106e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8010440:	2300      	movs	r3, #0
 8010442:	657b      	str	r3, [r7, #84]	; 0x54
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801044a:	429a      	cmp	r2, r3
 801044c:	da4d      	bge.n	80104ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68da      	ldr	r2, [r3, #12]
 8010452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010454:	011b      	lsls	r3, r3, #4
 8010456:	4413      	add	r3, r2
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801045e:	d11e      	bne.n	801049e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8010460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010462:	3b01      	subs	r3, #1
 8010464:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	68da      	ldr	r2, [r3, #12]
 801046a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801046c:	011b      	lsls	r3, r3, #4
 801046e:	441a      	add	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6919      	ldr	r1, [r3, #16]
 8010474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	440b      	add	r3, r1
 801047a:	6812      	ldr	r2, [r2, #0]
 801047c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	695a      	ldr	r2, [r3, #20]
 8010482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4413      	add	r3, r2
 8010488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801048a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4413      	add	r3, r2
 8010496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801049a:	601a      	str	r2, [r3, #0]
 801049c:	e021      	b.n	80104e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	68da      	ldr	r2, [r3, #12]
 80104a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104a4:	011b      	lsls	r3, r3, #4
 80104a6:	441a      	add	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6919      	ldr	r1, [r3, #16]
 80104ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	440b      	add	r3, r1
 80104b2:	6812      	ldr	r2, [r2, #0]
 80104b4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	695a      	ldr	r2, [r3, #20]
 80104ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	4413      	add	r3, r2
 80104c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68da      	ldr	r2, [r3, #12]
 80104c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ca:	011b      	lsls	r3, r3, #4
 80104cc:	441a      	add	r2, r3
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80104d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	440b      	add	r3, r1
 80104d8:	6852      	ldr	r2, [r2, #4]
 80104da:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 80104dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104de:	3301      	adds	r3, #1
 80104e0:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80104e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e4:	3301      	adds	r3, #1
 80104e6:	657b      	str	r3, [r7, #84]	; 0x54
 80104e8:	e7ac      	b.n	8010444 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	691a      	ldr	r2, [r3, #16]
 80104ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	695a      	ldr	r2, [r3, #20]
 80104f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104fa:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80104fc:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8010502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	461a      	mov	r2, r3
 8010508:	f7ff fdd0 	bl	80100ac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2201      	movs	r2, #1
 8010516:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	699a      	ldr	r2, [r3, #24]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a1b      	ldr	r3, [r3, #32]
 8010520:	4619      	mov	r1, r3
 8010522:	460b      	mov	r3, r1
 8010524:	005b      	lsls	r3, r3, #1
 8010526:	440b      	add	r3, r1
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4413      	add	r3, r2
 801052c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 801052e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010534:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	695b      	ldr	r3, [r3, #20]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 801053e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010542:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	68da      	ldr	r2, [r3, #12]
 8010548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054a:	011b      	lsls	r3, r3, #4
 801054c:	4413      	add	r3, r2
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010554:	d106      	bne.n	8010564 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801055a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010572:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8010574:	2301      	movs	r3, #1
 8010576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801057e:	429a      	cmp	r2, r3
 8010580:	f280 80b0 	bge.w	80106e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	695a      	ldr	r2, [r3, #20]
 8010588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68da      	ldr	r2, [r3, #12]
 8010596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010598:	011b      	lsls	r3, r3, #4
 801059a:	4413      	add	r3, r2
 801059c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 801059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 80105a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 80105aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 80105b0:	2300      	movs	r3, #0
 80105b2:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 80105b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105bc:	d12d      	bne.n	801061a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 80105be:	2300      	movs	r3, #0
 80105c0:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 80105c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7ff fed1 	bl	8010370 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 80105ce:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 80105d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d012      	beq.n	80105fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68da      	ldr	r2, [r3, #12]
 80105da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 80105e0:	4413      	add	r3, r2
 80105e2:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 80105e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 80105ec:	4413      	add	r3, r2
 80105ee:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 80105f0:	6a3a      	ldr	r2, [r7, #32]
 80105f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105f4:	429a      	cmp	r2, r3
 80105f6:	dd01      	ble.n	80105fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 80105f8:	6a3b      	ldr	r3, [r7, #32]
 80105fa:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00f      	beq.n	8010622 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 801060c:	69fa      	ldr	r2, [r7, #28]
 801060e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010610:	429a      	cmp	r2, r3
 8010612:	da08      	bge.n	8010626 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8010618:	e7d3      	b.n	80105c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010620:	e002      	b.n	8010628 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8010622:	bf00      	nop
 8010624:	e000      	b.n	8010628 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8010626:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801062c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	4413      	add	r3, r2
 8010632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010634:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	699a      	ldr	r2, [r3, #24]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	69db      	ldr	r3, [r3, #28]
 801063e:	4619      	mov	r1, r3
 8010640:	460b      	mov	r3, r1
 8010642:	005b      	lsls	r3, r3, #1
 8010644:	440b      	add	r3, r1
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4413      	add	r3, r2
 801064a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010650:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010656:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	69db      	ldr	r3, [r3, #28]
 801065c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	69db      	ldr	r3, [r3, #28]
 8010662:	1c5a      	adds	r2, r3, #1
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8010668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801066e:	429a      	cmp	r2, r3
 8010670:	da09      	bge.n	8010686 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6a1a      	ldr	r2, [r3, #32]
 801067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	621a      	str	r2, [r3, #32]
 8010684:	e029      	b.n	80106da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8010686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010688:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801068a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010696:	d107      	bne.n	80106a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8010698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801069a:	697a      	ldr	r2, [r7, #20]
 801069c:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106a4:	609a      	str	r2, [r3, #8]
          break;
 80106a6:	e018      	b.n	80106da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6999      	ldr	r1, [r3, #24]
 80106ac:	693a      	ldr	r2, [r7, #16]
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	440b      	add	r3, r1
 80106b8:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106c0:	429a      	cmp	r2, r3
 80106c2:	da07      	bge.n	80106d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 80106c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c6:	689a      	ldr	r2, [r3, #8]
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 80106cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ce:	697a      	ldr	r2, [r7, #20]
 80106d0:	609a      	str	r2, [r3, #8]
          break;
 80106d2:	e002      	b.n	80106da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	643b      	str	r3, [r7, #64]	; 0x40
      }
 80106d8:	e7d7      	b.n	801068a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 80106da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106dc:	3301      	adds	r3, #1
 80106de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106e0:	e74a      	b.n	8010578 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 80106e2:	bf00      	nop
    }
  }
}
 80106e4:	3760      	adds	r7, #96	; 0x60
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b086      	sub	sp, #24
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7ff fe89 	bl	801040a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d101      	bne.n	8010704 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8010700:	2300      	movs	r3, #0
 8010702:	e035      	b.n	8010770 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	699a      	ldr	r2, [r3, #24]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a1b      	ldr	r3, [r3, #32]
 801070c:	4619      	mov	r1, r3
 801070e:	460b      	mov	r3, r1
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	440b      	add	r3, r1
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	4413      	add	r3, r2
 8010718:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	613b      	str	r3, [r7, #16]
  while (entry) {
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d024      	beq.n	801076e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	68da      	ldr	r2, [r3, #12]
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 801072e:	4413      	add	r3, r2
 8010730:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4413      	add	r3, r2
 801073c:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	429a      	cmp	r2, r3
 8010744:	d901      	bls.n	801074a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010752:	d00b      	beq.n	801076c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	699a      	ldr	r2, [r3, #24]
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	4619      	mov	r1, r3
 801075e:	460b      	mov	r3, r1
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	440b      	add	r3, r1
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	617b      	str	r3, [r7, #20]
  while (entry) {
 801076a:	e7d8      	b.n	801071e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 801076c:	bf00      	nop
  }
  return max_size;
 801076e:	693b      	ldr	r3, [r7, #16]
}
 8010770:	4618      	mov	r0, r3
 8010772:	3718      	adds	r7, #24
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	4618      	mov	r0, r3
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
 801079c:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff fe33 	bl	801040a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	db04      	blt.n	80107b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	689b      	ldr	r3, [r3, #8]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	db08      	blt.n	80107c6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	689b      	ldr	r3, [r3, #8]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	4909      	ldr	r1, [pc, #36]	; (80107e0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 80107bc:	68b8      	ldr	r0, [r7, #8]
 80107be:	f7f3 fa1d 	bl	8003bfc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e008      	b.n	80107d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	08016e3c 	.word	0x08016e3c

080107e4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	2104      	movs	r1, #4
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7f3 ff75 	bl	80046e2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80107f8:	4603      	mov	r3, r0
  }
 80107fa:	4618      	mov	r0, r3
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8010802:	b580      	push	{r7, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	210a      	movs	r1, #10
 8010810:	4618      	mov	r0, r3
 8010812:	f7f3 ff38 	bl	8004686 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8010816:	4603      	mov	r3, r0
 8010818:	b2db      	uxtb	r3, r3
  }
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8010822:	b580      	push	{r7, lr}
 8010824:	b084      	sub	sp, #16
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d101      	bne.n	8010834 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8010830:	f000 fab5 	bl	8010d9e <abort>

  return std::max(
      op_code->builtin_code(),
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f7ff ffe4 	bl	8010802 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 801083a:	4603      	mov	r3, r0
 801083c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff ffd0 	bl	80107e4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8010844:	4603      	mov	r3, r0
 8010846:	b2db      	uxtb	r3, r3
 8010848:	73fb      	strb	r3, [r7, #15]
 801084a:	f107 020f 	add.w	r2, r7, #15
 801084e:	f107 030e 	add.w	r3, r7, #14
 8010852:	4611      	mov	r1, r2
 8010854:	4618      	mov	r0, r3
 8010856:	f000 f806 	bl	8010866 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 801085a:	4603      	mov	r3, r0
 801085c:	781b      	ldrb	r3, [r3, #0]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 8010866:	b480      	push	{r7}
 8010868:	b083      	sub	sp, #12
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	781a      	ldrb	r2, [r3, #0]
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	429a      	cmp	r2, r3
 801087a:	d201      	bcs.n	8010880 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	e000      	b.n	8010882 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8010880:	687b      	ldr	r3, [r7, #4]
    }
 8010882:	4618      	mov	r0, r3
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <_ZdlPv>:
 801088e:	f000 baf5 	b.w	8010e7c <free>

08010892 <_ZdlPvj>:
 8010892:	f7ff bffc 	b.w	801088e <_ZdlPv>

08010896 <_ZdaPv>:
 8010896:	f7ff bffa 	b.w	801088e <_ZdlPv>

0801089a <__cxa_guard_acquire>:
 801089a:	6803      	ldr	r3, [r0, #0]
 801089c:	07db      	lsls	r3, r3, #31
 801089e:	d406      	bmi.n	80108ae <__cxa_guard_acquire+0x14>
 80108a0:	7843      	ldrb	r3, [r0, #1]
 80108a2:	b103      	cbz	r3, 80108a6 <__cxa_guard_acquire+0xc>
 80108a4:	deff      	udf	#255	; 0xff
 80108a6:	2301      	movs	r3, #1
 80108a8:	7043      	strb	r3, [r0, #1]
 80108aa:	4618      	mov	r0, r3
 80108ac:	4770      	bx	lr
 80108ae:	2000      	movs	r0, #0
 80108b0:	4770      	bx	lr

080108b2 <__cxa_guard_release>:
 80108b2:	2301      	movs	r3, #1
 80108b4:	6003      	str	r3, [r0, #0]
 80108b6:	4770      	bx	lr

080108b8 <_Znwj>:
 80108b8:	2801      	cmp	r0, #1
 80108ba:	bf38      	it	cc
 80108bc:	2001      	movcc	r0, #1
 80108be:	b510      	push	{r4, lr}
 80108c0:	4604      	mov	r4, r0
 80108c2:	4620      	mov	r0, r4
 80108c4:	f000 fad2 	bl	8010e6c <malloc>
 80108c8:	b930      	cbnz	r0, 80108d8 <_Znwj+0x20>
 80108ca:	f000 f81d 	bl	8010908 <_ZSt15get_new_handlerv>
 80108ce:	b908      	cbnz	r0, 80108d4 <_Znwj+0x1c>
 80108d0:	f000 fa65 	bl	8010d9e <abort>
 80108d4:	4780      	blx	r0
 80108d6:	e7f4      	b.n	80108c2 <_Znwj+0xa>
 80108d8:	bd10      	pop	{r4, pc}

080108da <_Znaj>:
 80108da:	f7ff bfed 	b.w	80108b8 <_Znwj>

080108de <__cxa_pure_virtual>:
 80108de:	b508      	push	{r3, lr}
 80108e0:	f000 f80c 	bl	80108fc <_ZSt9terminatev>

080108e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80108e4:	b508      	push	{r3, lr}
 80108e6:	4780      	blx	r0
 80108e8:	f000 fa59 	bl	8010d9e <abort>

080108ec <_ZSt13get_terminatev>:
 80108ec:	4b02      	ldr	r3, [pc, #8]	; (80108f8 <_ZSt13get_terminatev+0xc>)
 80108ee:	6818      	ldr	r0, [r3, #0]
 80108f0:	f3bf 8f5b 	dmb	ish
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop
 80108f8:	20006b18 	.word	0x20006b18

080108fc <_ZSt9terminatev>:
 80108fc:	b508      	push	{r3, lr}
 80108fe:	f7ff fff5 	bl	80108ec <_ZSt13get_terminatev>
 8010902:	f7ff ffef 	bl	80108e4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010908 <_ZSt15get_new_handlerv>:
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <_ZSt15get_new_handlerv+0xc>)
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	f3bf 8f5b 	dmb	ish
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	20013578 	.word	0x20013578

08010918 <floor>:
 8010918:	ec51 0b10 	vmov	r0, r1, d0
 801091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010920:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010924:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010928:	2e13      	cmp	r6, #19
 801092a:	ee10 5a10 	vmov	r5, s0
 801092e:	ee10 8a10 	vmov	r8, s0
 8010932:	460c      	mov	r4, r1
 8010934:	dc32      	bgt.n	801099c <floor+0x84>
 8010936:	2e00      	cmp	r6, #0
 8010938:	da14      	bge.n	8010964 <floor+0x4c>
 801093a:	a333      	add	r3, pc, #204	; (adr r3, 8010a08 <floor+0xf0>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fcae 	bl	80002a0 <__adddf3>
 8010944:	2200      	movs	r2, #0
 8010946:	2300      	movs	r3, #0
 8010948:	f7f0 f8f0 	bl	8000b2c <__aeabi_dcmpgt>
 801094c:	b138      	cbz	r0, 801095e <floor+0x46>
 801094e:	2c00      	cmp	r4, #0
 8010950:	da57      	bge.n	8010a02 <floor+0xea>
 8010952:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010956:	431d      	orrs	r5, r3
 8010958:	d001      	beq.n	801095e <floor+0x46>
 801095a:	4c2d      	ldr	r4, [pc, #180]	; (8010a10 <floor+0xf8>)
 801095c:	2500      	movs	r5, #0
 801095e:	4621      	mov	r1, r4
 8010960:	4628      	mov	r0, r5
 8010962:	e025      	b.n	80109b0 <floor+0x98>
 8010964:	4f2b      	ldr	r7, [pc, #172]	; (8010a14 <floor+0xfc>)
 8010966:	4137      	asrs	r7, r6
 8010968:	ea01 0307 	and.w	r3, r1, r7
 801096c:	4303      	orrs	r3, r0
 801096e:	d01f      	beq.n	80109b0 <floor+0x98>
 8010970:	a325      	add	r3, pc, #148	; (adr r3, 8010a08 <floor+0xf0>)
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	f7ef fc93 	bl	80002a0 <__adddf3>
 801097a:	2200      	movs	r2, #0
 801097c:	2300      	movs	r3, #0
 801097e:	f7f0 f8d5 	bl	8000b2c <__aeabi_dcmpgt>
 8010982:	2800      	cmp	r0, #0
 8010984:	d0eb      	beq.n	801095e <floor+0x46>
 8010986:	2c00      	cmp	r4, #0
 8010988:	bfbe      	ittt	lt
 801098a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801098e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010992:	19a4      	addlt	r4, r4, r6
 8010994:	ea24 0407 	bic.w	r4, r4, r7
 8010998:	2500      	movs	r5, #0
 801099a:	e7e0      	b.n	801095e <floor+0x46>
 801099c:	2e33      	cmp	r6, #51	; 0x33
 801099e:	dd0b      	ble.n	80109b8 <floor+0xa0>
 80109a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80109a4:	d104      	bne.n	80109b0 <floor+0x98>
 80109a6:	ee10 2a10 	vmov	r2, s0
 80109aa:	460b      	mov	r3, r1
 80109ac:	f7ef fc78 	bl	80002a0 <__adddf3>
 80109b0:	ec41 0b10 	vmov	d0, r0, r1
 80109b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80109bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109c0:	fa23 f707 	lsr.w	r7, r3, r7
 80109c4:	4207      	tst	r7, r0
 80109c6:	d0f3      	beq.n	80109b0 <floor+0x98>
 80109c8:	a30f      	add	r3, pc, #60	; (adr r3, 8010a08 <floor+0xf0>)
 80109ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ce:	f7ef fc67 	bl	80002a0 <__adddf3>
 80109d2:	2200      	movs	r2, #0
 80109d4:	2300      	movs	r3, #0
 80109d6:	f7f0 f8a9 	bl	8000b2c <__aeabi_dcmpgt>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d0bf      	beq.n	801095e <floor+0x46>
 80109de:	2c00      	cmp	r4, #0
 80109e0:	da02      	bge.n	80109e8 <floor+0xd0>
 80109e2:	2e14      	cmp	r6, #20
 80109e4:	d103      	bne.n	80109ee <floor+0xd6>
 80109e6:	3401      	adds	r4, #1
 80109e8:	ea25 0507 	bic.w	r5, r5, r7
 80109ec:	e7b7      	b.n	801095e <floor+0x46>
 80109ee:	2301      	movs	r3, #1
 80109f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80109f4:	fa03 f606 	lsl.w	r6, r3, r6
 80109f8:	4435      	add	r5, r6
 80109fa:	4545      	cmp	r5, r8
 80109fc:	bf38      	it	cc
 80109fe:	18e4      	addcc	r4, r4, r3
 8010a00:	e7f2      	b.n	80109e8 <floor+0xd0>
 8010a02:	2500      	movs	r5, #0
 8010a04:	462c      	mov	r4, r5
 8010a06:	e7aa      	b.n	801095e <floor+0x46>
 8010a08:	8800759c 	.word	0x8800759c
 8010a0c:	7e37e43c 	.word	0x7e37e43c
 8010a10:	bff00000 	.word	0xbff00000
 8010a14:	000fffff 	.word	0x000fffff

08010a18 <frexp>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	ec55 4b10 	vmov	r4, r5, d0
 8010a20:	6001      	str	r1, [r0, #0]
 8010a22:	4916      	ldr	r1, [pc, #88]	; (8010a7c <frexp+0x64>)
 8010a24:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010a28:	428a      	cmp	r2, r1
 8010a2a:	4606      	mov	r6, r0
 8010a2c:	462b      	mov	r3, r5
 8010a2e:	dc22      	bgt.n	8010a76 <frexp+0x5e>
 8010a30:	ee10 1a10 	vmov	r1, s0
 8010a34:	4311      	orrs	r1, r2
 8010a36:	d01e      	beq.n	8010a76 <frexp+0x5e>
 8010a38:	4911      	ldr	r1, [pc, #68]	; (8010a80 <frexp+0x68>)
 8010a3a:	4029      	ands	r1, r5
 8010a3c:	b969      	cbnz	r1, 8010a5a <frexp+0x42>
 8010a3e:	4b11      	ldr	r3, [pc, #68]	; (8010a84 <frexp+0x6c>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	ee10 0a10 	vmov	r0, s0
 8010a46:	4629      	mov	r1, r5
 8010a48:	f7ef fde0 	bl	800060c <__aeabi_dmul>
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010a52:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010a56:	4604      	mov	r4, r0
 8010a58:	6031      	str	r1, [r6, #0]
 8010a5a:	6831      	ldr	r1, [r6, #0]
 8010a5c:	1512      	asrs	r2, r2, #20
 8010a5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a62:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8010a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a6a:	440a      	add	r2, r1
 8010a6c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8010a70:	6032      	str	r2, [r6, #0]
 8010a72:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8010a76:	ec45 4b10 	vmov	d0, r4, r5
 8010a7a:	bd70      	pop	{r4, r5, r6, pc}
 8010a7c:	7fefffff 	.word	0x7fefffff
 8010a80:	7ff00000 	.word	0x7ff00000
 8010a84:	43500000 	.word	0x43500000

08010a88 <round>:
 8010a88:	ec51 0b10 	vmov	r0, r1, d0
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010a92:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010a96:	2c13      	cmp	r4, #19
 8010a98:	ee10 2a10 	vmov	r2, s0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	dc19      	bgt.n	8010ad4 <round+0x4c>
 8010aa0:	2c00      	cmp	r4, #0
 8010aa2:	da09      	bge.n	8010ab8 <round+0x30>
 8010aa4:	3401      	adds	r4, #1
 8010aa6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010aaa:	d103      	bne.n	8010ab4 <round+0x2c>
 8010aac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010ab0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	e028      	b.n	8010b0a <round+0x82>
 8010ab8:	4d15      	ldr	r5, [pc, #84]	; (8010b10 <round+0x88>)
 8010aba:	4125      	asrs	r5, r4
 8010abc:	ea01 0605 	and.w	r6, r1, r5
 8010ac0:	4332      	orrs	r2, r6
 8010ac2:	d00e      	beq.n	8010ae2 <round+0x5a>
 8010ac4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010ac8:	fa42 f404 	asr.w	r4, r2, r4
 8010acc:	4423      	add	r3, r4
 8010ace:	ea23 0305 	bic.w	r3, r3, r5
 8010ad2:	e7ef      	b.n	8010ab4 <round+0x2c>
 8010ad4:	2c33      	cmp	r4, #51	; 0x33
 8010ad6:	dd07      	ble.n	8010ae8 <round+0x60>
 8010ad8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010adc:	d101      	bne.n	8010ae2 <round+0x5a>
 8010ade:	f7ef fbdf 	bl	80002a0 <__adddf3>
 8010ae2:	ec41 0b10 	vmov	d0, r0, r1
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}
 8010ae8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8010aec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010af0:	40f5      	lsrs	r5, r6
 8010af2:	4228      	tst	r0, r5
 8010af4:	d0f5      	beq.n	8010ae2 <round+0x5a>
 8010af6:	2101      	movs	r1, #1
 8010af8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010afc:	fa01 f404 	lsl.w	r4, r1, r4
 8010b00:	1912      	adds	r2, r2, r4
 8010b02:	bf28      	it	cs
 8010b04:	185b      	addcs	r3, r3, r1
 8010b06:	ea22 0105 	bic.w	r1, r2, r5
 8010b0a:	4608      	mov	r0, r1
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	e7e8      	b.n	8010ae2 <round+0x5a>
 8010b10:	000fffff 	.word	0x000fffff

08010b14 <roundf>:
 8010b14:	ee10 0a10 	vmov	r0, s0
 8010b18:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010b1c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8010b20:	2a16      	cmp	r2, #22
 8010b22:	dc15      	bgt.n	8010b50 <roundf+0x3c>
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	da08      	bge.n	8010b3a <roundf+0x26>
 8010b28:	3201      	adds	r2, #1
 8010b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010b2e:	d101      	bne.n	8010b34 <roundf+0x20>
 8010b30:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010b34:	ee00 3a10 	vmov	s0, r3
 8010b38:	4770      	bx	lr
 8010b3a:	4908      	ldr	r1, [pc, #32]	; (8010b5c <roundf+0x48>)
 8010b3c:	4111      	asrs	r1, r2
 8010b3e:	4208      	tst	r0, r1
 8010b40:	d0fa      	beq.n	8010b38 <roundf+0x24>
 8010b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010b46:	4113      	asrs	r3, r2
 8010b48:	4403      	add	r3, r0
 8010b4a:	ea23 0301 	bic.w	r3, r3, r1
 8010b4e:	e7f1      	b.n	8010b34 <roundf+0x20>
 8010b50:	2a80      	cmp	r2, #128	; 0x80
 8010b52:	d1f1      	bne.n	8010b38 <roundf+0x24>
 8010b54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	007fffff 	.word	0x007fffff

08010b60 <expf>:
 8010b60:	b508      	push	{r3, lr}
 8010b62:	ed2d 8b02 	vpush	{d8}
 8010b66:	eef0 8a40 	vmov.f32	s17, s0
 8010b6a:	f000 f837 	bl	8010bdc <__ieee754_expf>
 8010b6e:	4b16      	ldr	r3, [pc, #88]	; (8010bc8 <expf+0x68>)
 8010b70:	f993 3000 	ldrsb.w	r3, [r3]
 8010b74:	3301      	adds	r3, #1
 8010b76:	eeb0 8a40 	vmov.f32	s16, s0
 8010b7a:	d011      	beq.n	8010ba0 <expf+0x40>
 8010b7c:	eeb0 0a68 	vmov.f32	s0, s17
 8010b80:	f000 f900 	bl	8010d84 <finitef>
 8010b84:	b160      	cbz	r0, 8010ba0 <expf+0x40>
 8010b86:	eddf 7a11 	vldr	s15, [pc, #68]	; 8010bcc <expf+0x6c>
 8010b8a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b92:	dd0a      	ble.n	8010baa <expf+0x4a>
 8010b94:	f000 f92e 	bl	8010df4 <__errno>
 8010b98:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8010bd0 <expf+0x70>
 8010b9c:	2322      	movs	r3, #34	; 0x22
 8010b9e:	6003      	str	r3, [r0, #0]
 8010ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8010ba4:	ecbd 8b02 	vpop	{d8}
 8010ba8:	bd08      	pop	{r3, pc}
 8010baa:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010bd4 <expf+0x74>
 8010bae:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb6:	d5f3      	bpl.n	8010ba0 <expf+0x40>
 8010bb8:	f000 f91c 	bl	8010df4 <__errno>
 8010bbc:	2322      	movs	r3, #34	; 0x22
 8010bbe:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8010bd8 <expf+0x78>
 8010bc2:	6003      	str	r3, [r0, #0]
 8010bc4:	e7ec      	b.n	8010ba0 <expf+0x40>
 8010bc6:	bf00      	nop
 8010bc8:	20006b1c 	.word	0x20006b1c
 8010bcc:	42b17180 	.word	0x42b17180
 8010bd0:	7f800000 	.word	0x7f800000
 8010bd4:	c2cff1b5 	.word	0xc2cff1b5
 8010bd8:	00000000 	.word	0x00000000

08010bdc <__ieee754_expf>:
 8010bdc:	ee10 2a10 	vmov	r2, s0
 8010be0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010be4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010be8:	d902      	bls.n	8010bf0 <__ieee754_expf+0x14>
 8010bea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bee:	4770      	bx	lr
 8010bf0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8010bf4:	d106      	bne.n	8010c04 <__ieee754_expf+0x28>
 8010bf6:	eddf 7a51 	vldr	s15, [pc, #324]	; 8010d3c <__ieee754_expf+0x160>
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	bf18      	it	ne
 8010bfe:	eeb0 0a67 	vmovne.f32	s0, s15
 8010c02:	4770      	bx	lr
 8010c04:	484e      	ldr	r0, [pc, #312]	; (8010d40 <__ieee754_expf+0x164>)
 8010c06:	4282      	cmp	r2, r0
 8010c08:	dd04      	ble.n	8010c14 <__ieee754_expf+0x38>
 8010c0a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8010d44 <__ieee754_expf+0x168>
 8010c0e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010c12:	4770      	bx	lr
 8010c14:	2a00      	cmp	r2, #0
 8010c16:	da03      	bge.n	8010c20 <__ieee754_expf+0x44>
 8010c18:	4a4b      	ldr	r2, [pc, #300]	; (8010d48 <__ieee754_expf+0x16c>)
 8010c1a:	4291      	cmp	r1, r2
 8010c1c:	f200 808a 	bhi.w	8010d34 <__ieee754_expf+0x158>
 8010c20:	4a4a      	ldr	r2, [pc, #296]	; (8010d4c <__ieee754_expf+0x170>)
 8010c22:	4291      	cmp	r1, r2
 8010c24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010c28:	d954      	bls.n	8010cd4 <__ieee754_expf+0xf8>
 8010c2a:	4a49      	ldr	r2, [pc, #292]	; (8010d50 <__ieee754_expf+0x174>)
 8010c2c:	4291      	cmp	r1, r2
 8010c2e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010c32:	d836      	bhi.n	8010ca2 <__ieee754_expf+0xc6>
 8010c34:	4947      	ldr	r1, [pc, #284]	; (8010d54 <__ieee754_expf+0x178>)
 8010c36:	4411      	add	r1, r2
 8010c38:	ed91 7a00 	vldr	s14, [r1]
 8010c3c:	4946      	ldr	r1, [pc, #280]	; (8010d58 <__ieee754_expf+0x17c>)
 8010c3e:	440a      	add	r2, r1
 8010c40:	edd2 7a00 	vldr	s15, [r2]
 8010c44:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010c48:	f1c3 0201 	rsb	r2, r3, #1
 8010c4c:	1ad2      	subs	r2, r2, r3
 8010c4e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010c52:	ee60 6a00 	vmul.f32	s13, s0, s0
 8010c56:	eddf 5a41 	vldr	s11, [pc, #260]	; 8010d5c <__ieee754_expf+0x180>
 8010c5a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8010d60 <__ieee754_expf+0x184>
 8010c5e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8010c62:	eddf 5a40 	vldr	s11, [pc, #256]	; 8010d64 <__ieee754_expf+0x188>
 8010c66:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010c6a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8010d68 <__ieee754_expf+0x18c>
 8010c6e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8010c72:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010d6c <__ieee754_expf+0x190>
 8010c76:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010c7a:	eeb0 5a40 	vmov.f32	s10, s0
 8010c7e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8010c82:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010c86:	eef0 6a45 	vmov.f32	s13, s10
 8010c8a:	ee20 5a05 	vmul.f32	s10, s0, s10
 8010c8e:	bb92      	cbnz	r2, 8010cf6 <__ieee754_expf+0x11a>
 8010c90:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010c94:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010c98:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010c9c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010ca0:	4770      	bx	lr
 8010ca2:	4b33      	ldr	r3, [pc, #204]	; (8010d70 <__ieee754_expf+0x194>)
 8010ca4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010d74 <__ieee754_expf+0x198>
 8010ca8:	4413      	add	r3, r2
 8010caa:	edd3 7a00 	vldr	s15, [r3]
 8010cae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010cb2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010d78 <__ieee754_expf+0x19c>
 8010cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cba:	ee17 2a90 	vmov	r2, s15
 8010cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cc2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8010cca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8010d7c <__ieee754_expf+0x1a0>
 8010cce:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010cd2:	e7bc      	b.n	8010c4e <__ieee754_expf+0x72>
 8010cd4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010cd8:	d20b      	bcs.n	8010cf2 <__ieee754_expf+0x116>
 8010cda:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010d44 <__ieee754_expf+0x168>
 8010cde:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010ce2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cea:	dd02      	ble.n	8010cf2 <__ieee754_expf+0x116>
 8010cec:	ee30 0a06 	vadd.f32	s0, s0, s12
 8010cf0:	4770      	bx	lr
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	e7ad      	b.n	8010c52 <__ieee754_expf+0x76>
 8010cf6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010cfa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010cfe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8010d02:	bfb8      	it	lt
 8010d04:	3264      	addlt	r2, #100	; 0x64
 8010d06:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d0a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010d0e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8010d12:	ee17 3a90 	vmov	r3, s15
 8010d16:	bfab      	itete	ge
 8010d18:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010d1c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010d20:	ee00 3a10 	vmovge	s0, r3
 8010d24:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8010d80 <__ieee754_expf+0x1a4>
 8010d28:	bfbc      	itt	lt
 8010d2a:	ee00 3a10 	vmovlt	s0, r3
 8010d2e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010d32:	4770      	bx	lr
 8010d34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010d3c <__ieee754_expf+0x160>
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	00000000 	.word	0x00000000
 8010d40:	42b17217 	.word	0x42b17217
 8010d44:	7149f2ca 	.word	0x7149f2ca
 8010d48:	42cff1b5 	.word	0x42cff1b5
 8010d4c:	3eb17218 	.word	0x3eb17218
 8010d50:	3f851591 	.word	0x3f851591
 8010d54:	080172e8 	.word	0x080172e8
 8010d58:	080172f0 	.word	0x080172f0
 8010d5c:	3331bb4c 	.word	0x3331bb4c
 8010d60:	b5ddea0e 	.word	0xb5ddea0e
 8010d64:	388ab355 	.word	0x388ab355
 8010d68:	bb360b61 	.word	0xbb360b61
 8010d6c:	3e2aaaab 	.word	0x3e2aaaab
 8010d70:	080172e0 	.word	0x080172e0
 8010d74:	3fb8aa3b 	.word	0x3fb8aa3b
 8010d78:	3f317180 	.word	0x3f317180
 8010d7c:	3717f7d1 	.word	0x3717f7d1
 8010d80:	0d800000 	.word	0x0d800000

08010d84 <finitef>:
 8010d84:	b082      	sub	sp, #8
 8010d86:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010d8a:	9801      	ldr	r0, [sp, #4]
 8010d8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010d90:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010d94:	bfac      	ite	ge
 8010d96:	2000      	movge	r0, #0
 8010d98:	2001      	movlt	r0, #1
 8010d9a:	b002      	add	sp, #8
 8010d9c:	4770      	bx	lr

08010d9e <abort>:
 8010d9e:	b508      	push	{r3, lr}
 8010da0:	2006      	movs	r0, #6
 8010da2:	f000 fc73 	bl	801168c <raise>
 8010da6:	2001      	movs	r0, #1
 8010da8:	f7f1 f94e 	bl	8002048 <_exit>

08010dac <__assert_func>:
 8010dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dae:	4614      	mov	r4, r2
 8010db0:	461a      	mov	r2, r3
 8010db2:	4b09      	ldr	r3, [pc, #36]	; (8010dd8 <__assert_func+0x2c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4605      	mov	r5, r0
 8010db8:	68d8      	ldr	r0, [r3, #12]
 8010dba:	b14c      	cbz	r4, 8010dd0 <__assert_func+0x24>
 8010dbc:	4b07      	ldr	r3, [pc, #28]	; (8010ddc <__assert_func+0x30>)
 8010dbe:	9100      	str	r1, [sp, #0]
 8010dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010dc4:	4906      	ldr	r1, [pc, #24]	; (8010de0 <__assert_func+0x34>)
 8010dc6:	462b      	mov	r3, r5
 8010dc8:	f000 f81a 	bl	8010e00 <fiprintf>
 8010dcc:	f7ff ffe7 	bl	8010d9e <abort>
 8010dd0:	4b04      	ldr	r3, [pc, #16]	; (8010de4 <__assert_func+0x38>)
 8010dd2:	461c      	mov	r4, r3
 8010dd4:	e7f3      	b.n	8010dbe <__assert_func+0x12>
 8010dd6:	bf00      	nop
 8010dd8:	20006b20 	.word	0x20006b20
 8010ddc:	080172f8 	.word	0x080172f8
 8010de0:	08017305 	.word	0x08017305
 8010de4:	08017333 	.word	0x08017333

08010de8 <atexit>:
 8010de8:	2300      	movs	r3, #0
 8010dea:	4601      	mov	r1, r0
 8010dec:	461a      	mov	r2, r3
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 bd5a 	b.w	80118a8 <__register_exitproc>

08010df4 <__errno>:
 8010df4:	4b01      	ldr	r3, [pc, #4]	; (8010dfc <__errno+0x8>)
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	20006b20 	.word	0x20006b20

08010e00 <fiprintf>:
 8010e00:	b40e      	push	{r1, r2, r3}
 8010e02:	b503      	push	{r0, r1, lr}
 8010e04:	4601      	mov	r1, r0
 8010e06:	ab03      	add	r3, sp, #12
 8010e08:	4805      	ldr	r0, [pc, #20]	; (8010e20 <fiprintf+0x20>)
 8010e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0e:	6800      	ldr	r0, [r0, #0]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	f000 f93f 	bl	8011094 <_vfiprintf_r>
 8010e16:	b002      	add	sp, #8
 8010e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e1c:	b003      	add	sp, #12
 8010e1e:	4770      	bx	lr
 8010e20:	20006b20 	.word	0x20006b20

08010e24 <__libc_init_array>:
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	4d0d      	ldr	r5, [pc, #52]	; (8010e5c <__libc_init_array+0x38>)
 8010e28:	4c0d      	ldr	r4, [pc, #52]	; (8010e60 <__libc_init_array+0x3c>)
 8010e2a:	1b64      	subs	r4, r4, r5
 8010e2c:	10a4      	asrs	r4, r4, #2
 8010e2e:	2600      	movs	r6, #0
 8010e30:	42a6      	cmp	r6, r4
 8010e32:	d109      	bne.n	8010e48 <__libc_init_array+0x24>
 8010e34:	4d0b      	ldr	r5, [pc, #44]	; (8010e64 <__libc_init_array+0x40>)
 8010e36:	4c0c      	ldr	r4, [pc, #48]	; (8010e68 <__libc_init_array+0x44>)
 8010e38:	f001 f9fa 	bl	8012230 <_init>
 8010e3c:	1b64      	subs	r4, r4, r5
 8010e3e:	10a4      	asrs	r4, r4, #2
 8010e40:	2600      	movs	r6, #0
 8010e42:	42a6      	cmp	r6, r4
 8010e44:	d105      	bne.n	8010e52 <__libc_init_array+0x2e>
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e4c:	4798      	blx	r3
 8010e4e:	3601      	adds	r6, #1
 8010e50:	e7ee      	b.n	8010e30 <__libc_init_array+0xc>
 8010e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e56:	4798      	blx	r3
 8010e58:	3601      	adds	r6, #1
 8010e5a:	e7f2      	b.n	8010e42 <__libc_init_array+0x1e>
 8010e5c:	080173d4 	.word	0x080173d4
 8010e60:	080173d4 	.word	0x080173d4
 8010e64:	080173d4 	.word	0x080173d4
 8010e68:	080173d8 	.word	0x080173d8

08010e6c <malloc>:
 8010e6c:	4b02      	ldr	r3, [pc, #8]	; (8010e78 <malloc+0xc>)
 8010e6e:	4601      	mov	r1, r0
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	f000 b88b 	b.w	8010f8c <_malloc_r>
 8010e76:	bf00      	nop
 8010e78:	20006b20 	.word	0x20006b20

08010e7c <free>:
 8010e7c:	4b02      	ldr	r3, [pc, #8]	; (8010e88 <free+0xc>)
 8010e7e:	4601      	mov	r1, r0
 8010e80:	6818      	ldr	r0, [r3, #0]
 8010e82:	f000 b833 	b.w	8010eec <_free_r>
 8010e86:	bf00      	nop
 8010e88:	20006b20 	.word	0x20006b20

08010e8c <memcpy>:
 8010e8c:	440a      	add	r2, r1
 8010e8e:	4291      	cmp	r1, r2
 8010e90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010e94:	d100      	bne.n	8010e98 <memcpy+0xc>
 8010e96:	4770      	bx	lr
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ea2:	4291      	cmp	r1, r2
 8010ea4:	d1f9      	bne.n	8010e9a <memcpy+0xe>
 8010ea6:	bd10      	pop	{r4, pc}

08010ea8 <memmove>:
 8010ea8:	4288      	cmp	r0, r1
 8010eaa:	b510      	push	{r4, lr}
 8010eac:	eb01 0402 	add.w	r4, r1, r2
 8010eb0:	d902      	bls.n	8010eb8 <memmove+0x10>
 8010eb2:	4284      	cmp	r4, r0
 8010eb4:	4623      	mov	r3, r4
 8010eb6:	d807      	bhi.n	8010ec8 <memmove+0x20>
 8010eb8:	1e43      	subs	r3, r0, #1
 8010eba:	42a1      	cmp	r1, r4
 8010ebc:	d008      	beq.n	8010ed0 <memmove+0x28>
 8010ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ec6:	e7f8      	b.n	8010eba <memmove+0x12>
 8010ec8:	4402      	add	r2, r0
 8010eca:	4601      	mov	r1, r0
 8010ecc:	428a      	cmp	r2, r1
 8010ece:	d100      	bne.n	8010ed2 <memmove+0x2a>
 8010ed0:	bd10      	pop	{r4, pc}
 8010ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010eda:	e7f7      	b.n	8010ecc <memmove+0x24>

08010edc <memset>:
 8010edc:	4402      	add	r2, r0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d100      	bne.n	8010ee6 <memset+0xa>
 8010ee4:	4770      	bx	lr
 8010ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8010eea:	e7f9      	b.n	8010ee0 <memset+0x4>

08010eec <_free_r>:
 8010eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eee:	2900      	cmp	r1, #0
 8010ef0:	d048      	beq.n	8010f84 <_free_r+0x98>
 8010ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ef6:	9001      	str	r0, [sp, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f1a1 0404 	sub.w	r4, r1, #4
 8010efe:	bfb8      	it	lt
 8010f00:	18e4      	addlt	r4, r4, r3
 8010f02:	f000 ff53 	bl	8011dac <__malloc_lock>
 8010f06:	4a20      	ldr	r2, [pc, #128]	; (8010f88 <_free_r+0x9c>)
 8010f08:	9801      	ldr	r0, [sp, #4]
 8010f0a:	6813      	ldr	r3, [r2, #0]
 8010f0c:	4615      	mov	r5, r2
 8010f0e:	b933      	cbnz	r3, 8010f1e <_free_r+0x32>
 8010f10:	6063      	str	r3, [r4, #4]
 8010f12:	6014      	str	r4, [r2, #0]
 8010f14:	b003      	add	sp, #12
 8010f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f1a:	f000 bf4d 	b.w	8011db8 <__malloc_unlock>
 8010f1e:	42a3      	cmp	r3, r4
 8010f20:	d90b      	bls.n	8010f3a <_free_r+0x4e>
 8010f22:	6821      	ldr	r1, [r4, #0]
 8010f24:	1862      	adds	r2, r4, r1
 8010f26:	4293      	cmp	r3, r2
 8010f28:	bf04      	itt	eq
 8010f2a:	681a      	ldreq	r2, [r3, #0]
 8010f2c:	685b      	ldreq	r3, [r3, #4]
 8010f2e:	6063      	str	r3, [r4, #4]
 8010f30:	bf04      	itt	eq
 8010f32:	1852      	addeq	r2, r2, r1
 8010f34:	6022      	streq	r2, [r4, #0]
 8010f36:	602c      	str	r4, [r5, #0]
 8010f38:	e7ec      	b.n	8010f14 <_free_r+0x28>
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	b10b      	cbz	r3, 8010f44 <_free_r+0x58>
 8010f40:	42a3      	cmp	r3, r4
 8010f42:	d9fa      	bls.n	8010f3a <_free_r+0x4e>
 8010f44:	6811      	ldr	r1, [r2, #0]
 8010f46:	1855      	adds	r5, r2, r1
 8010f48:	42a5      	cmp	r5, r4
 8010f4a:	d10b      	bne.n	8010f64 <_free_r+0x78>
 8010f4c:	6824      	ldr	r4, [r4, #0]
 8010f4e:	4421      	add	r1, r4
 8010f50:	1854      	adds	r4, r2, r1
 8010f52:	42a3      	cmp	r3, r4
 8010f54:	6011      	str	r1, [r2, #0]
 8010f56:	d1dd      	bne.n	8010f14 <_free_r+0x28>
 8010f58:	681c      	ldr	r4, [r3, #0]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	6053      	str	r3, [r2, #4]
 8010f5e:	4421      	add	r1, r4
 8010f60:	6011      	str	r1, [r2, #0]
 8010f62:	e7d7      	b.n	8010f14 <_free_r+0x28>
 8010f64:	d902      	bls.n	8010f6c <_free_r+0x80>
 8010f66:	230c      	movs	r3, #12
 8010f68:	6003      	str	r3, [r0, #0]
 8010f6a:	e7d3      	b.n	8010f14 <_free_r+0x28>
 8010f6c:	6825      	ldr	r5, [r4, #0]
 8010f6e:	1961      	adds	r1, r4, r5
 8010f70:	428b      	cmp	r3, r1
 8010f72:	bf04      	itt	eq
 8010f74:	6819      	ldreq	r1, [r3, #0]
 8010f76:	685b      	ldreq	r3, [r3, #4]
 8010f78:	6063      	str	r3, [r4, #4]
 8010f7a:	bf04      	itt	eq
 8010f7c:	1949      	addeq	r1, r1, r5
 8010f7e:	6021      	streq	r1, [r4, #0]
 8010f80:	6054      	str	r4, [r2, #4]
 8010f82:	e7c7      	b.n	8010f14 <_free_r+0x28>
 8010f84:	b003      	add	sp, #12
 8010f86:	bd30      	pop	{r4, r5, pc}
 8010f88:	2001357c 	.word	0x2001357c

08010f8c <_malloc_r>:
 8010f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8e:	1ccd      	adds	r5, r1, #3
 8010f90:	f025 0503 	bic.w	r5, r5, #3
 8010f94:	3508      	adds	r5, #8
 8010f96:	2d0c      	cmp	r5, #12
 8010f98:	bf38      	it	cc
 8010f9a:	250c      	movcc	r5, #12
 8010f9c:	2d00      	cmp	r5, #0
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	db01      	blt.n	8010fa6 <_malloc_r+0x1a>
 8010fa2:	42a9      	cmp	r1, r5
 8010fa4:	d903      	bls.n	8010fae <_malloc_r+0x22>
 8010fa6:	230c      	movs	r3, #12
 8010fa8:	6033      	str	r3, [r6, #0]
 8010faa:	2000      	movs	r0, #0
 8010fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fae:	f000 fefd 	bl	8011dac <__malloc_lock>
 8010fb2:	4921      	ldr	r1, [pc, #132]	; (8011038 <_malloc_r+0xac>)
 8010fb4:	680a      	ldr	r2, [r1, #0]
 8010fb6:	4614      	mov	r4, r2
 8010fb8:	b99c      	cbnz	r4, 8010fe2 <_malloc_r+0x56>
 8010fba:	4f20      	ldr	r7, [pc, #128]	; (801103c <_malloc_r+0xb0>)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	b923      	cbnz	r3, 8010fca <_malloc_r+0x3e>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f000 fb2a 	bl	801161c <_sbrk_r>
 8010fc8:	6038      	str	r0, [r7, #0]
 8010fca:	4629      	mov	r1, r5
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f000 fb25 	bl	801161c <_sbrk_r>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	d123      	bne.n	801101e <_malloc_r+0x92>
 8010fd6:	230c      	movs	r3, #12
 8010fd8:	6033      	str	r3, [r6, #0]
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f000 feec 	bl	8011db8 <__malloc_unlock>
 8010fe0:	e7e3      	b.n	8010faa <_malloc_r+0x1e>
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	1b5b      	subs	r3, r3, r5
 8010fe6:	d417      	bmi.n	8011018 <_malloc_r+0x8c>
 8010fe8:	2b0b      	cmp	r3, #11
 8010fea:	d903      	bls.n	8010ff4 <_malloc_r+0x68>
 8010fec:	6023      	str	r3, [r4, #0]
 8010fee:	441c      	add	r4, r3
 8010ff0:	6025      	str	r5, [r4, #0]
 8010ff2:	e004      	b.n	8010ffe <_malloc_r+0x72>
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	42a2      	cmp	r2, r4
 8010ff8:	bf0c      	ite	eq
 8010ffa:	600b      	streq	r3, [r1, #0]
 8010ffc:	6053      	strne	r3, [r2, #4]
 8010ffe:	4630      	mov	r0, r6
 8011000:	f000 feda 	bl	8011db8 <__malloc_unlock>
 8011004:	f104 000b 	add.w	r0, r4, #11
 8011008:	1d23      	adds	r3, r4, #4
 801100a:	f020 0007 	bic.w	r0, r0, #7
 801100e:	1ac2      	subs	r2, r0, r3
 8011010:	d0cc      	beq.n	8010fac <_malloc_r+0x20>
 8011012:	1a1b      	subs	r3, r3, r0
 8011014:	50a3      	str	r3, [r4, r2]
 8011016:	e7c9      	b.n	8010fac <_malloc_r+0x20>
 8011018:	4622      	mov	r2, r4
 801101a:	6864      	ldr	r4, [r4, #4]
 801101c:	e7cc      	b.n	8010fb8 <_malloc_r+0x2c>
 801101e:	1cc4      	adds	r4, r0, #3
 8011020:	f024 0403 	bic.w	r4, r4, #3
 8011024:	42a0      	cmp	r0, r4
 8011026:	d0e3      	beq.n	8010ff0 <_malloc_r+0x64>
 8011028:	1a21      	subs	r1, r4, r0
 801102a:	4630      	mov	r0, r6
 801102c:	f000 faf6 	bl	801161c <_sbrk_r>
 8011030:	3001      	adds	r0, #1
 8011032:	d1dd      	bne.n	8010ff0 <_malloc_r+0x64>
 8011034:	e7cf      	b.n	8010fd6 <_malloc_r+0x4a>
 8011036:	bf00      	nop
 8011038:	2001357c 	.word	0x2001357c
 801103c:	20013580 	.word	0x20013580

08011040 <__sfputc_r>:
 8011040:	6893      	ldr	r3, [r2, #8]
 8011042:	3b01      	subs	r3, #1
 8011044:	2b00      	cmp	r3, #0
 8011046:	b410      	push	{r4}
 8011048:	6093      	str	r3, [r2, #8]
 801104a:	da08      	bge.n	801105e <__sfputc_r+0x1e>
 801104c:	6994      	ldr	r4, [r2, #24]
 801104e:	42a3      	cmp	r3, r4
 8011050:	db01      	blt.n	8011056 <__sfputc_r+0x16>
 8011052:	290a      	cmp	r1, #10
 8011054:	d103      	bne.n	801105e <__sfputc_r+0x1e>
 8011056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801105a:	f000 bb65 	b.w	8011728 <__swbuf_r>
 801105e:	6813      	ldr	r3, [r2, #0]
 8011060:	1c58      	adds	r0, r3, #1
 8011062:	6010      	str	r0, [r2, #0]
 8011064:	7019      	strb	r1, [r3, #0]
 8011066:	4608      	mov	r0, r1
 8011068:	f85d 4b04 	ldr.w	r4, [sp], #4
 801106c:	4770      	bx	lr

0801106e <__sfputs_r>:
 801106e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011070:	4606      	mov	r6, r0
 8011072:	460f      	mov	r7, r1
 8011074:	4614      	mov	r4, r2
 8011076:	18d5      	adds	r5, r2, r3
 8011078:	42ac      	cmp	r4, r5
 801107a:	d101      	bne.n	8011080 <__sfputs_r+0x12>
 801107c:	2000      	movs	r0, #0
 801107e:	e007      	b.n	8011090 <__sfputs_r+0x22>
 8011080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011084:	463a      	mov	r2, r7
 8011086:	4630      	mov	r0, r6
 8011088:	f7ff ffda 	bl	8011040 <__sfputc_r>
 801108c:	1c43      	adds	r3, r0, #1
 801108e:	d1f3      	bne.n	8011078 <__sfputs_r+0xa>
 8011090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011094 <_vfiprintf_r>:
 8011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	460d      	mov	r5, r1
 801109a:	b09d      	sub	sp, #116	; 0x74
 801109c:	4614      	mov	r4, r2
 801109e:	4698      	mov	r8, r3
 80110a0:	4606      	mov	r6, r0
 80110a2:	b118      	cbz	r0, 80110ac <_vfiprintf_r+0x18>
 80110a4:	6983      	ldr	r3, [r0, #24]
 80110a6:	b90b      	cbnz	r3, 80110ac <_vfiprintf_r+0x18>
 80110a8:	f000 fd7a 	bl	8011ba0 <__sinit>
 80110ac:	4b89      	ldr	r3, [pc, #548]	; (80112d4 <_vfiprintf_r+0x240>)
 80110ae:	429d      	cmp	r5, r3
 80110b0:	d11b      	bne.n	80110ea <_vfiprintf_r+0x56>
 80110b2:	6875      	ldr	r5, [r6, #4]
 80110b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110b6:	07d9      	lsls	r1, r3, #31
 80110b8:	d405      	bmi.n	80110c6 <_vfiprintf_r+0x32>
 80110ba:	89ab      	ldrh	r3, [r5, #12]
 80110bc:	059a      	lsls	r2, r3, #22
 80110be:	d402      	bmi.n	80110c6 <_vfiprintf_r+0x32>
 80110c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110c2:	f000 fe0b 	bl	8011cdc <__retarget_lock_acquire_recursive>
 80110c6:	89ab      	ldrh	r3, [r5, #12]
 80110c8:	071b      	lsls	r3, r3, #28
 80110ca:	d501      	bpl.n	80110d0 <_vfiprintf_r+0x3c>
 80110cc:	692b      	ldr	r3, [r5, #16]
 80110ce:	b9eb      	cbnz	r3, 801110c <_vfiprintf_r+0x78>
 80110d0:	4629      	mov	r1, r5
 80110d2:	4630      	mov	r0, r6
 80110d4:	f000 fb7a 	bl	80117cc <__swsetup_r>
 80110d8:	b1c0      	cbz	r0, 801110c <_vfiprintf_r+0x78>
 80110da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110dc:	07dc      	lsls	r4, r3, #31
 80110de:	d50e      	bpl.n	80110fe <_vfiprintf_r+0x6a>
 80110e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110e4:	b01d      	add	sp, #116	; 0x74
 80110e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ea:	4b7b      	ldr	r3, [pc, #492]	; (80112d8 <_vfiprintf_r+0x244>)
 80110ec:	429d      	cmp	r5, r3
 80110ee:	d101      	bne.n	80110f4 <_vfiprintf_r+0x60>
 80110f0:	68b5      	ldr	r5, [r6, #8]
 80110f2:	e7df      	b.n	80110b4 <_vfiprintf_r+0x20>
 80110f4:	4b79      	ldr	r3, [pc, #484]	; (80112dc <_vfiprintf_r+0x248>)
 80110f6:	429d      	cmp	r5, r3
 80110f8:	bf08      	it	eq
 80110fa:	68f5      	ldreq	r5, [r6, #12]
 80110fc:	e7da      	b.n	80110b4 <_vfiprintf_r+0x20>
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	0598      	lsls	r0, r3, #22
 8011102:	d4ed      	bmi.n	80110e0 <_vfiprintf_r+0x4c>
 8011104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011106:	f000 fdeb 	bl	8011ce0 <__retarget_lock_release_recursive>
 801110a:	e7e9      	b.n	80110e0 <_vfiprintf_r+0x4c>
 801110c:	2300      	movs	r3, #0
 801110e:	9309      	str	r3, [sp, #36]	; 0x24
 8011110:	2320      	movs	r3, #32
 8011112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011116:	f8cd 800c 	str.w	r8, [sp, #12]
 801111a:	2330      	movs	r3, #48	; 0x30
 801111c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80112e0 <_vfiprintf_r+0x24c>
 8011120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011124:	f04f 0901 	mov.w	r9, #1
 8011128:	4623      	mov	r3, r4
 801112a:	469a      	mov	sl, r3
 801112c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011130:	b10a      	cbz	r2, 8011136 <_vfiprintf_r+0xa2>
 8011132:	2a25      	cmp	r2, #37	; 0x25
 8011134:	d1f9      	bne.n	801112a <_vfiprintf_r+0x96>
 8011136:	ebba 0b04 	subs.w	fp, sl, r4
 801113a:	d00b      	beq.n	8011154 <_vfiprintf_r+0xc0>
 801113c:	465b      	mov	r3, fp
 801113e:	4622      	mov	r2, r4
 8011140:	4629      	mov	r1, r5
 8011142:	4630      	mov	r0, r6
 8011144:	f7ff ff93 	bl	801106e <__sfputs_r>
 8011148:	3001      	adds	r0, #1
 801114a:	f000 80aa 	beq.w	80112a2 <_vfiprintf_r+0x20e>
 801114e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011150:	445a      	add	r2, fp
 8011152:	9209      	str	r2, [sp, #36]	; 0x24
 8011154:	f89a 3000 	ldrb.w	r3, [sl]
 8011158:	2b00      	cmp	r3, #0
 801115a:	f000 80a2 	beq.w	80112a2 <_vfiprintf_r+0x20e>
 801115e:	2300      	movs	r3, #0
 8011160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011168:	f10a 0a01 	add.w	sl, sl, #1
 801116c:	9304      	str	r3, [sp, #16]
 801116e:	9307      	str	r3, [sp, #28]
 8011170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011174:	931a      	str	r3, [sp, #104]	; 0x68
 8011176:	4654      	mov	r4, sl
 8011178:	2205      	movs	r2, #5
 801117a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117e:	4858      	ldr	r0, [pc, #352]	; (80112e0 <_vfiprintf_r+0x24c>)
 8011180:	f7ef f82e 	bl	80001e0 <memchr>
 8011184:	9a04      	ldr	r2, [sp, #16]
 8011186:	b9d8      	cbnz	r0, 80111c0 <_vfiprintf_r+0x12c>
 8011188:	06d1      	lsls	r1, r2, #27
 801118a:	bf44      	itt	mi
 801118c:	2320      	movmi	r3, #32
 801118e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011192:	0713      	lsls	r3, r2, #28
 8011194:	bf44      	itt	mi
 8011196:	232b      	movmi	r3, #43	; 0x2b
 8011198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801119c:	f89a 3000 	ldrb.w	r3, [sl]
 80111a0:	2b2a      	cmp	r3, #42	; 0x2a
 80111a2:	d015      	beq.n	80111d0 <_vfiprintf_r+0x13c>
 80111a4:	9a07      	ldr	r2, [sp, #28]
 80111a6:	4654      	mov	r4, sl
 80111a8:	2000      	movs	r0, #0
 80111aa:	f04f 0c0a 	mov.w	ip, #10
 80111ae:	4621      	mov	r1, r4
 80111b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111b4:	3b30      	subs	r3, #48	; 0x30
 80111b6:	2b09      	cmp	r3, #9
 80111b8:	d94e      	bls.n	8011258 <_vfiprintf_r+0x1c4>
 80111ba:	b1b0      	cbz	r0, 80111ea <_vfiprintf_r+0x156>
 80111bc:	9207      	str	r2, [sp, #28]
 80111be:	e014      	b.n	80111ea <_vfiprintf_r+0x156>
 80111c0:	eba0 0308 	sub.w	r3, r0, r8
 80111c4:	fa09 f303 	lsl.w	r3, r9, r3
 80111c8:	4313      	orrs	r3, r2
 80111ca:	9304      	str	r3, [sp, #16]
 80111cc:	46a2      	mov	sl, r4
 80111ce:	e7d2      	b.n	8011176 <_vfiprintf_r+0xe2>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	1d19      	adds	r1, r3, #4
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	9103      	str	r1, [sp, #12]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	bfbb      	ittet	lt
 80111dc:	425b      	neglt	r3, r3
 80111de:	f042 0202 	orrlt.w	r2, r2, #2
 80111e2:	9307      	strge	r3, [sp, #28]
 80111e4:	9307      	strlt	r3, [sp, #28]
 80111e6:	bfb8      	it	lt
 80111e8:	9204      	strlt	r2, [sp, #16]
 80111ea:	7823      	ldrb	r3, [r4, #0]
 80111ec:	2b2e      	cmp	r3, #46	; 0x2e
 80111ee:	d10c      	bne.n	801120a <_vfiprintf_r+0x176>
 80111f0:	7863      	ldrb	r3, [r4, #1]
 80111f2:	2b2a      	cmp	r3, #42	; 0x2a
 80111f4:	d135      	bne.n	8011262 <_vfiprintf_r+0x1ce>
 80111f6:	9b03      	ldr	r3, [sp, #12]
 80111f8:	1d1a      	adds	r2, r3, #4
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	9203      	str	r2, [sp, #12]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	bfb8      	it	lt
 8011202:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011206:	3402      	adds	r4, #2
 8011208:	9305      	str	r3, [sp, #20]
 801120a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80112f0 <_vfiprintf_r+0x25c>
 801120e:	7821      	ldrb	r1, [r4, #0]
 8011210:	2203      	movs	r2, #3
 8011212:	4650      	mov	r0, sl
 8011214:	f7ee ffe4 	bl	80001e0 <memchr>
 8011218:	b140      	cbz	r0, 801122c <_vfiprintf_r+0x198>
 801121a:	2340      	movs	r3, #64	; 0x40
 801121c:	eba0 000a 	sub.w	r0, r0, sl
 8011220:	fa03 f000 	lsl.w	r0, r3, r0
 8011224:	9b04      	ldr	r3, [sp, #16]
 8011226:	4303      	orrs	r3, r0
 8011228:	3401      	adds	r4, #1
 801122a:	9304      	str	r3, [sp, #16]
 801122c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011230:	482c      	ldr	r0, [pc, #176]	; (80112e4 <_vfiprintf_r+0x250>)
 8011232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011236:	2206      	movs	r2, #6
 8011238:	f7ee ffd2 	bl	80001e0 <memchr>
 801123c:	2800      	cmp	r0, #0
 801123e:	d03f      	beq.n	80112c0 <_vfiprintf_r+0x22c>
 8011240:	4b29      	ldr	r3, [pc, #164]	; (80112e8 <_vfiprintf_r+0x254>)
 8011242:	bb1b      	cbnz	r3, 801128c <_vfiprintf_r+0x1f8>
 8011244:	9b03      	ldr	r3, [sp, #12]
 8011246:	3307      	adds	r3, #7
 8011248:	f023 0307 	bic.w	r3, r3, #7
 801124c:	3308      	adds	r3, #8
 801124e:	9303      	str	r3, [sp, #12]
 8011250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011252:	443b      	add	r3, r7
 8011254:	9309      	str	r3, [sp, #36]	; 0x24
 8011256:	e767      	b.n	8011128 <_vfiprintf_r+0x94>
 8011258:	fb0c 3202 	mla	r2, ip, r2, r3
 801125c:	460c      	mov	r4, r1
 801125e:	2001      	movs	r0, #1
 8011260:	e7a5      	b.n	80111ae <_vfiprintf_r+0x11a>
 8011262:	2300      	movs	r3, #0
 8011264:	3401      	adds	r4, #1
 8011266:	9305      	str	r3, [sp, #20]
 8011268:	4619      	mov	r1, r3
 801126a:	f04f 0c0a 	mov.w	ip, #10
 801126e:	4620      	mov	r0, r4
 8011270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011274:	3a30      	subs	r2, #48	; 0x30
 8011276:	2a09      	cmp	r2, #9
 8011278:	d903      	bls.n	8011282 <_vfiprintf_r+0x1ee>
 801127a:	2b00      	cmp	r3, #0
 801127c:	d0c5      	beq.n	801120a <_vfiprintf_r+0x176>
 801127e:	9105      	str	r1, [sp, #20]
 8011280:	e7c3      	b.n	801120a <_vfiprintf_r+0x176>
 8011282:	fb0c 2101 	mla	r1, ip, r1, r2
 8011286:	4604      	mov	r4, r0
 8011288:	2301      	movs	r3, #1
 801128a:	e7f0      	b.n	801126e <_vfiprintf_r+0x1da>
 801128c:	ab03      	add	r3, sp, #12
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	462a      	mov	r2, r5
 8011292:	4b16      	ldr	r3, [pc, #88]	; (80112ec <_vfiprintf_r+0x258>)
 8011294:	a904      	add	r1, sp, #16
 8011296:	4630      	mov	r0, r6
 8011298:	f3af 8000 	nop.w
 801129c:	4607      	mov	r7, r0
 801129e:	1c78      	adds	r0, r7, #1
 80112a0:	d1d6      	bne.n	8011250 <_vfiprintf_r+0x1bc>
 80112a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112a4:	07d9      	lsls	r1, r3, #31
 80112a6:	d405      	bmi.n	80112b4 <_vfiprintf_r+0x220>
 80112a8:	89ab      	ldrh	r3, [r5, #12]
 80112aa:	059a      	lsls	r2, r3, #22
 80112ac:	d402      	bmi.n	80112b4 <_vfiprintf_r+0x220>
 80112ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112b0:	f000 fd16 	bl	8011ce0 <__retarget_lock_release_recursive>
 80112b4:	89ab      	ldrh	r3, [r5, #12]
 80112b6:	065b      	lsls	r3, r3, #25
 80112b8:	f53f af12 	bmi.w	80110e0 <_vfiprintf_r+0x4c>
 80112bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112be:	e711      	b.n	80110e4 <_vfiprintf_r+0x50>
 80112c0:	ab03      	add	r3, sp, #12
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	462a      	mov	r2, r5
 80112c6:	4b09      	ldr	r3, [pc, #36]	; (80112ec <_vfiprintf_r+0x258>)
 80112c8:	a904      	add	r1, sp, #16
 80112ca:	4630      	mov	r0, r6
 80112cc:	f000 f880 	bl	80113d0 <_printf_i>
 80112d0:	e7e4      	b.n	801129c <_vfiprintf_r+0x208>
 80112d2:	bf00      	nop
 80112d4:	0801738c 	.word	0x0801738c
 80112d8:	080173ac 	.word	0x080173ac
 80112dc:	0801736c 	.word	0x0801736c
 80112e0:	08017338 	.word	0x08017338
 80112e4:	08017342 	.word	0x08017342
 80112e8:	00000000 	.word	0x00000000
 80112ec:	0801106f 	.word	0x0801106f
 80112f0:	0801733e 	.word	0x0801733e

080112f4 <_printf_common>:
 80112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f8:	4616      	mov	r6, r2
 80112fa:	4699      	mov	r9, r3
 80112fc:	688a      	ldr	r2, [r1, #8]
 80112fe:	690b      	ldr	r3, [r1, #16]
 8011300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011304:	4293      	cmp	r3, r2
 8011306:	bfb8      	it	lt
 8011308:	4613      	movlt	r3, r2
 801130a:	6033      	str	r3, [r6, #0]
 801130c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011310:	4607      	mov	r7, r0
 8011312:	460c      	mov	r4, r1
 8011314:	b10a      	cbz	r2, 801131a <_printf_common+0x26>
 8011316:	3301      	adds	r3, #1
 8011318:	6033      	str	r3, [r6, #0]
 801131a:	6823      	ldr	r3, [r4, #0]
 801131c:	0699      	lsls	r1, r3, #26
 801131e:	bf42      	ittt	mi
 8011320:	6833      	ldrmi	r3, [r6, #0]
 8011322:	3302      	addmi	r3, #2
 8011324:	6033      	strmi	r3, [r6, #0]
 8011326:	6825      	ldr	r5, [r4, #0]
 8011328:	f015 0506 	ands.w	r5, r5, #6
 801132c:	d106      	bne.n	801133c <_printf_common+0x48>
 801132e:	f104 0a19 	add.w	sl, r4, #25
 8011332:	68e3      	ldr	r3, [r4, #12]
 8011334:	6832      	ldr	r2, [r6, #0]
 8011336:	1a9b      	subs	r3, r3, r2
 8011338:	42ab      	cmp	r3, r5
 801133a:	dc26      	bgt.n	801138a <_printf_common+0x96>
 801133c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011340:	1e13      	subs	r3, r2, #0
 8011342:	6822      	ldr	r2, [r4, #0]
 8011344:	bf18      	it	ne
 8011346:	2301      	movne	r3, #1
 8011348:	0692      	lsls	r2, r2, #26
 801134a:	d42b      	bmi.n	80113a4 <_printf_common+0xb0>
 801134c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011350:	4649      	mov	r1, r9
 8011352:	4638      	mov	r0, r7
 8011354:	47c0      	blx	r8
 8011356:	3001      	adds	r0, #1
 8011358:	d01e      	beq.n	8011398 <_printf_common+0xa4>
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	68e5      	ldr	r5, [r4, #12]
 801135e:	6832      	ldr	r2, [r6, #0]
 8011360:	f003 0306 	and.w	r3, r3, #6
 8011364:	2b04      	cmp	r3, #4
 8011366:	bf08      	it	eq
 8011368:	1aad      	subeq	r5, r5, r2
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	6922      	ldr	r2, [r4, #16]
 801136e:	bf0c      	ite	eq
 8011370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011374:	2500      	movne	r5, #0
 8011376:	4293      	cmp	r3, r2
 8011378:	bfc4      	itt	gt
 801137a:	1a9b      	subgt	r3, r3, r2
 801137c:	18ed      	addgt	r5, r5, r3
 801137e:	2600      	movs	r6, #0
 8011380:	341a      	adds	r4, #26
 8011382:	42b5      	cmp	r5, r6
 8011384:	d11a      	bne.n	80113bc <_printf_common+0xc8>
 8011386:	2000      	movs	r0, #0
 8011388:	e008      	b.n	801139c <_printf_common+0xa8>
 801138a:	2301      	movs	r3, #1
 801138c:	4652      	mov	r2, sl
 801138e:	4649      	mov	r1, r9
 8011390:	4638      	mov	r0, r7
 8011392:	47c0      	blx	r8
 8011394:	3001      	adds	r0, #1
 8011396:	d103      	bne.n	80113a0 <_printf_common+0xac>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a0:	3501      	adds	r5, #1
 80113a2:	e7c6      	b.n	8011332 <_printf_common+0x3e>
 80113a4:	18e1      	adds	r1, r4, r3
 80113a6:	1c5a      	adds	r2, r3, #1
 80113a8:	2030      	movs	r0, #48	; 0x30
 80113aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113ae:	4422      	add	r2, r4
 80113b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113b8:	3302      	adds	r3, #2
 80113ba:	e7c7      	b.n	801134c <_printf_common+0x58>
 80113bc:	2301      	movs	r3, #1
 80113be:	4622      	mov	r2, r4
 80113c0:	4649      	mov	r1, r9
 80113c2:	4638      	mov	r0, r7
 80113c4:	47c0      	blx	r8
 80113c6:	3001      	adds	r0, #1
 80113c8:	d0e6      	beq.n	8011398 <_printf_common+0xa4>
 80113ca:	3601      	adds	r6, #1
 80113cc:	e7d9      	b.n	8011382 <_printf_common+0x8e>
	...

080113d0 <_printf_i>:
 80113d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113d4:	460c      	mov	r4, r1
 80113d6:	4691      	mov	r9, r2
 80113d8:	7e27      	ldrb	r7, [r4, #24]
 80113da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80113dc:	2f78      	cmp	r7, #120	; 0x78
 80113de:	4680      	mov	r8, r0
 80113e0:	469a      	mov	sl, r3
 80113e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113e6:	d807      	bhi.n	80113f8 <_printf_i+0x28>
 80113e8:	2f62      	cmp	r7, #98	; 0x62
 80113ea:	d80a      	bhi.n	8011402 <_printf_i+0x32>
 80113ec:	2f00      	cmp	r7, #0
 80113ee:	f000 80d8 	beq.w	80115a2 <_printf_i+0x1d2>
 80113f2:	2f58      	cmp	r7, #88	; 0x58
 80113f4:	f000 80a3 	beq.w	801153e <_printf_i+0x16e>
 80113f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011400:	e03a      	b.n	8011478 <_printf_i+0xa8>
 8011402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011406:	2b15      	cmp	r3, #21
 8011408:	d8f6      	bhi.n	80113f8 <_printf_i+0x28>
 801140a:	a001      	add	r0, pc, #4	; (adr r0, 8011410 <_printf_i+0x40>)
 801140c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011410:	08011469 	.word	0x08011469
 8011414:	0801147d 	.word	0x0801147d
 8011418:	080113f9 	.word	0x080113f9
 801141c:	080113f9 	.word	0x080113f9
 8011420:	080113f9 	.word	0x080113f9
 8011424:	080113f9 	.word	0x080113f9
 8011428:	0801147d 	.word	0x0801147d
 801142c:	080113f9 	.word	0x080113f9
 8011430:	080113f9 	.word	0x080113f9
 8011434:	080113f9 	.word	0x080113f9
 8011438:	080113f9 	.word	0x080113f9
 801143c:	08011589 	.word	0x08011589
 8011440:	080114ad 	.word	0x080114ad
 8011444:	0801156b 	.word	0x0801156b
 8011448:	080113f9 	.word	0x080113f9
 801144c:	080113f9 	.word	0x080113f9
 8011450:	080115ab 	.word	0x080115ab
 8011454:	080113f9 	.word	0x080113f9
 8011458:	080114ad 	.word	0x080114ad
 801145c:	080113f9 	.word	0x080113f9
 8011460:	080113f9 	.word	0x080113f9
 8011464:	08011573 	.word	0x08011573
 8011468:	680b      	ldr	r3, [r1, #0]
 801146a:	1d1a      	adds	r2, r3, #4
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	600a      	str	r2, [r1, #0]
 8011470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011478:	2301      	movs	r3, #1
 801147a:	e0a3      	b.n	80115c4 <_printf_i+0x1f4>
 801147c:	6825      	ldr	r5, [r4, #0]
 801147e:	6808      	ldr	r0, [r1, #0]
 8011480:	062e      	lsls	r6, r5, #24
 8011482:	f100 0304 	add.w	r3, r0, #4
 8011486:	d50a      	bpl.n	801149e <_printf_i+0xce>
 8011488:	6805      	ldr	r5, [r0, #0]
 801148a:	600b      	str	r3, [r1, #0]
 801148c:	2d00      	cmp	r5, #0
 801148e:	da03      	bge.n	8011498 <_printf_i+0xc8>
 8011490:	232d      	movs	r3, #45	; 0x2d
 8011492:	426d      	negs	r5, r5
 8011494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011498:	485e      	ldr	r0, [pc, #376]	; (8011614 <_printf_i+0x244>)
 801149a:	230a      	movs	r3, #10
 801149c:	e019      	b.n	80114d2 <_printf_i+0x102>
 801149e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80114a2:	6805      	ldr	r5, [r0, #0]
 80114a4:	600b      	str	r3, [r1, #0]
 80114a6:	bf18      	it	ne
 80114a8:	b22d      	sxthne	r5, r5
 80114aa:	e7ef      	b.n	801148c <_printf_i+0xbc>
 80114ac:	680b      	ldr	r3, [r1, #0]
 80114ae:	6825      	ldr	r5, [r4, #0]
 80114b0:	1d18      	adds	r0, r3, #4
 80114b2:	6008      	str	r0, [r1, #0]
 80114b4:	0628      	lsls	r0, r5, #24
 80114b6:	d501      	bpl.n	80114bc <_printf_i+0xec>
 80114b8:	681d      	ldr	r5, [r3, #0]
 80114ba:	e002      	b.n	80114c2 <_printf_i+0xf2>
 80114bc:	0669      	lsls	r1, r5, #25
 80114be:	d5fb      	bpl.n	80114b8 <_printf_i+0xe8>
 80114c0:	881d      	ldrh	r5, [r3, #0]
 80114c2:	4854      	ldr	r0, [pc, #336]	; (8011614 <_printf_i+0x244>)
 80114c4:	2f6f      	cmp	r7, #111	; 0x6f
 80114c6:	bf0c      	ite	eq
 80114c8:	2308      	moveq	r3, #8
 80114ca:	230a      	movne	r3, #10
 80114cc:	2100      	movs	r1, #0
 80114ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114d2:	6866      	ldr	r6, [r4, #4]
 80114d4:	60a6      	str	r6, [r4, #8]
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	bfa2      	ittt	ge
 80114da:	6821      	ldrge	r1, [r4, #0]
 80114dc:	f021 0104 	bicge.w	r1, r1, #4
 80114e0:	6021      	strge	r1, [r4, #0]
 80114e2:	b90d      	cbnz	r5, 80114e8 <_printf_i+0x118>
 80114e4:	2e00      	cmp	r6, #0
 80114e6:	d04d      	beq.n	8011584 <_printf_i+0x1b4>
 80114e8:	4616      	mov	r6, r2
 80114ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80114ee:	fb03 5711 	mls	r7, r3, r1, r5
 80114f2:	5dc7      	ldrb	r7, [r0, r7]
 80114f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114f8:	462f      	mov	r7, r5
 80114fa:	42bb      	cmp	r3, r7
 80114fc:	460d      	mov	r5, r1
 80114fe:	d9f4      	bls.n	80114ea <_printf_i+0x11a>
 8011500:	2b08      	cmp	r3, #8
 8011502:	d10b      	bne.n	801151c <_printf_i+0x14c>
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	07df      	lsls	r7, r3, #31
 8011508:	d508      	bpl.n	801151c <_printf_i+0x14c>
 801150a:	6923      	ldr	r3, [r4, #16]
 801150c:	6861      	ldr	r1, [r4, #4]
 801150e:	4299      	cmp	r1, r3
 8011510:	bfde      	ittt	le
 8011512:	2330      	movle	r3, #48	; 0x30
 8011514:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011518:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801151c:	1b92      	subs	r2, r2, r6
 801151e:	6122      	str	r2, [r4, #16]
 8011520:	f8cd a000 	str.w	sl, [sp]
 8011524:	464b      	mov	r3, r9
 8011526:	aa03      	add	r2, sp, #12
 8011528:	4621      	mov	r1, r4
 801152a:	4640      	mov	r0, r8
 801152c:	f7ff fee2 	bl	80112f4 <_printf_common>
 8011530:	3001      	adds	r0, #1
 8011532:	d14c      	bne.n	80115ce <_printf_i+0x1fe>
 8011534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011538:	b004      	add	sp, #16
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	4835      	ldr	r0, [pc, #212]	; (8011614 <_printf_i+0x244>)
 8011540:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011544:	6823      	ldr	r3, [r4, #0]
 8011546:	680e      	ldr	r6, [r1, #0]
 8011548:	061f      	lsls	r7, r3, #24
 801154a:	f856 5b04 	ldr.w	r5, [r6], #4
 801154e:	600e      	str	r6, [r1, #0]
 8011550:	d514      	bpl.n	801157c <_printf_i+0x1ac>
 8011552:	07d9      	lsls	r1, r3, #31
 8011554:	bf44      	itt	mi
 8011556:	f043 0320 	orrmi.w	r3, r3, #32
 801155a:	6023      	strmi	r3, [r4, #0]
 801155c:	b91d      	cbnz	r5, 8011566 <_printf_i+0x196>
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	f023 0320 	bic.w	r3, r3, #32
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	2310      	movs	r3, #16
 8011568:	e7b0      	b.n	80114cc <_printf_i+0xfc>
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	f043 0320 	orr.w	r3, r3, #32
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	2378      	movs	r3, #120	; 0x78
 8011574:	4828      	ldr	r0, [pc, #160]	; (8011618 <_printf_i+0x248>)
 8011576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801157a:	e7e3      	b.n	8011544 <_printf_i+0x174>
 801157c:	065e      	lsls	r6, r3, #25
 801157e:	bf48      	it	mi
 8011580:	b2ad      	uxthmi	r5, r5
 8011582:	e7e6      	b.n	8011552 <_printf_i+0x182>
 8011584:	4616      	mov	r6, r2
 8011586:	e7bb      	b.n	8011500 <_printf_i+0x130>
 8011588:	680b      	ldr	r3, [r1, #0]
 801158a:	6826      	ldr	r6, [r4, #0]
 801158c:	6960      	ldr	r0, [r4, #20]
 801158e:	1d1d      	adds	r5, r3, #4
 8011590:	600d      	str	r5, [r1, #0]
 8011592:	0635      	lsls	r5, r6, #24
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	d501      	bpl.n	801159c <_printf_i+0x1cc>
 8011598:	6018      	str	r0, [r3, #0]
 801159a:	e002      	b.n	80115a2 <_printf_i+0x1d2>
 801159c:	0671      	lsls	r1, r6, #25
 801159e:	d5fb      	bpl.n	8011598 <_printf_i+0x1c8>
 80115a0:	8018      	strh	r0, [r3, #0]
 80115a2:	2300      	movs	r3, #0
 80115a4:	6123      	str	r3, [r4, #16]
 80115a6:	4616      	mov	r6, r2
 80115a8:	e7ba      	b.n	8011520 <_printf_i+0x150>
 80115aa:	680b      	ldr	r3, [r1, #0]
 80115ac:	1d1a      	adds	r2, r3, #4
 80115ae:	600a      	str	r2, [r1, #0]
 80115b0:	681e      	ldr	r6, [r3, #0]
 80115b2:	6862      	ldr	r2, [r4, #4]
 80115b4:	2100      	movs	r1, #0
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7ee fe12 	bl	80001e0 <memchr>
 80115bc:	b108      	cbz	r0, 80115c2 <_printf_i+0x1f2>
 80115be:	1b80      	subs	r0, r0, r6
 80115c0:	6060      	str	r0, [r4, #4]
 80115c2:	6863      	ldr	r3, [r4, #4]
 80115c4:	6123      	str	r3, [r4, #16]
 80115c6:	2300      	movs	r3, #0
 80115c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115cc:	e7a8      	b.n	8011520 <_printf_i+0x150>
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	4632      	mov	r2, r6
 80115d2:	4649      	mov	r1, r9
 80115d4:	4640      	mov	r0, r8
 80115d6:	47d0      	blx	sl
 80115d8:	3001      	adds	r0, #1
 80115da:	d0ab      	beq.n	8011534 <_printf_i+0x164>
 80115dc:	6823      	ldr	r3, [r4, #0]
 80115de:	079b      	lsls	r3, r3, #30
 80115e0:	d413      	bmi.n	801160a <_printf_i+0x23a>
 80115e2:	68e0      	ldr	r0, [r4, #12]
 80115e4:	9b03      	ldr	r3, [sp, #12]
 80115e6:	4298      	cmp	r0, r3
 80115e8:	bfb8      	it	lt
 80115ea:	4618      	movlt	r0, r3
 80115ec:	e7a4      	b.n	8011538 <_printf_i+0x168>
 80115ee:	2301      	movs	r3, #1
 80115f0:	4632      	mov	r2, r6
 80115f2:	4649      	mov	r1, r9
 80115f4:	4640      	mov	r0, r8
 80115f6:	47d0      	blx	sl
 80115f8:	3001      	adds	r0, #1
 80115fa:	d09b      	beq.n	8011534 <_printf_i+0x164>
 80115fc:	3501      	adds	r5, #1
 80115fe:	68e3      	ldr	r3, [r4, #12]
 8011600:	9903      	ldr	r1, [sp, #12]
 8011602:	1a5b      	subs	r3, r3, r1
 8011604:	42ab      	cmp	r3, r5
 8011606:	dcf2      	bgt.n	80115ee <_printf_i+0x21e>
 8011608:	e7eb      	b.n	80115e2 <_printf_i+0x212>
 801160a:	2500      	movs	r5, #0
 801160c:	f104 0619 	add.w	r6, r4, #25
 8011610:	e7f5      	b.n	80115fe <_printf_i+0x22e>
 8011612:	bf00      	nop
 8011614:	08017349 	.word	0x08017349
 8011618:	0801735a 	.word	0x0801735a

0801161c <_sbrk_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d06      	ldr	r5, [pc, #24]	; (8011638 <_sbrk_r+0x1c>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	602b      	str	r3, [r5, #0]
 8011628:	f7f0 fd86 	bl	8002138 <_sbrk>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_sbrk_r+0x1a>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	b103      	cbz	r3, 8011636 <_sbrk_r+0x1a>
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	20013624 	.word	0x20013624

0801163c <_raise_r>:
 801163c:	291f      	cmp	r1, #31
 801163e:	b538      	push	{r3, r4, r5, lr}
 8011640:	4604      	mov	r4, r0
 8011642:	460d      	mov	r5, r1
 8011644:	d904      	bls.n	8011650 <_raise_r+0x14>
 8011646:	2316      	movs	r3, #22
 8011648:	6003      	str	r3, [r0, #0]
 801164a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011652:	b112      	cbz	r2, 801165a <_raise_r+0x1e>
 8011654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011658:	b94b      	cbnz	r3, 801166e <_raise_r+0x32>
 801165a:	4620      	mov	r0, r4
 801165c:	f000 f830 	bl	80116c0 <_getpid_r>
 8011660:	462a      	mov	r2, r5
 8011662:	4601      	mov	r1, r0
 8011664:	4620      	mov	r0, r4
 8011666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801166a:	f000 b817 	b.w	801169c <_kill_r>
 801166e:	2b01      	cmp	r3, #1
 8011670:	d00a      	beq.n	8011688 <_raise_r+0x4c>
 8011672:	1c59      	adds	r1, r3, #1
 8011674:	d103      	bne.n	801167e <_raise_r+0x42>
 8011676:	2316      	movs	r3, #22
 8011678:	6003      	str	r3, [r0, #0]
 801167a:	2001      	movs	r0, #1
 801167c:	e7e7      	b.n	801164e <_raise_r+0x12>
 801167e:	2400      	movs	r4, #0
 8011680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011684:	4628      	mov	r0, r5
 8011686:	4798      	blx	r3
 8011688:	2000      	movs	r0, #0
 801168a:	e7e0      	b.n	801164e <_raise_r+0x12>

0801168c <raise>:
 801168c:	4b02      	ldr	r3, [pc, #8]	; (8011698 <raise+0xc>)
 801168e:	4601      	mov	r1, r0
 8011690:	6818      	ldr	r0, [r3, #0]
 8011692:	f7ff bfd3 	b.w	801163c <_raise_r>
 8011696:	bf00      	nop
 8011698:	20006b20 	.word	0x20006b20

0801169c <_kill_r>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	4d07      	ldr	r5, [pc, #28]	; (80116bc <_kill_r+0x20>)
 80116a0:	2300      	movs	r3, #0
 80116a2:	4604      	mov	r4, r0
 80116a4:	4608      	mov	r0, r1
 80116a6:	4611      	mov	r1, r2
 80116a8:	602b      	str	r3, [r5, #0]
 80116aa:	f7f0 fcbd 	bl	8002028 <_kill>
 80116ae:	1c43      	adds	r3, r0, #1
 80116b0:	d102      	bne.n	80116b8 <_kill_r+0x1c>
 80116b2:	682b      	ldr	r3, [r5, #0]
 80116b4:	b103      	cbz	r3, 80116b8 <_kill_r+0x1c>
 80116b6:	6023      	str	r3, [r4, #0]
 80116b8:	bd38      	pop	{r3, r4, r5, pc}
 80116ba:	bf00      	nop
 80116bc:	20013624 	.word	0x20013624

080116c0 <_getpid_r>:
 80116c0:	f7f0 bcaa 	b.w	8002018 <_getpid>

080116c4 <siprintf>:
 80116c4:	b40e      	push	{r1, r2, r3}
 80116c6:	b500      	push	{lr}
 80116c8:	b09c      	sub	sp, #112	; 0x70
 80116ca:	ab1d      	add	r3, sp, #116	; 0x74
 80116cc:	9002      	str	r0, [sp, #8]
 80116ce:	9006      	str	r0, [sp, #24]
 80116d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116d4:	4809      	ldr	r0, [pc, #36]	; (80116fc <siprintf+0x38>)
 80116d6:	9107      	str	r1, [sp, #28]
 80116d8:	9104      	str	r1, [sp, #16]
 80116da:	4909      	ldr	r1, [pc, #36]	; (8011700 <siprintf+0x3c>)
 80116dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e0:	9105      	str	r1, [sp, #20]
 80116e2:	6800      	ldr	r0, [r0, #0]
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	a902      	add	r1, sp, #8
 80116e8:	f000 fbee 	bl	8011ec8 <_svfiprintf_r>
 80116ec:	9b02      	ldr	r3, [sp, #8]
 80116ee:	2200      	movs	r2, #0
 80116f0:	701a      	strb	r2, [r3, #0]
 80116f2:	b01c      	add	sp, #112	; 0x70
 80116f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80116f8:	b003      	add	sp, #12
 80116fa:	4770      	bx	lr
 80116fc:	20006b20 	.word	0x20006b20
 8011700:	ffff0208 	.word	0xffff0208

08011704 <strncmp>:
 8011704:	b510      	push	{r4, lr}
 8011706:	b16a      	cbz	r2, 8011724 <strncmp+0x20>
 8011708:	3901      	subs	r1, #1
 801170a:	1884      	adds	r4, r0, r2
 801170c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011710:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011714:	4293      	cmp	r3, r2
 8011716:	d103      	bne.n	8011720 <strncmp+0x1c>
 8011718:	42a0      	cmp	r0, r4
 801171a:	d001      	beq.n	8011720 <strncmp+0x1c>
 801171c:	2b00      	cmp	r3, #0
 801171e:	d1f5      	bne.n	801170c <strncmp+0x8>
 8011720:	1a98      	subs	r0, r3, r2
 8011722:	bd10      	pop	{r4, pc}
 8011724:	4610      	mov	r0, r2
 8011726:	e7fc      	b.n	8011722 <strncmp+0x1e>

08011728 <__swbuf_r>:
 8011728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172a:	460e      	mov	r6, r1
 801172c:	4614      	mov	r4, r2
 801172e:	4605      	mov	r5, r0
 8011730:	b118      	cbz	r0, 801173a <__swbuf_r+0x12>
 8011732:	6983      	ldr	r3, [r0, #24]
 8011734:	b90b      	cbnz	r3, 801173a <__swbuf_r+0x12>
 8011736:	f000 fa33 	bl	8011ba0 <__sinit>
 801173a:	4b21      	ldr	r3, [pc, #132]	; (80117c0 <__swbuf_r+0x98>)
 801173c:	429c      	cmp	r4, r3
 801173e:	d12b      	bne.n	8011798 <__swbuf_r+0x70>
 8011740:	686c      	ldr	r4, [r5, #4]
 8011742:	69a3      	ldr	r3, [r4, #24]
 8011744:	60a3      	str	r3, [r4, #8]
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	071a      	lsls	r2, r3, #28
 801174a:	d52f      	bpl.n	80117ac <__swbuf_r+0x84>
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	b36b      	cbz	r3, 80117ac <__swbuf_r+0x84>
 8011750:	6923      	ldr	r3, [r4, #16]
 8011752:	6820      	ldr	r0, [r4, #0]
 8011754:	1ac0      	subs	r0, r0, r3
 8011756:	6963      	ldr	r3, [r4, #20]
 8011758:	b2f6      	uxtb	r6, r6
 801175a:	4283      	cmp	r3, r0
 801175c:	4637      	mov	r7, r6
 801175e:	dc04      	bgt.n	801176a <__swbuf_r+0x42>
 8011760:	4621      	mov	r1, r4
 8011762:	4628      	mov	r0, r5
 8011764:	f000 f988 	bl	8011a78 <_fflush_r>
 8011768:	bb30      	cbnz	r0, 80117b8 <__swbuf_r+0x90>
 801176a:	68a3      	ldr	r3, [r4, #8]
 801176c:	3b01      	subs	r3, #1
 801176e:	60a3      	str	r3, [r4, #8]
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	1c5a      	adds	r2, r3, #1
 8011774:	6022      	str	r2, [r4, #0]
 8011776:	701e      	strb	r6, [r3, #0]
 8011778:	6963      	ldr	r3, [r4, #20]
 801177a:	3001      	adds	r0, #1
 801177c:	4283      	cmp	r3, r0
 801177e:	d004      	beq.n	801178a <__swbuf_r+0x62>
 8011780:	89a3      	ldrh	r3, [r4, #12]
 8011782:	07db      	lsls	r3, r3, #31
 8011784:	d506      	bpl.n	8011794 <__swbuf_r+0x6c>
 8011786:	2e0a      	cmp	r6, #10
 8011788:	d104      	bne.n	8011794 <__swbuf_r+0x6c>
 801178a:	4621      	mov	r1, r4
 801178c:	4628      	mov	r0, r5
 801178e:	f000 f973 	bl	8011a78 <_fflush_r>
 8011792:	b988      	cbnz	r0, 80117b8 <__swbuf_r+0x90>
 8011794:	4638      	mov	r0, r7
 8011796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011798:	4b0a      	ldr	r3, [pc, #40]	; (80117c4 <__swbuf_r+0x9c>)
 801179a:	429c      	cmp	r4, r3
 801179c:	d101      	bne.n	80117a2 <__swbuf_r+0x7a>
 801179e:	68ac      	ldr	r4, [r5, #8]
 80117a0:	e7cf      	b.n	8011742 <__swbuf_r+0x1a>
 80117a2:	4b09      	ldr	r3, [pc, #36]	; (80117c8 <__swbuf_r+0xa0>)
 80117a4:	429c      	cmp	r4, r3
 80117a6:	bf08      	it	eq
 80117a8:	68ec      	ldreq	r4, [r5, #12]
 80117aa:	e7ca      	b.n	8011742 <__swbuf_r+0x1a>
 80117ac:	4621      	mov	r1, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	f000 f80c 	bl	80117cc <__swsetup_r>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d0cb      	beq.n	8011750 <__swbuf_r+0x28>
 80117b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80117bc:	e7ea      	b.n	8011794 <__swbuf_r+0x6c>
 80117be:	bf00      	nop
 80117c0:	0801738c 	.word	0x0801738c
 80117c4:	080173ac 	.word	0x080173ac
 80117c8:	0801736c 	.word	0x0801736c

080117cc <__swsetup_r>:
 80117cc:	4b32      	ldr	r3, [pc, #200]	; (8011898 <__swsetup_r+0xcc>)
 80117ce:	b570      	push	{r4, r5, r6, lr}
 80117d0:	681d      	ldr	r5, [r3, #0]
 80117d2:	4606      	mov	r6, r0
 80117d4:	460c      	mov	r4, r1
 80117d6:	b125      	cbz	r5, 80117e2 <__swsetup_r+0x16>
 80117d8:	69ab      	ldr	r3, [r5, #24]
 80117da:	b913      	cbnz	r3, 80117e2 <__swsetup_r+0x16>
 80117dc:	4628      	mov	r0, r5
 80117de:	f000 f9df 	bl	8011ba0 <__sinit>
 80117e2:	4b2e      	ldr	r3, [pc, #184]	; (801189c <__swsetup_r+0xd0>)
 80117e4:	429c      	cmp	r4, r3
 80117e6:	d10f      	bne.n	8011808 <__swsetup_r+0x3c>
 80117e8:	686c      	ldr	r4, [r5, #4]
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117f0:	0719      	lsls	r1, r3, #28
 80117f2:	d42c      	bmi.n	801184e <__swsetup_r+0x82>
 80117f4:	06dd      	lsls	r5, r3, #27
 80117f6:	d411      	bmi.n	801181c <__swsetup_r+0x50>
 80117f8:	2309      	movs	r3, #9
 80117fa:	6033      	str	r3, [r6, #0]
 80117fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011800:	81a3      	strh	r3, [r4, #12]
 8011802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011806:	e03e      	b.n	8011886 <__swsetup_r+0xba>
 8011808:	4b25      	ldr	r3, [pc, #148]	; (80118a0 <__swsetup_r+0xd4>)
 801180a:	429c      	cmp	r4, r3
 801180c:	d101      	bne.n	8011812 <__swsetup_r+0x46>
 801180e:	68ac      	ldr	r4, [r5, #8]
 8011810:	e7eb      	b.n	80117ea <__swsetup_r+0x1e>
 8011812:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <__swsetup_r+0xd8>)
 8011814:	429c      	cmp	r4, r3
 8011816:	bf08      	it	eq
 8011818:	68ec      	ldreq	r4, [r5, #12]
 801181a:	e7e6      	b.n	80117ea <__swsetup_r+0x1e>
 801181c:	0758      	lsls	r0, r3, #29
 801181e:	d512      	bpl.n	8011846 <__swsetup_r+0x7a>
 8011820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011822:	b141      	cbz	r1, 8011836 <__swsetup_r+0x6a>
 8011824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011828:	4299      	cmp	r1, r3
 801182a:	d002      	beq.n	8011832 <__swsetup_r+0x66>
 801182c:	4630      	mov	r0, r6
 801182e:	f7ff fb5d 	bl	8010eec <_free_r>
 8011832:	2300      	movs	r3, #0
 8011834:	6363      	str	r3, [r4, #52]	; 0x34
 8011836:	89a3      	ldrh	r3, [r4, #12]
 8011838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801183c:	81a3      	strh	r3, [r4, #12]
 801183e:	2300      	movs	r3, #0
 8011840:	6063      	str	r3, [r4, #4]
 8011842:	6923      	ldr	r3, [r4, #16]
 8011844:	6023      	str	r3, [r4, #0]
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	f043 0308 	orr.w	r3, r3, #8
 801184c:	81a3      	strh	r3, [r4, #12]
 801184e:	6923      	ldr	r3, [r4, #16]
 8011850:	b94b      	cbnz	r3, 8011866 <__swsetup_r+0x9a>
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801185c:	d003      	beq.n	8011866 <__swsetup_r+0x9a>
 801185e:	4621      	mov	r1, r4
 8011860:	4630      	mov	r0, r6
 8011862:	f000 fa63 	bl	8011d2c <__smakebuf_r>
 8011866:	89a0      	ldrh	r0, [r4, #12]
 8011868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801186c:	f010 0301 	ands.w	r3, r0, #1
 8011870:	d00a      	beq.n	8011888 <__swsetup_r+0xbc>
 8011872:	2300      	movs	r3, #0
 8011874:	60a3      	str	r3, [r4, #8]
 8011876:	6963      	ldr	r3, [r4, #20]
 8011878:	425b      	negs	r3, r3
 801187a:	61a3      	str	r3, [r4, #24]
 801187c:	6923      	ldr	r3, [r4, #16]
 801187e:	b943      	cbnz	r3, 8011892 <__swsetup_r+0xc6>
 8011880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011884:	d1ba      	bne.n	80117fc <__swsetup_r+0x30>
 8011886:	bd70      	pop	{r4, r5, r6, pc}
 8011888:	0781      	lsls	r1, r0, #30
 801188a:	bf58      	it	pl
 801188c:	6963      	ldrpl	r3, [r4, #20]
 801188e:	60a3      	str	r3, [r4, #8]
 8011890:	e7f4      	b.n	801187c <__swsetup_r+0xb0>
 8011892:	2000      	movs	r0, #0
 8011894:	e7f7      	b.n	8011886 <__swsetup_r+0xba>
 8011896:	bf00      	nop
 8011898:	20006b20 	.word	0x20006b20
 801189c:	0801738c 	.word	0x0801738c
 80118a0:	080173ac 	.word	0x080173ac
 80118a4:	0801736c 	.word	0x0801736c

080118a8 <__register_exitproc>:
 80118a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011968 <__register_exitproc+0xc0>
 80118b0:	4606      	mov	r6, r0
 80118b2:	f8d8 0000 	ldr.w	r0, [r8]
 80118b6:	461f      	mov	r7, r3
 80118b8:	460d      	mov	r5, r1
 80118ba:	4691      	mov	r9, r2
 80118bc:	f000 fa0e 	bl	8011cdc <__retarget_lock_acquire_recursive>
 80118c0:	4b25      	ldr	r3, [pc, #148]	; (8011958 <__register_exitproc+0xb0>)
 80118c2:	681c      	ldr	r4, [r3, #0]
 80118c4:	b934      	cbnz	r4, 80118d4 <__register_exitproc+0x2c>
 80118c6:	4c25      	ldr	r4, [pc, #148]	; (801195c <__register_exitproc+0xb4>)
 80118c8:	601c      	str	r4, [r3, #0]
 80118ca:	4b25      	ldr	r3, [pc, #148]	; (8011960 <__register_exitproc+0xb8>)
 80118cc:	b113      	cbz	r3, 80118d4 <__register_exitproc+0x2c>
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80118d4:	6863      	ldr	r3, [r4, #4]
 80118d6:	2b1f      	cmp	r3, #31
 80118d8:	dd07      	ble.n	80118ea <__register_exitproc+0x42>
 80118da:	f8d8 0000 	ldr.w	r0, [r8]
 80118de:	f000 f9ff 	bl	8011ce0 <__retarget_lock_release_recursive>
 80118e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ea:	b34e      	cbz	r6, 8011940 <__register_exitproc+0x98>
 80118ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80118f0:	b988      	cbnz	r0, 8011916 <__register_exitproc+0x6e>
 80118f2:	4b1c      	ldr	r3, [pc, #112]	; (8011964 <__register_exitproc+0xbc>)
 80118f4:	b923      	cbnz	r3, 8011900 <__register_exitproc+0x58>
 80118f6:	f8d8 0000 	ldr.w	r0, [r8]
 80118fa:	f000 f9f0 	bl	8011cde <__retarget_lock_release>
 80118fe:	e7f0      	b.n	80118e2 <__register_exitproc+0x3a>
 8011900:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011904:	f7ff fab2 	bl	8010e6c <malloc>
 8011908:	2800      	cmp	r0, #0
 801190a:	d0f4      	beq.n	80118f6 <__register_exitproc+0x4e>
 801190c:	2300      	movs	r3, #0
 801190e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011912:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011916:	6863      	ldr	r3, [r4, #4]
 8011918:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801191c:	2201      	movs	r2, #1
 801191e:	409a      	lsls	r2, r3
 8011920:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011924:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011928:	4313      	orrs	r3, r2
 801192a:	2e02      	cmp	r6, #2
 801192c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011930:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011934:	bf02      	ittt	eq
 8011936:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801193a:	431a      	orreq	r2, r3
 801193c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8011940:	6863      	ldr	r3, [r4, #4]
 8011942:	f8d8 0000 	ldr.w	r0, [r8]
 8011946:	1c5a      	adds	r2, r3, #1
 8011948:	3302      	adds	r3, #2
 801194a:	6062      	str	r2, [r4, #4]
 801194c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011950:	f000 f9c6 	bl	8011ce0 <__retarget_lock_release_recursive>
 8011954:	2000      	movs	r0, #0
 8011956:	e7c6      	b.n	80118e6 <__register_exitproc+0x3e>
 8011958:	20013610 	.word	0x20013610
 801195c:	20013584 	.word	0x20013584
 8011960:	00000000 	.word	0x00000000
 8011964:	08010e6d 	.word	0x08010e6d
 8011968:	20006b84 	.word	0x20006b84

0801196c <__sflush_r>:
 801196c:	898a      	ldrh	r2, [r1, #12]
 801196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011972:	4605      	mov	r5, r0
 8011974:	0710      	lsls	r0, r2, #28
 8011976:	460c      	mov	r4, r1
 8011978:	d458      	bmi.n	8011a2c <__sflush_r+0xc0>
 801197a:	684b      	ldr	r3, [r1, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	dc05      	bgt.n	801198c <__sflush_r+0x20>
 8011980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011982:	2b00      	cmp	r3, #0
 8011984:	dc02      	bgt.n	801198c <__sflush_r+0x20>
 8011986:	2000      	movs	r0, #0
 8011988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801198c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801198e:	2e00      	cmp	r6, #0
 8011990:	d0f9      	beq.n	8011986 <__sflush_r+0x1a>
 8011992:	2300      	movs	r3, #0
 8011994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011998:	682f      	ldr	r7, [r5, #0]
 801199a:	602b      	str	r3, [r5, #0]
 801199c:	d032      	beq.n	8011a04 <__sflush_r+0x98>
 801199e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119a0:	89a3      	ldrh	r3, [r4, #12]
 80119a2:	075a      	lsls	r2, r3, #29
 80119a4:	d505      	bpl.n	80119b2 <__sflush_r+0x46>
 80119a6:	6863      	ldr	r3, [r4, #4]
 80119a8:	1ac0      	subs	r0, r0, r3
 80119aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119ac:	b10b      	cbz	r3, 80119b2 <__sflush_r+0x46>
 80119ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119b0:	1ac0      	subs	r0, r0, r3
 80119b2:	2300      	movs	r3, #0
 80119b4:	4602      	mov	r2, r0
 80119b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119b8:	6a21      	ldr	r1, [r4, #32]
 80119ba:	4628      	mov	r0, r5
 80119bc:	47b0      	blx	r6
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	d106      	bne.n	80119d2 <__sflush_r+0x66>
 80119c4:	6829      	ldr	r1, [r5, #0]
 80119c6:	291d      	cmp	r1, #29
 80119c8:	d82c      	bhi.n	8011a24 <__sflush_r+0xb8>
 80119ca:	4a2a      	ldr	r2, [pc, #168]	; (8011a74 <__sflush_r+0x108>)
 80119cc:	40ca      	lsrs	r2, r1
 80119ce:	07d6      	lsls	r6, r2, #31
 80119d0:	d528      	bpl.n	8011a24 <__sflush_r+0xb8>
 80119d2:	2200      	movs	r2, #0
 80119d4:	6062      	str	r2, [r4, #4]
 80119d6:	04d9      	lsls	r1, r3, #19
 80119d8:	6922      	ldr	r2, [r4, #16]
 80119da:	6022      	str	r2, [r4, #0]
 80119dc:	d504      	bpl.n	80119e8 <__sflush_r+0x7c>
 80119de:	1c42      	adds	r2, r0, #1
 80119e0:	d101      	bne.n	80119e6 <__sflush_r+0x7a>
 80119e2:	682b      	ldr	r3, [r5, #0]
 80119e4:	b903      	cbnz	r3, 80119e8 <__sflush_r+0x7c>
 80119e6:	6560      	str	r0, [r4, #84]	; 0x54
 80119e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ea:	602f      	str	r7, [r5, #0]
 80119ec:	2900      	cmp	r1, #0
 80119ee:	d0ca      	beq.n	8011986 <__sflush_r+0x1a>
 80119f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119f4:	4299      	cmp	r1, r3
 80119f6:	d002      	beq.n	80119fe <__sflush_r+0x92>
 80119f8:	4628      	mov	r0, r5
 80119fa:	f7ff fa77 	bl	8010eec <_free_r>
 80119fe:	2000      	movs	r0, #0
 8011a00:	6360      	str	r0, [r4, #52]	; 0x34
 8011a02:	e7c1      	b.n	8011988 <__sflush_r+0x1c>
 8011a04:	6a21      	ldr	r1, [r4, #32]
 8011a06:	2301      	movs	r3, #1
 8011a08:	4628      	mov	r0, r5
 8011a0a:	47b0      	blx	r6
 8011a0c:	1c41      	adds	r1, r0, #1
 8011a0e:	d1c7      	bne.n	80119a0 <__sflush_r+0x34>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d0c4      	beq.n	80119a0 <__sflush_r+0x34>
 8011a16:	2b1d      	cmp	r3, #29
 8011a18:	d001      	beq.n	8011a1e <__sflush_r+0xb2>
 8011a1a:	2b16      	cmp	r3, #22
 8011a1c:	d101      	bne.n	8011a22 <__sflush_r+0xb6>
 8011a1e:	602f      	str	r7, [r5, #0]
 8011a20:	e7b1      	b.n	8011986 <__sflush_r+0x1a>
 8011a22:	89a3      	ldrh	r3, [r4, #12]
 8011a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a28:	81a3      	strh	r3, [r4, #12]
 8011a2a:	e7ad      	b.n	8011988 <__sflush_r+0x1c>
 8011a2c:	690f      	ldr	r7, [r1, #16]
 8011a2e:	2f00      	cmp	r7, #0
 8011a30:	d0a9      	beq.n	8011986 <__sflush_r+0x1a>
 8011a32:	0793      	lsls	r3, r2, #30
 8011a34:	680e      	ldr	r6, [r1, #0]
 8011a36:	bf08      	it	eq
 8011a38:	694b      	ldreq	r3, [r1, #20]
 8011a3a:	600f      	str	r7, [r1, #0]
 8011a3c:	bf18      	it	ne
 8011a3e:	2300      	movne	r3, #0
 8011a40:	eba6 0807 	sub.w	r8, r6, r7
 8011a44:	608b      	str	r3, [r1, #8]
 8011a46:	f1b8 0f00 	cmp.w	r8, #0
 8011a4a:	dd9c      	ble.n	8011986 <__sflush_r+0x1a>
 8011a4c:	6a21      	ldr	r1, [r4, #32]
 8011a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a50:	4643      	mov	r3, r8
 8011a52:	463a      	mov	r2, r7
 8011a54:	4628      	mov	r0, r5
 8011a56:	47b0      	blx	r6
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	dc06      	bgt.n	8011a6a <__sflush_r+0xfe>
 8011a5c:	89a3      	ldrh	r3, [r4, #12]
 8011a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a62:	81a3      	strh	r3, [r4, #12]
 8011a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a68:	e78e      	b.n	8011988 <__sflush_r+0x1c>
 8011a6a:	4407      	add	r7, r0
 8011a6c:	eba8 0800 	sub.w	r8, r8, r0
 8011a70:	e7e9      	b.n	8011a46 <__sflush_r+0xda>
 8011a72:	bf00      	nop
 8011a74:	20400001 	.word	0x20400001

08011a78 <_fflush_r>:
 8011a78:	b538      	push	{r3, r4, r5, lr}
 8011a7a:	690b      	ldr	r3, [r1, #16]
 8011a7c:	4605      	mov	r5, r0
 8011a7e:	460c      	mov	r4, r1
 8011a80:	b913      	cbnz	r3, 8011a88 <_fflush_r+0x10>
 8011a82:	2500      	movs	r5, #0
 8011a84:	4628      	mov	r0, r5
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	b118      	cbz	r0, 8011a92 <_fflush_r+0x1a>
 8011a8a:	6983      	ldr	r3, [r0, #24]
 8011a8c:	b90b      	cbnz	r3, 8011a92 <_fflush_r+0x1a>
 8011a8e:	f000 f887 	bl	8011ba0 <__sinit>
 8011a92:	4b14      	ldr	r3, [pc, #80]	; (8011ae4 <_fflush_r+0x6c>)
 8011a94:	429c      	cmp	r4, r3
 8011a96:	d11b      	bne.n	8011ad0 <_fflush_r+0x58>
 8011a98:	686c      	ldr	r4, [r5, #4]
 8011a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d0ef      	beq.n	8011a82 <_fflush_r+0xa>
 8011aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011aa4:	07d0      	lsls	r0, r2, #31
 8011aa6:	d404      	bmi.n	8011ab2 <_fflush_r+0x3a>
 8011aa8:	0599      	lsls	r1, r3, #22
 8011aaa:	d402      	bmi.n	8011ab2 <_fflush_r+0x3a>
 8011aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aae:	f000 f915 	bl	8011cdc <__retarget_lock_acquire_recursive>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	4621      	mov	r1, r4
 8011ab6:	f7ff ff59 	bl	801196c <__sflush_r>
 8011aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011abc:	07da      	lsls	r2, r3, #31
 8011abe:	4605      	mov	r5, r0
 8011ac0:	d4e0      	bmi.n	8011a84 <_fflush_r+0xc>
 8011ac2:	89a3      	ldrh	r3, [r4, #12]
 8011ac4:	059b      	lsls	r3, r3, #22
 8011ac6:	d4dd      	bmi.n	8011a84 <_fflush_r+0xc>
 8011ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aca:	f000 f909 	bl	8011ce0 <__retarget_lock_release_recursive>
 8011ace:	e7d9      	b.n	8011a84 <_fflush_r+0xc>
 8011ad0:	4b05      	ldr	r3, [pc, #20]	; (8011ae8 <_fflush_r+0x70>)
 8011ad2:	429c      	cmp	r4, r3
 8011ad4:	d101      	bne.n	8011ada <_fflush_r+0x62>
 8011ad6:	68ac      	ldr	r4, [r5, #8]
 8011ad8:	e7df      	b.n	8011a9a <_fflush_r+0x22>
 8011ada:	4b04      	ldr	r3, [pc, #16]	; (8011aec <_fflush_r+0x74>)
 8011adc:	429c      	cmp	r4, r3
 8011ade:	bf08      	it	eq
 8011ae0:	68ec      	ldreq	r4, [r5, #12]
 8011ae2:	e7da      	b.n	8011a9a <_fflush_r+0x22>
 8011ae4:	0801738c 	.word	0x0801738c
 8011ae8:	080173ac 	.word	0x080173ac
 8011aec:	0801736c 	.word	0x0801736c

08011af0 <std>:
 8011af0:	2300      	movs	r3, #0
 8011af2:	b510      	push	{r4, lr}
 8011af4:	4604      	mov	r4, r0
 8011af6:	e9c0 3300 	strd	r3, r3, [r0]
 8011afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011afe:	6083      	str	r3, [r0, #8]
 8011b00:	8181      	strh	r1, [r0, #12]
 8011b02:	6643      	str	r3, [r0, #100]	; 0x64
 8011b04:	81c2      	strh	r2, [r0, #14]
 8011b06:	6183      	str	r3, [r0, #24]
 8011b08:	4619      	mov	r1, r3
 8011b0a:	2208      	movs	r2, #8
 8011b0c:	305c      	adds	r0, #92	; 0x5c
 8011b0e:	f7ff f9e5 	bl	8010edc <memset>
 8011b12:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <std+0x38>)
 8011b14:	6263      	str	r3, [r4, #36]	; 0x24
 8011b16:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <std+0x3c>)
 8011b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b1a:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <std+0x40>)
 8011b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b1e:	4b05      	ldr	r3, [pc, #20]	; (8011b34 <std+0x44>)
 8011b20:	6224      	str	r4, [r4, #32]
 8011b22:	6323      	str	r3, [r4, #48]	; 0x30
 8011b24:	bd10      	pop	{r4, pc}
 8011b26:	bf00      	nop
 8011b28:	080120c9 	.word	0x080120c9
 8011b2c:	080120eb 	.word	0x080120eb
 8011b30:	08012123 	.word	0x08012123
 8011b34:	08012147 	.word	0x08012147

08011b38 <_cleanup_r>:
 8011b38:	4901      	ldr	r1, [pc, #4]	; (8011b40 <_cleanup_r+0x8>)
 8011b3a:	f000 b8af 	b.w	8011c9c <_fwalk_reent>
 8011b3e:	bf00      	nop
 8011b40:	08011a79 	.word	0x08011a79

08011b44 <__sfmoreglue>:
 8011b44:	b570      	push	{r4, r5, r6, lr}
 8011b46:	1e4a      	subs	r2, r1, #1
 8011b48:	2568      	movs	r5, #104	; 0x68
 8011b4a:	4355      	muls	r5, r2
 8011b4c:	460e      	mov	r6, r1
 8011b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b52:	f7ff fa1b 	bl	8010f8c <_malloc_r>
 8011b56:	4604      	mov	r4, r0
 8011b58:	b140      	cbz	r0, 8011b6c <__sfmoreglue+0x28>
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8011b60:	300c      	adds	r0, #12
 8011b62:	60a0      	str	r0, [r4, #8]
 8011b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b68:	f7ff f9b8 	bl	8010edc <memset>
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}

08011b70 <__sfp_lock_acquire>:
 8011b70:	4801      	ldr	r0, [pc, #4]	; (8011b78 <__sfp_lock_acquire+0x8>)
 8011b72:	f000 b8b3 	b.w	8011cdc <__retarget_lock_acquire_recursive>
 8011b76:	bf00      	nop
 8011b78:	2001361c 	.word	0x2001361c

08011b7c <__sfp_lock_release>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	; (8011b84 <__sfp_lock_release+0x8>)
 8011b7e:	f000 b8af 	b.w	8011ce0 <__retarget_lock_release_recursive>
 8011b82:	bf00      	nop
 8011b84:	2001361c 	.word	0x2001361c

08011b88 <__sinit_lock_acquire>:
 8011b88:	4801      	ldr	r0, [pc, #4]	; (8011b90 <__sinit_lock_acquire+0x8>)
 8011b8a:	f000 b8a7 	b.w	8011cdc <__retarget_lock_acquire_recursive>
 8011b8e:	bf00      	nop
 8011b90:	2001361b 	.word	0x2001361b

08011b94 <__sinit_lock_release>:
 8011b94:	4801      	ldr	r0, [pc, #4]	; (8011b9c <__sinit_lock_release+0x8>)
 8011b96:	f000 b8a3 	b.w	8011ce0 <__retarget_lock_release_recursive>
 8011b9a:	bf00      	nop
 8011b9c:	2001361b 	.word	0x2001361b

08011ba0 <__sinit>:
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	f7ff fff0 	bl	8011b88 <__sinit_lock_acquire>
 8011ba8:	69a3      	ldr	r3, [r4, #24]
 8011baa:	b11b      	cbz	r3, 8011bb4 <__sinit+0x14>
 8011bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bb0:	f7ff bff0 	b.w	8011b94 <__sinit_lock_release>
 8011bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8011bba:	4b13      	ldr	r3, [pc, #76]	; (8011c08 <__sinit+0x68>)
 8011bbc:	4a13      	ldr	r2, [pc, #76]	; (8011c0c <__sinit+0x6c>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8011bc2:	42a3      	cmp	r3, r4
 8011bc4:	bf04      	itt	eq
 8011bc6:	2301      	moveq	r3, #1
 8011bc8:	61a3      	streq	r3, [r4, #24]
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f000 f820 	bl	8011c10 <__sfp>
 8011bd0:	6060      	str	r0, [r4, #4]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 f81c 	bl	8011c10 <__sfp>
 8011bd8:	60a0      	str	r0, [r4, #8]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 f818 	bl	8011c10 <__sfp>
 8011be0:	2200      	movs	r2, #0
 8011be2:	60e0      	str	r0, [r4, #12]
 8011be4:	2104      	movs	r1, #4
 8011be6:	6860      	ldr	r0, [r4, #4]
 8011be8:	f7ff ff82 	bl	8011af0 <std>
 8011bec:	68a0      	ldr	r0, [r4, #8]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	2109      	movs	r1, #9
 8011bf2:	f7ff ff7d 	bl	8011af0 <std>
 8011bf6:	68e0      	ldr	r0, [r4, #12]
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	2112      	movs	r1, #18
 8011bfc:	f7ff ff78 	bl	8011af0 <std>
 8011c00:	2301      	movs	r3, #1
 8011c02:	61a3      	str	r3, [r4, #24]
 8011c04:	e7d2      	b.n	8011bac <__sinit+0xc>
 8011c06:	bf00      	nop
 8011c08:	08017334 	.word	0x08017334
 8011c0c:	08011b39 	.word	0x08011b39

08011c10 <__sfp>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	4607      	mov	r7, r0
 8011c14:	f7ff ffac 	bl	8011b70 <__sfp_lock_acquire>
 8011c18:	4b1e      	ldr	r3, [pc, #120]	; (8011c94 <__sfp+0x84>)
 8011c1a:	681e      	ldr	r6, [r3, #0]
 8011c1c:	69b3      	ldr	r3, [r6, #24]
 8011c1e:	b913      	cbnz	r3, 8011c26 <__sfp+0x16>
 8011c20:	4630      	mov	r0, r6
 8011c22:	f7ff ffbd 	bl	8011ba0 <__sinit>
 8011c26:	3648      	adds	r6, #72	; 0x48
 8011c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c2c:	3b01      	subs	r3, #1
 8011c2e:	d503      	bpl.n	8011c38 <__sfp+0x28>
 8011c30:	6833      	ldr	r3, [r6, #0]
 8011c32:	b30b      	cbz	r3, 8011c78 <__sfp+0x68>
 8011c34:	6836      	ldr	r6, [r6, #0]
 8011c36:	e7f7      	b.n	8011c28 <__sfp+0x18>
 8011c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c3c:	b9d5      	cbnz	r5, 8011c74 <__sfp+0x64>
 8011c3e:	4b16      	ldr	r3, [pc, #88]	; (8011c98 <__sfp+0x88>)
 8011c40:	60e3      	str	r3, [r4, #12]
 8011c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c46:	6665      	str	r5, [r4, #100]	; 0x64
 8011c48:	f000 f847 	bl	8011cda <__retarget_lock_init_recursive>
 8011c4c:	f7ff ff96 	bl	8011b7c <__sfp_lock_release>
 8011c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c58:	6025      	str	r5, [r4, #0]
 8011c5a:	61a5      	str	r5, [r4, #24]
 8011c5c:	2208      	movs	r2, #8
 8011c5e:	4629      	mov	r1, r5
 8011c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c64:	f7ff f93a 	bl	8010edc <memset>
 8011c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c70:	4620      	mov	r0, r4
 8011c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c74:	3468      	adds	r4, #104	; 0x68
 8011c76:	e7d9      	b.n	8011c2c <__sfp+0x1c>
 8011c78:	2104      	movs	r1, #4
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	f7ff ff62 	bl	8011b44 <__sfmoreglue>
 8011c80:	4604      	mov	r4, r0
 8011c82:	6030      	str	r0, [r6, #0]
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d1d5      	bne.n	8011c34 <__sfp+0x24>
 8011c88:	f7ff ff78 	bl	8011b7c <__sfp_lock_release>
 8011c8c:	230c      	movs	r3, #12
 8011c8e:	603b      	str	r3, [r7, #0]
 8011c90:	e7ee      	b.n	8011c70 <__sfp+0x60>
 8011c92:	bf00      	nop
 8011c94:	08017334 	.word	0x08017334
 8011c98:	ffff0001 	.word	0xffff0001

08011c9c <_fwalk_reent>:
 8011c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ca0:	4606      	mov	r6, r0
 8011ca2:	4688      	mov	r8, r1
 8011ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ca8:	2700      	movs	r7, #0
 8011caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cae:	f1b9 0901 	subs.w	r9, r9, #1
 8011cb2:	d505      	bpl.n	8011cc0 <_fwalk_reent+0x24>
 8011cb4:	6824      	ldr	r4, [r4, #0]
 8011cb6:	2c00      	cmp	r4, #0
 8011cb8:	d1f7      	bne.n	8011caa <_fwalk_reent+0xe>
 8011cba:	4638      	mov	r0, r7
 8011cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cc0:	89ab      	ldrh	r3, [r5, #12]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d907      	bls.n	8011cd6 <_fwalk_reent+0x3a>
 8011cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	d003      	beq.n	8011cd6 <_fwalk_reent+0x3a>
 8011cce:	4629      	mov	r1, r5
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	47c0      	blx	r8
 8011cd4:	4307      	orrs	r7, r0
 8011cd6:	3568      	adds	r5, #104	; 0x68
 8011cd8:	e7e9      	b.n	8011cae <_fwalk_reent+0x12>

08011cda <__retarget_lock_init_recursive>:
 8011cda:	4770      	bx	lr

08011cdc <__retarget_lock_acquire_recursive>:
 8011cdc:	4770      	bx	lr

08011cde <__retarget_lock_release>:
 8011cde:	4770      	bx	lr

08011ce0 <__retarget_lock_release_recursive>:
 8011ce0:	4770      	bx	lr

08011ce2 <__swhatbuf_r>:
 8011ce2:	b570      	push	{r4, r5, r6, lr}
 8011ce4:	460e      	mov	r6, r1
 8011ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cea:	2900      	cmp	r1, #0
 8011cec:	b096      	sub	sp, #88	; 0x58
 8011cee:	4614      	mov	r4, r2
 8011cf0:	461d      	mov	r5, r3
 8011cf2:	da07      	bge.n	8011d04 <__swhatbuf_r+0x22>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	602b      	str	r3, [r5, #0]
 8011cf8:	89b3      	ldrh	r3, [r6, #12]
 8011cfa:	061a      	lsls	r2, r3, #24
 8011cfc:	d410      	bmi.n	8011d20 <__swhatbuf_r+0x3e>
 8011cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d02:	e00e      	b.n	8011d22 <__swhatbuf_r+0x40>
 8011d04:	466a      	mov	r2, sp
 8011d06:	f000 fa45 	bl	8012194 <_fstat_r>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	dbf2      	blt.n	8011cf4 <__swhatbuf_r+0x12>
 8011d0e:	9a01      	ldr	r2, [sp, #4]
 8011d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d18:	425a      	negs	r2, r3
 8011d1a:	415a      	adcs	r2, r3
 8011d1c:	602a      	str	r2, [r5, #0]
 8011d1e:	e7ee      	b.n	8011cfe <__swhatbuf_r+0x1c>
 8011d20:	2340      	movs	r3, #64	; 0x40
 8011d22:	2000      	movs	r0, #0
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	b016      	add	sp, #88	; 0x58
 8011d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08011d2c <__smakebuf_r>:
 8011d2c:	898b      	ldrh	r3, [r1, #12]
 8011d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d30:	079d      	lsls	r5, r3, #30
 8011d32:	4606      	mov	r6, r0
 8011d34:	460c      	mov	r4, r1
 8011d36:	d507      	bpl.n	8011d48 <__smakebuf_r+0x1c>
 8011d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	6123      	str	r3, [r4, #16]
 8011d40:	2301      	movs	r3, #1
 8011d42:	6163      	str	r3, [r4, #20]
 8011d44:	b002      	add	sp, #8
 8011d46:	bd70      	pop	{r4, r5, r6, pc}
 8011d48:	ab01      	add	r3, sp, #4
 8011d4a:	466a      	mov	r2, sp
 8011d4c:	f7ff ffc9 	bl	8011ce2 <__swhatbuf_r>
 8011d50:	9900      	ldr	r1, [sp, #0]
 8011d52:	4605      	mov	r5, r0
 8011d54:	4630      	mov	r0, r6
 8011d56:	f7ff f919 	bl	8010f8c <_malloc_r>
 8011d5a:	b948      	cbnz	r0, 8011d70 <__smakebuf_r+0x44>
 8011d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d60:	059a      	lsls	r2, r3, #22
 8011d62:	d4ef      	bmi.n	8011d44 <__smakebuf_r+0x18>
 8011d64:	f023 0303 	bic.w	r3, r3, #3
 8011d68:	f043 0302 	orr.w	r3, r3, #2
 8011d6c:	81a3      	strh	r3, [r4, #12]
 8011d6e:	e7e3      	b.n	8011d38 <__smakebuf_r+0xc>
 8011d70:	4b0d      	ldr	r3, [pc, #52]	; (8011da8 <__smakebuf_r+0x7c>)
 8011d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d74:	89a3      	ldrh	r3, [r4, #12]
 8011d76:	6020      	str	r0, [r4, #0]
 8011d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7c:	81a3      	strh	r3, [r4, #12]
 8011d7e:	9b00      	ldr	r3, [sp, #0]
 8011d80:	6163      	str	r3, [r4, #20]
 8011d82:	9b01      	ldr	r3, [sp, #4]
 8011d84:	6120      	str	r0, [r4, #16]
 8011d86:	b15b      	cbz	r3, 8011da0 <__smakebuf_r+0x74>
 8011d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f000 fa13 	bl	80121b8 <_isatty_r>
 8011d92:	b128      	cbz	r0, 8011da0 <__smakebuf_r+0x74>
 8011d94:	89a3      	ldrh	r3, [r4, #12]
 8011d96:	f023 0303 	bic.w	r3, r3, #3
 8011d9a:	f043 0301 	orr.w	r3, r3, #1
 8011d9e:	81a3      	strh	r3, [r4, #12]
 8011da0:	89a0      	ldrh	r0, [r4, #12]
 8011da2:	4305      	orrs	r5, r0
 8011da4:	81a5      	strh	r5, [r4, #12]
 8011da6:	e7cd      	b.n	8011d44 <__smakebuf_r+0x18>
 8011da8:	08011b39 	.word	0x08011b39

08011dac <__malloc_lock>:
 8011dac:	4801      	ldr	r0, [pc, #4]	; (8011db4 <__malloc_lock+0x8>)
 8011dae:	f7ff bf95 	b.w	8011cdc <__retarget_lock_acquire_recursive>
 8011db2:	bf00      	nop
 8011db4:	20013618 	.word	0x20013618

08011db8 <__malloc_unlock>:
 8011db8:	4801      	ldr	r0, [pc, #4]	; (8011dc0 <__malloc_unlock+0x8>)
 8011dba:	f7ff bf91 	b.w	8011ce0 <__retarget_lock_release_recursive>
 8011dbe:	bf00      	nop
 8011dc0:	20013618 	.word	0x20013618

08011dc4 <_realloc_r>:
 8011dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc6:	4607      	mov	r7, r0
 8011dc8:	4614      	mov	r4, r2
 8011dca:	460e      	mov	r6, r1
 8011dcc:	b921      	cbnz	r1, 8011dd8 <_realloc_r+0x14>
 8011dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	f7ff b8da 	b.w	8010f8c <_malloc_r>
 8011dd8:	b922      	cbnz	r2, 8011de4 <_realloc_r+0x20>
 8011dda:	f7ff f887 	bl	8010eec <_free_r>
 8011dde:	4625      	mov	r5, r4
 8011de0:	4628      	mov	r0, r5
 8011de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de4:	f000 fa0a 	bl	80121fc <_malloc_usable_size_r>
 8011de8:	42a0      	cmp	r0, r4
 8011dea:	d20f      	bcs.n	8011e0c <_realloc_r+0x48>
 8011dec:	4621      	mov	r1, r4
 8011dee:	4638      	mov	r0, r7
 8011df0:	f7ff f8cc 	bl	8010f8c <_malloc_r>
 8011df4:	4605      	mov	r5, r0
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d0f2      	beq.n	8011de0 <_realloc_r+0x1c>
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	4622      	mov	r2, r4
 8011dfe:	f7ff f845 	bl	8010e8c <memcpy>
 8011e02:	4631      	mov	r1, r6
 8011e04:	4638      	mov	r0, r7
 8011e06:	f7ff f871 	bl	8010eec <_free_r>
 8011e0a:	e7e9      	b.n	8011de0 <_realloc_r+0x1c>
 8011e0c:	4635      	mov	r5, r6
 8011e0e:	e7e7      	b.n	8011de0 <_realloc_r+0x1c>

08011e10 <__ssputs_r>:
 8011e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e14:	688e      	ldr	r6, [r1, #8]
 8011e16:	429e      	cmp	r6, r3
 8011e18:	4682      	mov	sl, r0
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	4690      	mov	r8, r2
 8011e1e:	461f      	mov	r7, r3
 8011e20:	d838      	bhi.n	8011e94 <__ssputs_r+0x84>
 8011e22:	898a      	ldrh	r2, [r1, #12]
 8011e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e28:	d032      	beq.n	8011e90 <__ssputs_r+0x80>
 8011e2a:	6825      	ldr	r5, [r4, #0]
 8011e2c:	6909      	ldr	r1, [r1, #16]
 8011e2e:	eba5 0901 	sub.w	r9, r5, r1
 8011e32:	6965      	ldr	r5, [r4, #20]
 8011e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	444b      	add	r3, r9
 8011e40:	106d      	asrs	r5, r5, #1
 8011e42:	429d      	cmp	r5, r3
 8011e44:	bf38      	it	cc
 8011e46:	461d      	movcc	r5, r3
 8011e48:	0553      	lsls	r3, r2, #21
 8011e4a:	d531      	bpl.n	8011eb0 <__ssputs_r+0xa0>
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	f7ff f89d 	bl	8010f8c <_malloc_r>
 8011e52:	4606      	mov	r6, r0
 8011e54:	b950      	cbnz	r0, 8011e6c <__ssputs_r+0x5c>
 8011e56:	230c      	movs	r3, #12
 8011e58:	f8ca 3000 	str.w	r3, [sl]
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e62:	81a3      	strh	r3, [r4, #12]
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6c:	6921      	ldr	r1, [r4, #16]
 8011e6e:	464a      	mov	r2, r9
 8011e70:	f7ff f80c 	bl	8010e8c <memcpy>
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	6126      	str	r6, [r4, #16]
 8011e82:	6165      	str	r5, [r4, #20]
 8011e84:	444e      	add	r6, r9
 8011e86:	eba5 0509 	sub.w	r5, r5, r9
 8011e8a:	6026      	str	r6, [r4, #0]
 8011e8c:	60a5      	str	r5, [r4, #8]
 8011e8e:	463e      	mov	r6, r7
 8011e90:	42be      	cmp	r6, r7
 8011e92:	d900      	bls.n	8011e96 <__ssputs_r+0x86>
 8011e94:	463e      	mov	r6, r7
 8011e96:	4632      	mov	r2, r6
 8011e98:	6820      	ldr	r0, [r4, #0]
 8011e9a:	4641      	mov	r1, r8
 8011e9c:	f7ff f804 	bl	8010ea8 <memmove>
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	1b9b      	subs	r3, r3, r6
 8011ea6:	4432      	add	r2, r6
 8011ea8:	60a3      	str	r3, [r4, #8]
 8011eaa:	6022      	str	r2, [r4, #0]
 8011eac:	2000      	movs	r0, #0
 8011eae:	e7db      	b.n	8011e68 <__ssputs_r+0x58>
 8011eb0:	462a      	mov	r2, r5
 8011eb2:	f7ff ff87 	bl	8011dc4 <_realloc_r>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d1e1      	bne.n	8011e80 <__ssputs_r+0x70>
 8011ebc:	6921      	ldr	r1, [r4, #16]
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	f7ff f814 	bl	8010eec <_free_r>
 8011ec4:	e7c7      	b.n	8011e56 <__ssputs_r+0x46>
	...

08011ec8 <_svfiprintf_r>:
 8011ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	4698      	mov	r8, r3
 8011ece:	898b      	ldrh	r3, [r1, #12]
 8011ed0:	061b      	lsls	r3, r3, #24
 8011ed2:	b09d      	sub	sp, #116	; 0x74
 8011ed4:	4607      	mov	r7, r0
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	d50e      	bpl.n	8011efa <_svfiprintf_r+0x32>
 8011edc:	690b      	ldr	r3, [r1, #16]
 8011ede:	b963      	cbnz	r3, 8011efa <_svfiprintf_r+0x32>
 8011ee0:	2140      	movs	r1, #64	; 0x40
 8011ee2:	f7ff f853 	bl	8010f8c <_malloc_r>
 8011ee6:	6028      	str	r0, [r5, #0]
 8011ee8:	6128      	str	r0, [r5, #16]
 8011eea:	b920      	cbnz	r0, 8011ef6 <_svfiprintf_r+0x2e>
 8011eec:	230c      	movs	r3, #12
 8011eee:	603b      	str	r3, [r7, #0]
 8011ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ef4:	e0d1      	b.n	801209a <_svfiprintf_r+0x1d2>
 8011ef6:	2340      	movs	r3, #64	; 0x40
 8011ef8:	616b      	str	r3, [r5, #20]
 8011efa:	2300      	movs	r3, #0
 8011efc:	9309      	str	r3, [sp, #36]	; 0x24
 8011efe:	2320      	movs	r3, #32
 8011f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f08:	2330      	movs	r3, #48	; 0x30
 8011f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120b4 <_svfiprintf_r+0x1ec>
 8011f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f12:	f04f 0901 	mov.w	r9, #1
 8011f16:	4623      	mov	r3, r4
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f1e:	b10a      	cbz	r2, 8011f24 <_svfiprintf_r+0x5c>
 8011f20:	2a25      	cmp	r2, #37	; 0x25
 8011f22:	d1f9      	bne.n	8011f18 <_svfiprintf_r+0x50>
 8011f24:	ebba 0b04 	subs.w	fp, sl, r4
 8011f28:	d00b      	beq.n	8011f42 <_svfiprintf_r+0x7a>
 8011f2a:	465b      	mov	r3, fp
 8011f2c:	4622      	mov	r2, r4
 8011f2e:	4629      	mov	r1, r5
 8011f30:	4638      	mov	r0, r7
 8011f32:	f7ff ff6d 	bl	8011e10 <__ssputs_r>
 8011f36:	3001      	adds	r0, #1
 8011f38:	f000 80aa 	beq.w	8012090 <_svfiprintf_r+0x1c8>
 8011f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f3e:	445a      	add	r2, fp
 8011f40:	9209      	str	r2, [sp, #36]	; 0x24
 8011f42:	f89a 3000 	ldrb.w	r3, [sl]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	f000 80a2 	beq.w	8012090 <_svfiprintf_r+0x1c8>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f56:	f10a 0a01 	add.w	sl, sl, #1
 8011f5a:	9304      	str	r3, [sp, #16]
 8011f5c:	9307      	str	r3, [sp, #28]
 8011f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f62:	931a      	str	r3, [sp, #104]	; 0x68
 8011f64:	4654      	mov	r4, sl
 8011f66:	2205      	movs	r2, #5
 8011f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f6c:	4851      	ldr	r0, [pc, #324]	; (80120b4 <_svfiprintf_r+0x1ec>)
 8011f6e:	f7ee f937 	bl	80001e0 <memchr>
 8011f72:	9a04      	ldr	r2, [sp, #16]
 8011f74:	b9d8      	cbnz	r0, 8011fae <_svfiprintf_r+0xe6>
 8011f76:	06d0      	lsls	r0, r2, #27
 8011f78:	bf44      	itt	mi
 8011f7a:	2320      	movmi	r3, #32
 8011f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f80:	0711      	lsls	r1, r2, #28
 8011f82:	bf44      	itt	mi
 8011f84:	232b      	movmi	r3, #43	; 0x2b
 8011f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f90:	d015      	beq.n	8011fbe <_svfiprintf_r+0xf6>
 8011f92:	9a07      	ldr	r2, [sp, #28]
 8011f94:	4654      	mov	r4, sl
 8011f96:	2000      	movs	r0, #0
 8011f98:	f04f 0c0a 	mov.w	ip, #10
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fa2:	3b30      	subs	r3, #48	; 0x30
 8011fa4:	2b09      	cmp	r3, #9
 8011fa6:	d94e      	bls.n	8012046 <_svfiprintf_r+0x17e>
 8011fa8:	b1b0      	cbz	r0, 8011fd8 <_svfiprintf_r+0x110>
 8011faa:	9207      	str	r2, [sp, #28]
 8011fac:	e014      	b.n	8011fd8 <_svfiprintf_r+0x110>
 8011fae:	eba0 0308 	sub.w	r3, r0, r8
 8011fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	9304      	str	r3, [sp, #16]
 8011fba:	46a2      	mov	sl, r4
 8011fbc:	e7d2      	b.n	8011f64 <_svfiprintf_r+0x9c>
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	1d19      	adds	r1, r3, #4
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	9103      	str	r1, [sp, #12]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	bfbb      	ittet	lt
 8011fca:	425b      	neglt	r3, r3
 8011fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8011fd0:	9307      	strge	r3, [sp, #28]
 8011fd2:	9307      	strlt	r3, [sp, #28]
 8011fd4:	bfb8      	it	lt
 8011fd6:	9204      	strlt	r2, [sp, #16]
 8011fd8:	7823      	ldrb	r3, [r4, #0]
 8011fda:	2b2e      	cmp	r3, #46	; 0x2e
 8011fdc:	d10c      	bne.n	8011ff8 <_svfiprintf_r+0x130>
 8011fde:	7863      	ldrb	r3, [r4, #1]
 8011fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8011fe2:	d135      	bne.n	8012050 <_svfiprintf_r+0x188>
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	1d1a      	adds	r2, r3, #4
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	9203      	str	r2, [sp, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bfb8      	it	lt
 8011ff0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ff4:	3402      	adds	r4, #2
 8011ff6:	9305      	str	r3, [sp, #20]
 8011ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120c4 <_svfiprintf_r+0x1fc>
 8011ffc:	7821      	ldrb	r1, [r4, #0]
 8011ffe:	2203      	movs	r2, #3
 8012000:	4650      	mov	r0, sl
 8012002:	f7ee f8ed 	bl	80001e0 <memchr>
 8012006:	b140      	cbz	r0, 801201a <_svfiprintf_r+0x152>
 8012008:	2340      	movs	r3, #64	; 0x40
 801200a:	eba0 000a 	sub.w	r0, r0, sl
 801200e:	fa03 f000 	lsl.w	r0, r3, r0
 8012012:	9b04      	ldr	r3, [sp, #16]
 8012014:	4303      	orrs	r3, r0
 8012016:	3401      	adds	r4, #1
 8012018:	9304      	str	r3, [sp, #16]
 801201a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201e:	4826      	ldr	r0, [pc, #152]	; (80120b8 <_svfiprintf_r+0x1f0>)
 8012020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012024:	2206      	movs	r2, #6
 8012026:	f7ee f8db 	bl	80001e0 <memchr>
 801202a:	2800      	cmp	r0, #0
 801202c:	d038      	beq.n	80120a0 <_svfiprintf_r+0x1d8>
 801202e:	4b23      	ldr	r3, [pc, #140]	; (80120bc <_svfiprintf_r+0x1f4>)
 8012030:	bb1b      	cbnz	r3, 801207a <_svfiprintf_r+0x1b2>
 8012032:	9b03      	ldr	r3, [sp, #12]
 8012034:	3307      	adds	r3, #7
 8012036:	f023 0307 	bic.w	r3, r3, #7
 801203a:	3308      	adds	r3, #8
 801203c:	9303      	str	r3, [sp, #12]
 801203e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012040:	4433      	add	r3, r6
 8012042:	9309      	str	r3, [sp, #36]	; 0x24
 8012044:	e767      	b.n	8011f16 <_svfiprintf_r+0x4e>
 8012046:	fb0c 3202 	mla	r2, ip, r2, r3
 801204a:	460c      	mov	r4, r1
 801204c:	2001      	movs	r0, #1
 801204e:	e7a5      	b.n	8011f9c <_svfiprintf_r+0xd4>
 8012050:	2300      	movs	r3, #0
 8012052:	3401      	adds	r4, #1
 8012054:	9305      	str	r3, [sp, #20]
 8012056:	4619      	mov	r1, r3
 8012058:	f04f 0c0a 	mov.w	ip, #10
 801205c:	4620      	mov	r0, r4
 801205e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012062:	3a30      	subs	r2, #48	; 0x30
 8012064:	2a09      	cmp	r2, #9
 8012066:	d903      	bls.n	8012070 <_svfiprintf_r+0x1a8>
 8012068:	2b00      	cmp	r3, #0
 801206a:	d0c5      	beq.n	8011ff8 <_svfiprintf_r+0x130>
 801206c:	9105      	str	r1, [sp, #20]
 801206e:	e7c3      	b.n	8011ff8 <_svfiprintf_r+0x130>
 8012070:	fb0c 2101 	mla	r1, ip, r1, r2
 8012074:	4604      	mov	r4, r0
 8012076:	2301      	movs	r3, #1
 8012078:	e7f0      	b.n	801205c <_svfiprintf_r+0x194>
 801207a:	ab03      	add	r3, sp, #12
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	462a      	mov	r2, r5
 8012080:	4b0f      	ldr	r3, [pc, #60]	; (80120c0 <_svfiprintf_r+0x1f8>)
 8012082:	a904      	add	r1, sp, #16
 8012084:	4638      	mov	r0, r7
 8012086:	f3af 8000 	nop.w
 801208a:	1c42      	adds	r2, r0, #1
 801208c:	4606      	mov	r6, r0
 801208e:	d1d6      	bne.n	801203e <_svfiprintf_r+0x176>
 8012090:	89ab      	ldrh	r3, [r5, #12]
 8012092:	065b      	lsls	r3, r3, #25
 8012094:	f53f af2c 	bmi.w	8011ef0 <_svfiprintf_r+0x28>
 8012098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801209a:	b01d      	add	sp, #116	; 0x74
 801209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a0:	ab03      	add	r3, sp, #12
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	462a      	mov	r2, r5
 80120a6:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <_svfiprintf_r+0x1f8>)
 80120a8:	a904      	add	r1, sp, #16
 80120aa:	4638      	mov	r0, r7
 80120ac:	f7ff f990 	bl	80113d0 <_printf_i>
 80120b0:	e7eb      	b.n	801208a <_svfiprintf_r+0x1c2>
 80120b2:	bf00      	nop
 80120b4:	08017338 	.word	0x08017338
 80120b8:	08017342 	.word	0x08017342
 80120bc:	00000000 	.word	0x00000000
 80120c0:	08011e11 	.word	0x08011e11
 80120c4:	0801733e 	.word	0x0801733e

080120c8 <__sread>:
 80120c8:	b510      	push	{r4, lr}
 80120ca:	460c      	mov	r4, r1
 80120cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d0:	f000 f89c 	bl	801220c <_read_r>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	bfab      	itete	ge
 80120d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120da:	89a3      	ldrhlt	r3, [r4, #12]
 80120dc:	181b      	addge	r3, r3, r0
 80120de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120e2:	bfac      	ite	ge
 80120e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80120e6:	81a3      	strhlt	r3, [r4, #12]
 80120e8:	bd10      	pop	{r4, pc}

080120ea <__swrite>:
 80120ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ee:	461f      	mov	r7, r3
 80120f0:	898b      	ldrh	r3, [r1, #12]
 80120f2:	05db      	lsls	r3, r3, #23
 80120f4:	4605      	mov	r5, r0
 80120f6:	460c      	mov	r4, r1
 80120f8:	4616      	mov	r6, r2
 80120fa:	d505      	bpl.n	8012108 <__swrite+0x1e>
 80120fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012100:	2302      	movs	r3, #2
 8012102:	2200      	movs	r2, #0
 8012104:	f000 f868 	bl	80121d8 <_lseek_r>
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801210e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012112:	81a3      	strh	r3, [r4, #12]
 8012114:	4632      	mov	r2, r6
 8012116:	463b      	mov	r3, r7
 8012118:	4628      	mov	r0, r5
 801211a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801211e:	f000 b817 	b.w	8012150 <_write_r>

08012122 <__sseek>:
 8012122:	b510      	push	{r4, lr}
 8012124:	460c      	mov	r4, r1
 8012126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801212a:	f000 f855 	bl	80121d8 <_lseek_r>
 801212e:	1c43      	adds	r3, r0, #1
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	bf15      	itete	ne
 8012134:	6560      	strne	r0, [r4, #84]	; 0x54
 8012136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801213a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801213e:	81a3      	strheq	r3, [r4, #12]
 8012140:	bf18      	it	ne
 8012142:	81a3      	strhne	r3, [r4, #12]
 8012144:	bd10      	pop	{r4, pc}

08012146 <__sclose>:
 8012146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801214a:	f000 b813 	b.w	8012174 <_close_r>
	...

08012150 <_write_r>:
 8012150:	b538      	push	{r3, r4, r5, lr}
 8012152:	4d07      	ldr	r5, [pc, #28]	; (8012170 <_write_r+0x20>)
 8012154:	4604      	mov	r4, r0
 8012156:	4608      	mov	r0, r1
 8012158:	4611      	mov	r1, r2
 801215a:	2200      	movs	r2, #0
 801215c:	602a      	str	r2, [r5, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	f7ef ff99 	bl	8002096 <_write>
 8012164:	1c43      	adds	r3, r0, #1
 8012166:	d102      	bne.n	801216e <_write_r+0x1e>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	b103      	cbz	r3, 801216e <_write_r+0x1e>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	20013624 	.word	0x20013624

08012174 <_close_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d06      	ldr	r5, [pc, #24]	; (8012190 <_close_r+0x1c>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	602b      	str	r3, [r5, #0]
 8012180:	f7ef ffa5 	bl	80020ce <_close>
 8012184:	1c43      	adds	r3, r0, #1
 8012186:	d102      	bne.n	801218e <_close_r+0x1a>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	b103      	cbz	r3, 801218e <_close_r+0x1a>
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	bd38      	pop	{r3, r4, r5, pc}
 8012190:	20013624 	.word	0x20013624

08012194 <_fstat_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d07      	ldr	r5, [pc, #28]	; (80121b4 <_fstat_r+0x20>)
 8012198:	2300      	movs	r3, #0
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	4611      	mov	r1, r2
 80121a0:	602b      	str	r3, [r5, #0]
 80121a2:	f7ef ffa0 	bl	80020e6 <_fstat>
 80121a6:	1c43      	adds	r3, r0, #1
 80121a8:	d102      	bne.n	80121b0 <_fstat_r+0x1c>
 80121aa:	682b      	ldr	r3, [r5, #0]
 80121ac:	b103      	cbz	r3, 80121b0 <_fstat_r+0x1c>
 80121ae:	6023      	str	r3, [r4, #0]
 80121b0:	bd38      	pop	{r3, r4, r5, pc}
 80121b2:	bf00      	nop
 80121b4:	20013624 	.word	0x20013624

080121b8 <_isatty_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4d06      	ldr	r5, [pc, #24]	; (80121d4 <_isatty_r+0x1c>)
 80121bc:	2300      	movs	r3, #0
 80121be:	4604      	mov	r4, r0
 80121c0:	4608      	mov	r0, r1
 80121c2:	602b      	str	r3, [r5, #0]
 80121c4:	f7ef ff9f 	bl	8002106 <_isatty>
 80121c8:	1c43      	adds	r3, r0, #1
 80121ca:	d102      	bne.n	80121d2 <_isatty_r+0x1a>
 80121cc:	682b      	ldr	r3, [r5, #0]
 80121ce:	b103      	cbz	r3, 80121d2 <_isatty_r+0x1a>
 80121d0:	6023      	str	r3, [r4, #0]
 80121d2:	bd38      	pop	{r3, r4, r5, pc}
 80121d4:	20013624 	.word	0x20013624

080121d8 <_lseek_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d07      	ldr	r5, [pc, #28]	; (80121f8 <_lseek_r+0x20>)
 80121dc:	4604      	mov	r4, r0
 80121de:	4608      	mov	r0, r1
 80121e0:	4611      	mov	r1, r2
 80121e2:	2200      	movs	r2, #0
 80121e4:	602a      	str	r2, [r5, #0]
 80121e6:	461a      	mov	r2, r3
 80121e8:	f7ef ff98 	bl	800211c <_lseek>
 80121ec:	1c43      	adds	r3, r0, #1
 80121ee:	d102      	bne.n	80121f6 <_lseek_r+0x1e>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	b103      	cbz	r3, 80121f6 <_lseek_r+0x1e>
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	20013624 	.word	0x20013624

080121fc <_malloc_usable_size_r>:
 80121fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012200:	1f18      	subs	r0, r3, #4
 8012202:	2b00      	cmp	r3, #0
 8012204:	bfbc      	itt	lt
 8012206:	580b      	ldrlt	r3, [r1, r0]
 8012208:	18c0      	addlt	r0, r0, r3
 801220a:	4770      	bx	lr

0801220c <_read_r>:
 801220c:	b538      	push	{r3, r4, r5, lr}
 801220e:	4d07      	ldr	r5, [pc, #28]	; (801222c <_read_r+0x20>)
 8012210:	4604      	mov	r4, r0
 8012212:	4608      	mov	r0, r1
 8012214:	4611      	mov	r1, r2
 8012216:	2200      	movs	r2, #0
 8012218:	602a      	str	r2, [r5, #0]
 801221a:	461a      	mov	r2, r3
 801221c:	f7ef ff1e 	bl	800205c <_read>
 8012220:	1c43      	adds	r3, r0, #1
 8012222:	d102      	bne.n	801222a <_read_r+0x1e>
 8012224:	682b      	ldr	r3, [r5, #0]
 8012226:	b103      	cbz	r3, 801222a <_read_r+0x1e>
 8012228:	6023      	str	r3, [r4, #0]
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	20013624 	.word	0x20013624

08012230 <_init>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	bf00      	nop
 8012234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012236:	bc08      	pop	{r3}
 8012238:	469e      	mov	lr, r3
 801223a:	4770      	bx	lr

0801223c <_fini>:
 801223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223e:	bf00      	nop
 8012240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012242:	bc08      	pop	{r3}
 8012244:	469e      	mov	lr, r3
 8012246:	4770      	bx	lr
